// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/bufio'{

	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import type {int64,GoError,Ref,Struct,error,byte,rune,bool,Alias,int} from 'go'
	export const ErrAdvanceTooFar:GoError
	export const ErrBadReadCount:GoError
	export const ErrBufferFull:GoError
	export const ErrFinalToken:GoError
	export const ErrInvalidUnreadByte:GoError
	export const ErrInvalidUnreadRune:GoError
	export const ErrNegativeAdvance:GoError
	export const ErrNegativeCount:GoError
	export const ErrTooLong:GoError
	//65536
	export const MaxScanTokenSize:int
	export function newReadWriter(r:Ref<Reader>,w:Ref<Writer>):Ref<ReadWriter>

	export function newReader(rd:io.Reader):Ref<Reader>

	export function newReaderSize(rd:io.Reader,size:int):Ref<Reader>

	export function newScanner(r:io.Reader):Ref<Scanner>

	export function newWriter(w:io.Writer):Ref<Writer>

	export function newWriterSize(w:io.Writer,size:int):Ref<Writer>

	export interface ReadWriter extends io.StringWriter,io.ReadWriter,io.WriterTo,io.ByteScanner,io.ReaderFrom,io.RuneScanner,io.ByteWriter,Struct<ReadWriter>{

			reader:Ref<Reader>
			writer:Ref<Writer>
	}
	export interface Reader extends Struct<Reader>,io.Reader,io.WriterTo,io.RuneScanner,io.ByteScanner{

			size():int
			reset(r:io.Reader):void
			peek(n:int):Uint8Array
			discard(n:int):int
			read(p:Uint8Array):int
			readByte():byte
			unreadByte()/*error*/
			readRune():[rune,int]
			unreadRune()/*error*/
			buffered():int
			readSlice(delim:byte):Uint8Array
			readLine():[Uint8Array,bool]
			readBytes(delim:byte):Uint8Array
			readString(delim:byte):string
			writeTo(w:io.Writer):int64
	}
	export function scanBytes(data:Uint8Array,atEOF:bool):[int,Uint8Array]

	export function scanLines(data:Uint8Array,atEOF:bool):[int,Uint8Array]

	export function scanRunes(data:Uint8Array,atEOF:bool):[int,Uint8Array]

	export function scanWords(data:Uint8Array,atEOF:bool):[int,Uint8Array]

	export interface Scanner extends Struct<Scanner>{

			err()/*error*/
			bytes():Uint8Array
			text():string
			scan():bool
			buffer(buf:Uint8Array,max:int):void
			split(split:SplitFunc):void
	}
	export interface SplitFunc extends Alias<(data:Uint8Array,atEOF:bool)=>[int,Uint8Array,error]>{

	}
	export interface Writer extends Struct<Writer>,io.ByteWriter,io.StringWriter,io.ReaderFrom,io.Writer{

			size():int
			reset(w:io.Writer):void
			flush()/*error*/
			available():int
			availableBuffer():Uint8Array
			buffered():int
			write(p:Uint8Array):int
			writeByte(c:byte)/*error*/
			writeRune(r:rune):int
			writeString(s:string):int
			readFrom(r:io.Reader):int64
	}
}