// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/syscall'{

	// @ts-ignore
	import * as sync from 'golang/sync'
	// @ts-ignore
	import type {int,error,GoError,byte,Struct,int32,int16,uint32,uint8,uint64,int8,uintptr,int64,Ref,uint16,bool} from 'go'
	//16
	export const AF_APPLETALK:int
	//10
	export const AF_CCITT:int
	//5
	export const AF_CHAOS:int
	//21
	export const AF_CNT:int
	//20
	export const AF_COIP:int
	//9
	export const AF_DATAKIT:int
	//12
	export const AF_DECnet:int
	//13
	export const AF_DLI:int
	//28
	export const AF_E164:int
	//8
	export const AF_ECMA:int
	//15
	export const AF_HYLINK:int
	//37
	export const AF_IEEE80211:int
	//3
	export const AF_IMPLINK:int
	//2
	export const AF_INET:int
	//30
	export const AF_INET6:int
	//23
	export const AF_IPX:int
	//28
	export const AF_ISDN:int
	//7
	export const AF_ISO:int
	//14
	export const AF_LAT:int
	//18
	export const AF_LINK:int
	//1
	export const AF_LOCAL:int
	//38
	export const AF_MAX:int
	//31
	export const AF_NATM:int
	//27
	export const AF_NDRV:int
	//33
	export const AF_NETBIOS:int
	//6
	export const AF_NS:int
	//7
	export const AF_OSI:int
	//34
	export const AF_PPP:int
	//4
	export const AF_PUP:int
	//36
	export const AF_RESERVED_36:int
	//17
	export const AF_ROUTE:int
	//24
	export const AF_SIP:int
	//11
	export const AF_SNA:int
	//32
	export const AF_SYSTEM:int
	//1
	export const AF_UNIX:int
	//0
	export const AF_UNSPEC:int
	export function accept(fd:int):[int,Sockaddr]

	export function access(path:string,mode:uint32)/*error*/

	export function adjtime(delta:Ref<Timeval>,olddelta:Ref<Timeval>)/*error*/

	//0
	export const B0:int
	//110
	export const B110:int
	//115200
	export const B115200:int
	//1200
	export const B1200:int
	//134
	export const B134:int
	//14400
	export const B14400:int
	//150
	export const B150:int
	//1800
	export const B1800:int
	//19200
	export const B19200:int
	//200
	export const B200:int
	//230400
	export const B230400:int
	//2400
	export const B2400:int
	//28800
	export const B28800:int
	//300
	export const B300:int
	//38400
	export const B38400:int
	//4800
	export const B4800:int
	//50
	export const B50:int
	//57600
	export const B57600:int
	//600
	export const B600:int
	//7200
	export const B7200:int
	//75
	export const B75:int
	//76800
	export const B76800:int
	//9600
	export const B9600:int
	//536887912
	export const BIOCFLUSH:int
	//1074020966
	export const BIOCGBLEN:int
	//1074020970
	export const BIOCGDLT:int
	//3222028921
	export const BIOCGDLTLIST:int
	//1075855979
	export const BIOCGETIF:int
	//1074020980
	export const BIOCGHDRCMPLT:int
	//1074020978
	export const BIOCGRSIG:int
	//1074807406
	export const BIOCGRTIMEOUT:int
	//1074020982
	export const BIOCGSEESENT:int
	//1074283119
	export const BIOCGSTATS:int
	//2147762800
	export const BIOCIMMEDIATE:int
	//536887913
	export const BIOCPROMISC:int
	//3221504614
	export const BIOCSBLEN:int
	//2147762808
	export const BIOCSDLT:int
	//2148549223
	export const BIOCSETF:int
	//2149597804
	export const BIOCSETIF:int
	//2147762805
	export const BIOCSHDRCMPLT:int
	//2147762803
	export const BIOCSRSIG:int
	//2148549229
	export const BIOCSRTIMEOUT:int
	//2147762807
	export const BIOCSSEESENT:int
	//1074020977
	export const BIOCVERSION:int
	//16
	export const BPF_A:int
	//32
	export const BPF_ABS:int
	//0
	export const BPF_ADD:int
	//4
	export const BPF_ALIGNMENT:int
	//4
	export const BPF_ALU:int
	//80
	export const BPF_AND:int
	//16
	export const BPF_B:int
	//48
	export const BPF_DIV:int
	//8
	export const BPF_H:int
	//0
	export const BPF_IMM:int
	//64
	export const BPF_IND:int
	//0
	export const BPF_JA:int
	//16
	export const BPF_JEQ:int
	//48
	export const BPF_JGE:int
	//32
	export const BPF_JGT:int
	//5
	export const BPF_JMP:int
	//64
	export const BPF_JSET:int
	//0
	export const BPF_K:int
	//0
	export const BPF_LD:int
	//1
	export const BPF_LDX:int
	//128
	export const BPF_LEN:int
	//96
	export const BPF_LSH:int
	//1
	export const BPF_MAJOR_VERSION:int
	//524288
	export const BPF_MAXBUFSIZE:int
	//512
	export const BPF_MAXINSNS:int
	//96
	export const BPF_MEM:int
	//16
	export const BPF_MEMWORDS:int
	//32
	export const BPF_MINBUFSIZE:int
	//1
	export const BPF_MINOR_VERSION:int
	//7
	export const BPF_MISC:int
	//160
	export const BPF_MSH:int
	//32
	export const BPF_MUL:int
	//128
	export const BPF_NEG:int
	//64
	export const BPF_OR:int
	//199606
	export const BPF_RELEASE:int
	//6
	export const BPF_RET:int
	//112
	export const BPF_RSH:int
	//2
	export const BPF_ST:int
	//3
	export const BPF_STX:int
	//16
	export const BPF_SUB:int
	//0
	export const BPF_TAX:int
	//128
	export const BPF_TXA:int
	//0
	export const BPF_W:int
	//8
	export const BPF_X:int
	//2
	export const BRKINT:int
	export function bind(fd:int,sa:Sockaddr)/*error*/

	export function bpfBuflen(fd:int):int

	export function bpfDatalink(fd:int):int

	export interface BpfHdr extends Struct<BpfHdr>{

			tstamp:Timeval32
			caplen:uint32
			datalen:uint32
			hdrlen:uint16
			pad_cgo_0:byte/*2*/
	}
	export function bpfHeadercmpl(fd:int):int

	export interface BpfInsn extends Struct<BpfInsn>{

			code:uint16
			jt:uint8
			jf:uint8
			K:uint32
	}
	export function bpfInterface(fd:int,name:string):string

	export function bpfJump(code:int,k:int,jt:int,jf:int):Ref<BpfInsn>

	export interface BpfProgram extends Struct<BpfProgram>{

			len:uint32
			pad_cgo_0:byte/*4*/
			insns:Ref<BpfInsn>
	}
	export interface BpfStat extends Struct<BpfStat>{

			recv:uint32
			drop:uint32
	}
	export function bpfStats(fd:int):Ref<BpfStat>

	export function bpfStmt(code:int,k:int):Ref<BpfInsn>

	export function bpfTimeout(fd:int):Ref<Timeval>

	export interface BpfVersion extends Struct<BpfVersion>{

			major:uint16
			minor:uint16
	}
	export function bytePtrFromString(s:string):Ref<byte>

	export function byteSliceFromString(s:string):Uint8Array

	//15
	export const CFLUSH:int
	//32768
	export const CLOCAL:int
	//2048
	export const CREAD:int
	//0
	export const CS5:int
	//256
	export const CS6:int
	//512
	export const CS7:int
	//768
	export const CS8:int
	//768
	export const CSIZE:int
	//17
	export const CSTART:int
	//20
	export const CSTATUS:int
	//19
	export const CSTOP:int
	//1024
	export const CSTOPB:int
	//26
	export const CSUSP:int
	//12
	export const CTL_MAXNAME:int
	//4
	export const CTL_NET:int
	export function chdir(path:string)/*error*/

	export function checkBpfVersion(fd:int)/*error*/

	export function chflags(path:string,flags:int)/*error*/

	export function chmod(path:string,mode:uint32)/*error*/

	export function chown(path:string,uid:int,gid:int)/*error*/

	export function chroot(path:string)/*error*/

	export function clearenv():void

	export function close(fd:int)/*error*/

	export function closeOnExec(fd:int):void

	export function cmsgLen(datalen:int):int

	export function cmsgSpace(datalen:int):int

	export interface Cmsghdr extends Struct<Cmsghdr>{

			len:uint32
			level:int32
			type:int32
			setLen(length:int):void
	}
	export interface Conn{

			syscallConn():RawConn
	}
	export function connect(fd:int,sa:Sockaddr)/*error*/

	export interface Credential extends Struct<Credential>{

			uid:uint32
			gid:uint32
			groups:Uint32Array
			noSetGroups:bool
	}
	//138
	export const DLT_APPLE_IP_OVER_IEEE1394:int
	//7
	export const DLT_ARCNET:int
	//19
	export const DLT_ATM_CLIP:int
	//11
	export const DLT_ATM_RFC1483:int
	//3
	export const DLT_AX25:int
	//5
	export const DLT_CHAOS:int
	//104
	export const DLT_CHDLC:int
	//104
	export const DLT_C_HDLC:int
	//1
	export const DLT_EN10MB:int
	//2
	export const DLT_EN3MB:int
	//10
	export const DLT_FDDI:int
	//6
	export const DLT_IEEE802:int
	//105
	export const DLT_IEEE802_11:int
	//127
	export const DLT_IEEE802_11_RADIO:int
	//163
	export const DLT_IEEE802_11_RADIO_AVS:int
	//113
	export const DLT_LINUX_SLL:int
	//108
	export const DLT_LOOP:int
	//0
	export const DLT_NULL:int
	//117
	export const DLT_PFLOG:int
	//18
	export const DLT_PFSYNC:int
	//9
	export const DLT_PPP:int
	//16
	export const DLT_PPP_BSDOS:int
	//50
	export const DLT_PPP_SERIAL:int
	//4
	export const DLT_PRONET:int
	//12
	export const DLT_RAW:int
	//8
	export const DLT_SLIP:int
	//15
	export const DLT_SLIP_BSDOS:int
	//6
	export const DT_BLK:int
	//2
	export const DT_CHR:int
	//4
	export const DT_DIR:int
	//1
	export const DT_FIFO:int
	//10
	export const DT_LNK:int
	//8
	export const DT_REG:int
	//12
	export const DT_SOCK:int
	//0
	export const DT_UNKNOWN:int
	//14
	export const DT_WHT:int
	export interface Dirent extends Struct<Dirent>{

			ino:uint64
			seekoff:uint64
			reclen:uint16
			namlen:uint16
			type:uint8
			name:int8/*1024*/
			pad_cgo_0:byte/*3*/
	}
	export function dup(fd:int):int

	export function dup2(from:int,to:int)/*error*/

	export const E2BIG:Errno
	export const EACCES:Errno
	export const EADDRINUSE:Errno
	export const EADDRNOTAVAIL:Errno
	export const EAFNOSUPPORT:Errno
	export const EAGAIN:Errno
	export const EALREADY:Errno
	export const EAUTH:Errno
	export const EBADARCH:Errno
	export const EBADEXEC:Errno
	export const EBADF:Errno
	export const EBADMACHO:Errno
	export const EBADMSG:Errno
	export const EBADRPC:Errno
	export const EBUSY:Errno
	export const ECANCELED:Errno
	export const ECHILD:Errno
	//8
	export const ECHO:int
	//64
	export const ECHOCTL:int
	//2
	export const ECHOE:int
	//4
	export const ECHOK:int
	//1
	export const ECHOKE:int
	//16
	export const ECHONL:int
	//32
	export const ECHOPRT:int
	export const ECONNABORTED:Errno
	export const ECONNREFUSED:Errno
	export const ECONNRESET:Errno
	export const EDEADLK:Errno
	export const EDESTADDRREQ:Errno
	export const EDEVERR:Errno
	export const EDOM:Errno
	export const EDQUOT:Errno
	export const EEXIST:Errno
	export const EFAULT:Errno
	export const EFBIG:Errno
	export const EFTYPE:Errno
	export const EHOSTDOWN:Errno
	export const EHOSTUNREACH:Errno
	export const EIDRM:Errno
	export const EILSEQ:Errno
	export const EINPROGRESS:Errno
	export const EINTR:Errno
	export const EINVAL:Errno
	export const EIO:Errno
	export const EISCONN:Errno
	export const EISDIR:Errno
	export const ELAST:Errno
	export const ELOOP:Errno
	export const EMFILE:Errno
	export const EMLINK:Errno
	export const EMSGSIZE:Errno
	export const EMULTIHOP:Errno
	export const ENAMETOOLONG:Errno
	export const ENEEDAUTH:Errno
	export const ENETDOWN:Errno
	export const ENETRESET:Errno
	export const ENETUNREACH:Errno
	export const ENFILE:Errno
	export const ENOATTR:Errno
	export const ENOBUFS:Errno
	export const ENODATA:Errno
	export const ENODEV:Errno
	export const ENOENT:Errno
	export const ENOEXEC:Errno
	export const ENOLCK:Errno
	export const ENOLINK:Errno
	export const ENOMEM:Errno
	export const ENOMSG:Errno
	export const ENOPOLICY:Errno
	export const ENOPROTOOPT:Errno
	export const ENOSPC:Errno
	export const ENOSR:Errno
	export const ENOSTR:Errno
	export const ENOSYS:Errno
	export const ENOTBLK:Errno
	export const ENOTCONN:Errno
	export const ENOTDIR:Errno
	export const ENOTEMPTY:Errno
	export const ENOTRECOVERABLE:Errno
	export const ENOTSOCK:Errno
	export const ENOTSUP:Errno
	export const ENOTTY:Errno
	export const ENXIO:Errno
	export const EOPNOTSUPP:Errno
	export const EOVERFLOW:Errno
	export const EOWNERDEAD:Errno
	export const EPERM:Errno
	export const EPFNOSUPPORT:Errno
	export const EPIPE:Errno
	export const EPROCLIM:Errno
	export const EPROCUNAVAIL:Errno
	export const EPROGMISMATCH:Errno
	export const EPROGUNAVAIL:Errno
	export const EPROTO:Errno
	export const EPROTONOSUPPORT:Errno
	export const EPROTOTYPE:Errno
	export const EPWROFF:Errno
	export const ERANGE:Errno
	export const EREMOTE:Errno
	export const EROFS:Errno
	export const ERPCMISMATCH:Errno
	export const ESHLIBVERS:Errno
	export const ESHUTDOWN:Errno
	export const ESOCKTNOSUPPORT:Errno
	export const ESPIPE:Errno
	export const ESRCH:Errno
	export const ESTALE:Errno
	export const ETIME:Errno
	export const ETIMEDOUT:Errno
	export const ETOOMANYREFS:Errno
	export const ETXTBSY:Errno
	export const EUSERS:Errno
	//-3
	export const EVFILT_AIO:int
	//-9
	export const EVFILT_FS:int
	//-8
	export const EVFILT_MACHPORT:int
	//-5
	export const EVFILT_PROC:int
	//-1
	export const EVFILT_READ:int
	//-6
	export const EVFILT_SIGNAL:int
	//12
	export const EVFILT_SYSCOUNT:int
	//12
	export const EVFILT_THREADMARKER:int
	//-7
	export const EVFILT_TIMER:int
	//-10
	export const EVFILT_USER:int
	//-12
	export const EVFILT_VM:int
	//-4
	export const EVFILT_VNODE:int
	//-2
	export const EVFILT_WRITE:int
	//1
	export const EV_ADD:int
	//32
	export const EV_CLEAR:int
	//2
	export const EV_DELETE:int
	//8
	export const EV_DISABLE:int
	//128
	export const EV_DISPATCH:int
	//4
	export const EV_ENABLE:int
	//32768
	export const EV_EOF:int
	//16384
	export const EV_ERROR:int
	//4096
	export const EV_FLAG0:int
	//8192
	export const EV_FLAG1:int
	//16
	export const EV_ONESHOT:int
	//8192
	export const EV_OOBAND:int
	//4096
	export const EV_POLL:int
	//64
	export const EV_RECEIPT:int
	//61440
	export const EV_SYSFLAGS:int
	export const EWOULDBLOCK:Errno
	export const EXDEV:Errno
	//19200
	export const EXTA:int
	//38400
	export const EXTB:int
	//2048
	export const EXTPROC:int
	export function environ():string[]

	export interface Errno extends uintptr,GoError{

	error():string
	is(target:error):bool
	temporary():bool
	timeout():bool
	}
	export function exchangedata(path1:string,path2:string,options:int)/*error*/

	export function exec(argv0:string,argv:string[],envv:string[])/*error*/

	export function exit(code:int):void

	//1
	export const FD_CLOEXEC:int
	//1024
	export const FD_SETSIZE:int
	//8388608
	export const FLUSHO:int
	//61
	export const F_ADDFILESIGS:int
	//59
	export const F_ADDSIGS:int
	//4
	export const F_ALLOCATEALL:int
	//2
	export const F_ALLOCATECONTIG:int
	//41
	export const F_CHKCLEAN:int
	//0
	export const F_DUPFD:int
	//67
	export const F_DUPFD_CLOEXEC:int
	//40
	export const F_FLUSH_DATA:int
	//53
	export const F_FREEZE_FS:int
	//51
	export const F_FULLFSYNC:int
	//1
	export const F_GETFD:int
	//3
	export const F_GETFL:int
	//7
	export const F_GETLK:int
	//66
	export const F_GETLKPID:int
	//74
	export const F_GETNOSIGPIPE:int
	//5
	export const F_GETOWN:int
	//50
	export const F_GETPATH:int
	//71
	export const F_GETPATH_MTMINFO:int
	//63
	export const F_GETPROTECTIONCLASS:int
	//55
	export const F_GLOBAL_NOCACHE:int
	//49
	export const F_LOG2PHYS:int
	//65
	export const F_LOG2PHYS_EXT:int
	//60
	export const F_MARKDEPENDENCY:int
	//48
	export const F_NOCACHE:int
	//62
	export const F_NODIRECT:int
	//0
	export const F_OK:int
	//52
	export const F_PATHPKG_CHECK:int
	//3
	export const F_PEOFPOSMODE:int
	//42
	export const F_PREALLOCATE:int
	//44
	export const F_RDADVISE:int
	//45
	export const F_RDAHEAD:int
	//1
	export const F_RDLCK:int
	//46
	export const F_READBOOTSTRAP:int
	//70
	export const F_SETBACKINGSTORE:int
	//2
	export const F_SETFD:int
	//4
	export const F_SETFL:int
	//8
	export const F_SETLK:int
	//9
	export const F_SETLKW:int
	//73
	export const F_SETNOSIGPIPE:int
	//6
	export const F_SETOWN:int
	//64
	export const F_SETPROTECTIONCLASS:int
	//43
	export const F_SETSIZE:int
	//54
	export const F_THAW_FS:int
	//2
	export const F_UNLCK:int
	//4
	export const F_VOLPOSMODE:int
	//47
	export const F_WRITEBOOTSTRAP:int
	//3
	export const F_WRLCK:int
	export interface Fbootstraptransfer_t extends Struct<Fbootstraptransfer_t>{

			offset:int64
			length:uint64
			buffer:Ref<byte>
	}
	export function fchdir(fd:int)/*error*/

	export function fchflags(fd:int,flags:int)/*error*/

	export function fchmod(fd:int,mode:uint32)/*error*/

	export function fchown(fd:int,uid:int,gid:int)/*error*/

	export function fcntlFlock(fd:uintptr,cmd:int,lk:Ref<Flock_t>)/*error*/

	export interface FdSet extends Struct<FdSet>{

			bits:int32/*32*/
	}
	export function flock(fd:int,how:int)/*error*/

	export interface Flock_t extends Struct<Flock_t>{

			start:int64
			len:int64
			pid:int32
			type:int16
			whence:int16
	}
	export function flushBpf(fd:int)/*error*/

	export function forkExec(argv0:string,argv:string[],attr:Ref<ProcAttr>):int

	export const ForkLock:sync.RWMutex
	export function fpathconf(fd:int,name:int):int

	export interface Fsid extends Struct<Fsid>{

			val:int32/*2*/
	}
	export function fstat(fd:int,stat:Ref<Stat_t>)/*error*/

	export function fstatfs(fd:int,stat:Ref<Statfs_t>)/*error*/

	export interface Fstore_t extends Struct<Fstore_t>{

			flags:uint32
			posmode:int32
			offset:int64
			length:int64
			bytesalloc:int64
	}
	export function fsync(fd:int)/*error*/

	export function ftruncate(fd:int,length:int64)/*error*/

	export function futimes(fd:int,tv:Timeval[])/*error*/

	export function getdirentries(fd:int,buf:Uint8Array,basep:Ref<uintptr>):int

	export function getdtablesize():int

	export function getegid():int

	export function getenv(key:string):[string,bool]

	export function geteuid():int

	export function getfsstat(buf:Statfs_t[],flags:int):int

	export function getgid():int

	export function getgroups():int[]

	export function getpagesize():int

	export function getpeername(fd:int):Sockaddr

	export function getpgid(pid:int):int

	export function getpgrp():int

	export function getpid():int

	export function getppid():int

	export function getpriority(which:int,who:int):int

	export function getrlimit(which:int,lim:Ref<Rlimit>)/*error*/

	export function getrusage(who:int,rusage:Ref<Rusage>)/*error*/

	export function getsid(pid:int):int

	export function getsockname(fd:int):Sockaddr

	export function getsockoptByte(fd:int,level:int,opt:int):byte

	export function getsockoptICMPv6Filter(fd:int,level:int,opt:int):Ref<ICMPv6Filter>

	export function getsockoptIPMreq(fd:int,level:int,opt:int):Ref<IPMreq>

	export function getsockoptIPv6MTUInfo(fd:int,level:int,opt:int):Ref<IPv6MTUInfo>

	export function getsockoptIPv6Mreq(fd:int,level:int,opt:int):Ref<IPv6Mreq>

	export function getsockoptInet4Addr(fd:int,level:int,opt:int):byte/*4*/

	export function getsockoptInt(fd:int,level:int,opt:int):int

	export function gettimeofday(tp:Ref<Timeval>)/*error*/

	export function getuid():int

	export function getwd():string

	//16384
	export const HUPCL:int
	//256
	export const ICANON:int
	//18
	export const ICMP6_FILTER:int
	export interface ICMPv6Filter extends Struct<ICMPv6Filter>{

			filt:uint32/*8*/
	}
	//256
	export const ICRNL:int
	//1024
	export const IEXTEN:int
	//512
	export const IFF_ALLMULTI:int
	//16384
	export const IFF_ALTPHYS:int
	//2
	export const IFF_BROADCAST:int
	//4
	export const IFF_DEBUG:int
	//4096
	export const IFF_LINK0:int
	//8192
	export const IFF_LINK1:int
	//16384
	export const IFF_LINK2:int
	//8
	export const IFF_LOOPBACK:int
	//32768
	export const IFF_MULTICAST:int
	//128
	export const IFF_NOARP:int
	//32
	export const IFF_NOTRAILERS:int
	//1024
	export const IFF_OACTIVE:int
	//16
	export const IFF_POINTOPOINT:int
	//256
	export const IFF_PROMISC:int
	//64
	export const IFF_RUNNING:int
	//2048
	export const IFF_SIMPLEX:int
	//1
	export const IFF_UP:int
	//16
	export const IFNAMSIZ:int
	//2
	export const IFT_1822:int
	//49
	export const IFT_AAL5:int
	//35
	export const IFT_ARCNET:int
	//36
	export const IFT_ARCNETPLUS:int
	//37
	export const IFT_ATM:int
	//209
	export const IFT_BRIDGE:int
	//248
	export const IFT_CARP:int
	//255
	export const IFT_CELLULAR:int
	//19
	export const IFT_CEPT:int
	//30
	export const IFT_DS3:int
	//244
	export const IFT_ENC:int
	//25
	export const IFT_EON:int
	//6
	export const IFT_ETHER:int
	//56
	export const IFT_FAITH:int
	//15
	export const IFT_FDDI:int
	//32
	export const IFT_FRELAY:int
	//44
	export const IFT_FRELAYDCE:int
	//55
	export const IFT_GIF:int
	//3
	export const IFT_HDH1822:int
	//47
	export const IFT_HIPPI:int
	//46
	export const IFT_HSSI:int
	//14
	export const IFT_HY:int
	//144
	export const IFT_IEEE1394:int
	//136
	export const IFT_IEEE8023ADLAG:int
	//20
	export const IFT_ISDNBASIC:int
	//21
	export const IFT_ISDNPRIMARY:int
	//41
	export const IFT_ISO88022LLC:int
	//7
	export const IFT_ISO88023:int
	//8
	export const IFT_ISO88024:int
	//9
	export const IFT_ISO88025:int
	//10
	export const IFT_ISO88026:int
	//135
	export const IFT_L2VLAN:int
	//16
	export const IFT_LAPB:int
	//42
	export const IFT_LOCALTALK:int
	//24
	export const IFT_LOOP:int
	//38
	export const IFT_MIOX25:int
	//48
	export const IFT_MODEM:int
	//27
	export const IFT_NSIP:int
	//1
	export const IFT_OTHER:int
	//12
	export const IFT_P10:int
	//13
	export const IFT_P80:int
	//34
	export const IFT_PARA:int
	//255
	export const IFT_PDP:int
	//245
	export const IFT_PFLOG:int
	//246
	export const IFT_PFSYNC:int
	//23
	export const IFT_PPP:int
	//54
	export const IFT_PROPMUX:int
	//53
	export const IFT_PROPVIRTUAL:int
	//22
	export const IFT_PTPSERIAL:int
	//33
	export const IFT_RS232:int
	//17
	export const IFT_SDLC:int
	//31
	export const IFT_SIP:int
	//28
	export const IFT_SLIP:int
	//43
	export const IFT_SMDSDXI:int
	//52
	export const IFT_SMDSICIP:int
	//39
	export const IFT_SONET:int
	//50
	export const IFT_SONETPATH:int
	//51
	export const IFT_SONETVT:int
	//11
	export const IFT_STARLAN:int
	//57
	export const IFT_STF:int
	//18
	export const IFT_T1:int
	//29
	export const IFT_ULTRA:int
	//45
	export const IFT_V35:int
	//5
	export const IFT_X25:int
	//4
	export const IFT_X25DDN:int
	//40
	export const IFT_X25PLE:int
	//26
	export const IFT_XETHER:int
	//1
	export const IGNBRK:int
	//128
	export const IGNCR:int
	//4
	export const IGNPAR:int
	//8192
	export const IMAXBEL:int
	//64
	export const INLCR:int
	//16
	export const INPCK:int
	//16777215
	export const IN_CLASSA_HOST:int
	//128
	export const IN_CLASSA_MAX:int
	//4278190080
	export const IN_CLASSA_NET:int
	//24
	export const IN_CLASSA_NSHIFT:int
	//65535
	export const IN_CLASSB_HOST:int
	//65536
	export const IN_CLASSB_MAX:int
	//4294901760
	export const IN_CLASSB_NET:int
	//16
	export const IN_CLASSB_NSHIFT:int
	//255
	export const IN_CLASSC_HOST:int
	//4294967040
	export const IN_CLASSC_NET:int
	//8
	export const IN_CLASSC_NSHIFT:int
	//268435455
	export const IN_CLASSD_HOST:int
	//4026531840
	export const IN_CLASSD_NET:int
	//28
	export const IN_CLASSD_NSHIFT:int
	//2851995648
	export const IN_LINKLOCALNETNUM:int
	//127
	export const IN_LOOPBACKNET:int
	export interface IPMreq extends Struct<IPMreq>{

			multiaddr:byte/*4*/
			interface:byte/*4*/
	}
	//34
	export const IPPROTO_3PC:int
	//68
	export const IPPROTO_ADFS:int
	//51
	export const IPPROTO_AH:int
	//61
	export const IPPROTO_AHIP:int
	//99
	export const IPPROTO_APES:int
	//13
	export const IPPROTO_ARGUS:int
	//93
	export const IPPROTO_AX25:int
	//49
	export const IPPROTO_BHA:int
	//30
	export const IPPROTO_BLT:int
	//76
	export const IPPROTO_BRSATMON:int
	//62
	export const IPPROTO_CFTP:int
	//16
	export const IPPROTO_CHAOS:int
	//38
	export const IPPROTO_CMTP:int
	//73
	export const IPPROTO_CPHB:int
	//72
	export const IPPROTO_CPNX:int
	//37
	export const IPPROTO_DDP:int
	//86
	export const IPPROTO_DGP:int
	//254
	export const IPPROTO_DIVERT:int
	//257
	export const IPPROTO_DONE:int
	//60
	export const IPPROTO_DSTOPTS:int
	//8
	export const IPPROTO_EGP:int
	//14
	export const IPPROTO_EMCON:int
	//98
	export const IPPROTO_ENCAP:int
	//80
	export const IPPROTO_EON:int
	//50
	export const IPPROTO_ESP:int
	//97
	export const IPPROTO_ETHERIP:int
	//44
	export const IPPROTO_FRAGMENT:int
	//3
	export const IPPROTO_GGP:int
	//100
	export const IPPROTO_GMTP:int
	//47
	export const IPPROTO_GRE:int
	//63
	export const IPPROTO_HELLO:int
	//20
	export const IPPROTO_HMP:int
	//0
	export const IPPROTO_HOPOPTS:int
	//1
	export const IPPROTO_ICMP:int
	//58
	export const IPPROTO_ICMPV6:int
	//22
	export const IPPROTO_IDP:int
	//35
	export const IPPROTO_IDPR:int
	//45
	export const IPPROTO_IDRP:int
	//2
	export const IPPROTO_IGMP:int
	//85
	export const IPPROTO_IGP:int
	//88
	export const IPPROTO_IGRP:int
	//40
	export const IPPROTO_IL:int
	//52
	export const IPPROTO_INLSP:int
	//32
	export const IPPROTO_INP:int
	//0
	export const IPPROTO_IP:int
	//108
	export const IPPROTO_IPCOMP:int
	//71
	export const IPPROTO_IPCV:int
	//94
	export const IPPROTO_IPEIP:int
	//4
	export const IPPROTO_IPIP:int
	//67
	export const IPPROTO_IPPC:int
	//4
	export const IPPROTO_IPV4:int
	//41
	export const IPPROTO_IPV6:int
	//28
	export const IPPROTO_IRTP:int
	//65
	export const IPPROTO_KRYPTOLAN:int
	//91
	export const IPPROTO_LARP:int
	//25
	export const IPPROTO_LEAF1:int
	//26
	export const IPPROTO_LEAF2:int
	//256
	export const IPPROTO_MAX:int
	//52
	export const IPPROTO_MAXID:int
	//19
	export const IPPROTO_MEAS:int
	//48
	export const IPPROTO_MHRP:int
	//95
	export const IPPROTO_MICP:int
	//92
	export const IPPROTO_MTP:int
	//18
	export const IPPROTO_MUX:int
	//77
	export const IPPROTO_ND:int
	//54
	export const IPPROTO_NHRP:int
	//59
	export const IPPROTO_NONE:int
	//31
	export const IPPROTO_NSP:int
	//11
	export const IPPROTO_NVPII:int
	//89
	export const IPPROTO_OSPFIGP:int
	//113
	export const IPPROTO_PGM:int
	//9
	export const IPPROTO_PIGP:int
	//103
	export const IPPROTO_PIM:int
	//21
	export const IPPROTO_PRM:int
	//12
	export const IPPROTO_PUP:int
	//75
	export const IPPROTO_PVP:int
	//255
	export const IPPROTO_RAW:int
	//10
	export const IPPROTO_RCCMON:int
	//27
	export const IPPROTO_RDP:int
	//43
	export const IPPROTO_ROUTING:int
	//46
	export const IPPROTO_RSVP:int
	//66
	export const IPPROTO_RVD:int
	//64
	export const IPPROTO_SATEXPAK:int
	//69
	export const IPPROTO_SATMON:int
	//96
	export const IPPROTO_SCCSP:int
	//132
	export const IPPROTO_SCTP:int
	//42
	export const IPPROTO_SDRP:int
	//33
	export const IPPROTO_SEP:int
	//90
	export const IPPROTO_SRPC:int
	//7
	export const IPPROTO_ST:int
	//82
	export const IPPROTO_SVMTP:int
	//53
	export const IPPROTO_SWIPE:int
	//87
	export const IPPROTO_TCF:int
	//6
	export const IPPROTO_TCP:int
	//29
	export const IPPROTO_TP:int
	//39
	export const IPPROTO_TPXX:int
	//23
	export const IPPROTO_TRUNK1:int
	//24
	export const IPPROTO_TRUNK2:int
	//84
	export const IPPROTO_TTP:int
	//17
	export const IPPROTO_UDP:int
	//83
	export const IPPROTO_VINES:int
	//70
	export const IPPROTO_VISA:int
	//81
	export const IPPROTO_VMTP:int
	//79
	export const IPPROTO_WBEXPAK:int
	//78
	export const IPPROTO_WBMON:int
	//74
	export const IPPROTO_WSN:int
	//15
	export const IPPROTO_XNET:int
	//36
	export const IPPROTO_XTP:int
	//23
	export const IPV6_2292DSTOPTS:int
	//20
	export const IPV6_2292HOPLIMIT:int
	//22
	export const IPV6_2292HOPOPTS:int
	//21
	export const IPV6_2292NEXTHOP:int
	//19
	export const IPV6_2292PKTINFO:int
	//25
	export const IPV6_2292PKTOPTIONS:int
	//24
	export const IPV6_2292RTHDR:int
	//27
	export const IPV6_BINDV6ONLY:int
	//125
	export const IPV6_BOUND_IF:int
	//26
	export const IPV6_CHECKSUM:int
	//1
	export const IPV6_DEFAULT_MULTICAST_HOPS:int
	//1
	export const IPV6_DEFAULT_MULTICAST_LOOP:int
	//64
	export const IPV6_DEFHLIM:int
	//29
	export const IPV6_FAITH:int
	//4294967055
	export const IPV6_FLOWINFO_MASK:int
	//4294905600
	export const IPV6_FLOWLABEL_MASK:int
	//120
	export const IPV6_FRAGTTL:int
	//30
	export const IPV6_FW_ADD:int
	//31
	export const IPV6_FW_DEL:int
	//32
	export const IPV6_FW_FLUSH:int
	//34
	export const IPV6_FW_GET:int
	//33
	export const IPV6_FW_ZERO:int
	//1
	export const IPV6_HLIMDEC:int
	//28
	export const IPV6_IPSEC_POLICY:int
	//12
	export const IPV6_JOIN_GROUP:int
	//13
	export const IPV6_LEAVE_GROUP:int
	//255
	export const IPV6_MAXHLIM:int
	//2048
	export const IPV6_MAXOPTHDR:int
	//65535
	export const IPV6_MAXPACKET:int
	//512
	export const IPV6_MAX_GROUP_SRC_FILTER:int
	//4095
	export const IPV6_MAX_MEMBERSHIPS:int
	//128
	export const IPV6_MAX_SOCK_SRC_FILTER:int
	//31
	export const IPV6_MIN_MEMBERSHIPS:int
	//1280
	export const IPV6_MMTU:int
	//10
	export const IPV6_MULTICAST_HOPS:int
	//9
	export const IPV6_MULTICAST_IF:int
	//11
	export const IPV6_MULTICAST_LOOP:int
	//14
	export const IPV6_PORTRANGE:int
	//0
	export const IPV6_PORTRANGE_DEFAULT:int
	//1
	export const IPV6_PORTRANGE_HIGH:int
	//2
	export const IPV6_PORTRANGE_LOW:int
	//35
	export const IPV6_RECVTCLASS:int
	//0
	export const IPV6_RTHDR_LOOSE:int
	//1
	export const IPV6_RTHDR_STRICT:int
	//0
	export const IPV6_RTHDR_TYPE_0:int
	//3
	export const IPV6_SOCKOPT_RESERVED1:int
	//36
	export const IPV6_TCLASS:int
	//4
	export const IPV6_UNICAST_HOPS:int
	//27
	export const IPV6_V6ONLY:int
	//96
	export const IPV6_VERSION:int
	//240
	export const IPV6_VERSION_MASK:int
	//12
	export const IP_ADD_MEMBERSHIP:int
	//70
	export const IP_ADD_SOURCE_MEMBERSHIP:int
	//72
	export const IP_BLOCK_SOURCE:int
	//25
	export const IP_BOUND_IF:int
	//1
	export const IP_DEFAULT_MULTICAST_LOOP:int
	//1
	export const IP_DEFAULT_MULTICAST_TTL:int
	//16384
	export const IP_DF:int
	//13
	export const IP_DROP_MEMBERSHIP:int
	//71
	export const IP_DROP_SOURCE_MEMBERSHIP:int
	//60
	export const IP_DUMMYNET_CONFIGURE:int
	//61
	export const IP_DUMMYNET_DEL:int
	//62
	export const IP_DUMMYNET_FLUSH:int
	//64
	export const IP_DUMMYNET_GET:int
	//22
	export const IP_FAITH:int
	//40
	export const IP_FW_ADD:int
	//41
	export const IP_FW_DEL:int
	//42
	export const IP_FW_FLUSH:int
	//44
	export const IP_FW_GET:int
	//45
	export const IP_FW_RESETLOG:int
	//43
	export const IP_FW_ZERO:int
	//2
	export const IP_HDRINCL:int
	//21
	export const IP_IPSEC_POLICY:int
	//65535
	export const IP_MAXPACKET:int
	//512
	export const IP_MAX_GROUP_SRC_FILTER:int
	//4095
	export const IP_MAX_MEMBERSHIPS:int
	//128
	export const IP_MAX_SOCK_MUTE_FILTER:int
	//128
	export const IP_MAX_SOCK_SRC_FILTER:int
	//8192
	export const IP_MF:int
	//31
	export const IP_MIN_MEMBERSHIPS:int
	//74
	export const IP_MSFILTER:int
	//576
	export const IP_MSS:int
	//9
	export const IP_MULTICAST_IF:int
	//66
	export const IP_MULTICAST_IFINDEX:int
	//11
	export const IP_MULTICAST_LOOP:int
	//10
	export const IP_MULTICAST_TTL:int
	//14
	export const IP_MULTICAST_VIF:int
	//55
	export const IP_NAT__XXX:int
	//8191
	export const IP_OFFMASK:int
	//50
	export const IP_OLD_FW_ADD:int
	//51
	export const IP_OLD_FW_DEL:int
	//52
	export const IP_OLD_FW_FLUSH:int
	//54
	export const IP_OLD_FW_GET:int
	//56
	export const IP_OLD_FW_RESETLOG:int
	//53
	export const IP_OLD_FW_ZERO:int
	//1
	export const IP_OPTIONS:int
	//26
	export const IP_PKTINFO:int
	//19
	export const IP_PORTRANGE:int
	//0
	export const IP_PORTRANGE_DEFAULT:int
	//1
	export const IP_PORTRANGE_HIGH:int
	//2
	export const IP_PORTRANGE_LOW:int
	//7
	export const IP_RECVDSTADDR:int
	//20
	export const IP_RECVIF:int
	//5
	export const IP_RECVOPTS:int
	//26
	export const IP_RECVPKTINFO:int
	//6
	export const IP_RECVRETOPTS:int
	//24
	export const IP_RECVTTL:int
	//8
	export const IP_RETOPTS:int
	//32768
	export const IP_RF:int
	//16
	export const IP_RSVP_OFF:int
	//15
	export const IP_RSVP_ON:int
	//18
	export const IP_RSVP_VIF_OFF:int
	//17
	export const IP_RSVP_VIF_ON:int
	//23
	export const IP_STRIPHDR:int
	//3
	export const IP_TOS:int
	//65
	export const IP_TRAFFIC_MGT_BACKGROUND:int
	//4
	export const IP_TTL:int
	//73
	export const IP_UNBLOCK_SOURCE:int
	export interface IPv6MTUInfo extends Struct<IPv6MTUInfo>{

			addr:RawSockaddrInet6
			mtu:uint32
	}
	export interface IPv6Mreq extends Struct<IPv6Mreq>{

			multiaddr:byte/*16*/
			interface:uint32
	}
	//128
	export const ISIG:int
	//32
	export const ISTRIP:int
	//16384
	export const IUTF8:int
	//2048
	export const IXANY:int
	//1024
	export const IXOFF:int
	//512
	export const IXON:int
	export interface IfData extends Struct<IfData>{

			type:uint8
			typelen:uint8
			physical:uint8
			addrlen:uint8
			hdrlen:uint8
			recvquota:uint8
			xmitquota:uint8
			unused1:uint8
			mtu:uint32
			metric:uint32
			baudrate:uint32
			ipackets:uint32
			ierrors:uint32
			opackets:uint32
			oerrors:uint32
			collisions:uint32
			ibytes:uint32
			obytes:uint32
			imcasts:uint32
			omcasts:uint32
			iqdrops:uint32
			noproto:uint32
			recvtiming:uint32
			xmittiming:uint32
			lastchange:Timeval32
			unused2:uint32
			hwassist:uint32
			reserved1:uint32
			reserved2:uint32
	}
	export interface IfMsghdr extends Struct<IfMsghdr>{

			msglen:uint16
			version:uint8
			type:uint8
			addrs:int32
			flags:int32
			index:uint16
			pad_cgo_0:byte/*2*/
			data:IfData
	}
	export interface IfaMsghdr extends Struct<IfaMsghdr>{

			msglen:uint16
			version:uint8
			type:uint8
			addrs:int32
			flags:int32
			index:uint16
			pad_cgo_0:byte/*2*/
			metric:int32
	}
	export interface IfmaMsghdr extends Struct<IfmaMsghdr>{

			msglen:uint16
			version:uint8
			type:uint8
			addrs:int32
			flags:int32
			index:uint16
			pad_cgo_0:byte/*2*/
	}
	export interface IfmaMsghdr2 extends Struct<IfmaMsghdr2>{

			msglen:uint16
			version:uint8
			type:uint8
			addrs:int32
			flags:int32
			index:uint16
			pad_cgo_0:byte/*2*/
			refcount:int32
	}
	//true
	export const ImplementsGetwd:bool
	export interface Inet4Pktinfo extends Struct<Inet4Pktinfo>{

			ifindex:uint32
			spec_dst:byte/*4*/
			addr:byte/*4*/
	}
	export interface Inet6Pktinfo extends Struct<Inet6Pktinfo>{

			addr:byte/*16*/
			ifindex:uint32
	}
	export interface InterfaceAddrMessage extends RoutingMessage,Struct<InterfaceAddrMessage>{

			header:IfaMsghdr
			data:Uint8Array
	}
	export interface InterfaceMessage extends RoutingMessage,Struct<InterfaceMessage>{

			header:IfMsghdr
			data:Uint8Array
	}
	export interface InterfaceMulticastAddrMessage extends Struct<InterfaceMulticastAddrMessage>,RoutingMessage{

			header:IfmaMsghdr2
			data:Uint8Array
	}
	export interface Iovec extends Struct<Iovec>{

			base:Ref<byte>
			len:uint64
			setLen(length:int):void
	}
	export function issetugid():bool

	export function kevent(kq:int,changes:Kevent_t[],events:Kevent_t[],timeout:Ref<Timespec>):int

	export interface Kevent_t extends Struct<Kevent_t>{

			ident:uint64
			filter:int16
			flags:uint16
			fflags:uint32
			data:int64
			udata:Ref<byte>
	}
	export function kill(pid:int,signum:Signal)/*error*/

	export function kqueue():int

	//2
	export const LOCK_EX:int
	//4
	export const LOCK_NB:int
	//1
	export const LOCK_SH:int
	//8
	export const LOCK_UN:int
	export function lchown(path:string,uid:int,gid:int)/*error*/

	export interface Linger extends Struct<Linger>{

			onoff:int32
			linger:int32
	}
	export function link(path:string,link:string)/*error*/

	export function listen(s:int,backlog:int)/*error*/

	export interface Log2phys_t extends Struct<Log2phys_t>{

			flags:uint32
			contigbytes:int64
			devoffset:int64
	}
	export function lstat(path:string,stat:Ref<Stat_t>)/*error*/

	//9
	export const MADV_CAN_REUSE:int
	//4
	export const MADV_DONTNEED:int
	//5
	export const MADV_FREE:int
	//7
	export const MADV_FREE_REUSABLE:int
	//8
	export const MADV_FREE_REUSE:int
	//0
	export const MADV_NORMAL:int
	//1
	export const MADV_RANDOM:int
	//2
	export const MADV_SEQUENTIAL:int
	//3
	export const MADV_WILLNEED:int
	//6
	export const MADV_ZERO_WIRED_PAGES:int
	//4096
	export const MAP_ANON:int
	//2
	export const MAP_COPY:int
	//0
	export const MAP_FILE:int
	//16
	export const MAP_FIXED:int
	//512
	export const MAP_HASSEMAPHORE:int
	//2048
	export const MAP_JIT:int
	//1024
	export const MAP_NOCACHE:int
	//256
	export const MAP_NOEXTEND:int
	//64
	export const MAP_NORESERVE:int
	//2
	export const MAP_PRIVATE:int
	//32
	export const MAP_RENAME:int
	//128
	export const MAP_RESERVED0080:int
	//1
	export const MAP_SHARED:int
	//1
	export const MCL_CURRENT:int
	//2
	export const MCL_FUTURE:int
	//32
	export const MSG_CTRUNC:int
	//4
	export const MSG_DONTROUTE:int
	//128
	export const MSG_DONTWAIT:int
	//256
	export const MSG_EOF:int
	//8
	export const MSG_EOR:int
	//1024
	export const MSG_FLUSH:int
	//8192
	export const MSG_HAVEMORE:int
	//2048
	export const MSG_HOLD:int
	//65536
	export const MSG_NEEDSA:int
	//1
	export const MSG_OOB:int
	//2
	export const MSG_PEEK:int
	//16384
	export const MSG_RCVMORE:int
	//4096
	export const MSG_SEND:int
	//16
	export const MSG_TRUNC:int
	//64
	export const MSG_WAITALL:int
	//512
	export const MSG_WAITSTREAM:int
	//1
	export const MS_ASYNC:int
	//8
	export const MS_DEACTIVATE:int
	//2
	export const MS_INVALIDATE:int
	//4
	export const MS_KILLPAGES:int
	//16
	export const MS_SYNC:int
	export function mkdir(path:string,mode:uint32)/*error*/

	export function mkfifo(path:string,mode:uint32)/*error*/

	export function mknod(path:string,mode:uint32,dev:int)/*error*/

	export function mlock(b:Uint8Array)/*error*/

	export function mlockall(flags:int)/*error*/

	export function mmap(fd:int,offset:int64,length:int,prot:int,flags:int):Uint8Array

	export function mprotect(b:Uint8Array,prot:int)/*error*/

	export interface Msghdr extends Struct<Msghdr>{

			name:Ref<byte>
			namelen:uint32
			pad_cgo_0:byte/*4*/
			iov:Ref<Iovec>
			iovlen:int32
			pad_cgo_1:byte/*4*/
			control:Ref<byte>
			controllen:uint32
			flags:int32
			setControllen(length:int):void
	}
	export function munlock(b:Uint8Array)/*error*/

	export function munlockall()/*error*/

	export function munmap(b:Uint8Array)/*error*/

	//255
	export const NAME_MAX:int
	//1
	export const NET_RT_DUMP:int
	//7
	export const NET_RT_DUMP2:int
	//2
	export const NET_RT_FLAGS:int
	//3
	export const NET_RT_IFLIST:int
	//6
	export const NET_RT_IFLIST2:int
	//10
	export const NET_RT_MAXID:int
	//4
	export const NET_RT_STAT:int
	//5
	export const NET_RT_TRASH:int
	//2147483648
	export const NOFLSH:int
	//8
	export const NOTE_ABSOLUTE:int
	//8
	export const NOTE_ATTRIB:int
	//4
	export const NOTE_CHILD:int
	//1
	export const NOTE_DELETE:int
	//536870912
	export const NOTE_EXEC:int
	//2147483648
	export const NOTE_EXIT:int
	//67108864
	export const NOTE_EXITSTATUS:int
	//4
	export const NOTE_EXTEND:int
	//1073741824
	export const NOTE_FFAND:int
	//3221225472
	export const NOTE_FFCOPY:int
	//3221225472
	export const NOTE_FFCTRLMASK:int
	//16777215
	export const NOTE_FFLAGSMASK:int
	//0
	export const NOTE_FFNOP:int
	//2147483648
	export const NOTE_FFOR:int
	//1073741824
	export const NOTE_FORK:int
	//16
	export const NOTE_LINK:int
	//1
	export const NOTE_LOWAT:int
	//128
	export const NOTE_NONE:int
	//4
	export const NOTE_NSECONDS:int
	//-1048576
	export const NOTE_PCTRLMASK:int
	//1048575
	export const NOTE_PDATAMASK:int
	//268435456
	export const NOTE_REAP:int
	//32
	export const NOTE_RENAME:int
	//33554432
	export const NOTE_RESOURCEEND:int
	//64
	export const NOTE_REVOKE:int
	//1
	export const NOTE_SECONDS:int
	//134217728
	export const NOTE_SIGNAL:int
	//1
	export const NOTE_TRACK:int
	//2
	export const NOTE_TRACKERR:int
	//16777216
	export const NOTE_TRIGGER:int
	//2
	export const NOTE_USECONDS:int
	//268435456
	export const NOTE_VM_ERROR:int
	//2147483648
	export const NOTE_VM_PRESSURE:int
	//536870912
	export const NOTE_VM_PRESSURE_SUDDEN_TERMINATE:int
	//1073741824
	export const NOTE_VM_PRESSURE_TERMINATE:int
	//2
	export const NOTE_WRITE:int
	export function nsecToTimespec(nsec:int64):Timespec

	export function nsecToTimeval(nsec:int64):Timeval

	//16
	export const OCRNL:int
	//131072
	export const OFDEL:int
	//128
	export const OFILL:int
	//2
	export const ONLCR:int
	//64
	export const ONLRET:int
	//32
	export const ONOCR:int
	//8
	export const ONOEOT:int
	//1
	export const OPOST:int
	//3
	export const O_ACCMODE:int
	//536870912
	export const O_ALERT:int
	//8
	export const O_APPEND:int
	//64
	export const O_ASYNC:int
	//16777216
	export const O_CLOEXEC:int
	//512
	export const O_CREAT:int
	//1048576
	export const O_DIRECTORY:int
	//4194304
	export const O_DSYNC:int
	//32768
	export const O_EVTONLY:int
	//2048
	export const O_EXCL:int
	//32
	export const O_EXLOCK:int
	//128
	export const O_FSYNC:int
	//4
	export const O_NDELAY:int
	//131072
	export const O_NOCTTY:int
	//256
	export const O_NOFOLLOW:int
	//4
	export const O_NONBLOCK:int
	//2147483648
	export const O_POPUP:int
	//0
	export const O_RDONLY:int
	//2
	export const O_RDWR:int
	//16
	export const O_SHLOCK:int
	//2097152
	export const O_SYMLINK:int
	//128
	export const O_SYNC:int
	//1024
	export const O_TRUNC:int
	//1
	export const O_WRONLY:int
	export function open(path:string,mode:int,perm:uint32):int

	//4096
	export const PARENB:int
	//8
	export const PARMRK:int
	//8192
	export const PARODD:int
	//536870912
	export const PENDIN:int
	//1
	export const PRIO_PGRP:int
	//0
	export const PRIO_PROCESS:int
	//2
	export const PRIO_USER:int
	//4
	export const PROT_EXEC:int
	//0
	export const PROT_NONE:int
	//1
	export const PROT_READ:int
	//2
	export const PROT_WRITE:int
	//7
	export const PTRACE_CONT:int
	//8
	export const PTRACE_KILL:int
	//0
	export const PTRACE_TRACEME:int
	//10
	export const PT_ATTACH:int
	//14
	export const PT_ATTACHEXC:int
	//7
	export const PT_CONTINUE:int
	//31
	export const PT_DENY_ATTACH:int
	//11
	export const PT_DETACH:int
	//32
	export const PT_FIRSTMACH:int
	//30
	export const PT_FORCEQUOTA:int
	//8
	export const PT_KILL:int
	//2
	export const PT_READ_D:int
	//1
	export const PT_READ_I:int
	//3
	export const PT_READ_U:int
	//12
	export const PT_SIGEXC:int
	//9
	export const PT_STEP:int
	//13
	export const PT_THUPDATE:int
	//0
	export const PT_TRACE_ME:int
	//5
	export const PT_WRITE_D:int
	//4
	export const PT_WRITE_I:int
	//6
	export const PT_WRITE_U:int
	export function parseDirent(buf:Uint8Array,max:int,names:string[]):[int,int,string[]]

	export function parseRoutingMessage(b:Uint8Array):RoutingMessage[]

	export function parseRoutingSockaddr(msg:RoutingMessage):Sockaddr[]

	export function parseSocketControlMessage(b:Uint8Array):SocketControlMessage[]

	export function parseUnixRights(m:Ref<SocketControlMessage>):int[]

	export function pathconf(path:string,name:int):int

	export function pipe(p:int[])/*error*/

	export function pread(fd:int,p:Uint8Array,offset:int64):int

	export interface ProcAttr extends Struct<ProcAttr>{

			dir:string
			env:string[]
			files:uintptr[]
			sys:Ref<SysProcAttr>
	}
	export function ptraceAttach(pid:int)/*error*/

	export function ptraceDetach(pid:int)/*error*/

	export function pwrite(fd:int,p:Uint8Array,offset:int64):int

	//5
	export const RLIMIT_AS:int
	//4
	export const RLIMIT_CORE:int
	//0
	export const RLIMIT_CPU:int
	//2
	export const RLIMIT_DATA:int
	//1
	export const RLIMIT_FSIZE:int
	//8
	export const RLIMIT_NOFILE:int
	//3
	export const RLIMIT_STACK:int
	//9223372036854775807
	export const RLIM_INFINITY:int
	//6
	export const RTAX_AUTHOR:int
	//7
	export const RTAX_BRD:int
	//0
	export const RTAX_DST:int
	//1
	export const RTAX_GATEWAY:int
	//3
	export const RTAX_GENMASK:int
	//5
	export const RTAX_IFA:int
	//4
	export const RTAX_IFP:int
	//8
	export const RTAX_MAX:int
	//2
	export const RTAX_NETMASK:int
	//64
	export const RTA_AUTHOR:int
	//128
	export const RTA_BRD:int
	//1
	export const RTA_DST:int
	//2
	export const RTA_GATEWAY:int
	//8
	export const RTA_GENMASK:int
	//32
	export const RTA_IFA:int
	//16
	export const RTA_IFP:int
	//4
	export const RTA_NETMASK:int
	//4096
	export const RTF_BLACKHOLE:int
	//4194304
	export const RTF_BROADCAST:int
	//256
	export const RTF_CLONING:int
	//33554432
	export const RTF_CONDEMNED:int
	//128
	export const RTF_DELCLONE:int
	//64
	export const RTF_DONE:int
	//16
	export const RTF_DYNAMIC:int
	//2
	export const RTF_GATEWAY:int
	//4
	export const RTF_HOST:int
	//67108864
	export const RTF_IFREF:int
	//16777216
	export const RTF_IFSCOPE:int
	//1024
	export const RTF_LLINFO:int
	//2097152
	export const RTF_LOCAL:int
	//32
	export const RTF_MODIFIED:int
	//8388608
	export const RTF_MULTICAST:int
	//1048576
	export const RTF_PINNED:int
	//65536
	export const RTF_PRCLONING:int
	//32768
	export const RTF_PROTO1:int
	//16384
	export const RTF_PROTO2:int
	//262144
	export const RTF_PROTO3:int
	//8
	export const RTF_REJECT:int
	//2048
	export const RTF_STATIC:int
	//1
	export const RTF_UP:int
	//131072
	export const RTF_WASCLONED:int
	//512
	export const RTF_XRESOLVE:int
	//1
	export const RTM_ADD:int
	//3
	export const RTM_CHANGE:int
	//13
	export const RTM_DELADDR:int
	//2
	export const RTM_DELETE:int
	//16
	export const RTM_DELMADDR:int
	//4
	export const RTM_GET:int
	//20
	export const RTM_GET2:int
	//14
	export const RTM_IFINFO:int
	//18
	export const RTM_IFINFO2:int
	//8
	export const RTM_LOCK:int
	//5
	export const RTM_LOSING:int
	//7
	export const RTM_MISS:int
	//12
	export const RTM_NEWADDR:int
	//15
	export const RTM_NEWMADDR:int
	//19
	export const RTM_NEWMADDR2:int
	//9
	export const RTM_OLDADD:int
	//10
	export const RTM_OLDDEL:int
	//6
	export const RTM_REDIRECT:int
	//11
	export const RTM_RESOLVE:int
	//1000000
	export const RTM_RTTUNIT:int
	//5
	export const RTM_VERSION:int
	//4
	export const RTV_EXPIRE:int
	//2
	export const RTV_HOPCOUNT:int
	//1
	export const RTV_MTU:int
	//8
	export const RTV_RPIPE:int
	//64
	export const RTV_RTT:int
	//128
	export const RTV_RTTVAR:int
	//16
	export const RTV_SPIPE:int
	//32
	export const RTV_SSTHRESH:int
	//-1
	export const RUSAGE_CHILDREN:int
	//0
	export const RUSAGE_SELF:int
	export interface Radvisory_t extends Struct<Radvisory_t>{

			offset:int64
			count:int32
			pad_cgo_0:byte/*4*/
	}
	export interface RawConn{

			control(v1:(fd:uintptr)=>void/*error*/
			read(v1:(fd:uintptr)=>void/*error*/
			write(v1:(fd:uintptr)=>void/*error*/
	}
	export interface RawSockaddr extends Struct<RawSockaddr>{

			len:uint8
			family:uint8
			data:int8/*14*/
	}
	export interface RawSockaddrAny extends Struct<RawSockaddrAny>{

			addr:RawSockaddr
			pad:int8/*92*/
	}
	export interface RawSockaddrDatalink extends Struct<RawSockaddrDatalink>{

			len:uint8
			family:uint8
			index:uint16
			type:uint8
			nlen:uint8
			alen:uint8
			slen:uint8
			data:int8/*12*/
	}
	export interface RawSockaddrInet4 extends Struct<RawSockaddrInet4>{

			len:uint8
			family:uint8
			port:uint16
			addr:byte/*4*/
			zero:int8/*8*/
	}
	export interface RawSockaddrInet6 extends Struct<RawSockaddrInet6>{

			len:uint8
			family:uint8
			port:uint16
			flowinfo:uint32
			addr:byte/*16*/
			scope_id:uint32
	}
	export interface RawSockaddrUnix extends Struct<RawSockaddrUnix>{

			len:uint8
			family:uint8
			path:int8/*104*/
	}
	export function rawSyscall(trap:uintptr,a1:uintptr,a2:uintptr,a3:uintptr):[uintptr,uintptr,Errno]

	export function rawSyscall6(trap:uintptr,a1:uintptr,a2:uintptr,a3:uintptr,a4:uintptr,a5:uintptr,a6:uintptr):[uintptr,uintptr,Errno]

	export function read(fd:int,p:Uint8Array):int

	export function readDirent(fd:int,buf:Uint8Array):int

	export function readlink(path:string,buf:Uint8Array):int

	export function recvfrom(fd:int,p:Uint8Array,flags:int):[int,Sockaddr]

	export function recvmsg(fd:int,p:Uint8Array,oob:Uint8Array,flags:int):[int,int,int,Sockaddr]

	export function rename(from:string,to:string)/*error*/

	export function revoke(path:string)/*error*/

	export interface Rlimit extends Struct<Rlimit>{

			cur:uint64
			max:uint64
	}
	export function rmdir(path:string)/*error*/

	export interface RouteMessage extends Struct<RouteMessage>,RoutingMessage{

			header:RtMsghdr
			data:Uint8Array
	}
	export function routeRIB(facility:int,param:int):Uint8Array

	export interface RoutingMessage{

	}
	export interface RtMetrics extends Struct<RtMetrics>{

			locks:uint32
			mtu:uint32
			hopcount:uint32
			expire:int32
			recvpipe:uint32
			sendpipe:uint32
			ssthresh:uint32
			rtt:uint32
			rttvar:uint32
			pksent:uint32
			filler:uint32/*4*/
	}
	export interface RtMsghdr extends Struct<RtMsghdr>{

			msglen:uint16
			version:uint8
			type:uint8
			index:uint16
			pad_cgo_0:byte/*2*/
			flags:int32
			addrs:int32
			pid:int32
			seq:int32
			errno:int32
			use:int32
			inits:uint32
			rmx:RtMetrics
	}
	export interface Rusage extends Struct<Rusage>{

			utime:Timeval
			stime:Timeval
			maxrss:int64
			ixrss:int64
			idrss:int64
			isrss:int64
			minflt:int64
			majflt:int64
			nswap:int64
			inblock:int64
			oublock:int64
			msgsnd:int64
			msgrcv:int64
			nsignals:int64
			nvcsw:int64
			nivcsw:int64
	}
	//3
	export const SCM_CREDS:int
	//1
	export const SCM_RIGHTS:int
	//2
	export const SCM_TIMESTAMP:int
	//4
	export const SCM_TIMESTAMP_MONOTONIC:int
	//0
	export const SHUT_RD:int
	//2
	export const SHUT_RDWR:int
	//1
	export const SHUT_WR:int
	export const SIGABRT:Signal
	export const SIGALRM:Signal
	export const SIGBUS:Signal
	export const SIGCHLD:Signal
	export const SIGCONT:Signal
	export const SIGEMT:Signal
	export const SIGFPE:Signal
	export const SIGHUP:Signal
	export const SIGILL:Signal
	export const SIGINFO:Signal
	export const SIGINT:Signal
	export const SIGIO:Signal
	export const SIGIOT:Signal
	export const SIGKILL:Signal
	export const SIGPIPE:Signal
	export const SIGPROF:Signal
	export const SIGQUIT:Signal
	export const SIGSEGV:Signal
	export const SIGSTOP:Signal
	export const SIGSYS:Signal
	export const SIGTERM:Signal
	export const SIGTRAP:Signal
	export const SIGTSTP:Signal
	export const SIGTTIN:Signal
	export const SIGTTOU:Signal
	export const SIGURG:Signal
	export const SIGUSR1:Signal
	export const SIGUSR2:Signal
	export const SIGVTALRM:Signal
	export const SIGWINCH:Signal
	export const SIGXCPU:Signal
	export const SIGXFSZ:Signal
	//2149607729
	export const SIOCADDMULTI:int
	//2151704858
	export const SIOCAIFADDR:int
	//2165860637
	export const SIOCALIFADDR:int
	//3223349544
	export const SIOCARPIPLL:int
	//1074033415
	export const SIOCATMARK:int
	//3223349542
	export const SIOCAUTOADDR:int
	//2149607719
	export const SIOCAUTONETMASK:int
	//2149607730
	export const SIOCDELMULTI:int
	//2149607705
	export const SIOCDIFADDR:int
	//2149607745
	export const SIOCDIFPHYADDR:int
	//2165860639
	export const SIOCDLIFADDR:int
	//3223873915
	export const SIOCGDRVSPEC:int
	//3222565404
	export const SIOCGETSGCNT:int
	//3222565403
	export const SIOCGETVIFCNT:int
	//3223349631
	export const SIOCGETVLAN:int
	//1074033409
	export const SIOCGHIWAT:int
	//3223349537
	export const SIOCGIFADDR:int
	//3223349576
	export const SIOCGIFALTMTU:int
	//3223349628
	export const SIOCGIFASYNCMAP:int
	//3223349575
	export const SIOCGIFBOND:int
	//3223349539
	export const SIOCGIFBRDADDR:int
	//3223349595
	export const SIOCGIFCAP:int
	//3222038820
	export const SIOCGIFCONF:int
	//3223349572
	export const SIOCGIFDEVMTU:int
	//3223349538
	export const SIOCGIFDSTADDR:int
	//3223349521
	export const SIOCGIFFLAGS:int
	//3223349562
	export const SIOCGIFGENERIC:int
	//3223349639
	export const SIOCGIFKPI:int
	//3223349634
	export const SIOCGIFMAC:int
	//3224135992
	export const SIOCGIFMEDIA:int
	//3223349527
	export const SIOCGIFMETRIC:int
	//3223349555
	export const SIOCGIFMTU:int
	//3223349541
	export const SIOCGIFNETMASK:int
	//3223349568
	export const SIOCGIFPDSTADDR:int
	//3223349557
	export const SIOCGIFPHYS:int
	//3223349567
	export const SIOCGIFPSRCADDR:int
	//3274795325
	export const SIOCGIFSTATUS:int
	//3223349631
	export const SIOCGIFVLAN:int
	//3223349640
	export const SIOCGIFWAKEFLAGS:int
	//3239602462
	export const SIOCGLIFADDR:int
	//3239602499
	export const SIOCGLIFPHYADDR:int
	//1074033411
	export const SIOCGLOWAT:int
	//1074033417
	export const SIOCGPGRP:int
	//3223349624
	export const SIOCIFCREATE:int
	//3223349626
	export const SIOCIFCREATE2:int
	//2149607801
	export const SIOCIFDESTROY:int
	//3222300987
	export const SIOCRSLVMULTI:int
	//2150132091
	export const SIOCSDRVSPEC:int
	//2149607806
	export const SIOCSETVLAN:int
	//2147775232
	export const SIOCSHIWAT:int
	//2149607692
	export const SIOCSIFADDR:int
	//2149607749
	export const SIOCSIFALTMTU:int
	//2149607805
	export const SIOCSIFASYNCMAP:int
	//2149607750
	export const SIOCSIFBOND:int
	//2149607699
	export const SIOCSIFBRDADDR:int
	//2149607770
	export const SIOCSIFCAP:int
	//2149607694
	export const SIOCSIFDSTADDR:int
	//2149607696
	export const SIOCSIFFLAGS:int
	//2149607737
	export const SIOCSIFGENERIC:int
	//2149607814
	export const SIOCSIFKPI:int
	//2149607740
	export const SIOCSIFLLADDR:int
	//2149607811
	export const SIOCSIFMAC:int
	//3223349559
	export const SIOCSIFMEDIA:int
	//2149607704
	export const SIOCSIFMETRIC:int
	//2149607732
	export const SIOCSIFMTU:int
	//2149607702
	export const SIOCSIFNETMASK:int
	//2151704894
	export const SIOCSIFPHYADDR:int
	//2149607734
	export const SIOCSIFPHYS:int
	//2149607806
	export const SIOCSIFVLAN:int
	//2165860674
	export const SIOCSLIFPHYADDR:int
	//2147775234
	export const SIOCSLOWAT:int
	//2147775240
	export const SIOCSPGRP:int
	//2
	export const SOCK_DGRAM:int
	//255
	export const SOCK_MAXADDRLEN:int
	//3
	export const SOCK_RAW:int
	//4
	export const SOCK_RDM:int
	//5
	export const SOCK_SEQPACKET:int
	//1
	export const SOCK_STREAM:int
	//65535
	export const SOL_SOCKET:int
	//128
	export const SOMAXCONN:int
	//2
	export const SO_ACCEPTCONN:int
	//32
	export const SO_BROADCAST:int
	//1
	export const SO_DEBUG:int
	//16
	export const SO_DONTROUTE:int
	//8192
	export const SO_DONTTRUNC:int
	//4103
	export const SO_ERROR:int
	//8
	export const SO_KEEPALIVE:int
	//4112
	export const SO_LABEL:int
	//128
	export const SO_LINGER:int
	//4224
	export const SO_LINGER_SEC:int
	//4129
	export const SO_NKE:int
	//4131
	export const SO_NOADDRERR:int
	//4130
	export const SO_NOSIGPIPE:int
	//4134
	export const SO_NOTIFYCONFLICT:int
	//4227
	export const SO_NP_EXTENSIONS:int
	//4128
	export const SO_NREAD:int
	//4132
	export const SO_NWRITE:int
	//256
	export const SO_OOBINLINE:int
	//4113
	export const SO_PEERLABEL:int
	//4226
	export const SO_RANDOMPORT:int
	//4098
	export const SO_RCVBUF:int
	//4100
	export const SO_RCVLOWAT:int
	//4102
	export const SO_RCVTIMEO:int
	//4225
	export const SO_RESTRICTIONS:int
	//1
	export const SO_RESTRICT_DENYIN:int
	//2
	export const SO_RESTRICT_DENYOUT:int
	//2147483648
	export const SO_RESTRICT_DENYSET:int
	//4
	export const SO_REUSEADDR:int
	//512
	export const SO_REUSEPORT:int
	//4133
	export const SO_REUSESHAREUID:int
	//4097
	export const SO_SNDBUF:int
	//4099
	export const SO_SNDLOWAT:int
	//4101
	export const SO_SNDTIMEO:int
	//1024
	export const SO_TIMESTAMP:int
	//2048
	export const SO_TIMESTAMP_MONOTONIC:int
	//4104
	export const SO_TYPE:int
	//4135
	export const SO_UPCALLCLOSEWAIT:int
	//64
	export const SO_USELOOPBACK:int
	//16384
	export const SO_WANTMORE:int
	//32768
	export const SO_WANTOOBFLAG:int
	//30
	export const SYS_ACCEPT:int
	//404
	export const SYS_ACCEPT_NOCANCEL:int
	//33
	export const SYS_ACCESS:int
	//284
	export const SYS_ACCESS_EXTENDED:int
	//51
	export const SYS_ACCT:int
	//176
	export const SYS_ADD_PROFIL:int
	//140
	export const SYS_ADJTIME:int
	//316
	export const SYS_AIO_CANCEL:int
	//317
	export const SYS_AIO_ERROR:int
	//313
	export const SYS_AIO_FSYNC:int
	//318
	export const SYS_AIO_READ:int
	//314
	export const SYS_AIO_RETURN:int
	//315
	export const SYS_AIO_SUSPEND:int
	//421
	export const SYS_AIO_SUSPEND_NOCANCEL:int
	//319
	export const SYS_AIO_WRITE:int
	//207
	export const SYS_ATGETMSG:int
	//211
	export const SYS_ATPGETREQ:int
	//212
	export const SYS_ATPGETRSP:int
	//209
	export const SYS_ATPSNDREQ:int
	//210
	export const SYS_ATPSNDRSP:int
	//208
	export const SYS_ATPUTMSG:int
	//206
	export const SYS_ATSOCKET:int
	//350
	export const SYS_AUDIT:int
	//359
	export const SYS_AUDITCTL:int
	//351
	export const SYS_AUDITON:int
	//429
	export const SYS_AUDIT_SESSION_JOIN:int
	//432
	export const SYS_AUDIT_SESSION_PORT:int
	//428
	export const SYS_AUDIT_SESSION_SELF:int
	//104
	export const SYS_BIND:int
	//360
	export const SYS_BSDTHREAD_CREATE:int
	//366
	export const SYS_BSDTHREAD_REGISTER:int
	//361
	export const SYS_BSDTHREAD_TERMINATE:int
	//12
	export const SYS_CHDIR:int
	//34
	export const SYS_CHFLAGS:int
	//15
	export const SYS_CHMOD:int
	//282
	export const SYS_CHMOD_EXTENDED:int
	//16
	export const SYS_CHOWN:int
	//61
	export const SYS_CHROOT:int
	//185
	export const SYS_CHUD:int
	//6
	export const SYS_CLOSE:int
	//399
	export const SYS_CLOSE_NOCANCEL:int
	//98
	export const SYS_CONNECT:int
	//409
	export const SYS_CONNECT_NOCANCEL:int
	//227
	export const SYS_COPYFILE:int
	//169
	export const SYS_CSOPS:int
	//226
	export const SYS_DELETE:int
	//41
	export const SYS_DUP:int
	//90
	export const SYS_DUP2:int
	//223
	export const SYS_EXCHANGEDATA:int
	//59
	export const SYS_EXECVE:int
	//1
	export const SYS_EXIT:int
	//13
	export const SYS_FCHDIR:int
	//35
	export const SYS_FCHFLAGS:int
	//124
	export const SYS_FCHMOD:int
	//283
	export const SYS_FCHMOD_EXTENDED:int
	//123
	export const SYS_FCHOWN:int
	//92
	export const SYS_FCNTL:int
	//406
	export const SYS_FCNTL_NOCANCEL:int
	//187
	export const SYS_FDATASYNC:int
	//245
	export const SYS_FFSCTL:int
	//228
	export const SYS_FGETATTRLIST:int
	//235
	export const SYS_FGETXATTR:int
	//248
	export const SYS_FHOPEN:int
	//431
	export const SYS_FILEPORT_MAKEFD:int
	//430
	export const SYS_FILEPORT_MAKEPORT:int
	//241
	export const SYS_FLISTXATTR:int
	//131
	export const SYS_FLOCK:int
	//2
	export const SYS_FORK:int
	//192
	export const SYS_FPATHCONF:int
	//239
	export const SYS_FREMOVEXATTR:int
	//242
	export const SYS_FSCTL:int
	//229
	export const SYS_FSETATTRLIST:int
	//237
	export const SYS_FSETXATTR:int
	//427
	export const SYS_FSGETPATH:int
	//189
	export const SYS_FSTAT:int
	//339
	export const SYS_FSTAT64:int
	//343
	export const SYS_FSTAT64_EXTENDED:int
	//158
	export const SYS_FSTATFS:int
	//346
	export const SYS_FSTATFS64:int
	//219
	export const SYS_FSTATV:int
	//281
	export const SYS_FSTAT_EXTENDED:int
	//95
	export const SYS_FSYNC:int
	//408
	export const SYS_FSYNC_NOCANCEL:int
	//201
	export const SYS_FTRUNCATE:int
	//139
	export const SYS_FUTIMES:int
	//220
	export const SYS_GETATTRLIST:int
	//355
	export const SYS_GETAUDIT:int
	//357
	export const SYS_GETAUDIT_ADDR:int
	//353
	export const SYS_GETAUID:int
	//196
	export const SYS_GETDIRENTRIES:int
	//344
	export const SYS_GETDIRENTRIES64:int
	//222
	export const SYS_GETDIRENTRIESATTR:int
	//89
	export const SYS_GETDTABLESIZE:int
	//43
	export const SYS_GETEGID:int
	//25
	export const SYS_GETEUID:int
	//161
	export const SYS_GETFH:int
	//18
	export const SYS_GETFSSTAT:int
	//347
	export const SYS_GETFSSTAT64:int
	//47
	export const SYS_GETGID:int
	//79
	export const SYS_GETGROUPS:int
	//142
	export const SYS_GETHOSTUUID:int
	//86
	export const SYS_GETITIMER:int
	//395
	export const SYS_GETLCID:int
	//49
	export const SYS_GETLOGIN:int
	//31
	export const SYS_GETPEERNAME:int
	//151
	export const SYS_GETPGID:int
	//81
	export const SYS_GETPGRP:int
	//20
	export const SYS_GETPID:int
	//39
	export const SYS_GETPPID:int
	//100
	export const SYS_GETPRIORITY:int
	//194
	export const SYS_GETRLIMIT:int
	//117
	export const SYS_GETRUSAGE:int
	//288
	export const SYS_GETSGROUPS:int
	//310
	export const SYS_GETSID:int
	//32
	export const SYS_GETSOCKNAME:int
	//118
	export const SYS_GETSOCKOPT:int
	//286
	export const SYS_GETTID:int
	//116
	export const SYS_GETTIMEOFDAY:int
	//24
	export const SYS_GETUID:int
	//290
	export const SYS_GETWGROUPS:int
	//234
	export const SYS_GETXATTR:int
	//293
	export const SYS_IDENTITYSVC:int
	//243
	export const SYS_INITGROUPS:int
	//54
	export const SYS_IOCTL:int
	//322
	export const SYS_IOPOLICYSYS:int
	//327
	export const SYS_ISSETUGID:int
	//180
	export const SYS_KDEBUG_TRACE:int
	//363
	export const SYS_KEVENT:int
	//369
	export const SYS_KEVENT64:int
	//37
	export const SYS_KILL:int
	//362
	export const SYS_KQUEUE:int
	//364
	export const SYS_LCHOWN:int
	//9
	export const SYS_LINK:int
	//320
	export const SYS_LIO_LISTIO:int
	//106
	export const SYS_LISTEN:int
	//240
	export const SYS_LISTXATTR:int
	//199
	export const SYS_LSEEK:int
	//190
	export const SYS_LSTAT:int
	//340
	export const SYS_LSTAT64:int
	//342
	export const SYS_LSTAT64_EXTENDED:int
	//218
	export const SYS_LSTATV:int
	//280
	export const SYS_LSTAT_EXTENDED:int
	//75
	export const SYS_MADVISE:int
	//439
	export const SYS_MAXSYSCALL:int
	//78
	export const SYS_MINCORE:int
	//250
	export const SYS_MINHERIT:int
	//216
	export const SYS_MKCOMPLEX:int
	//136
	export const SYS_MKDIR:int
	//292
	export const SYS_MKDIR_EXTENDED:int
	//132
	export const SYS_MKFIFO:int
	//291
	export const SYS_MKFIFO_EXTENDED:int
	//14
	export const SYS_MKNOD:int
	//203
	export const SYS_MLOCK:int
	//324
	export const SYS_MLOCKALL:int
	//197
	export const SYS_MMAP:int
	//233
	export const SYS_MODWATCH:int
	//167
	export const SYS_MOUNT:int
	//74
	export const SYS_MPROTECT:int
	//258
	export const SYS_MSGCTL:int
	//259
	export const SYS_MSGGET:int
	//261
	export const SYS_MSGRCV:int
	//419
	export const SYS_MSGRCV_NOCANCEL:int
	//260
	export const SYS_MSGSND:int
	//418
	export const SYS_MSGSND_NOCANCEL:int
	//252
	export const SYS_MSGSYS:int
	//65
	export const SYS_MSYNC:int
	//405
	export const SYS_MSYNC_NOCANCEL:int
	//204
	export const SYS_MUNLOCK:int
	//325
	export const SYS_MUNLOCKALL:int
	//73
	export const SYS_MUNMAP:int
	//247
	export const SYS_NFSCLNT:int
	//155
	export const SYS_NFSSVC:int
	//5
	export const SYS_OPEN:int
	//277
	export const SYS_OPEN_EXTENDED:int
	//398
	export const SYS_OPEN_NOCANCEL:int
	//191
	export const SYS_PATHCONF:int
	//435
	export const SYS_PID_HIBERNATE:int
	//434
	export const SYS_PID_RESUME:int
	//436
	export const SYS_PID_SHUTDOWN_SOCKETS:int
	//433
	export const SYS_PID_SUSPEND:int
	//42
	export const SYS_PIPE:int
	//230
	export const SYS_POLL:int
	//417
	export const SYS_POLL_NOCANCEL:int
	//244
	export const SYS_POSIX_SPAWN:int
	//153
	export const SYS_PREAD:int
	//414
	export const SYS_PREAD_NOCANCEL:int
	//323
	export const SYS_PROCESS_POLICY:int
	//336
	export const SYS_PROC_INFO:int
	//44
	export const SYS_PROFIL:int
	//303
	export const SYS_PSYNCH_CVBROAD:int
	//312
	export const SYS_PSYNCH_CVCLRPREPOST:int
	//304
	export const SYS_PSYNCH_CVSIGNAL:int
	//305
	export const SYS_PSYNCH_CVWAIT:int
	//302
	export const SYS_PSYNCH_MUTEXDROP:int
	//301
	export const SYS_PSYNCH_MUTEXWAIT:int
	//299
	export const SYS_PSYNCH_RW_DOWNGRADE:int
	//297
	export const SYS_PSYNCH_RW_LONGRDLOCK:int
	//306
	export const SYS_PSYNCH_RW_RDLOCK:int
	//308
	export const SYS_PSYNCH_RW_UNLOCK:int
	//309
	export const SYS_PSYNCH_RW_UNLOCK2:int
	//300
	export const SYS_PSYNCH_RW_UPGRADE:int
	//307
	export const SYS_PSYNCH_RW_WRLOCK:int
	//298
	export const SYS_PSYNCH_RW_YIELDWRLOCK:int
	//26
	export const SYS_PTRACE:int
	//154
	export const SYS_PWRITE:int
	//415
	export const SYS_PWRITE_NOCANCEL:int
	//165
	export const SYS_QUOTACTL:int
	//3
	export const SYS_READ:int
	//58
	export const SYS_READLINK:int
	//120
	export const SYS_READV:int
	//411
	export const SYS_READV_NOCANCEL:int
	//396
	export const SYS_READ_NOCANCEL:int
	//55
	export const SYS_REBOOT:int
	//29
	export const SYS_RECVFROM:int
	//403
	export const SYS_RECVFROM_NOCANCEL:int
	//27
	export const SYS_RECVMSG:int
	//401
	export const SYS_RECVMSG_NOCANCEL:int
	//238
	export const SYS_REMOVEXATTR:int
	//128
	export const SYS_RENAME:int
	//56
	export const SYS_REVOKE:int
	//137
	export const SYS_RMDIR:int
	//225
	export const SYS_SEARCHFS:int
	//93
	export const SYS_SELECT:int
	//407
	export const SYS_SELECT_NOCANCEL:int
	//254
	export const SYS_SEMCTL:int
	//255
	export const SYS_SEMGET:int
	//256
	export const SYS_SEMOP:int
	//251
	export const SYS_SEMSYS:int
	//269
	export const SYS_SEM_CLOSE:int
	//276
	export const SYS_SEM_DESTROY:int
	//274
	export const SYS_SEM_GETVALUE:int
	//275
	export const SYS_SEM_INIT:int
	//268
	export const SYS_SEM_OPEN:int
	//273
	export const SYS_SEM_POST:int
	//272
	export const SYS_SEM_TRYWAIT:int
	//270
	export const SYS_SEM_UNLINK:int
	//271
	export const SYS_SEM_WAIT:int
	//420
	export const SYS_SEM_WAIT_NOCANCEL:int
	//337
	export const SYS_SENDFILE:int
	//28
	export const SYS_SENDMSG:int
	//402
	export const SYS_SENDMSG_NOCANCEL:int
	//133
	export const SYS_SENDTO:int
	//413
	export const SYS_SENDTO_NOCANCEL:int
	//221
	export const SYS_SETATTRLIST:int
	//356
	export const SYS_SETAUDIT:int
	//358
	export const SYS_SETAUDIT_ADDR:int
	//354
	export const SYS_SETAUID:int
	//182
	export const SYS_SETEGID:int
	//183
	export const SYS_SETEUID:int
	//181
	export const SYS_SETGID:int
	//80
	export const SYS_SETGROUPS:int
	//83
	export const SYS_SETITIMER:int
	//394
	export const SYS_SETLCID:int
	//50
	export const SYS_SETLOGIN:int
	//82
	export const SYS_SETPGID:int
	//96
	export const SYS_SETPRIORITY:int
	//152
	export const SYS_SETPRIVEXEC:int
	//127
	export const SYS_SETREGID:int
	//126
	export const SYS_SETREUID:int
	//195
	export const SYS_SETRLIMIT:int
	//287
	export const SYS_SETSGROUPS:int
	//147
	export const SYS_SETSID:int
	//105
	export const SYS_SETSOCKOPT:int
	//285
	export const SYS_SETTID:int
	//311
	export const SYS_SETTID_WITH_PID:int
	//122
	export const SYS_SETTIMEOFDAY:int
	//23
	export const SYS_SETUID:int
	//289
	export const SYS_SETWGROUPS:int
	//236
	export const SYS_SETXATTR:int
	//294
	export const SYS_SHARED_REGION_CHECK_NP:int
	//438
	export const SYS_SHARED_REGION_MAP_AND_SLIDE_NP:int
	//262
	export const SYS_SHMAT:int
	//263
	export const SYS_SHMCTL:int
	//264
	export const SYS_SHMDT:int
	//265
	export const SYS_SHMGET:int
	//253
	export const SYS_SHMSYS:int
	//266
	export const SYS_SHM_OPEN:int
	//267
	export const SYS_SHM_UNLINK:int
	//134
	export const SYS_SHUTDOWN:int
	//46
	export const SYS_SIGACTION:int
	//53
	export const SYS_SIGALTSTACK:int
	//52
	export const SYS_SIGPENDING:int
	//48
	export const SYS_SIGPROCMASK:int
	//184
	export const SYS_SIGRETURN:int
	//111
	export const SYS_SIGSUSPEND:int
	//410
	export const SYS_SIGSUSPEND_NOCANCEL:int
	//97
	export const SYS_SOCKET:int
	//135
	export const SYS_SOCKETPAIR:int
	//365
	export const SYS_STACK_SNAPSHOT:int
	//188
	export const SYS_STAT:int
	//338
	export const SYS_STAT64:int
	//341
	export const SYS_STAT64_EXTENDED:int
	//157
	export const SYS_STATFS:int
	//345
	export const SYS_STATFS64:int
	//217
	export const SYS_STATV:int
	//279
	export const SYS_STAT_EXTENDED:int
	//85
	export const SYS_SWAPON:int
	//57
	export const SYS_SYMLINK:int
	//36
	export const SYS_SYNC:int
	//0
	export const SYS_SYSCALL:int
	//372
	export const SYS_THREAD_SELFID:int
	//200
	export const SYS_TRUNCATE:int
	//60
	export const SYS_UMASK:int
	//278
	export const SYS_UMASK_EXTENDED:int
	//205
	export const SYS_UNDELETE:int
	//10
	export const SYS_UNLINK:int
	//159
	export const SYS_UNMOUNT:int
	//138
	export const SYS_UTIMES:int
	//66
	export const SYS_VFORK:int
	//296
	export const SYS_VM_PRESSURE_MONITOR:int
	//7
	export const SYS_WAIT4:int
	//400
	export const SYS_WAIT4_NOCANCEL:int
	//232
	export const SYS_WAITEVENT:int
	//173
	export const SYS_WAITID:int
	//416
	export const SYS_WAITID_NOCANCEL:int
	//231
	export const SYS_WATCHEVENT:int
	//368
	export const SYS_WORKQ_KERNRETURN:int
	//367
	export const SYS_WORKQ_OPEN:int
	//4
	export const SYS_WRITE:int
	//121
	export const SYS_WRITEV:int
	//412
	export const SYS_WRITEV_NOCANCEL:int
	//397
	export const SYS_WRITE_NOCANCEL:int
	//331
	export const SYS___DISABLE_THREADSIGNAL:int
	//380
	export const SYS___MAC_EXECVE:int
	//426
	export const SYS___MAC_GETFSSTAT:int
	//388
	export const SYS___MAC_GET_FD:int
	//382
	export const SYS___MAC_GET_FILE:int
	//391
	export const SYS___MAC_GET_LCID:int
	//392
	export const SYS___MAC_GET_LCTX:int
	//384
	export const SYS___MAC_GET_LINK:int
	//425
	export const SYS___MAC_GET_MOUNT:int
	//390
	export const SYS___MAC_GET_PID:int
	//386
	export const SYS___MAC_GET_PROC:int
	//424
	export const SYS___MAC_MOUNT:int
	//389
	export const SYS___MAC_SET_FD:int
	//383
	export const SYS___MAC_SET_FILE:int
	//393
	export const SYS___MAC_SET_LCTX:int
	//385
	export const SYS___MAC_SET_LINK:int
	//387
	export const SYS___MAC_SET_PROC:int
	//381
	export const SYS___MAC_SYSCALL:int
	//370
	export const SYS___OLD_SEMWAIT_SIGNAL:int
	//371
	export const SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL:int
	//333
	export const SYS___PTHREAD_CANCELED:int
	//348
	export const SYS___PTHREAD_CHDIR:int
	//349
	export const SYS___PTHREAD_FCHDIR:int
	//328
	export const SYS___PTHREAD_KILL:int
	//332
	export const SYS___PTHREAD_MARKCANCEL:int
	//329
	export const SYS___PTHREAD_SIGMASK:int
	//334
	export const SYS___SEMWAIT_SIGNAL:int
	//423
	export const SYS___SEMWAIT_SIGNAL_NOCANCEL:int
	//330
	export const SYS___SIGWAIT:int
	//422
	export const SYS___SIGWAIT_NOCANCEL:int
	//202
	export const SYS___SYSCTL:int
	//64
	export const S_IEXEC:int
	//24576
	export const S_IFBLK:int
	//8192
	export const S_IFCHR:int
	//16384
	export const S_IFDIR:int
	//4096
	export const S_IFIFO:int
	//40960
	export const S_IFLNK:int
	//61440
	export const S_IFMT:int
	//32768
	export const S_IFREG:int
	//49152
	export const S_IFSOCK:int
	//57344
	export const S_IFWHT:int
	//256
	export const S_IREAD:int
	//32
	export const S_IRGRP:int
	//4
	export const S_IROTH:int
	//256
	export const S_IRUSR:int
	//56
	export const S_IRWXG:int
	//7
	export const S_IRWXO:int
	//448
	export const S_IRWXU:int
	//1024
	export const S_ISGID:int
	//512
	export const S_ISTXT:int
	//2048
	export const S_ISUID:int
	//512
	export const S_ISVTX:int
	//16
	export const S_IWGRP:int
	//2
	export const S_IWOTH:int
	//128
	export const S_IWRITE:int
	//128
	export const S_IWUSR:int
	//8
	export const S_IXGRP:int
	//1
	export const S_IXOTH:int
	//64
	export const S_IXUSR:int
	export function seek(fd:int,offset:int64,whence:int):int64

	export function select(n:int,r:Ref<FdSet>,w:Ref<FdSet>,e:Ref<FdSet>,timeout:Ref<Timeval>)/*error*/

	export function sendfile(outfd:int,infd:int,offset:Ref<int64>,count:int):int

	export function sendmsg(fd:int,p:Uint8Array,oob:Uint8Array,to:Sockaddr,flags:int)/*error*/

	export function sendmsgN(fd:int,p:Uint8Array,oob:Uint8Array,to:Sockaddr,flags:int):int

	export function sendto(fd:int,p:Uint8Array,flags:int,to:Sockaddr)/*error*/

	export function setBpf(fd:int,i:BpfInsn[])/*error*/

	export function setBpfBuflen(fd:int,l:int):int

	export function setBpfDatalink(fd:int,t:int):int

	export function setBpfHeadercmpl(fd:int,f:int)/*error*/

	export function setBpfImmediate(fd:int,m:int)/*error*/

	export function setBpfInterface(fd:int,name:string)/*error*/

	export function setBpfPromisc(fd:int,m:int)/*error*/

	export function setBpfTimeout(fd:int,tv:Ref<Timeval>)/*error*/

	export function setKevent(k:Ref<Kevent_t>,fd:int,mode:int,flags:int):void

	export function setNonblock(fd:int,nonblocking:bool)/*error*/

	export function setegid(egid:int)/*error*/

	export function setenv(key:string,value:string)/*error*/

	export function seteuid(euid:int)/*error*/

	export function setgid(gid:int)/*error*/

	export function setgroups(gids:int[])/*error*/

	export function setlogin(name:string)/*error*/

	export function setpgid(pid:int,pgid:int)/*error*/

	export function setpriority(which:int,who:int,prio:int)/*error*/

	export function setprivexec(flag:int)/*error*/

	export function setregid(rgid:int,egid:int)/*error*/

	export function setreuid(ruid:int,euid:int)/*error*/

	export function setrlimit(resource:int,rlim:Ref<Rlimit>)/*error*/

	export function setsid():int

	export function setsockoptByte(fd:int,level:int,opt:int,value:byte)/*error*/

	export function setsockoptICMPv6Filter(fd:int,level:int,opt:int,filter:Ref<ICMPv6Filter>)/*error*/

	export function setsockoptIPMreq(fd:int,level:int,opt:int,mreq:Ref<IPMreq>)/*error*/

	export function setsockoptIPv6Mreq(fd:int,level:int,opt:int,mreq:Ref<IPv6Mreq>)/*error*/

	export function setsockoptInet4Addr(fd:int,level:int,opt:int,value:byte/*4*/)/*error*/

	export function setsockoptInt(fd:int,level:int,opt:int,value:int)/*error*/

	export function setsockoptLinger(fd:int,level:int,opt:int,l:Ref<Linger>)/*error*/

	export function setsockoptString(fd:int,level:int,opt:int,s:string)/*error*/

	export function setsockoptTimeval(fd:int,level:int,opt:int,tv:Ref<Timeval>)/*error*/

	export function settimeofday(tp:Ref<Timeval>)/*error*/

	export function setuid(uid:int)/*error*/

	export function shutdown(s:int,how:int)/*error*/

	export interface Signal extends int{

	signal():void
	string():string
	}
	//20
	export const SizeofBpfHdr:int
	//8
	export const SizeofBpfInsn:int
	//16
	export const SizeofBpfProgram:int
	//8
	export const SizeofBpfStat:int
	//4
	export const SizeofBpfVersion:int
	//12
	export const SizeofCmsghdr:int
	//32
	export const SizeofICMPv6Filter:int
	//8
	export const SizeofIPMreq:int
	//32
	export const SizeofIPv6MTUInfo:int
	//20
	export const SizeofIPv6Mreq:int
	//96
	export const SizeofIfData:int
	//112
	export const SizeofIfMsghdr:int
	//20
	export const SizeofIfaMsghdr:int
	//16
	export const SizeofIfmaMsghdr:int
	//20
	export const SizeofIfmaMsghdr2:int
	//12
	export const SizeofInet4Pktinfo:int
	//20
	export const SizeofInet6Pktinfo:int
	//8
	export const SizeofLinger:int
	//48
	export const SizeofMsghdr:int
	//56
	export const SizeofRtMetrics:int
	//92
	export const SizeofRtMsghdr:int
	//108
	export const SizeofSockaddrAny:int
	//20
	export const SizeofSockaddrDatalink:int
	//16
	export const SizeofSockaddrInet4:int
	//28
	export const SizeofSockaddrInet6:int
	//106
	export const SizeofSockaddrUnix:int
	export function slicePtrFromStrings(ss:string[]):Ref<Uint8Array>[]

	export interface Sockaddr{

	}
	export interface SockaddrDatalink extends Sockaddr,Struct<SockaddrDatalink>{

			len:uint8
			family:uint8
			index:uint16
			type:uint8
			nlen:uint8
			alen:uint8
			slen:uint8
			data:int8/*12*/
	}
	export interface SockaddrInet4 extends Struct<SockaddrInet4>,Sockaddr{

			port:int
			addr:byte/*4*/
	}
	export interface SockaddrInet6 extends Struct<SockaddrInet6>,Sockaddr{

			port:int
			zoneId:uint32
			addr:byte/*16*/
	}
	export interface SockaddrUnix extends Struct<SockaddrUnix>,Sockaddr{

			name:string
	}
	export function socket(domain:int,typ:int,proto:int):int

	export interface SocketControlMessage extends Struct<SocketControlMessage>{

			header:Cmsghdr
			data:Uint8Array
	}
	export const SocketDisableIPv6:bool
	export function socketpair(domain:int,typ:int,proto:int):int/*2*/

	export function startProcess(argv0:string,argv:string[],attr:Ref<ProcAttr>):[int,uintptr]

	export function stat(path:string,stat:Ref<Stat_t>)/*error*/

	export interface Stat_t extends Struct<Stat_t>{

			dev:int32
			mode:uint16
			nlink:uint16
			ino:uint64
			uid:uint32
			gid:uint32
			rdev:int32
			pad_cgo_0:byte/*4*/
			atimespec:Timespec
			mtimespec:Timespec
			ctimespec:Timespec
			birthtimespec:Timespec
			size:int64
			blocks:int64
			blksize:int32
			flags:uint32
			gen:uint32
			lspare:int32
			qspare:int64/*2*/
	}
	export function statfs(path:string,stat:Ref<Statfs_t>)/*error*/

	export interface Statfs_t extends Struct<Statfs_t>{

			bsize:uint32
			iosize:int32
			blocks:uint64
			bfree:uint64
			bavail:uint64
			files:uint64
			ffree:uint64
			fsid:Fsid
			owner:uint32
			type:uint32
			flags:uint32
			fssubtype:uint32
			fstypename:int8/*16*/
			mntonname:int8/*1024*/
			mntfromname:int8/*1024*/
			reserved:uint32/*8*/
	}
	export const Stderr:int
	export const Stdin:int
	export const Stdout:int
	export function stringBytePtr(s:string):Ref<byte>

	export function stringByteSlice(s:string):Uint8Array

	export function stringSlicePtr(ss:string[]):Ref<Uint8Array>[]

	export function symlink(path:string,link:string)/*error*/

	export function sync()/*error*/

	export interface SysProcAttr extends Struct<SysProcAttr>{

			chroot:string
			credential:Ref<Credential>
			ptrace:bool
			setsid:bool
			setpgid:bool
			setctty:bool
			noctty:bool
			ctty:int
			foreground:bool
			pgid:int
	}
	export function syscall(trap:uintptr,a1:uintptr,a2:uintptr,a3:uintptr):[uintptr,uintptr,Errno]

	export function syscall6(trap:uintptr,a1:uintptr,a2:uintptr,a3:uintptr,a4:uintptr,a5:uintptr,a6:uintptr):[uintptr,uintptr,Errno]

	export function syscall9(trap:uintptr,a1:uintptr,a2:uintptr,a3:uintptr,a4:uintptr,a5:uintptr,a6:uintptr,a7:uintptr,a8:uintptr,a9:uintptr):[uintptr,uintptr,Errno]

	export function sysctl(name:string):string

	export function sysctlUint32(name:string):uint32

	//1
	export const TCIFLUSH:int
	//3
	export const TCIOFLUSH:int
	//2
	export const TCOFLUSH:int
	//32
	export const TCP_CONNECTIONTIMEOUT:int
	//16
	export const TCP_KEEPALIVE:int
	//60
	export const TCP_MAXHLEN:int
	//40
	export const TCP_MAXOLEN:int
	//2
	export const TCP_MAXSEG:int
	//65535
	export const TCP_MAXWIN:int
	//3
	export const TCP_MAX_SACK:int
	//14
	export const TCP_MAX_WINSHIFT:int
	//216
	export const TCP_MINMSS:int
	//1000
	export const TCP_MINMSSOVERLOAD:int
	//512
	export const TCP_MSS:int
	//1
	export const TCP_NODELAY:int
	//8
	export const TCP_NOOPT:int
	//4
	export const TCP_NOPUSH:int
	//128
	export const TCP_RXT_CONNDROPTIME:int
	//256
	export const TCP_RXT_FINDROP:int
	//2
	export const TCSAFLUSH:int
	//536900730
	export const TIOCCBRK:int
	//536900728
	export const TIOCCDTR:int
	//2147775586
	export const TIOCCONS:int
	//1074820184
	export const TIOCDCDTIMESTAMP:int
	//536900702
	export const TIOCDRAIN:int
	//536900693
	export const TIOCDSIMICROCODE:int
	//536900621
	export const TIOCEXCL:int
	//2147775584
	export const TIOCEXT:int
	//2147775504
	export const TIOCFLUSH:int
	//1074033750
	export const TIOCGDRAINWAIT:int
	//1078490131
	export const TIOCGETA:int
	//1074033690
	export const TIOCGETD:int
	//1074033783
	export const TIOCGPGRP:int
	//1074295912
	export const TIOCGWINSZ:int
	//536900736
	export const TIOCIXOFF:int
	//536900737
	export const TIOCIXON:int
	//2147775595
	export const TIOCMBIC:int
	//2147775596
	export const TIOCMBIS:int
	//1074033754
	export const TIOCMGDTRWAIT:int
	//1074033770
	export const TIOCMGET:int
	//1074033667
	export const TIOCMODG:int
	//2147775492
	export const TIOCMODS:int
	//2147775579
	export const TIOCMSDTRWAIT:int
	//2147775597
	export const TIOCMSET:int
	//64
	export const TIOCM_CAR:int
	//64
	export const TIOCM_CD:int
	//32
	export const TIOCM_CTS:int
	//256
	export const TIOCM_DSR:int
	//2
	export const TIOCM_DTR:int
	//1
	export const TIOCM_LE:int
	//128
	export const TIOCM_RI:int
	//128
	export const TIOCM_RNG:int
	//4
	export const TIOCM_RTS:int
	//16
	export const TIOCM_SR:int
	//8
	export const TIOCM_ST:int
	//536900721
	export const TIOCNOTTY:int
	//536900622
	export const TIOCNXCL:int
	//1074033779
	export const TIOCOUTQ:int
	//2147775600
	export const TIOCPKT:int
	//0
	export const TIOCPKT_DATA:int
	//32
	export const TIOCPKT_DOSTOP:int
	//1
	export const TIOCPKT_FLUSHREAD:int
	//2
	export const TIOCPKT_FLUSHWRITE:int
	//64
	export const TIOCPKT_IOCTL:int
	//16
	export const TIOCPKT_NOSTOP:int
	//8
	export const TIOCPKT_START:int
	//4
	export const TIOCPKT_STOP:int
	//1082160211
	export const TIOCPTYGNAME:int
	//536900692
	export const TIOCPTYGRANT:int
	//536900690
	export const TIOCPTYUNLK:int
	//2147775593
	export const TIOCREMOTE:int
	//536900731
	export const TIOCSBRK:int
	//536900707
	export const TIOCSCONS:int
	//536900705
	export const TIOCSCTTY:int
	//2147775575
	export const TIOCSDRAINWAIT:int
	//536900729
	export const TIOCSDTR:int
	//2152231956
	export const TIOCSETA:int
	//2152231958
	export const TIOCSETAF:int
	//2152231957
	export const TIOCSETAW:int
	//2147775515
	export const TIOCSETD:int
	//536900703
	export const TIOCSIG:int
	//2147775606
	export const TIOCSPGRP:int
	//536900718
	export const TIOCSTART:int
	//536900709
	export const TIOCSTAT:int
	//2147578994
	export const TIOCSTI:int
	//536900719
	export const TIOCSTOP:int
	//2148037735
	export const TIOCSWINSZ:int
	//1074820185
	export const TIOCTIMESTAMP:int
	//2147775590
	export const TIOCUCNTL:int
	//4194304
	export const TOSTOP:int
	export interface Termios extends Struct<Termios>{

			iflag:uint64
			oflag:uint64
			cflag:uint64
			lflag:uint64
			cc:uint8/*20*/
			pad_cgo_0:byte/*4*/
			ispeed:uint64
			ospeed:uint64
	}
	export interface Timespec extends Struct<Timespec>{

			sec:int64
			nsec:int64
			unix():[int64,int64]
			nano():int64
	}
	export function timespecToNsec(ts:Timespec):int64

	export interface Timeval extends Struct<Timeval>{

			sec:int64
			usec:int32
			pad_cgo_0:byte/*4*/
			unix():[int64,int64]
			nano():int64
	}
	export interface Timeval32 extends Struct<Timeval32>{

			sec:int32
			usec:int32
	}
	export function timevalToNsec(tv:Timeval):int64

	export function truncate(path:string,length:int64)/*error*/

	export function umask(newmask:int):int

	export function undelete(path:string)/*error*/

	export function unixRights(...fds:int[]):Uint8Array

	export function unlink(path:string)/*error*/

	export function unmount(path:string,flags:int)/*error*/

	export function unsetenv(key:string)/*error*/

	export function utimes(path:string,tv:Timeval[])/*error*/

	export function utimesNano(path:string,ts:Timespec[])/*error*/

	//15
	export const VDISCARD:int
	//11
	export const VDSUSP:int
	//0
	export const VEOF:int
	//1
	export const VEOL:int
	//2
	export const VEOL2:int
	//3
	export const VERASE:int
	//8
	export const VINTR:int
	//5
	export const VKILL:int
	//14
	export const VLNEXT:int
	//16
	export const VMIN:int
	//9
	export const VQUIT:int
	//6
	export const VREPRINT:int
	//12
	export const VSTART:int
	//18
	export const VSTATUS:int
	//13
	export const VSTOP:int
	//10
	export const VSUSP:int
	//0
	export const VT0:int
	//65536
	export const VT1:int
	//65536
	export const VTDLY:int
	//17
	export const VTIME:int
	//4
	export const VWERASE:int
	//16
	export const WCONTINUED:int
	//128
	export const WCOREFLAG:int
	//4
	export const WEXITED:int
	//1
	export const WNOHANG:int
	//32
	export const WNOWAIT:int
	//64
	export const WORDSIZE:int
	//8
	export const WSTOPPED:int
	//2
	export const WUNTRACED:int
	export function wait4(pid:int,wstatus:Ref<WaitStatus>,options:int,rusage:Ref<Rusage>):int

	export interface WaitStatus extends uint32{

	exited():bool
	exitStatus():int
	signaled():bool
	signal():Signal
	coreDump():bool
	stopped():bool
	continued():bool
	stopSignal():Signal
	trapCause():int
	}
	export function write(fd:int,p:Uint8Array):int

	export function emptyIPv6MTUInfo():IPv6MTUInfo
	export function emptyRefIPv6MTUInfo():Ref<IPv6MTUInfo>
	export function refOfIPv6MTUInfo(x:IPv6MTUInfo,v:Ref<IPv6MTUInfo>)
	export function unRefIPv6MTUInfo(v:Ref<IPv6MTUInfo>):IPv6MTUInfo
	export function emptyKevent_t():Kevent_t
	export function emptyRefKevent_t():Ref<Kevent_t>
	export function refOfKevent_t(x:Kevent_t,v:Ref<Kevent_t>)
	export function unRefKevent_t(v:Ref<Kevent_t>):Kevent_t
	export function emptyIfaMsghdr():IfaMsghdr
	export function emptyRefIfaMsghdr():Ref<IfaMsghdr>
	export function refOfIfaMsghdr(x:IfaMsghdr,v:Ref<IfaMsghdr>)
	export function unRefIfaMsghdr(v:Ref<IfaMsghdr>):IfaMsghdr
	export function emptyInterfaceAddrMessage():InterfaceAddrMessage
	export function emptyRefInterfaceAddrMessage():Ref<InterfaceAddrMessage>
	export function refOfInterfaceAddrMessage(x:InterfaceAddrMessage,v:Ref<InterfaceAddrMessage>)
	export function unRefInterfaceAddrMessage(v:Ref<InterfaceAddrMessage>):InterfaceAddrMessage
	export function emptyLog2phys_t():Log2phys_t
	export function emptyRefLog2phys_t():Ref<Log2phys_t>
	export function refOfLog2phys_t(x:Log2phys_t,v:Ref<Log2phys_t>)
	export function unRefLog2phys_t(v:Ref<Log2phys_t>):Log2phys_t
	export function emptyBpfProgram():BpfProgram
	export function emptyRefBpfProgram():Ref<BpfProgram>
	export function refOfBpfProgram(x:BpfProgram,v:Ref<BpfProgram>)
	export function unRefBpfProgram(v:Ref<BpfProgram>):BpfProgram
	export function emptyIPv6Mreq():IPv6Mreq
	export function emptyRefIPv6Mreq():Ref<IPv6Mreq>
	export function refOfIPv6Mreq(x:IPv6Mreq,v:Ref<IPv6Mreq>)
	export function unRefIPv6Mreq(v:Ref<IPv6Mreq>):IPv6Mreq
	export function emptySockaddrUnix():SockaddrUnix
	export function emptyRefSockaddrUnix():Ref<SockaddrUnix>
	export function refOfSockaddrUnix(x:SockaddrUnix,v:Ref<SockaddrUnix>)
	export function unRefSockaddrUnix(v:Ref<SockaddrUnix>):SockaddrUnix
	export function emptyBpfHdr():BpfHdr
	export function emptyRefBpfHdr():Ref<BpfHdr>
	export function refOfBpfHdr(x:BpfHdr,v:Ref<BpfHdr>)
	export function unRefBpfHdr(v:Ref<BpfHdr>):BpfHdr
	export function emptyCredential():Credential
	export function emptyRefCredential():Ref<Credential>
	export function refOfCredential(x:Credential,v:Ref<Credential>)
	export function unRefCredential(v:Ref<Credential>):Credential
	export function emptyFbootstraptransfer_t():Fbootstraptransfer_t
	export function emptyRefFbootstraptransfer_t():Ref<Fbootstraptransfer_t>
	export function refOfFbootstraptransfer_t(x:Fbootstraptransfer_t,v:Ref<Fbootstraptransfer_t>)
	export function unRefFbootstraptransfer_t(v:Ref<Fbootstraptransfer_t>):Fbootstraptransfer_t
	export function emptyIfMsghdr():IfMsghdr
	export function emptyRefIfMsghdr():Ref<IfMsghdr>
	export function refOfIfMsghdr(x:IfMsghdr,v:Ref<IfMsghdr>)
	export function unRefIfMsghdr(v:Ref<IfMsghdr>):IfMsghdr
	export function emptyInet4Pktinfo():Inet4Pktinfo
	export function emptyRefInet4Pktinfo():Ref<Inet4Pktinfo>
	export function refOfInet4Pktinfo(x:Inet4Pktinfo,v:Ref<Inet4Pktinfo>)
	export function unRefInet4Pktinfo(v:Ref<Inet4Pktinfo>):Inet4Pktinfo
	export function emptySysProcAttr():SysProcAttr
	export function emptyRefSysProcAttr():Ref<SysProcAttr>
	export function refOfSysProcAttr(x:SysProcAttr,v:Ref<SysProcAttr>)
	export function unRefSysProcAttr(v:Ref<SysProcAttr>):SysProcAttr
	export function emptyIfmaMsghdr():IfmaMsghdr
	export function emptyRefIfmaMsghdr():Ref<IfmaMsghdr>
	export function refOfIfmaMsghdr(x:IfmaMsghdr,v:Ref<IfmaMsghdr>)
	export function unRefIfmaMsghdr(v:Ref<IfmaMsghdr>):IfmaMsghdr
	export function emptyRawSockaddrInet6():RawSockaddrInet6
	export function emptyRefRawSockaddrInet6():Ref<RawSockaddrInet6>
	export function refOfRawSockaddrInet6(x:RawSockaddrInet6,v:Ref<RawSockaddrInet6>)
	export function unRefRawSockaddrInet6(v:Ref<RawSockaddrInet6>):RawSockaddrInet6
	export function emptyRouteMessage():RouteMessage
	export function emptyRefRouteMessage():Ref<RouteMessage>
	export function refOfRouteMessage(x:RouteMessage,v:Ref<RouteMessage>)
	export function unRefRouteMessage(v:Ref<RouteMessage>):RouteMessage
	export function emptyStat_t():Stat_t
	export function emptyRefStat_t():Ref<Stat_t>
	export function refOfStat_t(x:Stat_t,v:Ref<Stat_t>)
	export function unRefStat_t(v:Ref<Stat_t>):Stat_t
	export function emptyTermios():Termios
	export function emptyRefTermios():Ref<Termios>
	export function refOfTermios(x:Termios,v:Ref<Termios>)
	export function unRefTermios(v:Ref<Termios>):Termios
	export function emptyTimeval32():Timeval32
	export function emptyRefTimeval32():Ref<Timeval32>
	export function refOfTimeval32(x:Timeval32,v:Ref<Timeval32>)
	export function unRefTimeval32(v:Ref<Timeval32>):Timeval32
	export function emptyIfmaMsghdr2():IfmaMsghdr2
	export function emptyRefIfmaMsghdr2():Ref<IfmaMsghdr2>
	export function refOfIfmaMsghdr2(x:IfmaMsghdr2,v:Ref<IfmaMsghdr2>)
	export function unRefIfmaMsghdr2(v:Ref<IfmaMsghdr2>):IfmaMsghdr2
	export function emptyInterfaceMessage():InterfaceMessage
	export function emptyRefInterfaceMessage():Ref<InterfaceMessage>
	export function refOfInterfaceMessage(x:InterfaceMessage,v:Ref<InterfaceMessage>)
	export function unRefInterfaceMessage(v:Ref<InterfaceMessage>):InterfaceMessage
	export function emptyRtMsghdr():RtMsghdr
	export function emptyRefRtMsghdr():Ref<RtMsghdr>
	export function refOfRtMsghdr(x:RtMsghdr,v:Ref<RtMsghdr>)
	export function unRefRtMsghdr(v:Ref<RtMsghdr>):RtMsghdr
	export function emptySockaddrDatalink():SockaddrDatalink
	export function emptyRefSockaddrDatalink():Ref<SockaddrDatalink>
	export function refOfSockaddrDatalink(x:SockaddrDatalink,v:Ref<SockaddrDatalink>)
	export function unRefSockaddrDatalink(v:Ref<SockaddrDatalink>):SockaddrDatalink
	export function emptySockaddrInet6():SockaddrInet6
	export function emptyRefSockaddrInet6():Ref<SockaddrInet6>
	export function refOfSockaddrInet6(x:SockaddrInet6,v:Ref<SockaddrInet6>)
	export function unRefSockaddrInet6(v:Ref<SockaddrInet6>):SockaddrInet6
	export function emptyICMPv6Filter():ICMPv6Filter
	export function emptyRefICMPv6Filter():Ref<ICMPv6Filter>
	export function refOfICMPv6Filter(x:ICMPv6Filter,v:Ref<ICMPv6Filter>)
	export function unRefICMPv6Filter(v:Ref<ICMPv6Filter>):ICMPv6Filter
	export function emptyProcAttr():ProcAttr
	export function emptyRefProcAttr():Ref<ProcAttr>
	export function refOfProcAttr(x:ProcAttr,v:Ref<ProcAttr>)
	export function unRefProcAttr(v:Ref<ProcAttr>):ProcAttr
	export function emptyBpfStat():BpfStat
	export function emptyRefBpfStat():Ref<BpfStat>
	export function refOfBpfStat(x:BpfStat,v:Ref<BpfStat>)
	export function unRefBpfStat(v:Ref<BpfStat>):BpfStat
	export function emptyCmsghdr():Cmsghdr
	export function emptyRefCmsghdr():Ref<Cmsghdr>
	export function refOfCmsghdr(x:Cmsghdr,v:Ref<Cmsghdr>)
	export function unRefCmsghdr(v:Ref<Cmsghdr>):Cmsghdr
	export function emptyInterfaceMulticastAddrMessage():InterfaceMulticastAddrMessage
	export function emptyRefInterfaceMulticastAddrMessage():Ref<InterfaceMulticastAddrMessage>
	export function refOfInterfaceMulticastAddrMessage(x:InterfaceMulticastAddrMessage,v:Ref<InterfaceMulticastAddrMessage>)
	export function unRefInterfaceMulticastAddrMessage(v:Ref<InterfaceMulticastAddrMessage>):InterfaceMulticastAddrMessage
	export function emptyRadvisory_t():Radvisory_t
	export function emptyRefRadvisory_t():Ref<Radvisory_t>
	export function refOfRadvisory_t(x:Radvisory_t,v:Ref<Radvisory_t>)
	export function unRefRadvisory_t(v:Ref<Radvisory_t>):Radvisory_t
	export function emptyTimeval():Timeval
	export function emptyRefTimeval():Ref<Timeval>
	export function refOfTimeval(x:Timeval,v:Ref<Timeval>)
	export function unRefTimeval(v:Ref<Timeval>):Timeval
	export function emptyIPMreq():IPMreq
	export function emptyRefIPMreq():Ref<IPMreq>
	export function refOfIPMreq(x:IPMreq,v:Ref<IPMreq>)
	export function unRefIPMreq(v:Ref<IPMreq>):IPMreq
	export function emptyRtMetrics():RtMetrics
	export function emptyRefRtMetrics():Ref<RtMetrics>
	export function refOfRtMetrics(x:RtMetrics,v:Ref<RtMetrics>)
	export function unRefRtMetrics(v:Ref<RtMetrics>):RtMetrics
	export function emptyFstore_t():Fstore_t
	export function emptyRefFstore_t():Ref<Fstore_t>
	export function refOfFstore_t(x:Fstore_t,v:Ref<Fstore_t>)
	export function unRefFstore_t(v:Ref<Fstore_t>):Fstore_t
	export function emptyRawSockaddrUnix():RawSockaddrUnix
	export function emptyRefRawSockaddrUnix():Ref<RawSockaddrUnix>
	export function refOfRawSockaddrUnix(x:RawSockaddrUnix,v:Ref<RawSockaddrUnix>)
	export function unRefRawSockaddrUnix(v:Ref<RawSockaddrUnix>):RawSockaddrUnix
	export function emptyBpfVersion():BpfVersion
	export function emptyRefBpfVersion():Ref<BpfVersion>
	export function refOfBpfVersion(x:BpfVersion,v:Ref<BpfVersion>)
	export function unRefBpfVersion(v:Ref<BpfVersion>):BpfVersion
	export function emptyIfData():IfData
	export function emptyRefIfData():Ref<IfData>
	export function refOfIfData(x:IfData,v:Ref<IfData>)
	export function unRefIfData(v:Ref<IfData>):IfData
	export function emptyRawSockaddrAny():RawSockaddrAny
	export function emptyRefRawSockaddrAny():Ref<RawSockaddrAny>
	export function refOfRawSockaddrAny(x:RawSockaddrAny,v:Ref<RawSockaddrAny>)
	export function unRefRawSockaddrAny(v:Ref<RawSockaddrAny>):RawSockaddrAny
	export function emptySockaddrInet4():SockaddrInet4
	export function emptyRefSockaddrInet4():Ref<SockaddrInet4>
	export function refOfSockaddrInet4(x:SockaddrInet4,v:Ref<SockaddrInet4>)
	export function unRefSockaddrInet4(v:Ref<SockaddrInet4>):SockaddrInet4
	export function emptyTimespec():Timespec
	export function emptyRefTimespec():Ref<Timespec>
	export function refOfTimespec(x:Timespec,v:Ref<Timespec>)
	export function unRefTimespec(v:Ref<Timespec>):Timespec
	export function emptyRusage():Rusage
	export function emptyRefRusage():Ref<Rusage>
	export function refOfRusage(x:Rusage,v:Ref<Rusage>)
	export function unRefRusage(v:Ref<Rusage>):Rusage
	export function emptyDirent():Dirent
	export function emptyRefDirent():Ref<Dirent>
	export function refOfDirent(x:Dirent,v:Ref<Dirent>)
	export function unRefDirent(v:Ref<Dirent>):Dirent
	export function emptyFlock_t():Flock_t
	export function emptyRefFlock_t():Ref<Flock_t>
	export function refOfFlock_t(x:Flock_t,v:Ref<Flock_t>)
	export function unRefFlock_t(v:Ref<Flock_t>):Flock_t
	export function emptyFsid():Fsid
	export function emptyRefFsid():Ref<Fsid>
	export function refOfFsid(x:Fsid,v:Ref<Fsid>)
	export function unRefFsid(v:Ref<Fsid>):Fsid
	export function emptyRawSockaddr():RawSockaddr
	export function emptyRefRawSockaddr():Ref<RawSockaddr>
	export function refOfRawSockaddr(x:RawSockaddr,v:Ref<RawSockaddr>)
	export function unRefRawSockaddr(v:Ref<RawSockaddr>):RawSockaddr
	export function emptyInet6Pktinfo():Inet6Pktinfo
	export function emptyRefInet6Pktinfo():Ref<Inet6Pktinfo>
	export function refOfInet6Pktinfo(x:Inet6Pktinfo,v:Ref<Inet6Pktinfo>)
	export function unRefInet6Pktinfo(v:Ref<Inet6Pktinfo>):Inet6Pktinfo
	export function emptyIovec():Iovec
	export function emptyRefIovec():Ref<Iovec>
	export function refOfIovec(x:Iovec,v:Ref<Iovec>)
	export function unRefIovec(v:Ref<Iovec>):Iovec
	export function emptyMsghdr():Msghdr
	export function emptyRefMsghdr():Ref<Msghdr>
	export function refOfMsghdr(x:Msghdr,v:Ref<Msghdr>)
	export function unRefMsghdr(v:Ref<Msghdr>):Msghdr
	export function emptyRawSockaddrInet4():RawSockaddrInet4
	export function emptyRefRawSockaddrInet4():Ref<RawSockaddrInet4>
	export function refOfRawSockaddrInet4(x:RawSockaddrInet4,v:Ref<RawSockaddrInet4>)
	export function unRefRawSockaddrInet4(v:Ref<RawSockaddrInet4>):RawSockaddrInet4
	export function emptyRlimit():Rlimit
	export function emptyRefRlimit():Ref<Rlimit>
	export function refOfRlimit(x:Rlimit,v:Ref<Rlimit>)
	export function unRefRlimit(v:Ref<Rlimit>):Rlimit
	export function emptyStatfs_t():Statfs_t
	export function emptyRefStatfs_t():Ref<Statfs_t>
	export function refOfStatfs_t(x:Statfs_t,v:Ref<Statfs_t>)
	export function unRefStatfs_t(v:Ref<Statfs_t>):Statfs_t
	export function emptyBpfInsn():BpfInsn
	export function emptyRefBpfInsn():Ref<BpfInsn>
	export function refOfBpfInsn(x:BpfInsn,v:Ref<BpfInsn>)
	export function unRefBpfInsn(v:Ref<BpfInsn>):BpfInsn
	export function emptyFdSet():FdSet
	export function emptyRefFdSet():Ref<FdSet>
	export function refOfFdSet(x:FdSet,v:Ref<FdSet>)
	export function unRefFdSet(v:Ref<FdSet>):FdSet
	export function emptyLinger():Linger
	export function emptyRefLinger():Ref<Linger>
	export function refOfLinger(x:Linger,v:Ref<Linger>)
	export function unRefLinger(v:Ref<Linger>):Linger
	export function emptyRawSockaddrDatalink():RawSockaddrDatalink
	export function emptyRefRawSockaddrDatalink():Ref<RawSockaddrDatalink>
	export function refOfRawSockaddrDatalink(x:RawSockaddrDatalink,v:Ref<RawSockaddrDatalink>)
	export function unRefRawSockaddrDatalink(v:Ref<RawSockaddrDatalink>):RawSockaddrDatalink
	export function emptySocketControlMessage():SocketControlMessage
	export function emptyRefSocketControlMessage():Ref<SocketControlMessage>
	export function refOfSocketControlMessage(x:SocketControlMessage,v:Ref<SocketControlMessage>)
	export function unRefSocketControlMessage(v:Ref<SocketControlMessage>):SocketControlMessage
}