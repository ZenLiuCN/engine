// Code generated by define_gene; DO NOT EDIT.
package gzip

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"compress/gzip"
	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	_ "github.com/ZenLiuCN/engine/modules/golang/time"
)

var (
	//go:embed compress_gzip.d.ts
	CompressGzipDefine   []byte
	CompressGzipDeclared = map[string]any{
		"BestSpeed":          gzip.BestSpeed,
		"HuffmanOnly":        gzip.HuffmanOnly,
		"NoCompression":      gzip.NoCompression,
		"ErrHeader":          gzip.ErrHeader,
		"newReader":          gzip.NewReader,
		"newWriter":          gzip.NewWriter,
		"newWriterLevel":     gzip.NewWriterLevel,
		"BestCompression":    gzip.BestCompression,
		"DefaultCompression": gzip.DefaultCompression,
		"ErrChecksum":        gzip.ErrChecksum,

		"emptyHeader":    engine.Empty[gzip.Header],
		"emptyRefHeader": engine.EmptyRefer[gzip.Header],
		"refOfHeader":    engine.ReferOf[gzip.Header],
		"unRefHeader":    engine.UnRefer[gzip.Header]}
)

func init() {
	engine.RegisterModule(CompressGzipModule{})
}

type CompressGzipModule struct{}

func (S CompressGzipModule) Identity() string {
	return "golang/compress/gzip"
}
func (S CompressGzipModule) TypeDefine() []byte {
	return CompressGzipDefine
}
func (S CompressGzipModule) Exports() map[string]any {
	return CompressGzipDeclared
}
