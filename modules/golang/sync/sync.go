// Code generated by define_gene; DO NOT EDIT.
package sync

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"sync"
)

var (
	//go:embed sync.d.ts
	SyncDefine   []byte
	SyncDeclared = map[string]any{
		"newCond":  sync.NewCond,
		"onceFunc": sync.OnceFunc,

		"emptyMap":          engine.Empty[sync.Map],
		"emptyRefMap":       engine.EmptyRefer[sync.Map],
		"refOfMap":          engine.ReferOf[sync.Map],
		"unRefMap":          engine.UnRefer[sync.Map],
		"emptyMutex":        engine.Empty[sync.Mutex],
		"emptyRefMutex":     engine.EmptyRefer[sync.Mutex],
		"refOfMutex":        engine.ReferOf[sync.Mutex],
		"unRefMutex":        engine.UnRefer[sync.Mutex],
		"emptyOnce":         engine.Empty[sync.Once],
		"emptyRefOnce":      engine.EmptyRefer[sync.Once],
		"refOfOnce":         engine.ReferOf[sync.Once],
		"unRefOnce":         engine.UnRefer[sync.Once],
		"emptyPool":         engine.Empty[sync.Pool],
		"emptyRefPool":      engine.EmptyRefer[sync.Pool],
		"refOfPool":         engine.ReferOf[sync.Pool],
		"unRefPool":         engine.UnRefer[sync.Pool],
		"emptyRWMutex":      engine.Empty[sync.RWMutex],
		"emptyRefRWMutex":   engine.EmptyRefer[sync.RWMutex],
		"refOfRWMutex":      engine.ReferOf[sync.RWMutex],
		"unRefRWMutex":      engine.UnRefer[sync.RWMutex],
		"emptyWaitGroup":    engine.Empty[sync.WaitGroup],
		"emptyRefWaitGroup": engine.EmptyRefer[sync.WaitGroup],
		"refOfWaitGroup":    engine.ReferOf[sync.WaitGroup],
		"unRefWaitGroup":    engine.UnRefer[sync.WaitGroup]}
)

func init() {
	engine.RegisterModule(SyncModule{})
}

type SyncModule struct{}

func (S SyncModule) Identity() string {
	return "golang/sync"
}
func (S SyncModule) TypeDefine() []byte {
	return SyncDefine
}
func (S SyncModule) Exports() map[string]any {
	return SyncDeclared
}
