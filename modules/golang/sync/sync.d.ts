// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/sync'{

	// @ts-ignore
	import type {Ref,int,Struct,bool} from 'go'
	export interface Cond extends Struct<Cond>{

			L:Locker
			wait():void
			signal():void
			broadcast():void
	}
	export interface Locker{

			lock():void
			unlock():void
	}
	export interface Map extends Struct<Map>{

			load(key:any):[any,bool]
			store(key:any,value:any):void
			loadOrStore(key:any,value:any):[any,bool]
			loadAndDelete(key:any):[any,bool]
			delete(key:any):void
			swap(key:any,value:any):[any,bool]
			compareAndSwap(key:any,old:any,New:any):bool
			compareAndDelete(key:any,old:any):bool
			range(v1:(key:any,value:any)=>bool):void
	}
	export interface Mutex extends Struct<Mutex>,Locker{

			lock():void
			tryLock():bool
			unlock():void
	}
	export function newCond(l:Locker):Ref<Cond>

	export interface Once extends Struct<Once>{

			Do(f:()=>void):void
	}
	export function onceFunc(f:()=>void):()=>void

	export interface Pool extends Struct<Pool>{

			New:()=>any
			put(x:any):void
			get():any
	}
	export interface RWMutex extends Struct<RWMutex>,Locker{

			rLock():void
			tryRLock():bool
			rUnlock():void
			lock():void
			tryLock():bool
			unlock():void
			rLocker():Locker
	}
	export interface WaitGroup extends Struct<WaitGroup>{

			add(delta:int):void
			done():void
			wait():void
	}
	export function emptyRWMutex():RWMutex
	export function emptyRefRWMutex():Ref<RWMutex>
	export function refOfRWMutex(x:RWMutex,v:Ref<RWMutex>)
	export function unRefRWMutex(v:Ref<RWMutex>):RWMutex
	export function emptyWaitGroup():WaitGroup
	export function emptyRefWaitGroup():Ref<WaitGroup>
	export function refOfWaitGroup(x:WaitGroup,v:Ref<WaitGroup>)
	export function unRefWaitGroup(v:Ref<WaitGroup>):WaitGroup
	export function emptyMap():Map
	export function emptyRefMap():Ref<Map>
	export function refOfMap(x:Map,v:Ref<Map>)
	export function unRefMap(v:Ref<Map>):Map
	export function emptyMutex():Mutex
	export function emptyRefMutex():Ref<Mutex>
	export function refOfMutex(x:Mutex,v:Ref<Mutex>)
	export function unRefMutex(v:Ref<Mutex>):Mutex
	export function emptyOnce():Once
	export function emptyRefOnce():Ref<Once>
	export function refOfOnce(x:Once,v:Ref<Once>)
	export function unRefOnce(v:Ref<Once>):Once
	export function emptyPool():Pool
	export function emptyRefPool():Ref<Pool>
	export function refOfPool(x:Pool,v:Ref<Pool>)
	export function unRefPool(v:Ref<Pool>):Pool
}