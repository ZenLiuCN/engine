// Code generated by define_gene; DO NOT EDIT.
package atomic

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"sync/atomic"
)

var (
	//go:embed sync_atomic.d.ts
	SyncAtomicDefine   []byte
	SyncAtomicDeclared = map[string]any{
		"addInt64":              atomic.AddInt64,
		"storeInt64":            atomic.StoreInt64,
		"swapInt64":             atomic.SwapInt64,
		"compareAndSwapPointer": atomic.CompareAndSwapPointer,
		"swapInt32":             atomic.SwapInt32,
		"swapPointer":           atomic.SwapPointer,
		"swapUint64":            atomic.SwapUint64,
		"compareAndSwapUint32":  atomic.CompareAndSwapUint32,
		"compareAndSwapUintptr": atomic.CompareAndSwapUintptr,
		"storeInt32":            atomic.StoreInt32,
		"compareAndSwapInt64":   atomic.CompareAndSwapInt64,
		"loadPointer":           atomic.LoadPointer,
		"addInt32":              atomic.AddInt32,
		"addUint64":             atomic.AddUint64,
		"compareAndSwapInt32":   atomic.CompareAndSwapInt32,
		"compareAndSwapUint64":  atomic.CompareAndSwapUint64,
		"storeUint64":           atomic.StoreUint64,
		"swapUintptr":           atomic.SwapUintptr,
		"loadUintptr":           atomic.LoadUintptr,
		"storeUintptr":          atomic.StoreUintptr,
		"addUint32":             atomic.AddUint32,
		"addUintptr":            atomic.AddUintptr,
		"loadInt64":             atomic.LoadInt64,
		"loadUint64":            atomic.LoadUint64,
		"storeUint32":           atomic.StoreUint32,
		"swapUint32":            atomic.SwapUint32,
		"loadInt32":             atomic.LoadInt32,
		"loadUint32":            atomic.LoadUint32,
		"storePointer":          atomic.StorePointer,

		"emptyUint32":     engine.Empty[atomic.Uint32],
		"emptyRefUint32":  engine.EmptyRefer[atomic.Uint32],
		"refOfUint32":     engine.ReferOf[atomic.Uint32],
		"unRefUint32":     engine.UnRefer[atomic.Uint32],
		"emptyUint64":     engine.Empty[atomic.Uint64],
		"emptyRefUint64":  engine.EmptyRefer[atomic.Uint64],
		"refOfUint64":     engine.ReferOf[atomic.Uint64],
		"unRefUint64":     engine.UnRefer[atomic.Uint64],
		"emptyUintptr":    engine.Empty[atomic.Uintptr],
		"emptyRefUintptr": engine.EmptyRefer[atomic.Uintptr],
		"refOfUintptr":    engine.ReferOf[atomic.Uintptr],
		"unRefUintptr":    engine.UnRefer[atomic.Uintptr],
		"emptyValue":      engine.Empty[atomic.Value],
		"emptyRefValue":   engine.EmptyRefer[atomic.Value],
		"refOfValue":      engine.ReferOf[atomic.Value],
		"unRefValue":      engine.UnRefer[atomic.Value],
		"emptyBool":       engine.Empty[atomic.Bool],
		"emptyRefBool":    engine.EmptyRefer[atomic.Bool],
		"refOfBool":       engine.ReferOf[atomic.Bool],
		"unRefBool":       engine.UnRefer[atomic.Bool],
		"emptyInt32":      engine.Empty[atomic.Int32],
		"emptyRefInt32":   engine.EmptyRefer[atomic.Int32],
		"refOfInt32":      engine.ReferOf[atomic.Int32],
		"unRefInt32":      engine.UnRefer[atomic.Int32],
		"emptyInt64":      engine.Empty[atomic.Int64],
		"emptyRefInt64":   engine.EmptyRefer[atomic.Int64],
		"refOfInt64":      engine.ReferOf[atomic.Int64],
		"unRefInt64":      engine.UnRefer[atomic.Int64]}
)

func init() {
	engine.RegisterModule(SyncAtomicModule{})
}

type SyncAtomicModule struct{}

func (S SyncAtomicModule) Identity() string {
	return "golang/sync/atomic"
}
func (S SyncAtomicModule) TypeDefine() []byte {
	return SyncAtomicDefine
}
func (S SyncAtomicModule) Exports() map[string]any {
	return SyncAtomicDeclared
}
