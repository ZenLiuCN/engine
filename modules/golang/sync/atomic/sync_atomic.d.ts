// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/sync/atomic'{

	// @ts-ignore
	import type {int32,int64,Struct,bool,Pointer,Ref,uint32,uint64,uintptr} from 'go'
	export function addInt32(addr:Ref<int32>,delta:int32):int32

	export function addInt64(addr:Ref<int64>,delta:int64):int64

	export function addUint32(addr:Ref<uint32>,delta:uint32):uint32

	export function addUint64(addr:Ref<uint64>,delta:uint64):uint64

	export function addUintptr(addr:Ref<uintptr>,delta:uintptr):uintptr

	export interface Bool extends Struct<Bool>{

			load():bool
			store(val:bool):void
			swap(New:bool):bool
			compareAndSwap(old:bool,New:bool):bool
	}
	export function compareAndSwapInt32(addr:Ref<int32>,old:int32,New:int32):bool

	export function compareAndSwapInt64(addr:Ref<int64>,old:int64,New:int64):bool

	export function compareAndSwapPointer(addr:Ref<Pointer>,old:Pointer,New:Pointer):bool

	export function compareAndSwapUint32(addr:Ref<uint32>,old:uint32,New:uint32):bool

	export function compareAndSwapUint64(addr:Ref<uint64>,old:uint64,New:uint64):bool

	export function compareAndSwapUintptr(addr:Ref<uintptr>,old:uintptr,New:uintptr):bool

	export interface Int32 extends Struct<Int32>{

			load():int32
			store(val:int32):void
			swap(New:int32):int32
			compareAndSwap(old:int32,New:int32):bool
			add(delta:int32):int32
	}
	export interface Int64 extends Struct<Int64>{

			load():int64
			store(val:int64):void
			swap(New:int64):int64
			compareAndSwap(old:int64,New:int64):bool
			add(delta:int64):int64
	}
	export function loadInt32(addr:Ref<int32>):int32

	export function loadInt64(addr:Ref<int64>):int64

	export function loadPointer(addr:Ref<Pointer>):Pointer

	export function loadUint32(addr:Ref<uint32>):uint32

	export function loadUint64(addr:Ref<uint64>):uint64

	export function loadUintptr(addr:Ref<uintptr>):uintptr

	export function storeInt32(addr:Ref<int32>,val:int32):void

	export function storeInt64(addr:Ref<int64>,val:int64):void

	export function storePointer(addr:Ref<Pointer>,val:Pointer):void

	export function storeUint32(addr:Ref<uint32>,val:uint32):void

	export function storeUint64(addr:Ref<uint64>,val:uint64):void

	export function storeUintptr(addr:Ref<uintptr>,val:uintptr):void

	export function swapInt32(addr:Ref<int32>,New:int32):int32

	export function swapInt64(addr:Ref<int64>,New:int64):int64

	export function swapPointer(addr:Ref<Pointer>,New:Pointer):Pointer

	export function swapUint32(addr:Ref<uint32>,New:uint32):uint32

	export function swapUint64(addr:Ref<uint64>,New:uint64):uint64

	export function swapUintptr(addr:Ref<uintptr>,New:uintptr):uintptr

	export interface Uint32 extends Struct<Uint32>{

			load():uint32
			store(val:uint32):void
			swap(New:uint32):uint32
			compareAndSwap(old:uint32,New:uint32):bool
			add(delta:uint32):uint32
	}
	export interface Uint64 extends Struct<Uint64>{

			load():uint64
			store(val:uint64):void
			swap(New:uint64):uint64
			compareAndSwap(old:uint64,New:uint64):bool
			add(delta:uint64):uint64
	}
	export interface Uintptr extends Struct<Uintptr>{

			load():uintptr
			store(val:uintptr):void
			swap(New:uintptr):uintptr
			compareAndSwap(old:uintptr,New:uintptr):bool
			add(delta:uintptr):uintptr
	}
	export interface Value extends Struct<Value>{

			load():any
			store(val:any):void
			swap(New:any):any
			compareAndSwap(old:any,New:any):bool
	}
	export function emptyUint32():Uint32
	export function emptyRefUint32():Ref<Uint32>
	export function refOfUint32(x:Uint32,v:Ref<Uint32>)
	export function unRefUint32(v:Ref<Uint32>):Uint32
	export function emptyUint64():Uint64
	export function emptyRefUint64():Ref<Uint64>
	export function refOfUint64(x:Uint64,v:Ref<Uint64>)
	export function unRefUint64(v:Ref<Uint64>):Uint64
	export function emptyUintptr():Uintptr
	export function emptyRefUintptr():Ref<Uintptr>
	export function refOfUintptr(x:Uintptr,v:Ref<Uintptr>)
	export function unRefUintptr(v:Ref<Uintptr>):Uintptr
	export function emptyValue():Value
	export function emptyRefValue():Ref<Value>
	export function refOfValue(x:Value,v:Ref<Value>)
	export function unRefValue(v:Ref<Value>):Value
	export function emptyBool():Bool
	export function emptyRefBool():Ref<Bool>
	export function refOfBool(x:Bool,v:Ref<Bool>)
	export function unRefBool(v:Ref<Bool>):Bool
	export function emptyInt32():Int32
	export function emptyRefInt32():Ref<Int32>
	export function refOfInt32(x:Int32,v:Ref<Int32>)
	export function unRefInt32(v:Ref<Int32>):Int32
	export function emptyInt64():Int64
	export function emptyRefInt64():Ref<Int64>
	export function refOfInt64(x:Int64,v:Ref<Int64>)
	export function unRefInt64(v:Ref<Int64>):Int64
}