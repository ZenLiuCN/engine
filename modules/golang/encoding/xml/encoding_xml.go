// Code generated by define_gene; DO NOT EDIT.
package xml

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"encoding/xml"
	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	_ "github.com/ZenLiuCN/engine/modules/golang/reflect"
)

var (
	//go:embed encoding_xml.d.ts
	EncodingXmlDefine   []byte
	EncodingXmlDeclared = map[string]any{
		"Header":          xml.Header,
		"marshalIndent":   xml.MarshalIndent,
		"newDecoder":      xml.NewDecoder,
		"unmarshal":       xml.Unmarshal,
		"copyToken":       xml.CopyToken,
		"escape":          xml.Escape,
		"escapeText":      xml.EscapeText,
		"HTMLEntity":      xml.HTMLEntity,
		"HTMLAutoClose":   xml.HTMLAutoClose,
		"marshal":         xml.Marshal,
		"newEncoder":      xml.NewEncoder,
		"newTokenDecoder": xml.NewTokenDecoder,

		"emptyName":            engine.Empty[xml.Name],
		"emptyRefName":         engine.EmptyRefer[xml.Name],
		"refOfName":            engine.ReferOf[xml.Name],
		"unRefName":            engine.UnRefer[xml.Name],
		"emptyAttr":            engine.Empty[xml.Attr],
		"emptyRefAttr":         engine.EmptyRefer[xml.Attr],
		"refOfAttr":            engine.ReferOf[xml.Attr],
		"unRefAttr":            engine.UnRefer[xml.Attr],
		"emptyEndElement":      engine.Empty[xml.EndElement],
		"emptyRefEndElement":   engine.EmptyRefer[xml.EndElement],
		"refOfEndElement":      engine.ReferOf[xml.EndElement],
		"unRefEndElement":      engine.UnRefer[xml.EndElement],
		"emptyProcInst":        engine.Empty[xml.ProcInst],
		"emptyRefProcInst":     engine.EmptyRefer[xml.ProcInst],
		"refOfProcInst":        engine.ReferOf[xml.ProcInst],
		"unRefProcInst":        engine.UnRefer[xml.ProcInst],
		"emptyStartElement":    engine.Empty[xml.StartElement],
		"emptyRefStartElement": engine.EmptyRefer[xml.StartElement],
		"refOfStartElement":    engine.ReferOf[xml.StartElement],
		"unRefStartElement":    engine.UnRefer[xml.StartElement]}
)

func init() {
	engine.RegisterModule(EncodingXmlModule{})
}

type EncodingXmlModule struct{}

func (S EncodingXmlModule) Identity() string {
	return "golang/encoding/xml"
}
func (S EncodingXmlModule) TypeDefine() []byte {
	return EncodingXmlDefine
}
func (S EncodingXmlModule) Exports() map[string]any {
	return EncodingXmlDeclared
}
