// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/encoding/asn1'{

	// @ts-ignore
	import type {GoError,int,Struct,bool,error,Ref} from 'go'
	export interface BitString extends Struct<BitString>{

			bytes:Uint8Array
			bitLength:int
			at(i:int):int
			rightAlign():Uint8Array
	}
	//1
	export const ClassApplication:int
	//2
	export const ClassContextSpecific:int
	//3
	export const ClassPrivate:int
	//0
	export const ClassUniversal:int
	export interface Enumerated extends int{

	}
	export interface Flag extends bool{

	}
	export function marshal(val:any):Uint8Array

	export function marshalWithParams(val:any,params:string):Uint8Array

	export const NullBytes:Uint8Array
	export const NullRawValue:RawValue
	export interface ObjectIdentifier extends Array<int>{

			equal(other:ObjectIdentifier):bool
			string():string
	}
	export interface RawContent extends Uint8Array{

	}
	export interface RawValue extends Struct<RawValue>{

			clazz:int
			tag:int
			isCompound:bool
			bytes:Uint8Array
			fullBytes:Uint8Array
	}
	export interface StructuralError extends Struct<StructuralError>,Error,GoError{

			msg:string
			error():string
	}
	export interface SyntaxError extends Struct<SyntaxError>,Error,GoError{

			msg:string
			error():string
	}
	//30
	export const TagBMPString:int
	//3
	export const TagBitString:int
	//1
	export const TagBoolean:int
	//10
	export const TagEnum:int
	//27
	export const TagGeneralString:int
	//24
	export const TagGeneralizedTime:int
	//22
	export const TagIA5String:int
	//2
	export const TagInteger:int
	//5
	export const TagNull:int
	//18
	export const TagNumericString:int
	//6
	export const TagOID:int
	//4
	export const TagOctetString:int
	//19
	export const TagPrintableString:int
	//16
	export const TagSequence:int
	//17
	export const TagSet:int
	//20
	export const TagT61String:int
	//23
	export const TagUTCTime:int
	//12
	export const TagUTF8String:int
	export function unmarshal(b:Uint8Array,val:any):Uint8Array

	export function unmarshalWithParams(b:Uint8Array,val:any,params:string):Uint8Array

	export function emptyBitString():BitString
	export function emptyRefBitString():Ref<BitString>
	export function refOfBitString(x:BitString,v:Ref<BitString>)
	export function unRefBitString(v:Ref<BitString>):BitString
	export function emptyRawValue():RawValue
	export function emptyRefRawValue():Ref<RawValue>
	export function refOfRawValue(x:RawValue,v:Ref<RawValue>)
	export function unRefRawValue(v:Ref<RawValue>):RawValue
}