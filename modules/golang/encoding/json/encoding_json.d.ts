// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/encoding/json'{

	// @ts-ignore
	import * as bytes from 'golang/bytes'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as reflect from 'golang/reflect'
	// @ts-ignore
	import type {GoError,float64,Ref,error,Struct,bool,int64,rune} from 'go'
	export function compact(dst:Ref<bytes.Buffer>,src:Uint8Array)/*error*/

	export interface Decoder extends Struct<Decoder>,Token{

			useNumber():void
			disallowUnknownFields():void
			decode(v:any)/*error*/
			buffered():io.Reader
			token():Token
			more():bool
			inputOffset():int64
	}
	export interface Delim extends rune{

	string():string
	}
	export interface Encoder extends Token,Struct<Encoder>{

			encode(v:any)/*error*/
			setIndent(prefix:string,indent:string):void
			setEscapeHTML(on:bool):void
	}
	export function htmlEscape(dst:Ref<bytes.Buffer>,src:Uint8Array):void

	export function indent(dst:Ref<bytes.Buffer>,src:Uint8Array,prefix:string,indent:string)/*error*/

	export interface InvalidUTF8Error extends Struct<InvalidUTF8Error>,Error,GoError{

			S:string
			error():string
	}
	export interface InvalidUnmarshalError extends Struct<InvalidUnmarshalError>,Error,GoError{

			type:reflect.Type
			error():string
	}
	export function marshal(v:any):Uint8Array

	export function marshalIndent(v:any,prefix:string,indent:string):Uint8Array

	export interface Marshaler{

			marshalJSON():Uint8Array
	}
	export interface MarshalerError extends Struct<MarshalerError>,Error,GoError{

			type:reflect.Type
			err:GoError
			error():string
			unwrap()/*error*/
	}
	export function newDecoder(r:io.Reader):Ref<Decoder>

	export function newEncoder(w:io.Writer):Ref<Encoder>

	export interface Number extends string{

	string():string
	float64():float64
	int64():int64
	}
	export interface RawMessage extends Uint8Array{

			marshalJSON():Uint8Array
			unmarshalJSON(data:Uint8Array)/*error*/
	}
	export interface SyntaxError extends Struct<SyntaxError>,Error,GoError{

			offset:int64
			error():string
	}
	export interface Token{

	}
	export function unmarshal(data:Uint8Array,v:any)/*error*/

	export interface UnmarshalFieldError extends Struct<UnmarshalFieldError>,Error,GoError{

			key:string
			type:reflect.Type
			field:reflect.StructField
			error():string
	}
	export interface UnmarshalTypeError extends Struct<UnmarshalTypeError>,Error,GoError{

			value:string
			type:reflect.Type
			offset:int64
			struct:string
			field:string
			error():string
	}
	export interface Unmarshaler{

			unmarshalJSON(v1:Uint8Array)/*error*/
	}
	export interface UnsupportedTypeError extends GoError,Struct<UnsupportedTypeError>,Error{

			type:reflect.Type
			error():string
	}
	export interface UnsupportedValueError extends Struct<UnsupportedValueError>,Error,GoError{

			value:reflect.Value
			str:string
			error():string
	}
	export function valid(data:Uint8Array):bool

}