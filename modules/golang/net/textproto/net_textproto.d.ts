// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/net/textproto'{

	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as bufio from 'golang/bufio'
	// @ts-ignore
	import type {Ref,int,GoError,Alias,map,Struct,error,uint} from 'go'
	export function canonicalMIMEHeaderKey(s:string):string

	export interface Conn extends io.Closer,Struct<Conn>{

			reader:Reader
			writer:Writer
			pipeline:Pipeline
			close():error
			cmd(format:string,...args:any[]):uint
	}
	export function dial(network:string,addr:string):Ref<Conn>

	export interface Error extends Struct<Error>,Error,GoError{

			code:int
			msg:string
			error():string
	}
	export interface MIMEHeader extends map<Alias<string>,Array<string>>{

			add(key:string,value:string):void
			set(key:string,value:string):void
			get(key:string):string
			values(key:string):string[]
			del(key:string):void
	}
	export function newConn(conn:io.ReadWriteCloser):Ref<Conn>

	export function newReader(r:Ref<bufio.Reader>):Ref<Reader>

	export function newWriter(w:Ref<bufio.Writer>):Ref<Writer>

	export interface Pipeline extends Struct<Pipeline>{

			next():uint
			startRequest(id:uint):void
			endRequest(id:uint):void
			startResponse(id:uint):void
			endResponse(id:uint):void
	}
	export interface ProtocolError extends GoError,string{

	error():string
	}
	export interface Reader extends Struct<Reader>{

			R:Ref<bufio.Reader>
			readLine():string
			readLineBytes():Uint8Array
			readContinuedLine():string
			readContinuedLineBytes():Uint8Array
			readCodeLine(expectCode:int):[int,string]
			readResponse(expectCode:int):[int,string]
			dotReader():io.Reader
			readDotBytes():Uint8Array
			readDotLines():string[]
			readMIMEHeader():MIMEHeader
	}
	export function trimBytes(b:Uint8Array):Uint8Array

	export function trimString(s:string):string

	export interface Writer extends Struct<Writer>{

			W:Ref<bufio.Writer>
			printfLine(format:string,...args:any[])/*error*/
			dotWriter():io.WriteCloser
	}
	export function emptyPipeline():Pipeline
	export function emptyRefPipeline():Ref<Pipeline>
	export function refOfPipeline(x:Pipeline,v:Ref<Pipeline>)
	export function unRefPipeline(v:Ref<Pipeline>):Pipeline
}