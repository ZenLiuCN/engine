// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/net/mail'{

	// @ts-ignore
	import * as fmt from 'golang/fmt'
	// @ts-ignore
	import * as mime from 'golang/mime'
	// @ts-ignore
	import * as time from 'golang/time'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import type {Struct,Ref,error,GoError,Alias,map} from 'go'
	export interface Address extends Struct<Address>,fmt.Stringer{

			name:string
			address:string
			string():string
	}
	export interface AddressParser extends Struct<AddressParser>{

			wordDecoder:Ref<mime.WordDecoder>
			parse(address:string):Ref<Address>
			parseList(list:string):Ref<Address>[]
	}
	export const ErrHeaderNotPresent:GoError
	export interface Header extends map<Alias<string>,Array<string>>{

			get(key:string):string
			date():time.Time
			addressList(key:string):Ref<Address>[]
	}
	export interface Message extends Struct<Message>{

			header:Header
			body:io.Reader
	}
	export function parseAddress(address:string):Ref<Address>

	export function parseAddressList(list:string):Ref<Address>[]

	export function parseDate(date:string):time.Time

	export function readMessage(r:io.Reader):Ref<Message>

	export function emptyAddress():Address
	export function emptyRefAddress():Ref<Address>
	export function refOfAddress(x:Address,v:Ref<Address>)
	export function unRefAddress(v:Ref<Address>):Address
	export function emptyAddressParser():AddressParser
	export function emptyRefAddressParser():Ref<AddressParser>
	export function refOfAddressParser(x:AddressParser,v:Ref<AddressParser>)
	export function unRefAddressParser(v:Ref<AddressParser>):AddressParser
	export function emptyMessage():Message
	export function emptyRefMessage():Ref<Message>
	export function refOfMessage(x:Message,v:Ref<Message>)
	export function unRefMessage(v:Ref<Message>):Message
}