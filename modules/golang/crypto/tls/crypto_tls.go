// Code generated by define_gene; DO NOT EDIT.
package tls

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"crypto/tls"
	_ "github.com/ZenLiuCN/engine/modules/golang/context"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto/x509"
	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	_ "github.com/ZenLiuCN/engine/modules/golang/net"
	_ "github.com/ZenLiuCN/engine/modules/golang/time"
)

var (
	//go:embed crypto_tls.d.ts
	CryptoTlsDefine   []byte
	CryptoTlsDeclared = map[string]any{
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305":          tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
		"TLS_RSA_WITH_RC4_128_SHA":                      tls.TLS_RSA_WITH_RC4_128_SHA,
		"QUICNoEvent":                                   tls.QUICNoEvent,
		"QUICSetWriteSecret":                            tls.QUICSetWriteSecret,
		"QUICTransportParameters":                       tls.QUICTransportParameters,
		"RenegotiateOnceAsClient":                       tls.RenegotiateOnceAsClient,
		"TLS_AES_256_GCM_SHA384":                        tls.TLS_AES_256_GCM_SHA384,
		"QUICHandshakeDone":                             tls.QUICHandshakeDone,
		"RenegotiateFreelyAsClient":                     tls.RenegotiateFreelyAsClient,
		"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256":       tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		"cipherSuites":                                  tls.CipherSuites,
		"newListener":                                   tls.NewListener,
		"parseSessionState":                             tls.ParseSessionState,
		"quicClient":                                    tls.QUICClient,
		"QUICEncryptionLevelInitial":                    tls.QUICEncryptionLevelInitial,
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256":   tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
		"PKCS1WithSHA512":                               tls.PKCS1WithSHA512,
		"TLS_RSA_WITH_AES_128_CBC_SHA":                  tls.TLS_RSA_WITH_AES_128_CBC_SHA,
		"VersionTLS11":                                  tls.VersionTLS11,
		"client":                                        tls.Client,
		"CurveP256":                                     tls.CurveP256,
		"NoClientCert":                                  tls.NoClientCert,
		"PKCS1WithSHA1":                                 tls.PKCS1WithSHA1,
		"PKCS1WithSHA256":                               tls.PKCS1WithSHA256,
		"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384":       tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":           tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
		"dial":                                          tls.Dial,
		"dialWithDialer":                                tls.DialWithDialer,
		"ECDSAWithP521AndSHA512":                        tls.ECDSAWithP521AndSHA512,
		"QUICEncryptionLevelApplication":                tls.QUICEncryptionLevelApplication,
		"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":          tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		"PKCS1WithSHA384":                               tls.PKCS1WithSHA384,
		"QUICRejectedEarlyData":                         tls.QUICRejectedEarlyData,
		"TLS_RSA_WITH_AES_128_CBC_SHA256":               tls.TLS_RSA_WITH_AES_128_CBC_SHA256,
		"VerifyClientCertIfGiven":                       tls.VerifyClientCertIfGiven,
		"VersionTLS10":                                  tls.VersionTLS10,
		"CurveP521":                                     tls.CurveP521,
		"insecureCipherSuites":                          tls.InsecureCipherSuites,
		"PSSWithSHA256":                                 tls.PSSWithSHA256,
		"PSSWithSHA384":                                 tls.PSSWithSHA384,
		"TLS_RSA_WITH_AES_128_GCM_SHA256":               tls.TLS_RSA_WITH_AES_128_GCM_SHA256,
		"server":                                        tls.Server,
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":            tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		"TLS_FALLBACK_SCSV":                             tls.TLS_FALLBACK_SCSV,
		"versionName":                                   tls.VersionName,
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256": tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
		"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":         tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		"VersionTLS12":                                  tls.VersionTLS12,
		"ECDSAWithSHA1":                                 tls.ECDSAWithSHA1,
		"newLRUClientSessionCache":                      tls.NewLRUClientSessionCache,
		"newResumptionState":                            tls.NewResumptionState,
		"QUICTransportParametersRequired":               tls.QUICTransportParametersRequired,
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305":        tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
		"X25519":                                        tls.X25519,
		"x509KeyPair":                                   tls.X509KeyPair,
		"PSSWithSHA512":                                 tls.PSSWithSHA512,
		"RequireAndVerifyClientCert":                    tls.RequireAndVerifyClientCert,
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":          tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":         tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		"CurveP384":                                     tls.CurveP384,
		"QUICEncryptionLevelHandshake":                  tls.QUICEncryptionLevelHandshake,
		"RenegotiateNever":                              tls.RenegotiateNever,
		"TLS_RSA_WITH_AES_256_CBC_SHA":                  tls.TLS_RSA_WITH_AES_256_CBC_SHA,
		"Ed25519":                                       tls.Ed25519,
		"QUICWriteData":                                 tls.QUICWriteData,
		"ECDSAWithP384AndSHA384":                        tls.ECDSAWithP384AndSHA384,
		"listen":                                        tls.Listen,
		"quicServer":                                    tls.QUICServer,
		"RequestClientCert":                             tls.RequestClientCert,
		"TLS_ECDHE_RSA_WITH_RC4_128_SHA":                tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA,
		"ECDSAWithP256AndSHA256":                        tls.ECDSAWithP256AndSHA256,
		"TLS_CHACHA20_POLY1305_SHA256":                  tls.TLS_CHACHA20_POLY1305_SHA256,
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256":         tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
		"VersionTLS13":                                  tls.VersionTLS13,
		"QUICEncryptionLevelEarly":                      tls.QUICEncryptionLevelEarly,
		"RequireAnyClientCert":                          tls.RequireAnyClientCert,
		"TLS_AES_128_GCM_SHA256":                        tls.TLS_AES_128_GCM_SHA256,
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256":       tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":            tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		"cipherSuiteName":                               tls.CipherSuiteName,
		"loadX509KeyPair":                               tls.LoadX509KeyPair,
		"QUICSetReadSecret":                             tls.QUICSetReadSecret,
		"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":              tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
		"TLS_RSA_WITH_3DES_EDE_CBC_SHA":                 tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA,
		"TLS_RSA_WITH_AES_256_GCM_SHA384":               tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
		"VersionSSL30":                                  tls.VersionSSL30,

		"emptyCertificateRequestInfo":      engine.Empty[tls.CertificateRequestInfo],
		"emptyRefCertificateRequestInfo":   engine.EmptyRefer[tls.CertificateRequestInfo],
		"refOfCertificateRequestInfo":      engine.ReferOf[tls.CertificateRequestInfo],
		"unRefCertificateRequestInfo":      engine.UnRefer[tls.CertificateRequestInfo],
		"emptyDialer":                      engine.Empty[tls.Dialer],
		"emptyRefDialer":                   engine.EmptyRefer[tls.Dialer],
		"refOfDialer":                      engine.ReferOf[tls.Dialer],
		"unRefDialer":                      engine.UnRefer[tls.Dialer],
		"emptyQUICConn":                    engine.Empty[tls.QUICConn],
		"emptyRefQUICConn":                 engine.EmptyRefer[tls.QUICConn],
		"refOfQUICConn":                    engine.ReferOf[tls.QUICConn],
		"unRefQUICConn":                    engine.UnRefer[tls.QUICConn],
		"emptyQUICEvent":                   engine.Empty[tls.QUICEvent],
		"emptyRefQUICEvent":                engine.EmptyRefer[tls.QUICEvent],
		"refOfQUICEvent":                   engine.ReferOf[tls.QUICEvent],
		"unRefQUICEvent":                   engine.UnRefer[tls.QUICEvent],
		"emptyQUICSessionTicketOptions":    engine.Empty[tls.QUICSessionTicketOptions],
		"emptyRefQUICSessionTicketOptions": engine.EmptyRefer[tls.QUICSessionTicketOptions],
		"refOfQUICSessionTicketOptions":    engine.ReferOf[tls.QUICSessionTicketOptions],
		"unRefQUICSessionTicketOptions":    engine.UnRefer[tls.QUICSessionTicketOptions],
		"emptySessionState":                engine.Empty[tls.SessionState],
		"emptyRefSessionState":             engine.EmptyRefer[tls.SessionState],
		"refOfSessionState":                engine.ReferOf[tls.SessionState],
		"unRefSessionState":                engine.UnRefer[tls.SessionState],
		"emptyCertificate":                 engine.Empty[tls.Certificate],
		"emptyRefCertificate":              engine.EmptyRefer[tls.Certificate],
		"refOfCertificate":                 engine.ReferOf[tls.Certificate],
		"unRefCertificate":                 engine.UnRefer[tls.Certificate],
		"emptyClientSessionState":          engine.Empty[tls.ClientSessionState],
		"emptyRefClientSessionState":       engine.EmptyRefer[tls.ClientSessionState],
		"refOfClientSessionState":          engine.ReferOf[tls.ClientSessionState],
		"unRefClientSessionState":          engine.UnRefer[tls.ClientSessionState],
		"emptyQUICConfig":                  engine.Empty[tls.QUICConfig],
		"emptyRefQUICConfig":               engine.EmptyRefer[tls.QUICConfig],
		"refOfQUICConfig":                  engine.ReferOf[tls.QUICConfig],
		"unRefQUICConfig":                  engine.UnRefer[tls.QUICConfig],
		"emptyCipherSuite":                 engine.Empty[tls.CipherSuite],
		"emptyRefCipherSuite":              engine.EmptyRefer[tls.CipherSuite],
		"refOfCipherSuite":                 engine.ReferOf[tls.CipherSuite],
		"unRefCipherSuite":                 engine.UnRefer[tls.CipherSuite],
		"emptyConfig":                      engine.Empty[tls.Config],
		"emptyRefConfig":                   engine.EmptyRefer[tls.Config],
		"refOfConfig":                      engine.ReferOf[tls.Config],
		"unRefConfig":                      engine.UnRefer[tls.Config],
		"emptyConnectionState":             engine.Empty[tls.ConnectionState],
		"emptyRefConnectionState":          engine.EmptyRefer[tls.ConnectionState],
		"refOfConnectionState":             engine.ReferOf[tls.ConnectionState],
		"unRefConnectionState":             engine.UnRefer[tls.ConnectionState],
		"emptyClientHelloInfo":             engine.Empty[tls.ClientHelloInfo],
		"emptyRefClientHelloInfo":          engine.EmptyRefer[tls.ClientHelloInfo],
		"refOfClientHelloInfo":             engine.ReferOf[tls.ClientHelloInfo],
		"unRefClientHelloInfo":             engine.UnRefer[tls.ClientHelloInfo],
		"emptyConn":                        engine.Empty[tls.Conn],
		"emptyRefConn":                     engine.EmptyRefer[tls.Conn],
		"refOfConn":                        engine.ReferOf[tls.Conn],
		"unRefConn":                        engine.UnRefer[tls.Conn]}
)

func init() {
	engine.RegisterModule(CryptoTlsModule{})
}

type CryptoTlsModule struct{}

func (S CryptoTlsModule) Identity() string {
	return "golang/crypto/tls"
}
func (S CryptoTlsModule) TypeDefine() []byte {
	return CryptoTlsDefine
}
func (S CryptoTlsModule) Exports() map[string]any {
	return CryptoTlsDeclared
}
