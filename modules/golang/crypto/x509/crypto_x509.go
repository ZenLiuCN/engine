// Code generated by define_gene; DO NOT EDIT.
package x509

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"crypto/x509"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto/ecdsa"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto/rsa"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto/x509/pkix"
	_ "github.com/ZenLiuCN/engine/modules/golang/encoding/asn1"
	_ "github.com/ZenLiuCN/engine/modules/golang/encoding/pem"
	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	_ "github.com/ZenLiuCN/engine/modules/golang/math/big"
	_ "github.com/ZenLiuCN/engine/modules/golang/net"
	_ "github.com/ZenLiuCN/engine/modules/golang/net/url"
	_ "github.com/ZenLiuCN/engine/modules/golang/time"
)

var (
	//go:embed crypto_x509.d.ts
	Crypto509Define   []byte
	Crypto509Declared = map[string]any{
		"ExtKeyUsageMicrosoftKernelCodeSigning":     x509.ExtKeyUsageMicrosoftKernelCodeSigning,
		"KeyUsageDigitalSignature":                  x509.KeyUsageDigitalSignature,
		"PEMCipherDES":                              x509.PEMCipherDES,
		"parsePKCS8PrivateKey":                      x509.ParsePKCS8PrivateKey,
		"SHA512WithRSA":                             x509.SHA512WithRSA,
		"ExtKeyUsageClientAuth":                     x509.ExtKeyUsageClientAuth,
		"ExtKeyUsageServerAuth":                     x509.ExtKeyUsageServerAuth,
		"PEMCipherAES256":                           x509.PEMCipherAES256,
		"KeyUsageCertSign":                          x509.KeyUsageCertSign,
		"KeyUsageDataEncipherment":                  x509.KeyUsageDataEncipherment,
		"MD5WithRSA":                                x509.MD5WithRSA,
		"newCertPool":                               x509.NewCertPool,
		"SHA256WithRSA":                             x509.SHA256WithRSA,
		"ECDSA":                                     x509.ECDSA,
		"ExtKeyUsageCodeSigning":                    x509.ExtKeyUsageCodeSigning,
		"ExtKeyUsageMicrosoftServerGatedCrypto":     x509.ExtKeyUsageMicrosoftServerGatedCrypto,
		"ExtKeyUsageOCSPSigning":                    x509.ExtKeyUsageOCSPSigning,
		"parseCertificateRequest":                   x509.ParseCertificateRequest,
		"TooManyConstraints":                        x509.TooManyConstraints,
		"createRevocationList":                      x509.CreateRevocationList,
		"ExtKeyUsageAny":                            x509.ExtKeyUsageAny,
		"IncorrectPasswordError":                    x509.IncorrectPasswordError,
		"KeyUsageEncipherOnly":                      x509.KeyUsageEncipherOnly,
		"PEMCipherAES192":                           x509.PEMCipherAES192,
		"RSA":                                       x509.RSA,
		"CANotAuthorizedForExtKeyUsage":             x509.CANotAuthorizedForExtKeyUsage,
		"marshalPKCS1PrivateKey":                    x509.MarshalPKCS1PrivateKey,
		"parseCRL":                                  x509.ParseCRL,
		"parseECPrivateKey":                         x509.ParseECPrivateKey,
		"parsePKCS1PrivateKey":                      x509.ParsePKCS1PrivateKey,
		"parsePKCS1PublicKey":                       x509.ParsePKCS1PublicKey,
		"PureEd25519":                               x509.PureEd25519,
		"SHA1WithRSA":                               x509.SHA1WithRSA,
		"DSAWithSHA1":                               x509.DSAWithSHA1,
		"encryptPEMBlock":                           x509.EncryptPEMBlock,
		"ExtKeyUsageTimeStamping":                   x509.ExtKeyUsageTimeStamping,
		"marshalPKCS1PublicKey":                     x509.MarshalPKCS1PublicKey,
		"PEMCipherAES128":                           x509.PEMCipherAES128,
		"SHA256WithRSAPSS":                          x509.SHA256WithRSAPSS,
		"setFallbackRoots":                          x509.SetFallbackRoots,
		"UnknownPublicKeyAlgorithm":                 x509.UnknownPublicKeyAlgorithm,
		"ExtKeyUsageIPSECTunnel":                    x509.ExtKeyUsageIPSECTunnel,
		"SHA384WithRSAPSS":                          x509.SHA384WithRSAPSS,
		"ExtKeyUsageNetscapeServerGatedCrypto":      x509.ExtKeyUsageNetscapeServerGatedCrypto,
		"KeyUsageKeyEncipherment":                   x509.KeyUsageKeyEncipherment,
		"systemCertPool":                            x509.SystemCertPool,
		"CANotAuthorizedForThisName":                x509.CANotAuthorizedForThisName,
		"DSA":                                       x509.DSA,
		"ExtKeyUsageMicrosoftCommercialCodeSigning": x509.ExtKeyUsageMicrosoftCommercialCodeSigning,
		"KeyUsageCRLSign":                           x509.KeyUsageCRLSign,
		"parseCertificate":                          x509.ParseCertificate,
		"DSAWithSHA256":                             x509.DSAWithSHA256,
		"ExtKeyUsageIPSECEndSystem":                 x509.ExtKeyUsageIPSECEndSystem,
		"marshalECPrivateKey":                       x509.MarshalECPrivateKey,
		"NotAuthorizedToSign":                       x509.NotAuthorizedToSign,
		"PEMCipher3DES":                             x509.PEMCipher3DES,
		"createCertificate":                         x509.CreateCertificate,
		"Ed25519":                                   x509.Ed25519,
		"ErrUnsupportedAlgorithm":                   x509.ErrUnsupportedAlgorithm,
		"IncompatibleUsage":                         x509.IncompatibleUsage,
		"NameConstraintsWithoutSANs":                x509.NameConstraintsWithoutSANs,
		"KeyUsageContentCommitment":                 x509.KeyUsageContentCommitment,
		"NameMismatch":                              x509.NameMismatch,
		"parseCertificates":                         x509.ParseCertificates,
		"decryptPEMBlock":                           x509.DecryptPEMBlock,
		"ECDSAWithSHA256":                           x509.ECDSAWithSHA256,
		"ECDSAWithSHA512":                           x509.ECDSAWithSHA512,
		"ExtKeyUsageIPSECUser":                      x509.ExtKeyUsageIPSECUser,
		"isEncryptedPEMBlock":                       x509.IsEncryptedPEMBlock,
		"SHA512WithRSAPSS":                          x509.SHA512WithRSAPSS,
		"createCertificateRequest":                  x509.CreateCertificateRequest,
		"ECDSAWithSHA384":                           x509.ECDSAWithSHA384,
		"ExtKeyUsageEmailProtection":                x509.ExtKeyUsageEmailProtection,
		"MD2WithRSA":                                x509.MD2WithRSA,
		"marshalPKCS8PrivateKey":                    x509.MarshalPKCS8PrivateKey,
		"KeyUsageDecipherOnly":                      x509.KeyUsageDecipherOnly,
		"parseDERCRL":                               x509.ParseDERCRL,
		"SHA384WithRSA":                             x509.SHA384WithRSA,
		"TooManyIntermediates":                      x509.TooManyIntermediates,
		"UnconstrainedName":                         x509.UnconstrainedName,
		"parseRevocationList":                       x509.ParseRevocationList,
		"UnknownSignatureAlgorithm":                 x509.UnknownSignatureAlgorithm,
		"ECDSAWithSHA1":                             x509.ECDSAWithSHA1,
		"Expired":                                   x509.Expired,
		"KeyUsageKeyAgreement":                      x509.KeyUsageKeyAgreement,
		"marshalPKIXPublicKey":                      x509.MarshalPKIXPublicKey,
		"parsePKIXPublicKey":                        x509.ParsePKIXPublicKey,

		"emptyRevocationList":         engine.Empty[x509.RevocationList],
		"emptyRefRevocationList":      engine.EmptyRefer[x509.RevocationList],
		"refOfRevocationList":         engine.ReferOf[x509.RevocationList],
		"unRefRevocationList":         engine.UnRefer[x509.RevocationList],
		"emptyRevocationListEntry":    engine.Empty[x509.RevocationListEntry],
		"emptyRefRevocationListEntry": engine.EmptyRefer[x509.RevocationListEntry],
		"refOfRevocationListEntry":    engine.ReferOf[x509.RevocationListEntry],
		"unRefRevocationListEntry":    engine.UnRefer[x509.RevocationListEntry],
		"emptyVerifyOptions":          engine.Empty[x509.VerifyOptions],
		"emptyRefVerifyOptions":       engine.EmptyRefer[x509.VerifyOptions],
		"refOfVerifyOptions":          engine.ReferOf[x509.VerifyOptions],
		"unRefVerifyOptions":          engine.UnRefer[x509.VerifyOptions],
		"emptyCertificate":            engine.Empty[x509.Certificate],
		"emptyRefCertificate":         engine.EmptyRefer[x509.Certificate],
		"refOfCertificate":            engine.ReferOf[x509.Certificate],
		"unRefCertificate":            engine.UnRefer[x509.Certificate],
		"emptyCertificateRequest":     engine.Empty[x509.CertificateRequest],
		"emptyRefCertificateRequest":  engine.EmptyRefer[x509.CertificateRequest],
		"refOfCertificateRequest":     engine.ReferOf[x509.CertificateRequest],
		"unRefCertificateRequest":     engine.UnRefer[x509.CertificateRequest]}
)

func init() {
	engine.RegisterModule(Crypto509Module{})
}

type Crypto509Module struct{}

func (S Crypto509Module) Identity() string {
	return "golang/crypto/x509"
}
func (S Crypto509Module) TypeDefine() []byte {
	return Crypto509Define
}
func (S Crypto509Module) Exports() map[string]any {
	return Crypto509Declared
}
