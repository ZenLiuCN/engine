// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/crypto/x509/pkix'{

	// @ts-ignore
	import * as fmt from 'golang/fmt'
	// @ts-ignore
	import * as big from 'golang/math/big'
	// @ts-ignore
	import * as asn1 from 'golang/encoding/asn1'
	// @ts-ignore
	import * as time from 'golang/time'
	// @ts-ignore
	import type {Struct,bool,Ref,int} from 'go'
	export interface AlgorithmIdentifier extends Struct<AlgorithmIdentifier>{

			algorithm:asn1.ObjectIdentifier
			parameters:asn1.RawValue
	}
	export interface AttributeTypeAndValue extends Struct<AttributeTypeAndValue>{

			type:asn1.ObjectIdentifier
			value:any
	}
	export interface AttributeTypeAndValueSET extends Struct<AttributeTypeAndValueSET>{

			type:asn1.ObjectIdentifier
			value:AttributeTypeAndValue[][]
	}
	export interface CertificateList extends Struct<CertificateList>{

			tbsCertList:TBSCertificateList
			signatureAlgorithm:AlgorithmIdentifier
			signatureValue:asn1.BitString
			hasExpired(now:time.Time):bool
	}
	export interface Extension extends Struct<Extension>{

			id:asn1.ObjectIdentifier
			critical:bool
			value:Uint8Array
	}
	export interface Name extends fmt.Stringer,Struct<Name>{

			country:string[]
			organization:string[]
			organizationalUnit:string[]
			locality:string[]
			province:string[]
			streetAddress:string[]
			postalCode:string[]
			serialNumber:string
			commonName:string
			names:AttributeTypeAndValue[]
			extraNames:AttributeTypeAndValue[]
			fillFromRDNSequence(rdns:Ref<RDNSequence>):void
			toRDNSequence():RDNSequence
			string():string
	}
	export interface RDNSequence extends Array<RelativeDistinguishedNameSET>{

			string():string
	}
	export interface RelativeDistinguishedNameSET extends Array<AttributeTypeAndValue>{

	}
	export interface RevokedCertificate extends Struct<RevokedCertificate>{

			serialNumber:Ref<big.Int>
			revocationTime:time.Time
			extensions:Extension[]
	}
	export interface TBSCertificateList extends Struct<TBSCertificateList>{

			raw:asn1.RawContent
			version:int
			signature:AlgorithmIdentifier
			issuer:RDNSequence
			thisUpdate:time.Time
			nextUpdate:time.Time
			revokedCertificates:RevokedCertificate[]
			extensions:Extension[]
	}
	export function emptyCertificateList():CertificateList
	export function emptyRefCertificateList():Ref<CertificateList>
	export function refOfCertificateList(x:CertificateList,v:Ref<CertificateList>)
	export function unRefCertificateList(v:Ref<CertificateList>):CertificateList
	export function emptyExtension():Extension
	export function emptyRefExtension():Ref<Extension>
	export function refOfExtension(x:Extension,v:Ref<Extension>)
	export function unRefExtension(v:Ref<Extension>):Extension
	export function emptyName():Name
	export function emptyRefName():Ref<Name>
	export function refOfName(x:Name,v:Ref<Name>)
	export function unRefName(v:Ref<Name>):Name
	export function emptyRevokedCertificate():RevokedCertificate
	export function emptyRefRevokedCertificate():Ref<RevokedCertificate>
	export function refOfRevokedCertificate(x:RevokedCertificate,v:Ref<RevokedCertificate>)
	export function unRefRevokedCertificate(v:Ref<RevokedCertificate>):RevokedCertificate
	export function emptyTBSCertificateList():TBSCertificateList
	export function emptyRefTBSCertificateList():Ref<TBSCertificateList>
	export function refOfTBSCertificateList(x:TBSCertificateList,v:Ref<TBSCertificateList>)
	export function unRefTBSCertificateList(v:Ref<TBSCertificateList>):TBSCertificateList
	export function emptyAlgorithmIdentifier():AlgorithmIdentifier
	export function emptyRefAlgorithmIdentifier():Ref<AlgorithmIdentifier>
	export function refOfAlgorithmIdentifier(x:AlgorithmIdentifier,v:Ref<AlgorithmIdentifier>)
	export function unRefAlgorithmIdentifier(v:Ref<AlgorithmIdentifier>):AlgorithmIdentifier
	export function emptyAttributeTypeAndValue():AttributeTypeAndValue
	export function emptyRefAttributeTypeAndValue():Ref<AttributeTypeAndValue>
	export function refOfAttributeTypeAndValue(x:AttributeTypeAndValue,v:Ref<AttributeTypeAndValue>)
	export function unRefAttributeTypeAndValue(v:Ref<AttributeTypeAndValue>):AttributeTypeAndValue
	export function emptyAttributeTypeAndValueSET():AttributeTypeAndValueSET
	export function emptyRefAttributeTypeAndValueSET():Ref<AttributeTypeAndValueSET>
	export function refOfAttributeTypeAndValueSET(x:AttributeTypeAndValueSET,v:Ref<AttributeTypeAndValueSET>)
	export function unRefAttributeTypeAndValueSET(v:Ref<AttributeTypeAndValueSET>):AttributeTypeAndValueSET
}