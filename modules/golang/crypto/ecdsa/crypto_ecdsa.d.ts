// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/crypto/ecdsa'{

	// @ts-ignore
	import * as elliptic from 'golang/crypto/elliptic'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as big from 'golang/math/big'
	// @ts-ignore
	import * as crypto from 'golang/crypto'
	// @ts-ignore
	import * as ecdh from 'golang/crypto/ecdh'
	// @ts-ignore
	import type {error,Struct,bool,Ref} from 'go'
	export function generateKey(c:elliptic.Curve,rand:io.Reader):Ref<PrivateKey>

	export interface PrivateKey extends Struct<PrivateKey>,crypto.DecrypterOpts,crypto.PublicKey,crypto.PrivateKey,crypto.Signer,elliptic.Curve{

			publicKey:PublicKey
			D:Ref<big.Int>
			ecdh():Ref<ecdh.PrivateKey>
			public():crypto.PublicKey
			equal(x:crypto.PrivateKey):bool
			sign(rand:io.Reader,digest:Uint8Array,opts:crypto.SignerOpts):Uint8Array
	}
	export interface PublicKey extends crypto.PublicKey,elliptic.Curve,crypto.PrivateKey,Struct<PublicKey>,crypto.DecrypterOpts{

			curve:elliptic.Curve
			X:Ref<big.Int>
			Y:Ref<big.Int>
			ecdh():Ref<ecdh.PublicKey>
			equal(x:crypto.PublicKey):bool
	}
	export function sign(rand:io.Reader,priv:Ref<PrivateKey>,hash:Uint8Array):[Ref<big.Int>,Ref<big.Int>]

	export function signASN1(rand:io.Reader,priv:Ref<PrivateKey>,hash:Uint8Array):Uint8Array

	export function verify(pub:Ref<PublicKey>,hash:Uint8Array,r:Ref<big.Int>,s:Ref<big.Int>):bool

	export function verifyASN1(pub:Ref<PublicKey>,hash:Uint8Array,sig:Uint8Array):bool

	export function emptyPrivateKey():PrivateKey
	export function emptyRefPrivateKey():Ref<PrivateKey>
	export function refOfPrivateKey(x:PrivateKey,v:Ref<PrivateKey>)
	export function unRefPrivateKey(v:Ref<PrivateKey>):PrivateKey
	export function emptyPublicKey():PublicKey
	export function emptyRefPublicKey():Ref<PublicKey>
	export function refOfPublicKey(x:PublicKey,v:Ref<PublicKey>)
	export function unRefPublicKey(v:Ref<PublicKey>):PublicKey
}