// Code generated by define_gene; DO NOT EDIT.
package ecdsa

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"crypto/ecdsa"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto/ecdh"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto/elliptic"
	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	_ "github.com/ZenLiuCN/engine/modules/golang/math/big"
)

var (
	//go:embed crypto_ecdsa.d.ts
	CryptoEcdsaDefine   []byte
	CryptoEcdsaDeclared = map[string]any{
		"verify":      ecdsa.Verify,
		"verifyASN1":  ecdsa.VerifyASN1,
		"generateKey": ecdsa.GenerateKey,
		"sign":        ecdsa.Sign,
		"signASN1":    ecdsa.SignASN1,

		"emptyPublicKey":     engine.Empty[ecdsa.PublicKey],
		"emptyRefPublicKey":  engine.EmptyRefer[ecdsa.PublicKey],
		"refOfPublicKey":     engine.ReferOf[ecdsa.PublicKey],
		"unRefPublicKey":     engine.UnRefer[ecdsa.PublicKey],
		"emptyPrivateKey":    engine.Empty[ecdsa.PrivateKey],
		"emptyRefPrivateKey": engine.EmptyRefer[ecdsa.PrivateKey],
		"refOfPrivateKey":    engine.ReferOf[ecdsa.PrivateKey],
		"unRefPrivateKey":    engine.UnRefer[ecdsa.PrivateKey]}
)

func init() {
	engine.RegisterModule(CryptoEcdsaModule{})
}

type CryptoEcdsaModule struct{}

func (S CryptoEcdsaModule) Identity() string {
	return "golang/crypto/ecdsa"
}
func (S CryptoEcdsaModule) TypeDefine() []byte {
	return CryptoEcdsaDefine
}
func (S CryptoEcdsaModule) Exports() map[string]any {
	return CryptoEcdsaDeclared
}
