// Code generated by define_gene; DO NOT EDIT.
package rsa

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"crypto/rsa"
	_ "github.com/ZenLiuCN/engine/modules/golang/crypto"
	_ "github.com/ZenLiuCN/engine/modules/golang/hash"
	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	_ "github.com/ZenLiuCN/engine/modules/golang/math/big"
)

var (
	//go:embed crypto_rsa.d.ts
	CryptoRsaDefine   []byte
	CryptoRsaDeclared = map[string]any{
		"signPKCS1v15":              rsa.SignPKCS1v15,
		"verifyPKCS1v15":            rsa.VerifyPKCS1v15,
		"verifyPSS":                 rsa.VerifyPSS,
		"decryptPKCS1v15SessionKey": rsa.DecryptPKCS1v15SessionKey,
		"encryptPKCS1v15":           rsa.EncryptPKCS1v15,
		"ErrMessageTooLong":         rsa.ErrMessageTooLong,
		"generateKey":               rsa.GenerateKey,
		"PSSSaltLengthAuto":         rsa.PSSSaltLengthAuto,
		"ErrDecryption":             rsa.ErrDecryption,
		"signPSS":                   rsa.SignPSS,
		"decryptOAEP":               rsa.DecryptOAEP,
		"ErrVerification":           rsa.ErrVerification,
		"decryptPKCS1v15":           rsa.DecryptPKCS1v15,
		"encryptOAEP":               rsa.EncryptOAEP,
		"generateMultiPrimeKey":     rsa.GenerateMultiPrimeKey,
		"PSSSaltLengthEqualsHash":   rsa.PSSSaltLengthEqualsHash,

		"emptyCRTValue":                  engine.Empty[rsa.CRTValue],
		"emptyRefCRTValue":               engine.EmptyRefer[rsa.CRTValue],
		"refOfCRTValue":                  engine.ReferOf[rsa.CRTValue],
		"unRefCRTValue":                  engine.UnRefer[rsa.CRTValue],
		"emptyOAEPOptions":               engine.Empty[rsa.OAEPOptions],
		"emptyRefOAEPOptions":            engine.EmptyRefer[rsa.OAEPOptions],
		"refOfOAEPOptions":               engine.ReferOf[rsa.OAEPOptions],
		"unRefOAEPOptions":               engine.UnRefer[rsa.OAEPOptions],
		"emptyPKCS1v15DecryptOptions":    engine.Empty[rsa.PKCS1v15DecryptOptions],
		"emptyRefPKCS1v15DecryptOptions": engine.EmptyRefer[rsa.PKCS1v15DecryptOptions],
		"refOfPKCS1v15DecryptOptions":    engine.ReferOf[rsa.PKCS1v15DecryptOptions],
		"unRefPKCS1v15DecryptOptions":    engine.UnRefer[rsa.PKCS1v15DecryptOptions],
		"emptyPSSOptions":                engine.Empty[rsa.PSSOptions],
		"emptyRefPSSOptions":             engine.EmptyRefer[rsa.PSSOptions],
		"refOfPSSOptions":                engine.ReferOf[rsa.PSSOptions],
		"unRefPSSOptions":                engine.UnRefer[rsa.PSSOptions],
		"emptyPrecomputedValues":         engine.Empty[rsa.PrecomputedValues],
		"emptyRefPrecomputedValues":      engine.EmptyRefer[rsa.PrecomputedValues],
		"refOfPrecomputedValues":         engine.ReferOf[rsa.PrecomputedValues],
		"unRefPrecomputedValues":         engine.UnRefer[rsa.PrecomputedValues],
		"emptyPrivateKey":                engine.Empty[rsa.PrivateKey],
		"emptyRefPrivateKey":             engine.EmptyRefer[rsa.PrivateKey],
		"refOfPrivateKey":                engine.ReferOf[rsa.PrivateKey],
		"unRefPrivateKey":                engine.UnRefer[rsa.PrivateKey],
		"emptyPublicKey":                 engine.Empty[rsa.PublicKey],
		"emptyRefPublicKey":              engine.EmptyRefer[rsa.PublicKey],
		"refOfPublicKey":                 engine.ReferOf[rsa.PublicKey],
		"unRefPublicKey":                 engine.UnRefer[rsa.PublicKey]}
)

func init() {
	engine.RegisterModule(CryptoRsaModule{})
}

type CryptoRsaModule struct{}

func (S CryptoRsaModule) Identity() string {
	return "golang/crypto/rsa"
}
func (S CryptoRsaModule) TypeDefine() []byte {
	return CryptoRsaDefine
}
func (S CryptoRsaModule) Exports() map[string]any {
	return CryptoRsaDeclared
}
