// Code generated by define_gene; DO NOT EDIT.
package multipart

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	_ "github.com/ZenLiuCN/engine/modules/golang/net/textproto"
	"mime/multipart"
)

var (
	//go:embed mime_multipart.d.ts
	MimeMultipartDefine   []byte
	MimeMultipartDeclared = map[string]any{
		"ErrMessageTooLarge": multipart.ErrMessageTooLarge,
		"newReader":          multipart.NewReader,
		"newWriter":          multipart.NewWriter,

		"emptyForm":          engine.Empty[multipart.Form],
		"emptyRefForm":       engine.EmptyRefer[multipart.Form],
		"refOfForm":          engine.ReferOf[multipart.Form],
		"unRefForm":          engine.UnRefer[multipart.Form],
		"emptyPart":          engine.Empty[multipart.Part],
		"emptyRefPart":       engine.EmptyRefer[multipart.Part],
		"refOfPart":          engine.ReferOf[multipart.Part],
		"unRefPart":          engine.UnRefer[multipart.Part],
		"emptyFileHeader":    engine.Empty[multipart.FileHeader],
		"emptyRefFileHeader": engine.EmptyRefer[multipart.FileHeader],
		"refOfFileHeader":    engine.ReferOf[multipart.FileHeader],
		"unRefFileHeader":    engine.UnRefer[multipart.FileHeader]}
)

func init() {
	engine.RegisterModule(MimeMultipartModule{})
}

type MimeMultipartModule struct{}

func (S MimeMultipartModule) Identity() string {
	return "golang/mime/multipart"
}
func (S MimeMultipartModule) TypeDefine() []byte {
	return MimeMultipartDefine
}
func (S MimeMultipartModule) Exports() map[string]any {
	return MimeMultipartDeclared
}
