// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/mime/multipart'{

	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as textproto from 'golang/net/textproto'
	// @ts-ignore
	import type {Struct,error,map,Ref,int,GoError,int64} from 'go'
	export const ErrMessageTooLarge:GoError
	export interface File extends io.Reader,io.ReaderAt,io.Seeker,io.Closer{

	}
	export interface FileHeader extends Struct<FileHeader>{

			filename:string
			header:textproto.MIMEHeader
			size:int64
			open():File
	}
	export interface Form extends Struct<Form>{

			value:map<string,string[]>
			file:map<string,Ref<FileHeader>[]>
			removeAll()/*error*/
	}
	export function newReader(r:io.Reader,boundary:string):Ref<Reader>

	export function newWriter(w:io.Writer):Ref<Writer>

	export interface Part extends Struct<Part>,io.ReadCloser,io.Closer{

			header:textproto.MIMEHeader
			formName():string
			fileName():string
			read(d:Uint8Array):int
			close():error
	}
	export interface Reader extends Struct<Reader>{

			readForm(maxMemory:int64):Ref<Form>
			nextPart():Ref<Part>
			nextRawPart():Ref<Part>
	}
	export interface Writer extends Struct<Writer>,io.Closer{

			boundary():string
			setBoundary(boundary:string)/*error*/
			formDataContentType():string
			createPart(header:textproto.MIMEHeader):io.Writer
			createFormFile(fieldname:string,filename:string):io.Writer
			createFormField(fieldname:string):io.Writer
			writeField(fieldname:string,value:string)/*error*/
			close():error
	}
	export function emptyFileHeader():FileHeader
	export function emptyRefFileHeader():Ref<FileHeader>
	export function refOfFileHeader(x:FileHeader,v:Ref<FileHeader>)
	export function unRefFileHeader(v:Ref<FileHeader>):FileHeader
	export function emptyForm():Form
	export function emptyRefForm():Ref<Form>
	export function refOfForm(x:Form,v:Ref<Form>)
	export function unRefForm(v:Ref<Form>):Form
	export function emptyPart():Part
	export function emptyRefPart():Ref<Part>
	export function refOfPart(x:Part,v:Ref<Part>)
	export function unRefPart(v:Ref<Part>):Part
}