// Code generated by define_gene; DO NOT EDIT.
package io

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"io"
)

var (
	//go:embed io.d.ts
	IoDefine   []byte
	IoDeclared = map[string]any{
		"newOffsetWriter":  io.NewOffsetWriter,
		"writeString":      io.WriteString,
		"ErrNoProgress":    io.ErrNoProgress,
		"ErrShortBuffer":   io.ErrShortBuffer,
		"multiWriter":      io.MultiWriter,
		"SeekCurrent":      io.SeekCurrent,
		"copy":             io.Copy,
		"EOF":              io.EOF,
		"ErrShortWrite":    io.ErrShortWrite,
		"newSectionReader": io.NewSectionReader,
		"nopCloser":        io.NopCloser,
		"teeReader":        io.TeeReader,
		"copyN":            io.CopyN,
		"Discard":          io.Discard,
		"ErrClosedPipe":    io.ErrClosedPipe,
		"readAll":          io.ReadAll,
		"limitReader":      io.LimitReader,
		"multiReader":      io.MultiReader,
		"copyBuffer":       io.CopyBuffer,
		"pipe":             io.Pipe,
		"SeekEnd":          io.SeekEnd,
		"readFull":         io.ReadFull,
		"SeekStart":        io.SeekStart,
		"ErrUnexpectedEOF": io.ErrUnexpectedEOF,
		"readAtLeast":      io.ReadAtLeast,

		"emptyLimitedReader":    engine.Empty[io.LimitedReader],
		"emptyRefLimitedReader": engine.EmptyRefer[io.LimitedReader],
		"refOfLimitedReader":    engine.ReferOf[io.LimitedReader],
		"unRefLimitedReader":    engine.UnRefer[io.LimitedReader],
		"emptyPipeReader":       engine.Empty[io.PipeReader],
		"emptyRefPipeReader":    engine.EmptyRefer[io.PipeReader],
		"refOfPipeReader":       engine.ReferOf[io.PipeReader],
		"unRefPipeReader":       engine.UnRefer[io.PipeReader],
		"emptyPipeWriter":       engine.Empty[io.PipeWriter],
		"emptyRefPipeWriter":    engine.EmptyRefer[io.PipeWriter],
		"refOfPipeWriter":       engine.ReferOf[io.PipeWriter],
		"unRefPipeWriter":       engine.UnRefer[io.PipeWriter]}
)

func init() {
	engine.RegisterModule(IoModule{})
}

type IoModule struct{}

func (S IoModule) Identity() string {
	return "golang/io"
}
func (S IoModule) TypeDefine() []byte {
	return IoDefine
}
func (S IoModule) Exports() map[string]any {
	return IoDeclared
}
