// Code generated by define_gene; DO NOT EDIT.
package os

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	_ "github.com/ZenLiuCN/engine/modules/golang/io/fs"
	_ "github.com/ZenLiuCN/engine/modules/golang/syscall"
	_ "github.com/ZenLiuCN/engine/modules/golang/time"
	"os"
)

var (
	//go:embed os.d.ts
	OsDefine   []byte
	OsDeclared = map[string]any{
		"chdir":               os.Chdir,
		"DevNull":             os.DevNull,
		"getppid":             os.Getppid,
		"environ":             os.Environ,
		"ErrClosed":           os.ErrClosed,
		"ErrInvalid":          os.ErrInvalid,
		"geteuid":             os.Geteuid,
		"O_RDWR":              os.O_RDWR,
		"O_EXCL":              os.O_EXCL,
		"clearenv":            os.Clearenv,
		"symlink":             os.Symlink,
		"expandEnv":           os.ExpandEnv,
		"ModeSymlink":         os.ModeSymlink,
		"PathSeparator":       os.PathSeparator,
		"isPermission":        os.IsPermission,
		"ModeSetuid":          os.ModeSetuid,
		"O_CREATE":            os.O_CREATE,
		"Args":                os.Args,
		"getwd":               os.Getwd,
		"Interrupt":           os.Interrupt,
		"userCacheDir":        os.UserCacheDir,
		"createTemp":          os.CreateTemp,
		"ModePerm":            os.ModePerm,
		"O_TRUNC":             os.O_TRUNC,
		"userHomeDir":         os.UserHomeDir,
		"ErrNotExist":         os.ErrNotExist,
		"ModeAppend":          os.ModeAppend,
		"writeFile":           os.WriteFile,
		"readFile":            os.ReadFile,
		"chown":               os.Chown,
		"ModeCharDevice":      os.ModeCharDevice,
		"ModeNamedPipe":       os.ModeNamedPipe,
		"ModeSticky":          os.ModeSticky,
		"getegid":             os.Getegid,
		"getgroups":           os.Getgroups,
		"isExist":             os.IsExist,
		"Kill":                os.Kill,
		"truncate":            os.Truncate,
		"O_APPEND":            os.O_APPEND,
		"removeAll":           os.RemoveAll,
		"expand":              os.Expand,
		"getgid":              os.Getgid,
		"sameFile":            os.SameFile,
		"open":                os.Open,
		"remove":              os.Remove,
		"hostname":            os.Hostname,
		"isTimeout":           os.IsTimeout,
		"O_RDONLY":            os.O_RDONLY,
		"Stderr":              os.Stderr,
		"tempDir":             os.TempDir,
		"userConfigDir":       os.UserConfigDir,
		"mkdir":               os.Mkdir,
		"ModeDevice":          os.ModeDevice,
		"ModeExclusive":       os.ModeExclusive,
		"readDir":             os.ReadDir,
		"SEEK_SET":            os.SEEK_SET,
		"chtimes":             os.Chtimes,
		"dirFS":               os.DirFS,
		"link":                os.Link,
		"newSyscallError":     os.NewSyscallError,
		"openFile":            os.OpenFile,
		"setenv":              os.Setenv,
		"Stdout":              os.Stdout,
		"readlink":            os.Readlink,
		"startProcess":        os.StartProcess,
		"create":              os.Create,
		"getuid":              os.Getuid,
		"Stdin":               os.Stdin,
		"executable":          os.Executable,
		"ErrDeadlineExceeded": os.ErrDeadlineExceeded,
		"ErrExist":            os.ErrExist,
		"lookupEnv":           os.LookupEnv,
		"ModeType":            os.ModeType,
		"pipe":                os.Pipe,
		"rename":              os.Rename,
		"ErrNoDeadline":       os.ErrNoDeadline,
		"getenv":              os.Getenv,
		"getpagesize":         os.Getpagesize,
		"isPathSeparator":     os.IsPathSeparator,
		"lchown":              os.Lchown,
		"mkdirTemp":           os.MkdirTemp,
		"newFile":             os.NewFile,
		"mkdirAll":            os.MkdirAll,
		"O_SYNC":              os.O_SYNC,
		"findProcess":         os.FindProcess,
		"isNotExist":          os.IsNotExist,
		"O_WRONLY":            os.O_WRONLY,
		"stat":                os.Stat,
		"chmod":               os.Chmod,
		"ErrProcessDone":      os.ErrProcessDone,
		"getpid":              os.Getpid,
		"PathListSeparator":   os.PathListSeparator,
		"SEEK_END":            os.SEEK_END,
		"ModeSocket":          os.ModeSocket,
		"ErrPermission":       os.ErrPermission,
		"lstat":               os.Lstat,
		"ModeIrregular":       os.ModeIrregular,
		"exit":                os.Exit,
		"unsetenv":            os.Unsetenv,
		"ModeDir":             os.ModeDir,
		"ModeSetgid":          os.ModeSetgid,
		"ModeTemporary":       os.ModeTemporary,
		"SEEK_CUR":            os.SEEK_CUR,

		"emptyProcAttr":        engine.Empty[os.ProcAttr],
		"emptyRefProcAttr":     engine.EmptyRefer[os.ProcAttr],
		"refOfProcAttr":        engine.ReferOf[os.ProcAttr],
		"unRefProcAttr":        engine.UnRefer[os.ProcAttr],
		"emptyProcess":         engine.Empty[os.Process],
		"emptyRefProcess":      engine.EmptyRefer[os.Process],
		"refOfProcess":         engine.ReferOf[os.Process],
		"unRefProcess":         engine.UnRefer[os.Process],
		"emptyProcessState":    engine.Empty[os.ProcessState],
		"emptyRefProcessState": engine.EmptyRefer[os.ProcessState],
		"refOfProcessState":    engine.ReferOf[os.ProcessState],
		"unRefProcessState":    engine.UnRefer[os.ProcessState]}
)

func init() {
	engine.RegisterModule(OsModule{})
}

type OsModule struct{}

func (S OsModule) Identity() string {
	return "golang/os"
}
func (S OsModule) TypeDefine() []byte {
	return OsDefine
}
func (S OsModule) Exports() map[string]any {
	return OsDeclared
}
