// Code generated by define_gene; DO NOT EDIT.
package math

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"math"
)

var (
	//go:embed math.d.ts
	MathDefine   []byte
	MathDeclared = map[string]any{
		"signbit":                math.Signbit,
		"erfc":                   math.Erfc,
		"MinInt64":               math.MinInt64,
		"naN":                    math.NaN,
		"lgamma":                 math.Lgamma,
		"log2":                   math.Log2,
		"MaxFloat64":             math.MaxFloat64,
		"modf":                   math.Modf,
		"Sqrt2":                  math.Sqrt2,
		"SqrtE":                  math.SqrtE,
		"SqrtPi":                 math.SqrtPi,
		"tan":                    math.Tan,
		"nextafter32":            math.Nextafter32,
		"sin":                    math.Sin,
		"trunc":                  math.Trunc,
		"erfinv":                 math.Erfinv,
		"frexp":                  math.Frexp,
		"MaxInt16":               math.MaxInt16,
		"Phi":                    math.Phi,
		"J1":                     math.J1,
		"MaxUint32":              math.MaxUint32,
		"dim":                    math.Dim,
		"mod":                    math.Mod,
		"asinh":                  math.Asinh,
		"ceil":                   math.Ceil,
		"log":                    math.Log,
		"nextafter":              math.Nextafter,
		"Ln2":                    math.Ln2,
		"copysign":               math.Copysign,
		"E":                      math.E,
		"inf":                    math.Inf,
		"MaxInt32":               math.MaxInt32,
		"sqrt":                   math.Sqrt,
		"Y1":                     math.Y1,
		"atanh":                  math.Atanh,
		"fma":                    math.FMA,
		"Log2E":                  math.Log2E,
		"roundToEven":            math.RoundToEven,
		"acosh":                  math.Acosh,
		"cos":                    math.Cos,
		"erf":                    math.Erf,
		"exp2":                   math.Exp2,
		"jn":                     math.Jn,
		"pow":                    math.Pow,
		"sincos":                 math.Sincos,
		"abs":                    math.Abs,
		"atan2":                  math.Atan2,
		"expm1":                  math.Expm1,
		"J0":                     math.J0,
		"floor":                  math.Floor,
		"Log10E":                 math.Log10E,
		"round":                  math.Round,
		"erfcinv":                math.Erfcinv,
		"MaxInt8":                math.MaxInt8,
		"MinInt16":               math.MinInt16,
		"MinInt32":               math.MinInt32,
		"min":                    math.Min,
		"MinInt":                 math.MinInt,
		"acos":                   math.Acos,
		"ldexp":                  math.Ldexp,
		"float64bits":            math.Float64bits,
		"MaxInt64":               math.MaxInt64,
		"Y0":                     math.Y0,
		"pow10":                  math.Pow10,
		"cbrt":                   math.Cbrt,
		"ilogb":                  math.Ilogb,
		"isInf":                  math.IsInf,
		"logb":                   math.Logb,
		"atan":                   math.Atan,
		"MaxUint64":              math.MaxUint64,
		"SqrtPhi":                math.SqrtPhi,
		"asin":                   math.Asin,
		"Ln10":                   math.Ln10,
		"cosh":                   math.Cosh,
		"MaxUint":                math.MaxUint,
		"yn":                     math.Yn,
		"MaxFloat32":             math.MaxFloat32,
		"MaxUint16":              math.MaxUint16,
		"Pi":                     math.Pi,
		"float64frombits":        math.Float64frombits,
		"MaxInt":                 math.MaxInt,
		"MinInt8":                math.MinInt8,
		"hypot":                  math.Hypot,
		"log10":                  math.Log10,
		"log1p":                  math.Log1p,
		"max":                    math.Max,
		"remainder":              math.Remainder,
		"float32frombits":        math.Float32frombits,
		"gamma":                  math.Gamma,
		"exp":                    math.Exp,
		"float32bits":            math.Float32bits,
		"MaxUint8":               math.MaxUint8,
		"SmallestNonzeroFloat32": math.SmallestNonzeroFloat32,
		"tanh":                   math.Tanh,
		"SmallestNonzeroFloat64": math.SmallestNonzeroFloat64,
		"isNaN":                  math.IsNaN,
		"sinh":                   math.Sinh,
	}
)

func init() {
	engine.RegisterModule(MathModule{})
}

type MathModule struct{}

func (S MathModule) Identity() string {
	return "golang/math"
}
func (S MathModule) TypeDefine() []byte {
	return MathDefine
}
func (S MathModule) Exports() map[string]any {
	return MathDeclared
}
