// Code generated by define_gene; DO NOT EDIT.
package png

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/modules/golang/image"
	_ "github.com/ZenLiuCN/engine/modules/golang/io"
	"image/png"
)

var (
	//go:embed image_png.d.ts
	ImagePngDefine   []byte
	ImagePngDeclared = map[string]any{
		"BestSpeed":          png.BestSpeed,
		"decode":             png.Decode,
		"decodeConfig":       png.DecodeConfig,
		"DefaultCompression": png.DefaultCompression,
		"encode":             png.Encode,
		"NoCompression":      png.NoCompression,
		"BestCompression":    png.BestCompression,

		"emptyEncoder":          engine.Empty[png.Encoder],
		"emptyRefEncoder":       engine.EmptyRefer[png.Encoder],
		"refOfEncoder":          engine.ReferOf[png.Encoder],
		"unRefEncoder":          engine.UnRefer[png.Encoder],
		"emptyEncoderBuffer":    engine.Empty[png.EncoderBuffer],
		"emptyRefEncoderBuffer": engine.EmptyRefer[png.EncoderBuffer],
		"refOfEncoderBuffer":    engine.ReferOf[png.EncoderBuffer],
		"unRefEncoderBuffer":    engine.UnRefer[png.EncoderBuffer]}
)

func init() {
	engine.RegisterModule(ImagePngModule{})
}

type ImagePngModule struct{}

func (S ImagePngModule) Identity() string {
	return "golang/image/png"
}
func (S ImagePngModule) TypeDefine() []byte {
	return ImagePngDefine
}
func (S ImagePngModule) Exports() map[string]any {
	return ImagePngDeclared
}
