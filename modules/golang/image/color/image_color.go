// Code generated by define_gene; DO NOT EDIT.
package color

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"image/color"
)

var (
	//go:embed image_color.d.ts
	ImageColorDefine   []byte
	ImageColorDeclared = map[string]any{
		"AlphaModel":   color.AlphaModel,
		"NRGBAModel":   color.NRGBAModel,
		"YCbCrModel":   color.YCbCrModel,
		"Opaque":       color.Opaque,
		"RGBAModel":    color.RGBAModel,
		"rgbToYCbCr":   color.RGBToYCbCr,
		"Transparent":  color.Transparent,
		"CMYKModel":    color.CMYKModel,
		"GrayModel":    color.GrayModel,
		"modelFunc":    color.ModelFunc,
		"NRGBA64Model": color.NRGBA64Model,
		"rgbToCMYK":    color.RGBToCMYK,
		"yCbCrToRGB":   color.YCbCrToRGB,
		"Alpha16Model": color.Alpha16Model,
		"cmykToRGB":    color.CMYKToRGB,
		"Gray16Model":  color.Gray16Model,
		"RGBA64Model":  color.RGBA64Model,
		"Black":        color.Black,
		"NYCbCrAModel": color.NYCbCrAModel,
		"White":        color.White,

		"emptyGray16":     engine.Empty[color.Gray16],
		"emptyRefGray16":  engine.EmptyRefer[color.Gray16],
		"refOfGray16":     engine.ReferOf[color.Gray16],
		"unRefGray16":     engine.UnRefer[color.Gray16],
		"emptyNRGBA":      engine.Empty[color.NRGBA],
		"emptyRefNRGBA":   engine.EmptyRefer[color.NRGBA],
		"refOfNRGBA":      engine.ReferOf[color.NRGBA],
		"unRefNRGBA":      engine.UnRefer[color.NRGBA],
		"emptyNRGBA64":    engine.Empty[color.NRGBA64],
		"emptyRefNRGBA64": engine.EmptyRefer[color.NRGBA64],
		"refOfNRGBA64":    engine.ReferOf[color.NRGBA64],
		"unRefNRGBA64":    engine.UnRefer[color.NRGBA64],
		"emptyNYCbCrA":    engine.Empty[color.NYCbCrA],
		"emptyRefNYCbCrA": engine.EmptyRefer[color.NYCbCrA],
		"refOfNYCbCrA":    engine.ReferOf[color.NYCbCrA],
		"unRefNYCbCrA":    engine.UnRefer[color.NYCbCrA],
		"emptyRGBA64":     engine.Empty[color.RGBA64],
		"emptyRefRGBA64":  engine.EmptyRefer[color.RGBA64],
		"refOfRGBA64":     engine.ReferOf[color.RGBA64],
		"unRefRGBA64":     engine.UnRefer[color.RGBA64],
		"emptyCMYK":       engine.Empty[color.CMYK],
		"emptyRefCMYK":    engine.EmptyRefer[color.CMYK],
		"refOfCMYK":       engine.ReferOf[color.CMYK],
		"unRefCMYK":       engine.UnRefer[color.CMYK],
		"emptyGray":       engine.Empty[color.Gray],
		"emptyRefGray":    engine.EmptyRefer[color.Gray],
		"refOfGray":       engine.ReferOf[color.Gray],
		"unRefGray":       engine.UnRefer[color.Gray],
		"emptyRGBA":       engine.Empty[color.RGBA],
		"emptyRefRGBA":    engine.EmptyRefer[color.RGBA],
		"refOfRGBA":       engine.ReferOf[color.RGBA],
		"unRefRGBA":       engine.UnRefer[color.RGBA],
		"emptyYCbCr":      engine.Empty[color.YCbCr],
		"emptyRefYCbCr":   engine.EmptyRefer[color.YCbCr],
		"refOfYCbCr":      engine.ReferOf[color.YCbCr],
		"unRefYCbCr":      engine.UnRefer[color.YCbCr],
		"emptyAlpha":      engine.Empty[color.Alpha],
		"emptyRefAlpha":   engine.EmptyRefer[color.Alpha],
		"refOfAlpha":      engine.ReferOf[color.Alpha],
		"unRefAlpha":      engine.UnRefer[color.Alpha],
		"emptyAlpha16":    engine.Empty[color.Alpha16],
		"emptyRefAlpha16": engine.EmptyRefer[color.Alpha16],
		"refOfAlpha16":    engine.ReferOf[color.Alpha16],
		"unRefAlpha16":    engine.UnRefer[color.Alpha16]}
)

func init() {
	engine.RegisterModule(ImageColorModule{})
}

type ImageColorModule struct{}

func (S ImageColorModule) Identity() string {
	return "golang/image/color"
}
func (S ImageColorModule) TypeDefine() []byte {
	return ImageColorDefine
}
func (S ImageColorModule) Exports() map[string]any {
	return ImageColorDeclared
}
