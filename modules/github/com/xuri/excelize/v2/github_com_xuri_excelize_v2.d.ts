// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/xuri/excelize/v2'{
	// @ts-ignore
	import * as xml from 'golang/encoding/xml'
	// @ts-ignore
	import * as time from 'golang/time'
	// @ts-ignore
	import * as sync from 'golang/sync'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as bytes from 'golang/bytes'
	// @ts-ignore
	import * as zip from 'golang/archive/zip'
	// @ts-ignore
	import * as color from 'golang/image/color'
	// @ts-ignore
	import type {uint64,uint,uint32,Struct,byte,Ref,bool,float64,GoError,uint8,int64,int,error} from 'go'
	export interface Alignment extends xml.Token,Struct<Alignment>{
		horizontal:string
		indent:int
		justifyLastLine:bool
		readingOrder:uint64
		relativeIndent:int
		shrinkToFit:bool
		textRotation:int
		vertical:string
		wrapText:bool
	}
	export interface AppProperties extends Struct<AppProperties>,xml.Token{
		application:string
		scaleCrop:bool
		docSecurity:int
		company:string
		linksUpToDate:bool
		hyperlinksChanged:bool
		appVersion:string
	}
	export const Area:ChartType
	export const Area3D:ChartType
	export const Area3DPercentStacked:ChartType
	export const Area3DStacked:ChartType
	export const AreaPercentStacked:ChartType
	export const AreaStacked:ChartType
	export const ArgEmpty:ArgType
	export const ArgError:ArgType
	export const ArgList:ArgType
	export const ArgMatrix:ArgType
	export const ArgNumber:ArgType
	export const ArgString:ArgType
	export interface ArgType extends byte{
	}
	export const ArgUnknown:ArgType
	export interface AutoFilterOptions extends Struct<AutoFilterOptions>,xml.Token{
		column:string
		expression:string
	}
	export const Bar:ChartType
	export const Bar3DClustered:ChartType
	export const Bar3DConeClustered:ChartType
	export const Bar3DConePercentStacked:ChartType
	export const Bar3DConeStacked:ChartType
	export const Bar3DCylinderClustered:ChartType
	export const Bar3DCylinderPercentStacked:ChartType
	export const Bar3DCylinderStacked:ChartType
	export const Bar3DPercentStacked:ChartType
	export const Bar3DPyramidClustered:ChartType
	export const Bar3DPyramidPercentStacked:ChartType
	export const Bar3DPyramidStacked:ChartType
	export const Bar3DStacked:ChartType
	export const BarOfPie:ChartType
	export const BarPercentStacked:ChartType
	export const BarStacked:ChartType
	export interface Border extends Struct<Border>,xml.Token{
		type:string
		color:string
		style:int
	}
	export const Bubble:ChartType
	export const Bubble3D:ChartType
	export interface Cell extends Struct<Cell>,xml.Token{
		styleID:int
		formula:string
		value:any
	}
	export function cellNameToCoordinates(cell:string):[int,int]
	export interface CellType extends byte{
	}
	export const CellTypeBool:CellType
	export const CellTypeDate:CellType
	export const CellTypeError:CellType
	export const CellTypeFormula:CellType
	export const CellTypeInlineString:CellType
	export const CellTypeNumber:CellType
	export const CellTypeSharedString:CellType
	export const CellTypeUnset:CellType
	export interface Chart extends Struct<Chart>,xml.Token{
		type:ChartType
		series:ChartSeries[]
		format:GraphicOptions
		dimension:ChartDimension
		legend:ChartLegend
		title:RichTextRun[]
		varyColors:Ref<bool>
		xAxis:ChartAxis
		yAxis:ChartAxis
		plotArea:ChartPlotArea
		fill:Fill
		border:ChartLine
		showBlanksAs:string
		bubbleSize:int
		holeSize:int
	}
	export interface ChartAxis extends xml.Token,Struct<ChartAxis>{
		none:bool
		majorGridLines:bool
		minorGridLines:bool
		majorUnit:float64
		tickLabelSkip:int
		reverseOrder:bool
		secondary:bool
		maximum:Ref<float64>
		minimum:Ref<float64>
		font:Font
		logBase:float64
		numFmt:ChartNumFmt
		title:RichTextRun[]
	}
	export interface ChartDataLabelPositionType extends byte{
	}
	export const ChartDataLabelsPositionAbove:ChartDataLabelPositionType
	export const ChartDataLabelsPositionBelow:ChartDataLabelPositionType
	export const ChartDataLabelsPositionBestFit:ChartDataLabelPositionType
	export const ChartDataLabelsPositionCenter:ChartDataLabelPositionType
	export const ChartDataLabelsPositionInsideBase:ChartDataLabelPositionType
	export const ChartDataLabelsPositionInsideEnd:ChartDataLabelPositionType
	export const ChartDataLabelsPositionLeft:ChartDataLabelPositionType
	export const ChartDataLabelsPositionOutsideEnd:ChartDataLabelPositionType
	export const ChartDataLabelsPositionRight:ChartDataLabelPositionType
	export const ChartDataLabelsPositionUnset:ChartDataLabelPositionType
	export interface ChartDimension extends Struct<ChartDimension>,xml.Token{
		width:uint
		height:uint
	}
	export interface ChartLegend extends Struct<ChartLegend>,xml.Token{
		position:string
		showLegendKey:bool
	}
	export interface ChartLine extends Struct<ChartLine>,xml.Token{
		type:ChartLineType
		smooth:bool
		width:float64
	}
	export const ChartLineAutomatic:ChartLineType
	export const ChartLineNone:ChartLineType
	export const ChartLineSolid:ChartLineType
	export interface ChartLineType extends byte{
	}
	export interface ChartMarker extends Struct<ChartMarker>,xml.Token{
		fill:Fill
		symbol:string
		size:int
	}
	export interface ChartNumFmt extends Struct<ChartNumFmt>,xml.Token{
		customNumFmt:string
		sourceLinked:bool
	}
	export interface ChartPlotArea extends Struct<ChartPlotArea>,xml.Token{
		secondPlotValues:int
		showBubbleSize:bool
		showCatName:bool
		showLeaderLines:bool
		showPercent:bool
		showSerName:bool
		showVal:bool
		fill:Fill
		numFmt:ChartNumFmt
	}
	export interface ChartSeries extends Struct<ChartSeries>,xml.Token{
		name:string
		categories:string
		values:string
		sizes:string
		fill:Fill
		line:ChartLine
		marker:ChartMarker
		dataLabelPosition:ChartDataLabelPositionType
	}
	export interface ChartType extends byte{
	}
	export const Col:ChartType
	export const Col3D:ChartType
	export const Col3DClustered:ChartType
	export const Col3DCone:ChartType
	export const Col3DConeClustered:ChartType
	export const Col3DConePercentStacked:ChartType
	export const Col3DConeStacked:ChartType
	export const Col3DCylinder:ChartType
	export const Col3DCylinderClustered:ChartType
	export const Col3DCylinderPercentStacked:ChartType
	export const Col3DCylinderStacked:ChartType
	export const Col3DPercentStacked:ChartType
	export const Col3DPyramid:ChartType
	export const Col3DPyramidClustered:ChartType
	export const Col3DPyramidPercentStacked:ChartType
	export const Col3DPyramidStacked:ChartType
	export const Col3DStacked:ChartType
	export const ColPercentStacked:ChartType
	export const ColStacked:ChartType
	export interface ColorMappingType extends byte{
	}
	export const ColorMappingTypeAccent1:ColorMappingType
	export const ColorMappingTypeAccent2:ColorMappingType
	export const ColorMappingTypeAccent3:ColorMappingType
	export const ColorMappingTypeAccent4:ColorMappingType
	export const ColorMappingTypeAccent5:ColorMappingType
	export const ColorMappingTypeAccent6:ColorMappingType
	export const ColorMappingTypeDark1:ColorMappingType
	export const ColorMappingTypeDark2:ColorMappingType
	export const ColorMappingTypeFollowedHyperlink:ColorMappingType
	export const ColorMappingTypeHyperlink:ColorMappingType
	export const ColorMappingTypeLight1:ColorMappingType
	export const ColorMappingTypeLight2:ColorMappingType
	//-1
	export const ColorMappingTypeUnset:int
	export interface Cols extends xml.Token,Struct<Cols>{
		next():bool
		error():error
		rows(...opts:Options[]):string[]
	}
	export function columnNameToNumber(name:string):int
	export function columnNumberToName(num:int):string
	export interface Comment extends Struct<Comment>,xml.Token{
		author:string
		authorID:int
		cell:string
		text:string
		width:uint
		height:uint
		paragraph:RichTextRun[]
	}
	export interface ConditionalFormatOptions extends Struct<ConditionalFormatOptions>,xml.Token{
		type:string
		aboveAverage:bool
		percent:bool
		format:int
		criteria:string
		value:string
		minType:string
		midType:string
		maxType:string
		minValue:string
		midValue:string
		maxValue:string
		minColor:string
		midColor:string
		maxColor:string
		barColor:string
		barBorderColor:string
		barDirection:string
		barOnly:bool
		barSolid:bool
		iconStyle:string
		reverseIcons:bool
		iconsOnly:bool
		stopIfTrue:bool
	}
	//"application/vnd.ms-excel.addin.macroEnabled.main+xml"
	export const ContentTypeAddinMacro:string
	//"application/vnd.openxmlformats-officedocument.drawing+xml"
	export const ContentTypeDrawing:string
	//"application/vnd.openxmlformats-officedocument.drawingml.chart+xml"
	export const ContentTypeDrawingML:string
	//"application/vnd.ms-excel.sheet.macroEnabled.main+xml"
	export const ContentTypeMacro:string
	//"application/vnd.openxmlformats-package.relationships+xml"
	export const ContentTypeRelationships:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.ma...
	export const ContentTypeSheetML:string
	//"application/vnd.ms-excel.slicer+xml"
	export const ContentTypeSlicer:string
	//"application/vnd.ms-excel.slicerCache+xml"
	export const ContentTypeSlicerCache:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.chartshe...
	export const ContentTypeSpreadSheetMLChartsheet:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.comments...
	export const ContentTypeSpreadSheetMLComments:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCac...
	export const ContentTypeSpreadSheetMLPivotCacheDefinition:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTab...
	export const ContentTypeSpreadSheetMLPivotTable:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedSt...
	export const ContentTypeSpreadSheetMLSharedStrings:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml"
	export const ContentTypeSpreadSheetMLTable:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.workshee...
	export const ContentTypeSpreadSheetMLWorksheet:string
	//"application/vnd.openxmlformats-officedocument.spreadsheetml.template...
	export const ContentTypeTemplate:string
	//"application/vnd.ms-excel.template.macroEnabled.main+xml"
	export const ContentTypeTemplateMacro:string
	//"application/vnd.ms-office.vbaProject"
	export const ContentTypeVBA:string
	//"application/vnd.openxmlformats-officedocument.vmlDrawing"
	export const ContentTypeVML:string
	export const Contour:ChartType
	export function coordinatesToCellName(col:int,row:int,...abs:bool[]):string
	export interface CultureName extends byte{
	}
	export const CultureNameEnUS:CultureName
	export const CultureNameUnknown:CultureName
	export const CultureNameZhCN:CultureName
	export interface DataIntegrity extends Struct<DataIntegrity>,xml.Token{
		encryptedHmacKey:string
		encryptedHmacValue:string
	}
	export interface DataValidation extends Struct<DataValidation>,xml.Token{
		allowBlank:bool
		error:Ref<string>
		errorStyle:Ref<string>
		errorTitle:Ref<string>
		operator:string
		prompt:Ref<string>
		promptTitle:Ref<string>
		showDropDown:bool
		showErrorMessage:bool
		showInputMessage:bool
		sqref:string
		type:string
		formula1:string
		formula2:string
		setError(style:DataValidationErrorStyle,title:string,msg:string):void
		setInput(title:string,msg:string):void
		setDropList(keys:string[])/*error*/
		setRange(f1:any,f2:any,t:DataValidationType,o:DataValidationOperator)/*error*/
		setSqrefDropList(sqref:string):void
		setSqref(sqref:string):void
	}
	export interface DataValidationErrorStyle extends int{
	}
	export const DataValidationErrorStyleInformation:DataValidationErrorStyle
	export const DataValidationErrorStyleStop:DataValidationErrorStyle
	export const DataValidationErrorStyleWarning:DataValidationErrorStyle
	export interface DataValidationOperator extends int{
	}
	export const DataValidationOperatorBetween:DataValidationOperator
	export const DataValidationOperatorEqual:DataValidationOperator
	export const DataValidationOperatorGreaterThan:DataValidationOperator
	export const DataValidationOperatorGreaterThanOrEqual:DataValidationOperator
	export const DataValidationOperatorLessThan:DataValidationOperator
	export const DataValidationOperatorLessThanOrEqual:DataValidationOperator
	export const DataValidationOperatorNotBetween:DataValidationOperator
	export const DataValidationOperatorNotEqual:DataValidationOperator
	export interface DataValidationType extends int{
	}
	export const DataValidationTypeCustom:DataValidationType
	export const DataValidationTypeDate:DataValidationType
	export const DataValidationTypeDecimal:DataValidationType
	export const DataValidationTypeList:DataValidationType
	export const DataValidationTypeNone:DataValidationType
	export const DataValidationTypeTextLength:DataValidationType
	export const DataValidationTypeTime:DataValidationType
	export const DataValidationTypeWhole:DataValidationType
	export function decrypt(raw:Uint8Array,opts:Ref<Options>):Uint8Array
	export interface DefinedName extends Struct<DefinedName>,xml.Token{
		name:string
		comment:string
		refersTo:string
		scope:string
	}
	export interface DocProperties extends xml.Token,Struct<DocProperties>{
		category:string
		contentStatus:string
		created:string
		creator:string
		description:string
		identifier:string
		keywords:string
		lastModifiedBy:string
		modified:string
		revision:string
		subject:string
		title:string
		language:string
		version:string
	}
	export const Doughnut:ChartType
	//9525
	export const EMU:int
	export function encrypt(raw:Uint8Array,opts:Ref<Options>):Uint8Array
	export interface EncryptedKey extends Struct<EncryptedKey>,xml.Token{
		xmlName:xml.Name
		spinCount:int
		encryptedVerifierHashInput:string
		encryptedVerifierHashValue:string
		encryptedKeyValue:string
		keyData:KeyData
	}
	export interface Encryption extends Struct<Encryption>,xml.Token{
		xmlName:xml.Name
		keyData:KeyData
		dataIntegrity:DataIntegrity
		keyEncryptors:KeyEncryptors
	}
	export const ErrAddVBAProject:GoError
	export const ErrAttrValBool:GoError
	export const ErrCellCharsLength:GoError
	export const ErrCellStyles:GoError
	export const ErrColumnNumber:GoError
	export const ErrColumnWidth:GoError
	export const ErrCoordinates:GoError
	export const ErrCustomNumFmt:GoError
	export const ErrDataValidationFormulaLength:GoError
	export const ErrDataValidationRange:GoError
	export const ErrDefinedNameDuplicate:GoError
	export const ErrDefinedNameScope:GoError
	export const ErrExistsSheet:GoError
	export const ErrExistsTableName:GoError
	export const ErrFontLength:GoError
	export const ErrFontSize:GoError
	export const ErrFormControlValue:GoError
	export const ErrGroupSheets:GoError
	export const ErrImgExt:GoError
	export const ErrInvalidFormula:GoError
	export const ErrMaxFilePathLength:GoError
	export const ErrMaxRowHeight:GoError
	export const ErrMaxRows:GoError
	export const ErrNameLength:GoError
	export const ErrOptionsUnzipSizeLimit:GoError
	export const ErrOutlineLevel:GoError
	export const ErrParameterInvalid:GoError
	export const ErrParameterRequired:GoError
	export const ErrPasswordLengthInvalid:GoError
	export const ErrSave:GoError
	export const ErrSheetIdx:GoError
	export const ErrSheetNameBlank:GoError
	export const ErrSheetNameInvalid:GoError
	export const ErrSheetNameLength:GoError
	export const ErrSheetNameSingleQuote:GoError
	export interface ErrSheetNotExist extends Struct<ErrSheetNotExist>,Error,GoError{
		sheetName:string
		error():string
	}
	export const ErrSparkline:GoError
	export const ErrSparklineLocation:GoError
	export const ErrSparklineRange:GoError
	export const ErrSparklineStyle:GoError
	export const ErrSparklineType:GoError
	export const ErrStreamSetColWidth:GoError
	export const ErrStreamSetPanes:GoError
	export const ErrTotalSheetHyperlinks:GoError
	export const ErrUnknownEncryptMechanism:GoError
	export const ErrUnprotectSheet:GoError
	export const ErrUnprotectSheetPassword:GoError
	export const ErrUnprotectWorkbook:GoError
	export const ErrUnprotectWorkbookPassword:GoError
	export const ErrUnsupportedEncryptMechanism:GoError
	export const ErrUnsupportedHashAlgorithm:GoError
	export const ErrUnsupportedNumberFormat:GoError
	export const ErrWorkbookFileFormat:GoError
	export const ErrWorkbookPassword:GoError
	export function excelDateToTime(excelDate:float64,use1904Format:bool):time.Time
	//"{B58B0392-4F1F-4190-BB64-5DF3571DCE5F}"
	export const ExtURICalcFeatures:string
	//"{B025F937-C7B1-47D3-B67F-A62EFF666E3E}"
	export const ExtURIConditionalFormattingRuleID:string
	//"{78C0D931-6437-407d-A8EE-F0AAD7539E65}"
	export const ExtURIConditionalFormattings:string
	//"{FCE2AD5D-F65C-4FA6-A056-5C36A1767C68}"
	export const ExtURIDataModel:string
	//"{CCE6A557-97BC-4B89-ADB6-D9C93CAAB3DF}"
	export const ExtURIDataValidations:string
	//"{28A0092B-C50C-407E-A947-70E740481C1C}"
	export const ExtURIDrawingBlip:string
	//"{FCE6A71B-6B00-49CD-AB44-F6B1AE7CDE65}"
	export const ExtURIExternalLinkPr:string
	//"{01252117-D84E-4E92-8308-4BE1C098FCBB}"
	export const ExtURIIgnoredErrors:string
	//"{64002731-A6B0-56B0-2670-7721B7C09600}"
	export const ExtURIMacExcelMX:string
	//"{9835A34E-60A6-4A7C-AAB8-D5F71C897F49}"
	export const ExtURIModelTimeGroupings:string
	//"{725AE2AE-9491-48be-B2B4-4EB974FC3084}"
	export const ExtURIPivotCacheDefinition:string
	//"{876F7934-8845-4945-9796-88D515C7AA90}"
	export const ExtURIPivotCachesX14:string
	//"{841E416B-1EF1-43b6-AB56-02D37102CBD5}"
	export const ExtURIPivotCachesX15:string
	//"{983426D0-5260-488c-9760-48F4B6AC55F4}"
	export const ExtURIPivotTableReferences:string
	//"{FC87AEE6-9EDD-4A0A-B7FB-166176984837}"
	export const ExtURIProtectedRanges:string
	//"{96DAC541-7B7A-43D3-8B79-37D633B846F1}"
	export const ExtURISVG:string
	//"{2F2917AC-EB37-4324-AD4E-5DD8C200BD13}"
	export const ExtURISlicerCacheDefinition:string
	//"{470722E0-AACD-4C17-9CDC-17EF765DBC7E}"
	export const ExtURISlicerCacheHideItemsWithNoData:string
	//"{BBE1A952-AA13-448e-AADC-164F8A28A991}"
	export const ExtURISlicerCachesX14:string
	//"{46BE6895-7355-4a93-B00E-2C351335B9C9}"
	export const ExtURISlicerCachesX15:string
	//"{A8765BA9-456A-4dab-B4F3-ACF838C121DE}"
	export const ExtURISlicerListX14:string
	//"{3A4CF648-6AED-40f4-86FF-DC5316D8AED3}"
	export const ExtURISlicerListX15:string
	//"{05C60535-1F16-4fd2-B633-F4F36F0B64E0}"
	export const ExtURISparklineGroups:string
	//"{A2CB5862-8E78-49c6-8D9D-AF26E26ADB89}"
	export const ExtURITimelineCachePivotCaches:string
	//"{D0CA8CA8-9F24-4464-BF8E-62219DCF47F9}"
	export const ExtURITimelineCacheRefs:string
	//"{7E03D99C-DC04-49d9-9315-930204A7B6E9}"
	export const ExtURITimelineRefs:string
	//"{F7C9EE02-42E1-4005-9D12-6889AFFD525C}"
	export const ExtURIWebExtensions:string
	//"{79F54976-1DA5-4618-B147-ACDE4B953A38}"
	export const ExtURIWorkbookPrX14:string
	//"{140A7094-0E35-4892-8432-C4D2E57EDEB5}"
	export const ExtURIWorkbookPrX15:string
	export interface File extends Struct<File>,io.Closer,xml.Token{





		drawings:sync.Map
		path:string
		pkg:sync.Map
		relationships:sync.Map

		sheet:sync.Map
		sheetCount:int





		calcCellValue(sheet:string,cell:string,...opts:Options[]):string
		getCellValue(sheet:string,cell:string,...opts:Options[]):string
		getCellType(sheet:string,cell:string):CellType
		setCellValue(sheet:string,cell:string,value:any)/*error*/
		setCellInt(sheet:string,cell:string,value:int)/*error*/
		setCellUint(sheet:string,cell:string,value:uint64)/*error*/
		setCellBool(sheet:string,cell:string,value:bool)/*error*/
		setCellFloat(sheet:string,cell:string,value:float64,precision:int,bitSize:int)/*error*/
		setCellStr(sheet:string,cell:string,value:string)/*error*/
		setCellDefault(sheet:string,cell:string,value:string)/*error*/
		getCellFormula(sheet:string,cell:string):string
		setCellFormula(sheet:string,cell:string,formula:string,...opts:FormulaOpts[])/*error*/
		getCellHyperLink(sheet:string,cell:string):[bool,string]
		setCellHyperLink(sheet:string,cell:string,link:string,linkType:string,...opts:HyperlinkOpts[])/*error*/
		getCellRichText(sheet:string,cell:string):RichTextRun[]
		setCellRichText(sheet:string,cell:string,runs:RichTextRun[])/*error*/
		setSheetRow(sheet:string,cell:string,slice:any)/*error*/
		setSheetCol(sheet:string,cell:string,slice:any)/*error*/
		addChart(sheet:string,cell:string,chart:Ref<Chart>,...combo:Ref<Chart>[])/*error*/
		addChartSheet(sheet:string,chart:Ref<Chart>,...combo:Ref<Chart>[])/*error*/
		deleteChart(sheet:string,cell:string)/*error*/
		getCols(sheet:string,...opts:Options[]):Array<string[]>
		cols(sheet:string):Ref<Cols>
		getColVisible(sheet:string,col:string):bool
		setColVisible(sheet:string,columns:string,visible:bool)/*error*/
		getColOutlineLevel(sheet:string,col:string):uint8
		setColOutlineLevel(sheet:string,col:string,level:uint8)/*error*/
		setColStyle(sheet:string,columns:string,styleID:int)/*error*/
		setColWidth(sheet:string,startCol:string,endCol:string,width:float64)/*error*/
		getColStyle(sheet:string,col:string):int
		getColWidth(sheet:string,col:string):float64
		insertCols(sheet:string,col:string,n:int)/*error*/
		removeCol(sheet:string,col:string)/*error*/
		addDataValidation(sheet:string,dv:Ref<DataValidation>)/*error*/
		getDataValidations(sheet:string):Ref<DataValidation>[]
		deleteDataValidation(sheet:string,...sqref:string[])/*error*/
		setAppProps(appProperties:Ref<AppProperties>)/*error*/
		getAppProps():Ref<AppProperties>
		setDocProps(docProperties:Ref<DocProperties>)/*error*/
		getDocProps():Ref<DocProperties>

		updateLinkedValue()/*error*/
		addVBAProject(file:Uint8Array)/*error*/
		save(...opts:Options[])/*error*/
		saveAs(name:string,...opts:Options[])/*error*/
		close():error
		write(w:io.Writer,...opts:Options[])/*error*/
		writeTo(w:io.Writer,...opts:Options[]):int64
		writeToBuffer():Ref<bytes.Buffer>
		readZipReader(r:Ref<zip.Reader>):[Record<string,Uint8Array>,int]
		mergeCell(sheet:string,topLeftCell:string,bottomRightCell:string)/*error*/
		unmergeCell(sheet:string,topLeftCell:string,bottomRightCell:string)/*error*/
		getMergeCells(sheet:string):MergeCell[]
		addPicture(sheet:string,cell:string,name:string,opts:Ref<GraphicOptions>)/*error*/
		addPictureFromBytes(sheet:string,cell:string,pic:Ref<Picture>)/*error*/
		getPictures(sheet:string,cell:string):Picture[]
		getPictureCells(sheet:string):string[]
		deletePicture(sheet:string,cell:string)/*error*/
		addPivotTable(opts:Ref<PivotTableOptions>)/*error*/
		getPivotTables(sheet:string):PivotTableOptions[]
		deletePivotTable(sheet:string,name:string)/*error*/
		getRows(sheet:string,...opts:Options[]):Array<string[]>
		rows(sheet:string):Ref<Rows>
		setRowHeight(sheet:string,row:int,height:float64)/*error*/
		getRowHeight(sheet:string,row:int):float64
		setRowVisible(sheet:string,row:int,visible:bool)/*error*/
		getRowVisible(sheet:string,row:int):bool
		setRowOutlineLevel(sheet:string,row:int,level:uint8)/*error*/
		getRowOutlineLevel(sheet:string,row:int):uint8
		removeRow(sheet:string,row:int)/*error*/
		insertRows(sheet:string,row:int,n:int)/*error*/
		duplicateRow(sheet:string,row:int)/*error*/
		duplicateRowTo(sheet:string,row:int,row2:int)/*error*/
		setRowStyle(sheet:string,start:int,end:int,styleID:int)/*error*/
		addShape(sheet:string,opts:Ref<Shape>)/*error*/
		newSheet(sheet:string):int
		setActiveSheet(index:int):void
		getActiveSheetIndex():int
		setSheetName(source:string,target:string)/*error*/
		getSheetName(index:int):string
		getSheetIndex(sheet:string):int
		getSheetMap():Record<int,string>
		getSheetList():string[]
		setSheetBackground(sheet:string,picture:string)/*error*/
		setSheetBackgroundFromBytes(sheet:string,extension:string,picture:Uint8Array)/*error*/
		deleteSheet(sheet:string)/*error*/
		copySheet(from:int,to:int)/*error*/
		setSheetVisible(sheet:string,visible:bool,...veryHidden:bool[])/*error*/
		setPanes(sheet:string,panes:Ref<Panes>)/*error*/
		getPanes(sheet:string):Panes
		getSheetVisible(sheet:string):bool
		searchSheet(sheet:string,value:string,...reg:bool[]):string[]
		setHeaderFooter(sheet:string,opts:Ref<HeaderFooterOptions>)/*error*/
		getHeaderFooter(sheet:string):Ref<HeaderFooterOptions>
		protectSheet(sheet:string,opts:Ref<SheetProtectionOptions>)/*error*/
		unprotectSheet(sheet:string,...password:string[])/*error*/
		setPageLayout(sheet:string,opts:Ref<PageLayoutOptions>)/*error*/
		getPageLayout(sheet:string):PageLayoutOptions
		setDefinedName(definedName:Ref<DefinedName>)/*error*/
		deleteDefinedName(definedName:Ref<DefinedName>)/*error*/
		getDefinedName():DefinedName[]
		groupSheets(sheets:string[])/*error*/
		ungroupSheets()/*error*/
		insertPageBreak(sheet:string,cell:string)/*error*/
		removePageBreak(sheet:string,cell:string)/*error*/
		setSheetDimension(sheet:string,rangeRef:string)/*error*/
		getSheetDimension(sheet:string):string
		setPageMargins(sheet:string,opts:Ref<PageLayoutMarginsOptions>)/*error*/
		getPageMargins(sheet:string):PageLayoutMarginsOptions
		setSheetProps(sheet:string,opts:Ref<SheetPropsOptions>)/*error*/
		getSheetProps(sheet:string):SheetPropsOptions
		setSheetView(sheet:string,viewIndex:int,opts:Ref<ViewOptions>)/*error*/
		getSheetView(sheet:string,viewIndex:int):ViewOptions
		addSlicer(sheet:string,opts:Ref<SlicerOptions>)/*error*/
		addSparkline(sheet:string,opts:Ref<SparklineOptions>)/*error*/
		newStreamWriter(sheet:string):Ref<StreamWriter>
		newStyle(style:Ref<Style>):int
		getBaseColor(hexColor:string,indexedColor:int,themeColor:Ref<int>):string
		getStyle(idx:int):Ref<Style>
		newConditionalStyle(style:Ref<Style>):int
		getConditionalStyle(idx:int):Ref<Style>
		getDefaultFont():string
		setDefaultFont(fontName:string)/*error*/
		getCellStyle(sheet:string,cell:string):int
		setCellStyle(sheet:string,topLeftCell:string,bottomRightCell:string,styleID:int)/*error*/
		setConditionalFormat(sheet:string,rangeRef:string,opts:ConditionalFormatOptions[])/*error*/
		getConditionalFormats(sheet:string):[Record<string,ConditionalFormatOptions>]
		unsetConditionalFormat(sheet:string,rangeRef:string)/*error*/
		addTable(sheet:string,table:Ref<Table>)/*error*/
		getTables(sheet:string):Table[]
		deleteTable(name:string)/*error*/
		autoFilter(sheet:string,rangeRef:string,opts:AutoFilterOptions[])/*error*/
		getComments(sheet:string):Comment[]
		addComment(sheet:string,opts:Comment)/*error*/
		deleteComment(sheet:string,cell:string)/*error*/
		addFormControl(sheet:string,opts:FormControl)/*error*/
		deleteFormControl(sheet:string,cell:string)/*error*/
		getFormControls(sheet:string):FormControl[]
		setWorkbookProps(opts:Ref<WorkbookPropsOptions>)/*error*/
		getWorkbookProps():WorkbookPropsOptions
		protectWorkbook(opts:Ref<WorkbookProtectionOptions>)/*error*/
		unprotectWorkbook(...password:string[])/*error*/
	}
	export interface Fill extends Struct<Fill>,xml.Token{
		type:string
		pattern:int
		color:string[]
		shading:int
	}
	export interface Font extends xml.Token,Struct<Font>{
		bold:bool
		italic:bool
		underline:string
		family:string
		size:float64
		strike:bool
		color:string
		colorIndexed:int
		colorTheme:Ref<int>
		colorTint:float64
		vertAlign:string
	}
	export interface FormControl extends Struct<FormControl>,xml.Token{
		cell:string
		macro:string
		width:uint
		height:uint
		checked:bool
		currentVal:uint
		minVal:uint
		maxVal:uint
		incChange:uint
		pageChange:uint
		horizontally:bool
		cellLink:string
		text:string
		paragraph:RichTextRun[]
		type:FormControlType
		format:GraphicOptions
	}
	export const FormControlButton:FormControlType
	export const FormControlCheckBox:FormControlType
	export const FormControlGroupBox:FormControlType
	export const FormControlLabel:FormControlType
	export const FormControlNote:FormControlType
	export const FormControlOptionButton:FormControlType
	export const FormControlScrollBar:FormControlType
	export const FormControlSpinButton:FormControlType
	export interface FormControlType extends byte{
	}
	export interface FormulaOpts extends xml.Token,Struct<FormulaOpts>{
		type:Ref<string>
		ref:Ref<string>
	}
	export interface GraphicOptions extends Struct<GraphicOptions>,xml.Token{
		altText:string
		printObject:Ref<bool>
		locked:Ref<bool>
		lockAspectRatio:bool
		autoFit:bool
		offsetX:int
		offsetY:int
		scaleX:float64
		scaleY:float64
		hyperlink:string
		hyperlinkType:string
		positioning:string
	}
	export interface HSL extends Struct<HSL>,color.Color,xml.Token{
		H:float64
		S:float64
		L:float64
		rgba():[uint32,uint32,uint32,uint32]
	}
	export const HSLModel:color.Model
	export function hslToRGB(h:float64,s:float64,l:float64):[uint8,uint8,uint8]
	export interface HeaderFooterOptions extends Struct<HeaderFooterOptions>,xml.Token{
		alignWithMargins:Ref<bool>
		differentFirst:bool
		differentOddEven:bool
		scaleWithDoc:Ref<bool>
		oddHeader:string
		oddFooter:string
		evenHeader:string
		evenFooter:string
		firstHeader:string
		firstFooter:string
	}
	export interface HyperlinkOpts extends Struct<HyperlinkOpts>,xml.Token{
		display:Ref<string>
		tooltip:Ref<string>
	}
	export const IndexedColorMapping:string[]
	export function joinCellName(col:string,row:int):string
	export interface KeyData extends Struct<KeyData>,xml.Token{
		saltSize:int
		blockSize:int
		keyBits:int
		hashSize:int
		cipherAlgorithm:string
		cipherChaining:string
		hashAlgorithm:string
		saltValue:string
	}
	export interface KeyEncryptor extends Struct<KeyEncryptor>,xml.Token{
		xmlName:xml.Name
		uri:string
		encryptedKey:EncryptedKey
	}
	export interface KeyEncryptors extends Struct<KeyEncryptors>,xml.Token{
		keyEncryptor:KeyEncryptor[]
	}
	export const Line:ChartType
	export const Line3D:ChartType
	//65430
	export const MaxCellStyles:int
	//255
	export const MaxColumnWidth:int
	//16384
	export const MaxColumns:int
	//255
	export const MaxFieldLength:int
	//207
	export const MaxFilePathLength:int
	//31
	export const MaxFontFamilyLength:int
	//409
	export const MaxFontSize:int
	//30000
	export const MaxFormControlValue:int
	//409
	export const MaxRowHeight:int
	//31
	export const MaxSheetNameLength:int
	export interface MergeCell extends Array<string>{
		getCellValue():string
		getStartAxis():string
		getEndAxis():string
	}
	//1
	export const MinColumns:int
	//1
	export const MinFontSize:int
	export const NameSpaceDocumentPropertiesVariantTypes:xml.Attr
	export const NameSpaceDrawing2016SVG:xml.Attr
	export const NameSpaceDrawingML:xml.Attr
	export const NameSpaceDrawingMLA14:xml.Attr
	export const NameSpaceDrawingMLChart:xml.Attr
	//"http://schemas.openxmlformats.org/drawingml/2006/main"
	export const NameSpaceDrawingMLMain:string
	export const NameSpaceDrawingMLSlicer:xml.Attr
	export const NameSpaceDrawingMLSlicerX15:xml.Attr
	export const NameSpaceDrawingMLSpreadSheet:xml.Attr
	//"http://purl.org/dc/elements/1.1/"
	export const NameSpaceDublinCore:string
	//"http://purl.org/dc/dcmitype/"
	export const NameSpaceDublinCoreMetadataInitiative:string
	//"http://purl.org/dc/terms/"
	export const NameSpaceDublinCoreTerms:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/extended-prope...
	export const NameSpaceExtendedProperties:string
	export const NameSpaceMacExcel2008Main:xml.Attr
	export const NameSpaceSpreadSheet:xml.Attr
	export const NameSpaceSpreadSheetExcel2006Main:xml.Attr
	export const NameSpaceSpreadSheetX14:xml.Attr
	export const NameSpaceSpreadSheetX15:xml.Attr
	export const NameSpaceSpreadSheetXR10:xml.Attr
	//"http://www.w3.org/XML/1998/namespace"
	export const NameSpaceXML:string
	//"http://www.w3.org/2001/XMLSchema-instance"
	export const NameSpaceXMLSchemaInstance:string
	export function newDataValidation(allowBlank:bool):Ref<DataValidation>
	export function newFile(...opts:Options[]):Ref<File>
	export function newStack():Ref<Stack>
	export function openFile(filename:string,...opts:Options[]):Ref<File>
	export function openReader(r:io.Reader,...opts:Options[]):Ref<File>
	export interface Options extends Struct<Options>,xml.Token{
		maxCalcIterations:uint
		password:string
		rawCellValue:bool
		unzipSizeLimit:int64
		unzipXMLSizeLimit:int64
		shortDatePattern:string
		longDatePattern:string
		longTimePattern:string
		cultureInfo:CultureName
	}
	export interface PageLayoutMarginsOptions extends Struct<PageLayoutMarginsOptions>,xml.Token{
		bottom:Ref<float64>
		footer:Ref<float64>
		header:Ref<float64>
		left:Ref<float64>
		right:Ref<float64>
		top:Ref<float64>
		horizontally:Ref<bool>
		vertically:Ref<bool>
	}
	export interface PageLayoutOptions extends Struct<PageLayoutOptions>,xml.Token{
		size:Ref<int>
		orientation:Ref<string>
		firstPageNumber:Ref<uint>
		adjustTo:Ref<uint>
		fitToHeight:Ref<int>
		fitToWidth:Ref<int>
		blackAndWhite:Ref<bool>
	}
	export interface Panes extends Struct<Panes>,xml.Token{
		freeze:bool
		split:bool
		xSplit:int
		ySplit:int
		topLeftCell:string
		activePane:string
		selection:Selection[]
	}
	export interface Picture extends xml.Token,Struct<Picture>{
		extension:string
		file:Uint8Array
		format:Ref<GraphicOptions>
	}
	export const Pie:ChartType
	export const Pie3D:ChartType
	export const PieOfPie:ChartType
	export interface PivotTableField extends Struct<PivotTableField>,xml.Token{
		compact:bool
		data:string
		name:string
		outline:bool
		subtotal:string
		defaultSubtotal:bool
	}
	export interface PivotTableOptions extends Struct<PivotTableOptions>,xml.Token{
		dataRange:string
		pivotTableRange:string
		name:string
		rows:PivotTableField[]
		columns:PivotTableField[]
		data:PivotTableField[]
		filter:PivotTableField[]
		rowGrandTotals:bool
		colGrandTotals:bool
		showDrill:bool
		useAutoFormatting:bool
		pageOverThenDown:bool
		mergeItem:bool
		compactData:bool
		showError:bool
		showRowHeaders:bool
		showColHeaders:bool
		showRowStripes:bool
		showColStripes:bool
		showLastColumn:bool
		pivotTableStyleName:string
	}
	export interface Protection extends Struct<Protection>,xml.Token{
		hidden:bool
		locked:bool
	}
	export function rgbToHSL(r:uint8,g:uint8,b:uint8):[float64,float64,float64]
	export const Radar:ChartType
	export interface RichTextRun extends Struct<RichTextRun>,xml.Token{
		font:Ref<Font>
		text:string
	}
	export interface RowOpts extends Struct<RowOpts>,xml.Token{
		height:float64
		hidden:bool
		styleID:int
		outlineLevel:int
	}
	export interface Rows extends xml.Token,Struct<Rows>,io.Closer{
		next():bool
		getRowOpts():RowOpts
		error():error
		close():error
		columns(...opts:Options[]):string[]
	}
	//"array"
	export const STCellFormulaTypeArray:string
	//"dataTable"
	export const STCellFormulaTypeDataTable:string
	//"normal"
	export const STCellFormulaTypeNormal:string
	//"shared"
	export const STCellFormulaTypeShared:string
	export const Scatter:ChartType
	export interface Selection extends Struct<Selection>,xml.Token{
		sqRef:string
		activeCell:string
		pane:string
	}
	export interface Shape extends Struct<Shape>,xml.Token{
		cell:string
		type:string
		macro:string
		width:uint
		height:uint
		format:GraphicOptions
		fill:Fill
		line:ShapeLine
		paragraph:RichTextRun[]
	}
	export interface ShapeLine extends Struct<ShapeLine>,xml.Token{
		color:string
		width:Ref<float64>
	}
	export interface SheetPropsOptions extends Struct<SheetPropsOptions>,xml.Token{
		codeName:Ref<string>
		enableFormatConditionsCalculation:Ref<bool>
		published:Ref<bool>
		autoPageBreaks:Ref<bool>
		fitToPage:Ref<bool>
		tabColorIndexed:Ref<int>
		tabColorRGB:Ref<string>
		tabColorTheme:Ref<int>
		tabColorTint:Ref<float64>
		outlineSummaryBelow:Ref<bool>
		outlineSummaryRight:Ref<bool>
		baseColWidth:Ref<uint8>
		defaultColWidth:Ref<float64>
		defaultRowHeight:Ref<float64>
		customHeight:Ref<bool>
		zeroHeight:Ref<bool>
		thickTop:Ref<bool>
		thickBottom:Ref<bool>
	}
	export interface SheetProtectionOptions extends Struct<SheetProtectionOptions>,xml.Token{
		algorithmName:string
		autoFilter:bool
		deleteColumns:bool
		deleteRows:bool
		editObjects:bool
		editScenarios:bool
		formatCells:bool
		formatColumns:bool
		formatRows:bool
		insertColumns:bool
		insertHyperlinks:bool
		insertRows:bool
		password:string
		pivotTables:bool
		selectLockedCells:bool
		selectUnlockedCells:bool
		sort:bool
	}
	export interface SlicerOptions extends Struct<SlicerOptions>,xml.Token{
		name:string
		cell:string
		tableSheet:string
		tableName:string
		caption:string
		macro:string
		width:uint
		height:uint
		displayHeader:Ref<bool>
		itemDesc:bool
		format:GraphicOptions
	}
	export const SourceRelationship:xml.Attr
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipChart:string
	export const SourceRelationshipChart20070802:xml.Attr
	export const SourceRelationshipChart2014:xml.Attr
	export const SourceRelationshipChart201506:xml.Attr
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipChartsheet:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipComments:string
	export const SourceRelationshipCompatibility:xml.Attr
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipDialogsheet:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipDrawingML:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipDrawingVML:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipExtendProperties:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipHyperLink:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipImage:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipOfficeDocument:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipPivotCache:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipPivotTable:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipSharedStrings:string
	//"http://schemas.microsoft.com/office/2007/relationships/slicer"
	export const SourceRelationshipSlicer:string
	//"http://schemas.microsoft.com/office/2007/relationships/slicerCache"
	export const SourceRelationshipSlicerCache:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipTable:string
	//"http://schemas.microsoft.com/office/2006/relationships/vbaProject"
	export const SourceRelationshipVBAProject:string
	//"http://schemas.openxmlformats.org/officeDocument/2006/relationships/...
	export const SourceRelationshipWorkSheet:string
	export interface SparklineOptions extends Struct<SparklineOptions>,xml.Token{
		location:string[]
		range:string[]
		max:int
		custMax:int
		min:int
		custMin:int
		type:string
		weight:float64
		dateAxis:bool
		markers:bool
		high:bool
		low:bool
		first:bool
		last:bool
		negative:bool
		axis:bool
		hidden:bool
		reverse:bool
		style:int
		seriesColor:string
		negativeColor:string
		markersColor:string
		firstColor:string
		lastColor:string
		hightColor:string
		lowColor:string
		emptyCells:string
	}
	export function splitCellName(cell:string):[string,int]
	export interface Stack extends Struct<Stack>,xml.Token{
		push(value:any):void
		pop():any
		peek():any
		len():int
		empty():bool
	}
	export interface StandardEncryptionHeader extends Struct<StandardEncryptionHeader>,xml.Token{
		flags:uint32
		sizeExtra:uint32
		algID:uint32
		algIDHash:uint32
		keySize:uint32
		providerType:uint32
		reserved1:uint32
		reserved2:uint32
		cspName:string
	}
	export interface StandardEncryptionVerifier extends Struct<StandardEncryptionVerifier>,xml.Token{
		saltSize:uint32
		salt:Uint8Array
		encryptedVerifier:Uint8Array
		verifierHashSize:uint32
		encryptedVerifierHash:Uint8Array
	}
	//16777216
	export const StreamChunkSize:int
	export interface StreamWriter extends Struct<StreamWriter>,xml.Token{
		sheet:string
		sheetID:int
		addTable(table:Ref<Table>)/*error*/
		setRow(cell:string,values:any[],...opts:RowOpts[])/*error*/
		setColWidth(minVal:int,maxVal:int,width:float64)/*error*/
		insertPageBreak(cell:string)/*error*/
		setPanes(panes:Ref<Panes>)/*error*/
		mergeCell(topLeftCell:string,bottomRightCell:string)/*error*/
		flush()/*error*/
	}
	//"http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes"
	export const StrictNameSpaceDocumentPropertiesVariantTypes:string
	//"http://purl.oclc.org/ooxml/drawingml/main"
	export const StrictNameSpaceDrawingMLMain:string
	//"http://purl.oclc.org/ooxml/officeDocument/extendedProperties"
	export const StrictNameSpaceExtendedProperties:string
	//"http://purl.oclc.org/ooxml/spreadsheetml/main"
	export const StrictNameSpaceSpreadSheet:string
	//"http://purl.oclc.org/ooxml/officeDocument/relationships"
	export const StrictSourceRelationship:string
	//"http://purl.oclc.org/ooxml/officeDocument/relationships/chart"
	export const StrictSourceRelationshipChart:string
	//"http://purl.oclc.org/ooxml/officeDocument/relationships/comments"
	export const StrictSourceRelationshipComments:string
	//"http://purl.oclc.org/ooxml/officeDocument/relationships/extendedProp...
	export const StrictSourceRelationshipExtendProperties:string
	//"http://purl.oclc.org/ooxml/officeDocument/relationships/image"
	export const StrictSourceRelationshipImage:string
	//"http://purl.oclc.org/ooxml/officeDocument/relationships/officeDocument"
	export const StrictSourceRelationshipOfficeDocument:string
	export interface Style extends Struct<Style>,xml.Token{
		border:Border[]
		fill:Fill
		font:Ref<Font>
		alignment:Ref<Alignment>
		protection:Ref<Protection>
		numFmt:int
		decimalPlaces:Ref<int>
		customNumFmt:Ref<string>
		negRed:bool
	}
	export const Surface3D:ChartType
	export interface Table extends Struct<Table>,xml.Token{
		range:string
		name:string
		styleName:string
		showColumnStripes:bool
		showFirstColumn:bool
		showHeaderRow:Ref<bool>
		showLastColumn:bool
		showRowStripes:Ref<bool>
	}
	export function themeColor(baseColor:string,tint:float64):string
	//32767
	export const TotalCellChars:int
	//1048576
	export const TotalRows:int
	//65529
	export const TotalSheetHyperlinks:int
	//16777216000
	export const UnzipSizeLimit:int
	export interface ViewOptions extends Struct<ViewOptions>,xml.Token{
		defaultGridColor:Ref<bool>
		rightToLeft:Ref<bool>
		showFormulas:Ref<bool>
		showGridLines:Ref<bool>
		showRowColHeaders:Ref<bool>
		showRuler:Ref<bool>
		showZeros:Ref<bool>
		topLeftCell:Ref<string>
		view:Ref<string>
		zoomScale:Ref<float64>
	}
	export const WireframeContour:ChartType
	export const WireframeSurface3D:ChartType
	export interface WorkbookPropsOptions extends xml.Token,Struct<WorkbookPropsOptions>{
		date1904:Ref<bool>
		filterPrivacy:Ref<bool>
		codeName:Ref<string>
	}
	export interface WorkbookProtectionOptions extends Struct<WorkbookProtectionOptions>,xml.Token{
		algorithmName:string
		password:string
		lockStructure:bool
		lockWindows:bool
	}

export function emptyAppProperties():AppProperties
export function refAppProperties():Ref<AppProperties>
export function refOfAppProperties(x:AppProperties):Ref<AppProperties>
export function emptyComment():Comment
export function refComment():Ref<Comment>
export function refOfComment(x:Comment):Ref<Comment>
export function emptyRowOpts():RowOpts
export function refRowOpts():Ref<RowOpts>
export function refOfRowOpts(x:RowOpts):Ref<RowOpts>
export function emptyChartMarker():ChartMarker
export function refChartMarker():Ref<ChartMarker>
export function refOfChartMarker(x:ChartMarker):Ref<ChartMarker>
export function emptyEncryption():Encryption
export function refEncryption():Ref<Encryption>
export function refOfEncryption(x:Encryption):Ref<Encryption>
export function emptyViewOptions():ViewOptions
export function refViewOptions():Ref<ViewOptions>
export function refOfViewOptions(x:ViewOptions):Ref<ViewOptions>
export function emptyDataValidation():DataValidation
export function refDataValidation():Ref<DataValidation>
export function refOfDataValidation(x:DataValidation):Ref<DataValidation>
export function emptyFormControl():FormControl
export function refFormControl():Ref<FormControl>
export function refOfFormControl(x:FormControl):Ref<FormControl>
export function emptyStyle():Style
export function refStyle():Ref<Style>
export function refOfStyle(x:Style):Ref<Style>
export function emptyFill():Fill
export function refFill():Ref<Fill>
export function refOfFill(x:Fill):Ref<Fill>
export function emptyHeaderFooterOptions():HeaderFooterOptions
export function refHeaderFooterOptions():Ref<HeaderFooterOptions>
export function refOfHeaderFooterOptions(x:HeaderFooterOptions):Ref<HeaderFooterOptions>
export function emptyHyperlinkOpts():HyperlinkOpts
export function refHyperlinkOpts():Ref<HyperlinkOpts>
export function refOfHyperlinkOpts(x:HyperlinkOpts):Ref<HyperlinkOpts>
export function emptyProtection():Protection
export function refProtection():Ref<Protection>
export function refOfProtection(x:Protection):Ref<Protection>
export function emptyStandardEncryptionHeader():StandardEncryptionHeader
export function refStandardEncryptionHeader():Ref<StandardEncryptionHeader>
export function refOfStandardEncryptionHeader(x:StandardEncryptionHeader):Ref<StandardEncryptionHeader>
export function emptySparklineOptions():SparklineOptions
export function refSparklineOptions():Ref<SparklineOptions>
export function refOfSparklineOptions(x:SparklineOptions):Ref<SparklineOptions>
export function emptyChartPlotArea():ChartPlotArea
export function refChartPlotArea():Ref<ChartPlotArea>
export function refOfChartPlotArea(x:ChartPlotArea):Ref<ChartPlotArea>
export function emptyDefinedName():DefinedName
export function refDefinedName():Ref<DefinedName>
export function refOfDefinedName(x:DefinedName):Ref<DefinedName>
export function emptyEncryptedKey():EncryptedKey
export function refEncryptedKey():Ref<EncryptedKey>
export function refOfEncryptedKey(x:EncryptedKey):Ref<EncryptedKey>
export function emptyFormulaOpts():FormulaOpts
export function refFormulaOpts():Ref<FormulaOpts>
export function refOfFormulaOpts(x:FormulaOpts):Ref<FormulaOpts>
export function emptyPivotTableField():PivotTableField
export function refPivotTableField():Ref<PivotTableField>
export function refOfPivotTableField(x:PivotTableField):Ref<PivotTableField>
export function emptyPivotTableOptions():PivotTableOptions
export function refPivotTableOptions():Ref<PivotTableOptions>
export function refOfPivotTableOptions(x:PivotTableOptions):Ref<PivotTableOptions>
export function emptySelection():Selection
export function refSelection():Ref<Selection>
export function refOfSelection(x:Selection):Ref<Selection>
export function emptyStreamWriter():StreamWriter
export function refStreamWriter():Ref<StreamWriter>
export function refOfStreamWriter(x:StreamWriter):Ref<StreamWriter>
export function emptyKeyData():KeyData
export function refKeyData():Ref<KeyData>
export function refOfKeyData(x:KeyData):Ref<KeyData>
export function emptyShapeLine():ShapeLine
export function refShapeLine():Ref<ShapeLine>
export function refOfShapeLine(x:ShapeLine):Ref<ShapeLine>
export function emptySheetProtectionOptions():SheetProtectionOptions
export function refSheetProtectionOptions():Ref<SheetProtectionOptions>
export function refOfSheetProtectionOptions(x:SheetProtectionOptions):Ref<SheetProtectionOptions>
export function emptyWorkbookProtectionOptions():WorkbookProtectionOptions
export function refWorkbookProtectionOptions():Ref<WorkbookProtectionOptions>
export function refOfWorkbookProtectionOptions(x:WorkbookProtectionOptions):Ref<WorkbookProtectionOptions>
export function emptyDataIntegrity():DataIntegrity
export function refDataIntegrity():Ref<DataIntegrity>
export function refOfDataIntegrity(x:DataIntegrity):Ref<DataIntegrity>
export function emptyFont():Font
export function refFont():Ref<Font>
export function refOfFont(x:Font):Ref<Font>
export function emptyKeyEncryptors():KeyEncryptors
export function refKeyEncryptors():Ref<KeyEncryptors>
export function refOfKeyEncryptors(x:KeyEncryptors):Ref<KeyEncryptors>
export function emptyShape():Shape
export function refShape():Ref<Shape>
export function refOfShape(x:Shape):Ref<Shape>
export function emptyCols():Cols
export function refCols():Ref<Cols>
export function refOfCols(x:Cols):Ref<Cols>
export function emptyKeyEncryptor():KeyEncryptor
export function refKeyEncryptor():Ref<KeyEncryptor>
export function refOfKeyEncryptor(x:KeyEncryptor):Ref<KeyEncryptor>
export function emptyPageLayoutOptions():PageLayoutOptions
export function refPageLayoutOptions():Ref<PageLayoutOptions>
export function refOfPageLayoutOptions(x:PageLayoutOptions):Ref<PageLayoutOptions>
export function emptyRows():Rows
export function refRows():Ref<Rows>
export function refOfRows(x:Rows):Ref<Rows>
export function emptyAutoFilterOptions():AutoFilterOptions
export function refAutoFilterOptions():Ref<AutoFilterOptions>
export function refOfAutoFilterOptions(x:AutoFilterOptions):Ref<AutoFilterOptions>
export function emptyChartSeries():ChartSeries
export function refChartSeries():Ref<ChartSeries>
export function refOfChartSeries(x:ChartSeries):Ref<ChartSeries>
export function emptyConditionalFormatOptions():ConditionalFormatOptions
export function refConditionalFormatOptions():Ref<ConditionalFormatOptions>
export function refOfConditionalFormatOptions(x:ConditionalFormatOptions):Ref<ConditionalFormatOptions>
export function emptyHSL():HSL
export function refHSL():Ref<HSL>
export function refOfHSL(x:HSL):Ref<HSL>
export function emptyWorkbookPropsOptions():WorkbookPropsOptions
export function refWorkbookPropsOptions():Ref<WorkbookPropsOptions>
export function refOfWorkbookPropsOptions(x:WorkbookPropsOptions):Ref<WorkbookPropsOptions>
export function emptyChartAxis():ChartAxis
export function refChartAxis():Ref<ChartAxis>
export function refOfChartAxis(x:ChartAxis):Ref<ChartAxis>
export function emptyOptions():Options
export function refOptions():Ref<Options>
export function refOfOptions(x:Options):Ref<Options>
export function emptyPageLayoutMarginsOptions():PageLayoutMarginsOptions
export function refPageLayoutMarginsOptions():Ref<PageLayoutMarginsOptions>
export function refOfPageLayoutMarginsOptions(x:PageLayoutMarginsOptions):Ref<PageLayoutMarginsOptions>
export function emptyStandardEncryptionVerifier():StandardEncryptionVerifier
export function refStandardEncryptionVerifier():Ref<StandardEncryptionVerifier>
export function refOfStandardEncryptionVerifier(x:StandardEncryptionVerifier):Ref<StandardEncryptionVerifier>
export function emptyChartNumFmt():ChartNumFmt
export function refChartNumFmt():Ref<ChartNumFmt>
export function refOfChartNumFmt(x:ChartNumFmt):Ref<ChartNumFmt>
export function emptyDocProperties():DocProperties
export function refDocProperties():Ref<DocProperties>
export function refOfDocProperties(x:DocProperties):Ref<DocProperties>
export function emptyBorder():Border
export function refBorder():Ref<Border>
export function refOfBorder(x:Border):Ref<Border>
export function emptyChart():Chart
export function refChart():Ref<Chart>
export function refOfChart(x:Chart):Ref<Chart>
export function emptyChartLegend():ChartLegend
export function refChartLegend():Ref<ChartLegend>
export function refOfChartLegend(x:ChartLegend):Ref<ChartLegend>
export function emptyFile():File
export function refFile():Ref<File>
export function refOfFile(x:File):Ref<File>
export function emptyChartDimension():ChartDimension
export function refChartDimension():Ref<ChartDimension>
export function refOfChartDimension(x:ChartDimension):Ref<ChartDimension>
export function emptyGraphicOptions():GraphicOptions
export function refGraphicOptions():Ref<GraphicOptions>
export function refOfGraphicOptions(x:GraphicOptions):Ref<GraphicOptions>
export function emptyPanes():Panes
export function refPanes():Ref<Panes>
export function refOfPanes(x:Panes):Ref<Panes>
export function emptyTable():Table
export function refTable():Ref<Table>
export function refOfTable(x:Table):Ref<Table>
export function emptyChartLine():ChartLine
export function refChartLine():Ref<ChartLine>
export function refOfChartLine(x:ChartLine):Ref<ChartLine>
export function emptySheetPropsOptions():SheetPropsOptions
export function refSheetPropsOptions():Ref<SheetPropsOptions>
export function refOfSheetPropsOptions(x:SheetPropsOptions):Ref<SheetPropsOptions>
export function emptyStack():Stack
export function refStack():Ref<Stack>
export function refOfStack(x:Stack):Ref<Stack>
export function emptyAlignment():Alignment
export function refAlignment():Ref<Alignment>
export function refOfAlignment(x:Alignment):Ref<Alignment>
export function emptyCell():Cell
export function refCell():Ref<Cell>
export function refOfCell(x:Cell):Ref<Cell>
export function emptyPicture():Picture
export function refPicture():Ref<Picture>
export function refOfPicture(x:Picture):Ref<Picture>
export function emptyRichTextRun():RichTextRun
export function refRichTextRun():Ref<RichTextRun>
export function refOfRichTextRun(x:RichTextRun):Ref<RichTextRun>
export function emptySlicerOptions():SlicerOptions
export function refSlicerOptions():Ref<SlicerOptions>
export function refOfSlicerOptions(x:SlicerOptions):Ref<SlicerOptions>
}
