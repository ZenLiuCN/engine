// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/ws'{

	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as fmt from 'golang/fmt'
	// @ts-ignore
	import * as dispatcher from 'github.com/larksuite/oapi-sdk-go/v3/event/dispatcher'
	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as json from 'golang/encoding/json'
	// @ts-ignore
	import type {int32,bool,map,error,GoError,Ref,uint64,int,Struct,Alias} from 'go'
	//514
	export const AuthFailed:int
	export interface Client extends Struct<Client>,json.Token{

			start(ctx:context.Context)/*error*/
	}
	export interface ClientConfig extends Struct<ClientConfig>,json.Token{

			reconnectCount:int
			reconnectInterval:int
			reconnectNonce:int
			pingInterval:int
	}
	export interface ClientError extends Error,GoError,Struct<ClientError>{

			code:int
			msg:string
			error():string
	}
	export interface ClientOption extends Alias<(cli:Ref<Client>)=>void>{

	}
	//"device_id"
	export const DeviceID:string
	export interface Endpoint extends Struct<Endpoint>,json.Token{

			url:string
			clientConfig:Ref<ClientConfig>
	}
	export interface EndpointResp extends Struct<EndpointResp>,json.Token{

			code:int
			msg:string
			data:Ref<Endpoint>
	}
	export const ErrIntOverflowPbbp2:GoError
	export const ErrInvalidLengthPbbp2:GoError
	export const ErrUnexpectedEndOfGroupPbbp2:GoError
	//1000040350
	export const ExceedConnLimit:int
	//403
	export const Forbidden:int
	export interface Frame extends Struct<Frame>,fmt.Stringer,json.Token{

			seqID:uint64
			logID:uint64
			service:int32
			method:int32
			headers:Header[]
			payloadEncoding:string
			payloadType:string
			payload:Uint8Array
			logIDNew:string
			reset():void
			string():string
			protoMessage():void
			descriptor():[Uint8Array,int[]]
			xxX_Unmarshal(b:Uint8Array)/*error*/
			xxX_Marshal(b:Uint8Array,deterministic:bool):Uint8Array
			xxX_Size():int
			xxX_DiscardUnknown():void
			getSeqID():uint64
			getLogID():uint64
			getService():int32
			getMethod():int32
			getHeaders():Header[]
			getPayloadEncoding():string
			getPayloadType():string
			getPayload():Uint8Array
			getLogIDNew():string
			marshal():Uint8Array
			marshalTo(dAtA:Uint8Array):int
			marshalToSizedBuffer(dAtA:Uint8Array):int
			size():int
			unmarshal(dAtA:Uint8Array)/*error*/
	}
	export interface FrameType extends int{

	}
	export const FrameTypeControl:FrameType
	export const FrameTypeData:FrameType
	//"/callback/ws/endpoint"
	export const GenEndpointUri:string
	export interface Header extends Struct<Header>,json.Token,fmt.Stringer{

			key:string
			value:string
			reset():void
			string():string
			protoMessage():void
			descriptor():[Uint8Array,int[]]
			xxX_Unmarshal(b:Uint8Array)/*error*/
			xxX_Marshal(b:Uint8Array,deterministic:bool):Uint8Array
			xxX_Size():int
			xxX_DiscardUnknown():void
			getKey():string
			getValue():string
			marshal():Uint8Array
			marshalTo(dAtA:Uint8Array):int
			marshalToSizedBuffer(dAtA:Uint8Array):int
			size():int
			unmarshal(dAtA:Uint8Array)/*error*/
	}
	//"biz_rt"
	export const HeaderBizRt:string
	//"Handshake-Autherrcode"
	export const HeaderHandshakeAuthErrCode:string
	//"Handshake-Msg"
	export const HeaderHandshakeMsg:string
	//"Handshake-Status"
	export const HeaderHandshakeStatus:string
	//"instance_id"
	export const HeaderInstanceID:string
	//"message_id"
	export const HeaderMessageID:string
	//"seq"
	export const HeaderSeq:string
	//"sum"
	export const HeaderSum:string
	//"timestamp"
	export const HeaderTimestamp:string
	//"trace_id"
	export const HeaderTraceID:string
	//"type"
	export const HeaderType:string
	export interface Headers extends Array<Header>{

			getString(key:string):string
			getInt(key:string):int
			add(key:string,value:string):void
	}
	//1000040343
	export const InternalError:int
	export interface MessageType extends string{

	}
	export const MessageTypeCard:MessageType
	export const MessageTypeEvent:MessageType
	export const MessageTypePing:MessageType
	export const MessageTypePong:MessageType
	export function newClient(appId:string,appSecret:string,...opts:ClientOption[]):Ref<Client>

	export function newClientError(code:int,msg:string):Ref<ClientError>

	export function newPingFrame(serviceID:int32):Ref<Frame>

	export function newResponseByCode(code:int):Ref<Response>

	export function newServerError(code:int,msg:string):Ref<ServerError>

	//0
	export const OK:int
	export interface Response extends Struct<Response>,json.Token{

			statusCode:int
			headers:map<string,string>
			data:Uint8Array
	}
	export interface ServerError extends Struct<ServerError>,Error,GoError{

			code:int
			msg:string
			error():string
	}
	//"service_id"
	export const ServiceID:string
	//1
	export const SystemBusy:int
	export function withAutoReconnect(b:bool):ClientOption

	export function withDomain(domain:string):ClientOption

	export function withEventHandler(handler:Ref<dispatcher.EventDispatcher>):ClientOption

	export function withLogLevel(level:larkcore.LogLevel):ClientOption

	export function withLogger(logger:larkcore.Logger):ClientOption

	export function emptyResponse():Response
	export function emptyRefResponse():Ref<Response>
	export function refOfResponse(x:Response,v:Ref<Response>)
	export function unRefResponse(v:Ref<Response>):Response
	export function emptyEndpoint():Endpoint
	export function emptyRefEndpoint():Ref<Endpoint>
	export function refOfEndpoint(x:Endpoint,v:Ref<Endpoint>)
	export function unRefEndpoint(v:Ref<Endpoint>):Endpoint
	export function emptyFrame():Frame
	export function emptyRefFrame():Ref<Frame>
	export function refOfFrame(x:Frame,v:Ref<Frame>)
	export function unRefFrame(v:Ref<Frame>):Frame
	export function emptyHeader():Header
	export function emptyRefHeader():Ref<Header>
	export function refOfHeader(x:Header,v:Ref<Header>)
	export function unRefHeader(v:Ref<Header>):Header
	export function emptyClientConfig():ClientConfig
	export function emptyRefClientConfig():Ref<ClientConfig>
	export function refOfClientConfig(x:ClientConfig,v:Ref<ClientConfig>)
	export function unRefClientConfig(v:Ref<ClientConfig>):ClientConfig
	export function emptyEndpointResp():EndpointResp
	export function emptyRefEndpointResp():Ref<EndpointResp>
	export function refOfEndpointResp(x:EndpointResp,v:Ref<EndpointResp>)
	export function unRefEndpointResp(v:Ref<EndpointResp>):EndpointResp
}