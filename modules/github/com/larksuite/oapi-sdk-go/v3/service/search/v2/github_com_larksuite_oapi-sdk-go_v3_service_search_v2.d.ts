// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/search/v2'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Ref,Struct,bool,float64,int,error,Alias,Nothing} from 'go'
	export interface Acl extends Struct<Acl>{

			access:Ref<string>
			value:Ref<string>
			type:Ref<string>
	}
	export interface AclBuilder extends Struct<AclBuilder>{

			access(access:string):Ref<AclBuilder>
			value(value:string):Ref<AclBuilder>
			type(type_:string):Ref<AclBuilder>
			build():Ref<Acl>
	}
	export interface BatchItemResult extends Struct<BatchItemResult>{

			itemId:Ref<string>
			isSuccess:Ref<bool>
			err:Ref<string>
	}
	export interface BatchItemResultBuilder extends Struct<BatchItemResultBuilder>{

			itemId(itemId:string):Ref<BatchItemResultBuilder>
			isSuccess(isSuccess:bool):Ref<BatchItemResultBuilder>
			err(err:string):Ref<BatchItemResultBuilder>
			build():Ref<BatchItemResult>
	}
	//"group_chat"
	export const ChatTypeGroupChat:string
	//"p2p_chat"
	export const ChatTypeP2pChat:string
	export interface Chunk extends Struct<Chunk>{

			chunkId:Ref<string>
			docId:Ref<string>
			datasetId:Ref<string>
			updateTime:Ref<string>
			content:Ref<string>
			filterData:Ref<string>
			score:Ref<float64>
			tokenNum:Ref<int>
			overlength:Ref<bool>
	}
	export interface ChunkBuilder extends Struct<ChunkBuilder>{

			chunkId(chunkId:string):Ref<ChunkBuilder>
			docId(docId:string):Ref<ChunkBuilder>
			datasetId(datasetId:string):Ref<ChunkBuilder>
			updateTime(updateTime:string):Ref<ChunkBuilder>
			content(content:string):Ref<ChunkBuilder>
			filterData(filterData:string):Ref<ChunkBuilder>
			score(score:float64):Ref<ChunkBuilder>
			tokenNum(tokenNum:int):Ref<ChunkBuilder>
			overlength(overlength:bool):Ref<ChunkBuilder>
			build():Ref<Chunk>
	}
	export interface ConnectDataSource extends Struct<ConnectDataSource>{

			serviceUrl:Ref<string>
			projectName:Ref<string>
			displayName:Ref<string>
			description:Ref<string>
			iconUrl:Ref<string>
			projectDescription:Ref<string>
			contactEmail:Ref<string>
			tenantName:Ref<string>
	}
	export interface ConnectDataSourceBuilder extends Struct<ConnectDataSourceBuilder>{

			serviceUrl(serviceUrl:string):Ref<ConnectDataSourceBuilder>
			projectName(projectName:string):Ref<ConnectDataSourceBuilder>
			displayName(displayName:string):Ref<ConnectDataSourceBuilder>
			description(description:string):Ref<ConnectDataSourceBuilder>
			iconUrl(iconUrl:string):Ref<ConnectDataSourceBuilder>
			projectDescription(projectDescription:string):Ref<ConnectDataSourceBuilder>
			contactEmail(contactEmail:string):Ref<ConnectDataSourceBuilder>
			tenantName(tenantName:string):Ref<ConnectDataSourceBuilder>
			build():Ref<ConnectDataSource>
	}
	//1
	export const ConnectTypeCallback:int
	//0
	export const ConnectTypeDefault:int
	export interface ConnectorParam extends Struct<ConnectorParam>{

			callbackUserIdType:Ref<int>
			callbackEndpoint:Ref<string>
	}
	export interface ConnectorParamBuilder extends Struct<ConnectorParamBuilder>{

			callbackUserIdType(callbackUserIdType:int):Ref<ConnectorParamBuilder>
			callbackEndpoint(callbackEndpoint:string):Ref<ConnectorParamBuilder>
			build():Ref<ConnectorParam>
	}
	export interface CreateAppPathReqBodyBuilder extends Struct<CreateAppPathReqBodyBuilder>{

			query(query:string):Ref<CreateAppPathReqBodyBuilder>
			build():Ref<CreateAppReqBody>
	}
	export interface CreateAppReq extends Struct<CreateAppReq>{

			body:Ref<CreateAppReqBody>
	}
	export interface CreateAppReqBody extends Struct<CreateAppReqBody>{

			query:Ref<string>
	}
	export interface CreateAppReqBodyBuilder extends Struct<CreateAppReqBodyBuilder>{

			query(query:string):Ref<CreateAppReqBodyBuilder>
			build():Ref<CreateAppReqBody>
	}
	export interface CreateAppReqBuilder extends Struct<CreateAppReqBuilder>{

			userIdType(userIdType:string):Ref<CreateAppReqBuilder>
			pageSize(pageSize:int):Ref<CreateAppReqBuilder>
			pageToken(pageToken:string):Ref<CreateAppReqBuilder>
			body(body:Ref<CreateAppReqBody>):Ref<CreateAppReqBuilder>
			build():Ref<CreateAppReq>
	}
	export interface CreateAppResp extends Struct<CreateAppResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateAppRespData>
			success():bool
	}
	export interface CreateAppRespData extends Struct<CreateAppRespData>{

			items:string[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface CreateDataSourceItemReq extends Struct<CreateDataSourceItemReq>{

			item:Ref<Item>
	}
	export interface CreateDataSourceItemReqBuilder extends Struct<CreateDataSourceItemReqBuilder>{

			dataSourceId(dataSourceId:string):Ref<CreateDataSourceItemReqBuilder>
			item(item:Ref<Item>):Ref<CreateDataSourceItemReqBuilder>
			build():Ref<CreateDataSourceItemReq>
	}
	export interface CreateDataSourceItemResp extends Struct<CreateDataSourceItemResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface CreateDataSourceReq extends Struct<CreateDataSourceReq>{

			dataSource:Ref<DataSource>
	}
	export interface CreateDataSourceReqBuilder extends Struct<CreateDataSourceReqBuilder>{

			dataSource(dataSource:Ref<DataSource>):Ref<CreateDataSourceReqBuilder>
			build():Ref<CreateDataSourceReq>
	}
	export interface CreateDataSourceResp extends Struct<CreateDataSourceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateDataSourceRespData>
			success():bool
	}
	export interface CreateDataSourceRespData extends Struct<CreateDataSourceRespData>{

			dataSource:Ref<DataSource>
	}
	export interface CreateDocParam extends Struct<CreateDocParam>{

			docId:Ref<string>
			filterData:Ref<string>
			content:Ref<string>
			chunks:string[]
			overlengthHandleType:Ref<int>
	}
	export interface CreateDocParamBuilder extends Struct<CreateDocParamBuilder>{

			docId(docId:string):Ref<CreateDocParamBuilder>
			filterData(filterData:string):Ref<CreateDocParamBuilder>
			content(content:string):Ref<CreateDocParamBuilder>
			chunks(chunks:string[]):Ref<CreateDocParamBuilder>
			overlengthHandleType(overlengthHandleType:int):Ref<CreateDocParamBuilder>
			build():Ref<CreateDocParam>
	}
	export interface CreateMessagePathReqBodyBuilder extends Struct<CreateMessagePathReqBodyBuilder>{

			query(query:string):Ref<CreateMessagePathReqBodyBuilder>
			fromIds(fromIds:string[]):Ref<CreateMessagePathReqBodyBuilder>
			chatIds(chatIds:string[]):Ref<CreateMessagePathReqBodyBuilder>
			messageType(messageType:string):Ref<CreateMessagePathReqBodyBuilder>
			atChatterIds(atChatterIds:string[]):Ref<CreateMessagePathReqBodyBuilder>
			fromType(fromType:string):Ref<CreateMessagePathReqBodyBuilder>
			chatType(chatType:string):Ref<CreateMessagePathReqBodyBuilder>
			startTime(startTime:string):Ref<CreateMessagePathReqBodyBuilder>
			endTime(endTime:string):Ref<CreateMessagePathReqBodyBuilder>
			build():Ref<CreateMessageReqBody>
	}
	export interface CreateMessageReq extends Struct<CreateMessageReq>{

			body:Ref<CreateMessageReqBody>
	}
	export interface CreateMessageReqBody extends Struct<CreateMessageReqBody>{

			query:Ref<string>
			fromIds:string[]
			chatIds:string[]
			messageType:Ref<string>
			atChatterIds:string[]
			fromType:Ref<string>
			chatType:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
	}
	export interface CreateMessageReqBodyBuilder extends Struct<CreateMessageReqBodyBuilder>{

			query(query:string):Ref<CreateMessageReqBodyBuilder>
			fromIds(fromIds:string[]):Ref<CreateMessageReqBodyBuilder>
			chatIds(chatIds:string[]):Ref<CreateMessageReqBodyBuilder>
			messageType(messageType:string):Ref<CreateMessageReqBodyBuilder>
			atChatterIds(atChatterIds:string[]):Ref<CreateMessageReqBodyBuilder>
			fromType(fromType:string):Ref<CreateMessageReqBodyBuilder>
			chatType(chatType:string):Ref<CreateMessageReqBodyBuilder>
			startTime(startTime:string):Ref<CreateMessageReqBodyBuilder>
			endTime(endTime:string):Ref<CreateMessageReqBodyBuilder>
			build():Ref<CreateMessageReqBody>
	}
	export interface CreateMessageReqBuilder extends Struct<CreateMessageReqBuilder>{

			userIdType(userIdType:string):Ref<CreateMessageReqBuilder>
			pageSize(pageSize:int):Ref<CreateMessageReqBuilder>
			pageToken(pageToken:string):Ref<CreateMessageReqBuilder>
			body(body:Ref<CreateMessageReqBody>):Ref<CreateMessageReqBuilder>
			build():Ref<CreateMessageReq>
	}
	export interface CreateMessageResp extends Struct<CreateMessageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateMessageRespData>
			success():bool
	}
	export interface CreateMessageRespData extends Struct<CreateMessageRespData>{

			items:string[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface CreateSchemaReq extends Struct<CreateSchemaReq>{

			schema:Ref<Schema>
	}
	export interface CreateSchemaReqBuilder extends Struct<CreateSchemaReqBuilder>{

			validateOnly(validateOnly:bool):Ref<CreateSchemaReqBuilder>
			schema(schema:Ref<Schema>):Ref<CreateSchemaReqBuilder>
			build():Ref<CreateSchemaReq>
	}
	export interface CreateSchemaResp extends Struct<CreateSchemaResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateSchemaRespData>
			success():bool
	}
	export interface CreateSchemaRespData extends Struct<CreateSchemaRespData>{

			schema:Ref<Schema>
	}
	export interface DataSource extends Struct<DataSource>{

			id:Ref<string>
			name:Ref<string>
			state:Ref<int>
			description:Ref<string>
			createTime:Ref<string>
			updateTime:Ref<string>
			isExceedQuota:Ref<bool>
			iconUrl:Ref<string>
			template:Ref<string>
			searchableFields:string[]
			i18nName:Ref<I18nMeta>
			i18nDescription:Ref<I18nMeta>
			schemaId:Ref<string>
			appId:Ref<string>
			connectType:Ref<int>
			connectorParam:Ref<ConnectorParam>
			enableAnswer:Ref<bool>
	}
	export interface DataSourceBuilder extends Struct<DataSourceBuilder>{

			id(id:string):Ref<DataSourceBuilder>
			name(name:string):Ref<DataSourceBuilder>
			state(state:int):Ref<DataSourceBuilder>
			description(description:string):Ref<DataSourceBuilder>
			createTime(createTime:string):Ref<DataSourceBuilder>
			updateTime(updateTime:string):Ref<DataSourceBuilder>
			isExceedQuota(isExceedQuota:bool):Ref<DataSourceBuilder>
			iconUrl(iconUrl:string):Ref<DataSourceBuilder>
			template(template:string):Ref<DataSourceBuilder>
			searchableFields(searchableFields:string[]):Ref<DataSourceBuilder>
			i18nName(i18nName:Ref<I18nMeta>):Ref<DataSourceBuilder>
			i18nDescription(i18nDescription:Ref<I18nMeta>):Ref<DataSourceBuilder>
			schemaId(schemaId:string):Ref<DataSourceBuilder>
			appId(appId:string):Ref<DataSourceBuilder>
			connectType(connectType:int):Ref<DataSourceBuilder>
			connectorParam(connectorParam:Ref<ConnectorParam>):Ref<DataSourceBuilder>
			enableAnswer(enableAnswer:bool):Ref<DataSourceBuilder>
			build():Ref<DataSource>
	}
	export interface Dataset extends Struct<Dataset>{

			datasetId:Ref<string>
			appId:Ref<string>
			createTime:Ref<string>
			updateTime:Ref<string>
			chunkNum:Ref<int>
			docNum:Ref<int>
			name:Ref<string>
			description:Ref<string>
			filterSchemas:Ref<FilterSchema>[]
			modelConfig:Ref<ModelConfig>
			viewerAppIds:string[]
	}
	export interface DatasetBuilder extends Struct<DatasetBuilder>{

			datasetId(datasetId:string):Ref<DatasetBuilder>
			appId(appId:string):Ref<DatasetBuilder>
			createTime(createTime:string):Ref<DatasetBuilder>
			updateTime(updateTime:string):Ref<DatasetBuilder>
			chunkNum(chunkNum:int):Ref<DatasetBuilder>
			docNum(docNum:int):Ref<DatasetBuilder>
			name(name:string):Ref<DatasetBuilder>
			description(description:string):Ref<DatasetBuilder>
			filterSchemas(filterSchemas:Ref<FilterSchema>[]):Ref<DatasetBuilder>
			modelConfig(modelConfig:Ref<ModelConfig>):Ref<DatasetBuilder>
			viewerAppIds(viewerAppIds:string[]):Ref<DatasetBuilder>
			build():Ref<Dataset>
	}
	export interface DeleteDataSourceItemReq extends Struct<DeleteDataSourceItemReq>{

	}
	export interface DeleteDataSourceItemReqBuilder extends Struct<DeleteDataSourceItemReqBuilder>{

			dataSourceId(dataSourceId:string):Ref<DeleteDataSourceItemReqBuilder>
			itemId(itemId:string):Ref<DeleteDataSourceItemReqBuilder>
			build():Ref<DeleteDataSourceItemReq>
	}
	export interface DeleteDataSourceItemResp extends Struct<DeleteDataSourceItemResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteDataSourceReq extends Struct<DeleteDataSourceReq>{

	}
	export interface DeleteDataSourceReqBuilder extends Struct<DeleteDataSourceReqBuilder>{

			dataSourceId(dataSourceId:string):Ref<DeleteDataSourceReqBuilder>
			build():Ref<DeleteDataSourceReq>
	}
	export interface DeleteDataSourceResp extends Struct<DeleteDataSourceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteSchemaReq extends Struct<DeleteSchemaReq>{

	}
	export interface DeleteSchemaReqBuilder extends Struct<DeleteSchemaReqBuilder>{

			schemaId(schemaId:string):Ref<DeleteSchemaReqBuilder>
			build():Ref<DeleteSchemaReq>
	}
	export interface DeleteSchemaResp extends Struct<DeleteSchemaResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface DialogSearchRequest extends Struct<DialogSearchRequest>{

			toolRawInstruction:Ref<string>
			scenarioContextSchemaVersion:Ref<string>
			scenarioContext:Ref<ScenarioContext>
			agentType:Ref<int>
			responseType:Ref<int>
	}
	export interface DialogSearchRequestBuilder extends Struct<DialogSearchRequestBuilder>{

			toolRawInstruction(toolRawInstruction:string):Ref<DialogSearchRequestBuilder>
			scenarioContextSchemaVersion(scenarioContextSchemaVersion:string):Ref<DialogSearchRequestBuilder>
			scenarioContext(scenarioContext:Ref<ScenarioContext>):Ref<DialogSearchRequestBuilder>
			agentType(agentType:int):Ref<DialogSearchRequestBuilder>
			responseType(responseType:int):Ref<DialogSearchRequestBuilder>
			build():Ref<DialogSearchRequest>
	}
	export interface Doc extends Struct<Doc>{

			docId:Ref<string>
			filterData:Ref<string>
			chunks:Ref<Chunk>[]
	}
	export interface DocBuilder extends Struct<DocBuilder>{

			docId(docId:string):Ref<DocBuilder>
			filterData(filterData:string):Ref<DocBuilder>
			chunks(chunks:Ref<Chunk>[]):Ref<DocBuilder>
			build():Ref<Doc>
	}
	export interface DocPassageParam extends Struct<DocPassageParam>{

			searchable:Ref<bool>
			docTokens:string[]
			folderTokens:string[]
			objIds:string[]
			disableSearchLink:Ref<bool>
	}
	export interface DocPassageParamBuilder extends Struct<DocPassageParamBuilder>{

			searchable(searchable:bool):Ref<DocPassageParamBuilder>
			docTokens(docTokens:string[]):Ref<DocPassageParamBuilder>
			folderTokens(folderTokens:string[]):Ref<DocPassageParamBuilder>
			objIds(objIds:string[]):Ref<DocPassageParamBuilder>
			disableSearchLink(disableSearchLink:bool):Ref<DocPassageParamBuilder>
			build():Ref<DocPassageParam>
	}
	export interface FilterSchema extends Struct<FilterSchema>{

			field:Ref<string>
			type:Ref<string>
			defaultVal:Ref<string>
			fieldType:Ref<string>
	}
	export interface FilterSchemaBuilder extends Struct<FilterSchemaBuilder>{

			field(field:string):Ref<FilterSchemaBuilder>
			type(type_:string):Ref<FilterSchemaBuilder>
			defaultVal(defaultVal:string):Ref<FilterSchemaBuilder>
			fieldType(fieldType:string):Ref<FilterSchemaBuilder>
			build():Ref<FilterSchema>
	}
	//"bot"
	export const FromTypeBot:string
	//"user"
	export const FromTypeUser:string
	export interface GetDataSourceItemReq extends Struct<GetDataSourceItemReq>{

	}
	export interface GetDataSourceItemReqBuilder extends Struct<GetDataSourceItemReqBuilder>{

			dataSourceId(dataSourceId:string):Ref<GetDataSourceItemReqBuilder>
			itemId(itemId:string):Ref<GetDataSourceItemReqBuilder>
			build():Ref<GetDataSourceItemReq>
	}
	export interface GetDataSourceItemResp extends Struct<GetDataSourceItemResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetDataSourceItemRespData>
			success():bool
	}
	export interface GetDataSourceItemRespData extends Struct<GetDataSourceItemRespData>{

			item:Ref<Item>
	}
	export interface GetDataSourceReq extends Struct<GetDataSourceReq>{

	}
	export interface GetDataSourceReqBuilder extends Struct<GetDataSourceReqBuilder>{

			dataSourceId(dataSourceId:string):Ref<GetDataSourceReqBuilder>
			build():Ref<GetDataSourceReq>
	}
	export interface GetDataSourceResp extends Struct<GetDataSourceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetDataSourceRespData>
			success():bool
	}
	export interface GetDataSourceRespData extends Struct<GetDataSourceRespData>{

			dataSource:Ref<DataSource>
	}
	export interface GetSchemaReq extends Struct<GetSchemaReq>{

	}
	export interface GetSchemaReqBuilder extends Struct<GetSchemaReqBuilder>{

			schemaId(schemaId:string):Ref<GetSchemaReqBuilder>
			build():Ref<GetSchemaReq>
	}
	export interface GetSchemaResp extends Struct<GetSchemaResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSchemaRespData>
			success():bool
	}
	export interface GetSchemaRespData extends Struct<GetSchemaRespData>{

			schema:Ref<Schema>
	}
	export interface HelpdeskPassageParam extends Struct<HelpdeskPassageParam>{

			searchable:Ref<bool>
			helpdeskIds:string[]
	}
	export interface HelpdeskPassageParamBuilder extends Struct<HelpdeskPassageParamBuilder>{

			searchable(searchable:bool):Ref<HelpdeskPassageParamBuilder>
			helpdeskIds(helpdeskIds:string[]):Ref<HelpdeskPassageParamBuilder>
			build():Ref<HelpdeskPassageParam>
	}
	export interface I18nMeta extends Struct<I18nMeta>{

			zhCn:Ref<string>
			enUs:Ref<string>
			jaJp:Ref<string>
	}
	export interface I18nMetaBuilder extends Struct<I18nMetaBuilder>{

			zhCn(zhCn:string):Ref<I18nMetaBuilder>
			enUs(enUs:string):Ref<I18nMetaBuilder>
			jaJp(jaJp:string):Ref<I18nMetaBuilder>
			build():Ref<I18nMeta>
	}
	export interface Item extends Struct<Item>{

			id:Ref<string>
			acl:Ref<Acl>[]
			metadata:Ref<ItemMetadata>
			structuredData:Ref<string>
			content:Ref<ItemContent>
	}
	export interface ItemBuilder extends Struct<ItemBuilder>{

			id(id:string):Ref<ItemBuilder>
			acl(acl:Ref<Acl>[]):Ref<ItemBuilder>
			metadata(metadata:Ref<ItemMetadata>):Ref<ItemBuilder>
			structuredData(structuredData:string):Ref<ItemBuilder>
			content(content:Ref<ItemContent>):Ref<ItemBuilder>
			build():Ref<Item>
	}
	export interface ItemContent extends Struct<ItemContent>{

			format:Ref<string>
			contentData:Ref<string>
	}
	export interface ItemContentBuilder extends Struct<ItemContentBuilder>{

			format(format:string):Ref<ItemContentBuilder>
			contentData(contentData:string):Ref<ItemContentBuilder>
			build():Ref<ItemContent>
	}
	export interface ItemMetadata extends Struct<ItemMetadata>{

			title:Ref<string>
			sourceUrl:Ref<string>
			createTime:Ref<int>
			updateTime:Ref<int>
			sourceUrlMobile:Ref<string>
	}
	export interface ItemMetadataBuilder extends Struct<ItemMetadataBuilder>{

			title(title:string):Ref<ItemMetadataBuilder>
			sourceUrl(sourceUrl:string):Ref<ItemMetadataBuilder>
			createTime(createTime:int):Ref<ItemMetadataBuilder>
			updateTime(updateTime:int):Ref<ItemMetadataBuilder>
			sourceUrlMobile(sourceUrlMobile:string):Ref<ItemMetadataBuilder>
			build():Ref<ItemMetadata>
	}
	export interface ItemRecord extends Struct<ItemRecord>{

			itemId:Ref<string>
			dataSourceId:Ref<string>
			version:Ref<string>
			createdAt:Ref<string>
			updatedAt:Ref<string>
	}
	export interface ItemRecordBuilder extends Struct<ItemRecordBuilder>{

			itemId(itemId:string):Ref<ItemRecordBuilder>
			dataSourceId(dataSourceId:string):Ref<ItemRecordBuilder>
			version(version:string):Ref<ItemRecordBuilder>
			createdAt(createdAt:string):Ref<ItemRecordBuilder>
			updatedAt(updatedAt:string):Ref<ItemRecordBuilder>
			build():Ref<ItemRecord>
	}
	export interface LingoPassageParam extends Struct<LingoPassageParam>{

			searchable:Ref<bool>
	}
	export interface LingoPassageParamBuilder extends Struct<LingoPassageParamBuilder>{

			searchable(searchable:bool):Ref<LingoPassageParamBuilder>
			build():Ref<LingoPassageParam>
	}
	export interface ListDataSourceIterator extends Struct<ListDataSourceIterator>{

			next():[bool,Ref<DataSource>]
			nextPageToken():Ref<string>
	}
	export interface ListDataSourceReq extends Struct<ListDataSourceReq>{

			limit:int
	}
	export interface ListDataSourceReqBuilder extends Struct<ListDataSourceReqBuilder>{

			limit(limit:int):Ref<ListDataSourceReqBuilder>
			view(view:int):Ref<ListDataSourceReqBuilder>
			pageSize(pageSize:int):Ref<ListDataSourceReqBuilder>
			pageToken(pageToken:string):Ref<ListDataSourceReqBuilder>
			build():Ref<ListDataSourceReq>
	}
	export interface ListDataSourceResp extends Struct<ListDataSourceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListDataSourceRespData>
			success():bool
	}
	export interface ListDataSourceRespData extends Struct<ListDataSourceRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<DataSource>[]
	}
	export interface LlmModelConfig extends Struct<LlmModelConfig>{

			modelName:Ref<string>
			prompt:Ref<string>
			maxToken:Ref<int>
			temperature:Ref<float64>
	}
	export interface LlmModelConfigBuilder extends Struct<LlmModelConfigBuilder>{

			modelName(modelName:string):Ref<LlmModelConfigBuilder>
			prompt(prompt:string):Ref<LlmModelConfigBuilder>
			maxToken(maxToken:int):Ref<LlmModelConfigBuilder>
			temperature(temperature:float64):Ref<LlmModelConfigBuilder>
			build():Ref<LlmModelConfig>
	}
	export interface MemoryMessage extends Struct<MemoryMessage>{

			role:Ref<string>
			content:Ref<string>
	}
	export interface MemoryMessageBuilder extends Struct<MemoryMessageBuilder>{

			role(role:string):Ref<MemoryMessageBuilder>
			content(content:string):Ref<MemoryMessageBuilder>
			build():Ref<MemoryMessage>
	}
	//"file"
	export const MessageTypeFile:string
	//"image"
	export const MessageTypeImage:string
	//"media"
	export const MessageTypeMedia:string
	export interface ModelConfig extends Struct<ModelConfig>{

			modelName:Ref<string>
	}
	export interface ModelConfigBuilder extends Struct<ModelConfigBuilder>{

			modelName(modelName:string):Ref<ModelConfigBuilder>
			build():Ref<ModelConfig>
	}
	export interface ModelParam extends Struct<ModelParam>{

			encoderName:Ref<string>
			rankerName:Ref<string>
			filterName:Ref<string>
			boosterName:Ref<string>
			passageLanguage:Ref<string>
	}
	export interface ModelParamBuilder extends Struct<ModelParamBuilder>{

			encoderName(encoderName:string):Ref<ModelParamBuilder>
			rankerName(rankerName:string):Ref<ModelParamBuilder>
			filterName(filterName:string):Ref<ModelParamBuilder>
			boosterName(boosterName:string):Ref<ModelParamBuilder>
			passageLanguage(passageLanguage:string):Ref<ModelParamBuilder>
			build():Ref<ModelParam>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V2>

	export function newAclBuilder():Ref<AclBuilder>

	export function newBatchItemResultBuilder():Ref<BatchItemResultBuilder>

	export function newChunkBuilder():Ref<ChunkBuilder>

	export function newConnectDataSourceBuilder():Ref<ConnectDataSourceBuilder>

	export function newConnectorParamBuilder():Ref<ConnectorParamBuilder>

	export function newCreateAppPathReqBodyBuilder():Ref<CreateAppPathReqBodyBuilder>

	export function newCreateAppReqBodyBuilder():Ref<CreateAppReqBodyBuilder>

	export function newCreateAppReqBuilder():Ref<CreateAppReqBuilder>

	export function newCreateDataSourceItemReqBuilder():Ref<CreateDataSourceItemReqBuilder>

	export function newCreateDataSourceReqBuilder():Ref<CreateDataSourceReqBuilder>

	export function newCreateDocParamBuilder():Ref<CreateDocParamBuilder>

	export function newCreateMessagePathReqBodyBuilder():Ref<CreateMessagePathReqBodyBuilder>

	export function newCreateMessageReqBodyBuilder():Ref<CreateMessageReqBodyBuilder>

	export function newCreateMessageReqBuilder():Ref<CreateMessageReqBuilder>

	export function newCreateSchemaReqBuilder():Ref<CreateSchemaReqBuilder>

	export function newDataSourceBuilder():Ref<DataSourceBuilder>

	export function newDatasetBuilder():Ref<DatasetBuilder>

	export function newDeleteDataSourceItemReqBuilder():Ref<DeleteDataSourceItemReqBuilder>

	export function newDeleteDataSourceReqBuilder():Ref<DeleteDataSourceReqBuilder>

	export function newDeleteSchemaReqBuilder():Ref<DeleteSchemaReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDialogSearchRequestBuilder():Ref<DialogSearchRequestBuilder>

	export function newDocBuilder():Ref<DocBuilder>

	export function newDocPassageParamBuilder():Ref<DocPassageParamBuilder>

	export function newFilterSchemaBuilder():Ref<FilterSchemaBuilder>

	export function newGetDataSourceItemReqBuilder():Ref<GetDataSourceItemReqBuilder>

	export function newGetDataSourceReqBuilder():Ref<GetDataSourceReqBuilder>

	export function newGetSchemaReqBuilder():Ref<GetSchemaReqBuilder>

	export function newHelpdeskPassageParamBuilder():Ref<HelpdeskPassageParamBuilder>

	export function newI18nMetaBuilder():Ref<I18nMetaBuilder>

	export function newItemBuilder():Ref<ItemBuilder>

	export function newItemContentBuilder():Ref<ItemContentBuilder>

	export function newItemMetadataBuilder():Ref<ItemMetadataBuilder>

	export function newItemRecordBuilder():Ref<ItemRecordBuilder>

	export function newLingoPassageParamBuilder():Ref<LingoPassageParamBuilder>

	export function newListDataSourceReqBuilder():Ref<ListDataSourceReqBuilder>

	export function newLlmModelConfigBuilder():Ref<LlmModelConfigBuilder>

	export function newMemoryMessageBuilder():Ref<MemoryMessageBuilder>

	export function newModelConfigBuilder():Ref<ModelConfigBuilder>

	export function newModelParamBuilder():Ref<ModelParamBuilder>

	export function newNlsModelConfigBuilder():Ref<NlsModelConfigBuilder>

	export function newParaphraseResultBuilder():Ref<ParaphraseResultBuilder>

	export function newPassageBuilder():Ref<PassageBuilder>

	export function newPassageParamBuilder():Ref<PassageParamBuilder>

	export function newPatchDataSourcePathReqBodyBuilder():Ref<PatchDataSourcePathReqBodyBuilder>

	export function newPatchDataSourceReqBodyBuilder():Ref<PatchDataSourceReqBodyBuilder>

	export function newPatchDataSourceReqBuilder():Ref<PatchDataSourceReqBuilder>

	export function newPatchSchemaPathReqBodyBuilder():Ref<PatchSchemaPathReqBodyBuilder>

	export function newPatchSchemaPropertyBuilder():Ref<PatchSchemaPropertyBuilder>

	export function newPatchSchemaReqBodyBuilder():Ref<PatchSchemaReqBodyBuilder>

	export function newPatchSchemaReqBuilder():Ref<PatchSchemaReqBuilder>

	export function newPresentBuilder():Ref<PresentBuilder>

	export function newRagAnswerResponseBuilder():Ref<RagAnswerResponseBuilder>

	export function newRagProbeBuilder():Ref<RagProbeBuilder>

	export function newScenarioContextBuilder():Ref<ScenarioContextBuilder>

	export function newScenarioContextExtraBuilder():Ref<ScenarioContextExtraBuilder>

	export function newSchemaBuilder():Ref<SchemaBuilder>

	export function newSchemaDisplayBuilder():Ref<SchemaDisplayBuilder>

	export function newSchemaDisplayFieldMappingBuilder():Ref<SchemaDisplayFieldMappingBuilder>

	export function newSchemaEnumOptionsBuilder():Ref<SchemaEnumOptionsBuilder>

	export function newSchemaFieldAnswerOptionBuilder():Ref<SchemaFieldAnswerOptionBuilder>

	export function newSchemaFilterOptionsBuilder():Ref<SchemaFilterOptionsBuilder>

	export function newSchemaPredefineEnumStructBuilder():Ref<SchemaPredefineEnumStructBuilder>

	export function newSchemaPropertyBuilder():Ref<SchemaPropertyBuilder>

	export function newSchemaSearchOptionsBuilder():Ref<SchemaSearchOptionsBuilder>

	export function newSchemaSortOptionsBuilder():Ref<SchemaSortOptionsBuilder>

	export function newSchemaTagOptionsBuilder():Ref<SchemaTagOptionsBuilder>

	export function newSchemaTypeDefinitionsBuilder():Ref<SchemaTypeDefinitionsBuilder>

	export function newSchemaUserIdsOptionBuilder():Ref<SchemaUserIdsOptionBuilder>

	export function newSeperatePassageBuilder():Ref<SeperatePassageBuilder>

	export function newSystemInfoBuilder():Ref<SystemInfoBuilder>

	export function newUserInfoBuilder():Ref<UserInfoBuilder>

	export function newWebPassageParamBuilder():Ref<WebPassageParamBuilder>

	export function newWikiPassageParamBuilder():Ref<WikiPassageParamBuilder>

	export interface NlsModelConfig extends Struct<NlsModelConfig>{

			modelName:Ref<string>
	}
	export interface NlsModelConfigBuilder extends Struct<NlsModelConfigBuilder>{

			modelName(modelName:string):Ref<NlsModelConfigBuilder>
			build():Ref<NlsModelConfig>
	}
	export interface ParaphraseResult extends Struct<ParaphraseResult>{

			text:Ref<string>
			extra:Ref<string>
	}
	export interface ParaphraseResultBuilder extends Struct<ParaphraseResultBuilder>{

			text(text:string):Ref<ParaphraseResultBuilder>
			extra(extra:string):Ref<ParaphraseResultBuilder>
			build():Ref<ParaphraseResult>
	}
	export interface Passage extends Struct<Passage>{

			passageId:Ref<string>
			passageSource:Ref<int>
			content:Ref<string>
			title:Ref<string>
			url:Ref<string>
			score:Ref<float64>
			extra:Ref<string>
	}
	export interface PassageBuilder extends Struct<PassageBuilder>{

			passageId(passageId:string):Ref<PassageBuilder>
			passageSource(passageSource:int):Ref<PassageBuilder>
			content(content:string):Ref<PassageBuilder>
			title(title:string):Ref<PassageBuilder>
			url(url:string):Ref<PassageBuilder>
			score(score:float64):Ref<PassageBuilder>
			extra(extra:string):Ref<PassageBuilder>
			build():Ref<Passage>
	}
	export interface PassageParam extends Struct<PassageParam>{

			docParam:Ref<DocPassageParam>
			wikiParam:Ref<WikiPassageParam>
			webParam:Ref<WebPassageParam>
			helpdeskParam:Ref<HelpdeskPassageParam>
	}
	export interface PassageParamBuilder extends Struct<PassageParamBuilder>{

			docParam(docParam:Ref<DocPassageParam>):Ref<PassageParamBuilder>
			wikiParam(wikiParam:Ref<WikiPassageParam>):Ref<PassageParamBuilder>
			webParam(webParam:Ref<WebPassageParam>):Ref<PassageParamBuilder>
			helpdeskParam(helpdeskParam:Ref<HelpdeskPassageParam>):Ref<PassageParamBuilder>
			build():Ref<PassageParam>
	}
	export interface PatchDataSourcePathReqBodyBuilder extends Struct<PatchDataSourcePathReqBodyBuilder>{

			name(name:string):Ref<PatchDataSourcePathReqBodyBuilder>
			state(state:int):Ref<PatchDataSourcePathReqBodyBuilder>
			description(description:string):Ref<PatchDataSourcePathReqBodyBuilder>
			iconUrl(iconUrl:string):Ref<PatchDataSourcePathReqBodyBuilder>
			i18nName(i18nName:Ref<I18nMeta>):Ref<PatchDataSourcePathReqBodyBuilder>
			i18nDescription(i18nDescription:Ref<I18nMeta>):Ref<PatchDataSourcePathReqBodyBuilder>
			connectorParam(connectorParam:Ref<ConnectorParam>):Ref<PatchDataSourcePathReqBodyBuilder>
			enableAnswer(enableAnswer:bool):Ref<PatchDataSourcePathReqBodyBuilder>
			build():Ref<PatchDataSourceReqBody>
	}
	export interface PatchDataSourceReq extends Struct<PatchDataSourceReq>{

			body:Ref<PatchDataSourceReqBody>
	}
	export interface PatchDataSourceReqBody extends Struct<PatchDataSourceReqBody>{

			name:Ref<string>
			state:Ref<int>
			description:Ref<string>
			iconUrl:Ref<string>
			i18nName:Ref<I18nMeta>
			i18nDescription:Ref<I18nMeta>
			connectorParam:Ref<ConnectorParam>
			enableAnswer:Ref<bool>
	}
	export interface PatchDataSourceReqBodyBuilder extends Struct<PatchDataSourceReqBodyBuilder>{

			name(name:string):Ref<PatchDataSourceReqBodyBuilder>
			state(state:int):Ref<PatchDataSourceReqBodyBuilder>
			description(description:string):Ref<PatchDataSourceReqBodyBuilder>
			iconUrl(iconUrl:string):Ref<PatchDataSourceReqBodyBuilder>
			i18nName(i18nName:Ref<I18nMeta>):Ref<PatchDataSourceReqBodyBuilder>
			i18nDescription(i18nDescription:Ref<I18nMeta>):Ref<PatchDataSourceReqBodyBuilder>
			connectorParam(connectorParam:Ref<ConnectorParam>):Ref<PatchDataSourceReqBodyBuilder>
			enableAnswer(enableAnswer:bool):Ref<PatchDataSourceReqBodyBuilder>
			build():Ref<PatchDataSourceReqBody>
	}
	export interface PatchDataSourceReqBuilder extends Struct<PatchDataSourceReqBuilder>{

			dataSourceId(dataSourceId:string):Ref<PatchDataSourceReqBuilder>
			body(body:Ref<PatchDataSourceReqBody>):Ref<PatchDataSourceReqBuilder>
			build():Ref<PatchDataSourceReq>
	}
	export interface PatchDataSourceResp extends Struct<PatchDataSourceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchDataSourceRespData>
			success():bool
	}
	export interface PatchDataSourceRespData extends Struct<PatchDataSourceRespData>{

			dataSource:Ref<DataSource>
	}
	export interface PatchSchemaPathReqBodyBuilder extends Struct<PatchSchemaPathReqBodyBuilder>{

			display(display:Ref<SchemaDisplay>):Ref<PatchSchemaPathReqBodyBuilder>
			properties(properties:Ref<PatchSchemaProperty>[]):Ref<PatchSchemaPathReqBodyBuilder>
			build():Ref<PatchSchemaReqBody>
	}
	export interface PatchSchemaProperty extends Struct<PatchSchemaProperty>{

			name:Ref<string>
			desc:Ref<string>
			answerOption:Ref<SchemaFieldAnswerOption>
	}
	export interface PatchSchemaPropertyBuilder extends Struct<PatchSchemaPropertyBuilder>{

			name(name:string):Ref<PatchSchemaPropertyBuilder>
			desc(desc:string):Ref<PatchSchemaPropertyBuilder>
			answerOption(answerOption:Ref<SchemaFieldAnswerOption>):Ref<PatchSchemaPropertyBuilder>
			build():Ref<PatchSchemaProperty>
	}
	export interface PatchSchemaReq extends Struct<PatchSchemaReq>{

			body:Ref<PatchSchemaReqBody>
	}
	export interface PatchSchemaReqBody extends Struct<PatchSchemaReqBody>{

			display:Ref<SchemaDisplay>
			properties:Ref<PatchSchemaProperty>[]
	}
	export interface PatchSchemaReqBodyBuilder extends Struct<PatchSchemaReqBodyBuilder>{

			display(display:Ref<SchemaDisplay>):Ref<PatchSchemaReqBodyBuilder>
			properties(properties:Ref<PatchSchemaProperty>[]):Ref<PatchSchemaReqBodyBuilder>
			build():Ref<PatchSchemaReqBody>
	}
	export interface PatchSchemaReqBuilder extends Struct<PatchSchemaReqBuilder>{

			schemaId(schemaId:string):Ref<PatchSchemaReqBuilder>
			body(body:Ref<PatchSchemaReqBody>):Ref<PatchSchemaReqBuilder>
			build():Ref<PatchSchemaReq>
	}
	export interface PatchSchemaResp extends Struct<PatchSchemaResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchSchemaRespData>
			success():bool
	}
	export interface PatchSchemaRespData extends Struct<PatchSchemaRespData>{

			schema:Ref<Schema>
	}
	export interface Present extends Struct<Present>{

			type:Ref<string>
			body:Ref<string>
			operationType:Ref<string>
			interactable:Ref<bool>
			operationUrl:Ref<string>
			callbackUrl:Ref<string>
			callbackInfo:Ref<string>
			cardTemplateId:Ref<string>
			cardVariables:Ref<TemplateCardVariables>
	}
	export interface PresentBuilder extends Struct<PresentBuilder>{

			type(type_:string):Ref<PresentBuilder>
			body(body:string):Ref<PresentBuilder>
			operationType(operationType:string):Ref<PresentBuilder>
			interactable(interactable:bool):Ref<PresentBuilder>
			operationUrl(operationUrl:string):Ref<PresentBuilder>
			callbackUrl(callbackUrl:string):Ref<PresentBuilder>
			callbackInfo(callbackInfo:string):Ref<PresentBuilder>
			cardTemplateId(cardTemplateId:string):Ref<PresentBuilder>
			cardVariables(cardVariables:Ref<TemplateCardVariables>):Ref<PresentBuilder>
			build():Ref<Present>
	}
	export interface RagAnswerResponse extends Struct<RagAnswerResponse>{

			answer:Ref<string>
			passages:Ref<Passage>[]
			probe:Ref<RagProbe>
	}
	export interface RagAnswerResponseBuilder extends Struct<RagAnswerResponseBuilder>{

			answer(answer:string):Ref<RagAnswerResponseBuilder>
			passages(passages:Ref<Passage>[]):Ref<RagAnswerResponseBuilder>
			probe(probe:Ref<RagProbe>):Ref<RagAnswerResponseBuilder>
			build():Ref<RagAnswerResponse>
	}
	export interface RagProbe extends Struct<RagProbe>{

			hitAuthority:Ref<bool>
			hitConfidenceWarn:Ref<bool>
			hitLlmReject:Ref<bool>
	}
	export interface RagProbeBuilder extends Struct<RagProbeBuilder>{

			hitAuthority(hitAuthority:bool):Ref<RagProbeBuilder>
			hitConfidenceWarn(hitConfidenceWarn:bool):Ref<RagProbeBuilder>
			hitLlmReject(hitLlmReject:bool):Ref<RagProbeBuilder>
			build():Ref<RagProbe>
	}
	export interface ScenarioContext extends Struct<ScenarioContext>{

			extra:Ref<ScenarioContextExtra>
			systemInfo:Ref<SystemInfo>
			memory:Ref<MemoryMessage>[]
			scenario:Ref<string>
			workMode:Ref<int>
			toolRawInstruction:Ref<string>
	}
	export interface ScenarioContextBuilder extends Struct<ScenarioContextBuilder>{

			extra(extra:Ref<ScenarioContextExtra>):Ref<ScenarioContextBuilder>
			systemInfo(systemInfo:Ref<SystemInfo>):Ref<ScenarioContextBuilder>
			memory(memory:Ref<MemoryMessage>[]):Ref<ScenarioContextBuilder>
			scenario(scenario:string):Ref<ScenarioContextBuilder>
			workMode(workMode:int):Ref<ScenarioContextBuilder>
			toolRawInstruction(toolRawInstruction:string):Ref<ScenarioContextBuilder>
			build():Ref<ScenarioContext>
	}
	export interface ScenarioContextExtra extends Struct<ScenarioContextExtra>{

			groundingId:Ref<string>
			modelKey:Ref<string>
	}
	export interface ScenarioContextExtraBuilder extends Struct<ScenarioContextExtraBuilder>{

			groundingId(groundingId:string):Ref<ScenarioContextExtraBuilder>
			modelKey(modelKey:string):Ref<ScenarioContextExtraBuilder>
			build():Ref<ScenarioContextExtra>
	}
	export interface Schema extends Struct<Schema>{

			properties:Ref<SchemaProperty>[]
			display:Ref<SchemaDisplay>
			schemaId:Ref<string>
	}
	export interface SchemaBuilder extends Struct<SchemaBuilder>{

			properties(properties:Ref<SchemaProperty>[]):Ref<SchemaBuilder>
			display(display:Ref<SchemaDisplay>):Ref<SchemaBuilder>
			schemaId(schemaId:string):Ref<SchemaBuilder>
			build():Ref<Schema>
	}
	export interface SchemaDisplay extends Struct<SchemaDisplay>{

			cardKey:Ref<string>
			fieldsMapping:Ref<SchemaDisplayFieldMapping>[]
	}
	export interface SchemaDisplayBuilder extends Struct<SchemaDisplayBuilder>{

			cardKey(cardKey:string):Ref<SchemaDisplayBuilder>
			fieldsMapping(fieldsMapping:Ref<SchemaDisplayFieldMapping>[]):Ref<SchemaDisplayBuilder>
			build():Ref<SchemaDisplay>
	}
	export interface SchemaDisplayFieldMapping extends Struct<SchemaDisplayFieldMapping>{

			displayField:Ref<string>
			dataField:Ref<string>
	}
	export interface SchemaDisplayFieldMappingBuilder extends Struct<SchemaDisplayFieldMappingBuilder>{

			displayField(displayField:string):Ref<SchemaDisplayFieldMappingBuilder>
			dataField(dataField:string):Ref<SchemaDisplayFieldMappingBuilder>
			build():Ref<SchemaDisplayFieldMapping>
	}
	export interface SchemaEnumOptions extends Struct<SchemaEnumOptions>{

			possibleValues:string[]
	}
	export interface SchemaEnumOptionsBuilder extends Struct<SchemaEnumOptionsBuilder>{

			possibleValues(possibleValues:string[]):Ref<SchemaEnumOptionsBuilder>
			build():Ref<SchemaEnumOptions>
	}
	export interface SchemaFieldAnswerOption extends Struct<SchemaFieldAnswerOption>{

			isSearchable:Ref<bool>
			isReturnable:Ref<bool>
	}
	export interface SchemaFieldAnswerOptionBuilder extends Struct<SchemaFieldAnswerOptionBuilder>{

			isSearchable(isSearchable:bool):Ref<SchemaFieldAnswerOptionBuilder>
			isReturnable(isReturnable:bool):Ref<SchemaFieldAnswerOptionBuilder>
			build():Ref<SchemaFieldAnswerOption>
	}
	export interface SchemaFilterOptions extends Struct<SchemaFilterOptions>{

			displayName:Ref<string>
			i18nDisplayName:Ref<I18nMeta>
			optionMode:Ref<string>
			associatedSmartFilter:Ref<string>
			filterType:Ref<string>
			predefineEnumValues:Ref<SchemaPredefineEnumStruct>[]
			enableClientFilter:Ref<bool>
			referenceDatasourceId:Ref<string>
	}
	export interface SchemaFilterOptionsBuilder extends Struct<SchemaFilterOptionsBuilder>{

			displayName(displayName:string):Ref<SchemaFilterOptionsBuilder>
			i18nDisplayName(i18nDisplayName:Ref<I18nMeta>):Ref<SchemaFilterOptionsBuilder>
			optionMode(optionMode:string):Ref<SchemaFilterOptionsBuilder>
			associatedSmartFilter(associatedSmartFilter:string):Ref<SchemaFilterOptionsBuilder>
			filterType(filterType:string):Ref<SchemaFilterOptionsBuilder>
			predefineEnumValues(predefineEnumValues:Ref<SchemaPredefineEnumStruct>[]):Ref<SchemaFilterOptionsBuilder>
			enableClientFilter(enableClientFilter:bool):Ref<SchemaFilterOptionsBuilder>
			referenceDatasourceId(referenceDatasourceId:string):Ref<SchemaFilterOptionsBuilder>
			build():Ref<SchemaFilterOptions>
	}
	export interface SchemaPredefineEnumStruct extends Struct<SchemaPredefineEnumStruct>{

			name:Ref<string>
			text:Ref<string>
	}
	export interface SchemaPredefineEnumStructBuilder extends Struct<SchemaPredefineEnumStructBuilder>{

			name(name:string):Ref<SchemaPredefineEnumStructBuilder>
			text(text:string):Ref<SchemaPredefineEnumStructBuilder>
			build():Ref<SchemaPredefineEnumStruct>
	}
	export interface SchemaProperty extends Struct<SchemaProperty>{

			name:Ref<string>
			type:Ref<string>
			isSearchable:Ref<bool>
			isSortable:Ref<bool>
			isReturnable:Ref<bool>
			sortOptions:Ref<SchemaSortOptions>
			typeDefinitions:Ref<SchemaTypeDefinitions>
			searchOptions:Ref<SchemaSearchOptions>
			isFilterable:Ref<bool>
			filterOptions:Ref<SchemaFilterOptions>
			answerOption:Ref<SchemaFieldAnswerOption>
			desc:Ref<string>
	}
	export interface SchemaPropertyBuilder extends Struct<SchemaPropertyBuilder>{

			name(name:string):Ref<SchemaPropertyBuilder>
			type(type_:string):Ref<SchemaPropertyBuilder>
			isSearchable(isSearchable:bool):Ref<SchemaPropertyBuilder>
			isSortable(isSortable:bool):Ref<SchemaPropertyBuilder>
			isReturnable(isReturnable:bool):Ref<SchemaPropertyBuilder>
			sortOptions(sortOptions:Ref<SchemaSortOptions>):Ref<SchemaPropertyBuilder>
			typeDefinitions(typeDefinitions:Ref<SchemaTypeDefinitions>):Ref<SchemaPropertyBuilder>
			searchOptions(searchOptions:Ref<SchemaSearchOptions>):Ref<SchemaPropertyBuilder>
			isFilterable(isFilterable:bool):Ref<SchemaPropertyBuilder>
			filterOptions(filterOptions:Ref<SchemaFilterOptions>):Ref<SchemaPropertyBuilder>
			answerOption(answerOption:Ref<SchemaFieldAnswerOption>):Ref<SchemaPropertyBuilder>
			desc(desc:string):Ref<SchemaPropertyBuilder>
			build():Ref<SchemaProperty>
	}
	export interface SchemaSearchOptions extends Struct<SchemaSearchOptions>{

			enableSemanticMatch:Ref<bool>
			enableExactMatch:Ref<bool>
			enablePrefixMatch:Ref<bool>
			enableNumberSuffixMatch:Ref<bool>
			enableCamelMatch:Ref<bool>
	}
	export interface SchemaSearchOptionsBuilder extends Struct<SchemaSearchOptionsBuilder>{

			enableSemanticMatch(enableSemanticMatch:bool):Ref<SchemaSearchOptionsBuilder>
			enableExactMatch(enableExactMatch:bool):Ref<SchemaSearchOptionsBuilder>
			enablePrefixMatch(enablePrefixMatch:bool):Ref<SchemaSearchOptionsBuilder>
			enableNumberSuffixMatch(enableNumberSuffixMatch:bool):Ref<SchemaSearchOptionsBuilder>
			enableCamelMatch(enableCamelMatch:bool):Ref<SchemaSearchOptionsBuilder>
			build():Ref<SchemaSearchOptions>
	}
	export interface SchemaSortOptions extends Struct<SchemaSortOptions>{

			priority:Ref<int>
			order:Ref<string>
	}
	export interface SchemaSortOptionsBuilder extends Struct<SchemaSortOptionsBuilder>{

			priority(priority:int):Ref<SchemaSortOptionsBuilder>
			order(order:string):Ref<SchemaSortOptionsBuilder>
			build():Ref<SchemaSortOptions>
	}
	export interface SchemaTagOptions extends Struct<SchemaTagOptions>{

			name:Ref<string>
			color:Ref<string>
			text:Ref<string>
	}
	export interface SchemaTagOptionsBuilder extends Struct<SchemaTagOptionsBuilder>{

			name(name:string):Ref<SchemaTagOptionsBuilder>
			color(color:string):Ref<SchemaTagOptionsBuilder>
			text(text:string):Ref<SchemaTagOptionsBuilder>
			build():Ref<SchemaTagOptions>
	}
	export interface SchemaTypeDefinitions extends Struct<SchemaTypeDefinitions>{

			tag:Ref<SchemaTagOptions>[]
			userIds:Ref<SchemaUserIdsOption>
	}
	export interface SchemaTypeDefinitionsBuilder extends Struct<SchemaTypeDefinitionsBuilder>{

			tag(tag:Ref<SchemaTagOptions>[]):Ref<SchemaTypeDefinitionsBuilder>
			userIds(userIds:Ref<SchemaUserIdsOption>):Ref<SchemaTypeDefinitionsBuilder>
			build():Ref<SchemaTypeDefinitions>
	}
	export interface SchemaUserIdsOption extends Struct<SchemaUserIdsOption>{

			idType:Ref<string>
	}
	export interface SchemaUserIdsOptionBuilder extends Struct<SchemaUserIdsOptionBuilder>{

			idType(idType:string):Ref<SchemaUserIdsOptionBuilder>
			build():Ref<SchemaUserIdsOption>
	}
	export interface SeperatePassage extends Struct<SeperatePassage>{

			passageId:Ref<string>
			objId:Ref<string>
			content:Ref<string>
			numTokens:Ref<int>
	}
	export interface SeperatePassageBuilder extends Struct<SeperatePassageBuilder>{

			passageId(passageId:string):Ref<SeperatePassageBuilder>
			objId(objId:string):Ref<SeperatePassageBuilder>
			content(content:string):Ref<SeperatePassageBuilder>
			numTokens(numTokens:int):Ref<SeperatePassageBuilder>
			build():Ref<SeperatePassage>
	}
	//1
	export const StateOffline:int
	//0
	export const StateOnline:int
	//1
	export const StatePatchDataSourceOffline:int
	//0
	export const StatePatchDataSourceOnline:int
	export interface SystemInfo extends Struct<SystemInfo>{

			time:Ref<string>
			timeZone:Ref<string>
			lang:Ref<string>
			brand:Ref<string>
			weekday:Ref<string>
			sessionId:Ref<string>
			shadowName:Ref<string>
			msgId:Ref<string>
			agentId:Ref<string>
	}
	export interface SystemInfoBuilder extends Struct<SystemInfoBuilder>{

			time(time:string):Ref<SystemInfoBuilder>
			timeZone(timeZone:string):Ref<SystemInfoBuilder>
			lang(lang:string):Ref<SystemInfoBuilder>
			brand(brand:string):Ref<SystemInfoBuilder>
			weekday(weekday:string):Ref<SystemInfoBuilder>
			sessionId(sessionId:string):Ref<SystemInfoBuilder>
			shadowName(shadowName:string):Ref<SystemInfoBuilder>
			msgId(msgId:string):Ref<SystemInfoBuilder>
			agentId(agentId:string):Ref<SystemInfoBuilder>
			build():Ref<SystemInfo>
	}
	export interface TemplateCardVariables extends Alias<Nothing>{

	}
	//"open_id"
	export const UserIdTypeCreateMessageOpenId:string
	//"union_id"
	export const UserIdTypeCreateMessageUnionId:string
	//"user_id"
	export const UserIdTypeCreateMessageUserId:string
	//"open_id"
	export const UserIdTypeOpenId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface UserInfo extends Struct<UserInfo>{

			userLanguage:Ref<string>
			timezone:Ref<string>
			userId:Ref<string>
			userOpenId:Ref<string>
			tenantId:Ref<string>
			locale:Ref<string>
	}
	export interface UserInfoBuilder extends Struct<UserInfoBuilder>{

			userLanguage(userLanguage:string):Ref<UserInfoBuilder>
			timezone(timezone:string):Ref<UserInfoBuilder>
			userId(userId:string):Ref<UserInfoBuilder>
			userOpenId(userOpenId:string):Ref<UserInfoBuilder>
			tenantId(tenantId:string):Ref<UserInfoBuilder>
			locale(locale:string):Ref<UserInfoBuilder>
			build():Ref<UserInfo>
	}
	export interface V2 extends Struct<V2>{

			app:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateAppReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateAppResp>
			}>
			dataSource:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateDataSourceReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateDataSourceResp>
				delete(ctx:context.Context,req:Ref<DeleteDataSourceReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteDataSourceResp>
				get(ctx:context.Context,req:Ref<GetDataSourceReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetDataSourceResp>
				list(ctx:context.Context,req:Ref<ListDataSourceReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDataSourceResp>
				listByIterator(ctx:context.Context,req:Ref<ListDataSourceReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDataSourceIterator>
				patch(ctx:context.Context,req:Ref<PatchDataSourceReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchDataSourceResp>
			}>
			dataSourceItem:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateDataSourceItemReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateDataSourceItemResp>
				delete(ctx:context.Context,req:Ref<DeleteDataSourceItemReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteDataSourceItemResp>
				get(ctx:context.Context,req:Ref<GetDataSourceItemReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetDataSourceItemResp>
			}>
			message:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateMessageReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateMessageResp>
			}>
			schema:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateSchemaReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateSchemaResp>
				delete(ctx:context.Context,req:Ref<DeleteSchemaReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteSchemaResp>
				get(ctx:context.Context,req:Ref<GetSchemaReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSchemaResp>
				patch(ctx:context.Context,req:Ref<PatchSchemaReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchSchemaResp>
			}>
	}
	//1
	export const ViewBASIC:int
	//0
	export const ViewFULL:int
	export interface WebPassageParam extends Struct<WebPassageParam>{

			searchable:Ref<bool>
			domains:string[]
	}
	export interface WebPassageParamBuilder extends Struct<WebPassageParamBuilder>{

			searchable(searchable:bool):Ref<WebPassageParamBuilder>
			domains(domains:string[]):Ref<WebPassageParamBuilder>
			build():Ref<WebPassageParam>
	}
	export interface WikiPassageParam extends Struct<WikiPassageParam>{

			searchable:Ref<bool>
			spaceIds:string[]
			objIds:string[]
			wikiTokens:string[]
			nodeTokens:string[]
			disableSearchLink:Ref<bool>
	}
	export interface WikiPassageParamBuilder extends Struct<WikiPassageParamBuilder>{

			searchable(searchable:bool):Ref<WikiPassageParamBuilder>
			spaceIds(spaceIds:string[]):Ref<WikiPassageParamBuilder>
			objIds(objIds:string[]):Ref<WikiPassageParamBuilder>
			wikiTokens(wikiTokens:string[]):Ref<WikiPassageParamBuilder>
			nodeTokens(nodeTokens:string[]):Ref<WikiPassageParamBuilder>
			disableSearchLink(disableSearchLink:bool):Ref<WikiPassageParamBuilder>
			build():Ref<WikiPassageParam>
	}
	export function emptyConnectDataSourceBuilder():ConnectDataSourceBuilder
	export function emptyRefConnectDataSourceBuilder():Ref<ConnectDataSourceBuilder>
	export function refOfConnectDataSourceBuilder(x:ConnectDataSourceBuilder,v:Ref<ConnectDataSourceBuilder>)
	export function unRefConnectDataSourceBuilder(v:Ref<ConnectDataSourceBuilder>):ConnectDataSourceBuilder
	export function emptyPatchSchemaReqBodyBuilder():PatchSchemaReqBodyBuilder
	export function emptyRefPatchSchemaReqBodyBuilder():Ref<PatchSchemaReqBodyBuilder>
	export function refOfPatchSchemaReqBodyBuilder(x:PatchSchemaReqBodyBuilder,v:Ref<PatchSchemaReqBodyBuilder>)
	export function unRefPatchSchemaReqBodyBuilder(v:Ref<PatchSchemaReqBodyBuilder>):PatchSchemaReqBodyBuilder
	export function emptySchemaSortOptionsBuilder():SchemaSortOptionsBuilder
	export function emptyRefSchemaSortOptionsBuilder():Ref<SchemaSortOptionsBuilder>
	export function refOfSchemaSortOptionsBuilder(x:SchemaSortOptionsBuilder,v:Ref<SchemaSortOptionsBuilder>)
	export function unRefSchemaSortOptionsBuilder(v:Ref<SchemaSortOptionsBuilder>):SchemaSortOptionsBuilder
	export function emptyItemContentBuilder():ItemContentBuilder
	export function emptyRefItemContentBuilder():Ref<ItemContentBuilder>
	export function refOfItemContentBuilder(x:ItemContentBuilder,v:Ref<ItemContentBuilder>)
	export function unRefItemContentBuilder(v:Ref<ItemContentBuilder>):ItemContentBuilder
	export function emptyListDataSourceReqBuilder():ListDataSourceReqBuilder
	export function emptyRefListDataSourceReqBuilder():Ref<ListDataSourceReqBuilder>
	export function refOfListDataSourceReqBuilder(x:ListDataSourceReqBuilder,v:Ref<ListDataSourceReqBuilder>)
	export function unRefListDataSourceReqBuilder(v:Ref<ListDataSourceReqBuilder>):ListDataSourceReqBuilder
	export function emptyPatchSchemaProperty():PatchSchemaProperty
	export function emptyRefPatchSchemaProperty():Ref<PatchSchemaProperty>
	export function refOfPatchSchemaProperty(x:PatchSchemaProperty,v:Ref<PatchSchemaProperty>)
	export function unRefPatchSchemaProperty(v:Ref<PatchSchemaProperty>):PatchSchemaProperty
	export function emptySystemInfoBuilder():SystemInfoBuilder
	export function emptyRefSystemInfoBuilder():Ref<SystemInfoBuilder>
	export function refOfSystemInfoBuilder(x:SystemInfoBuilder,v:Ref<SystemInfoBuilder>)
	export function unRefSystemInfoBuilder(v:Ref<SystemInfoBuilder>):SystemInfoBuilder
	export function emptyDataset():Dataset
	export function emptyRefDataset():Ref<Dataset>
	export function refOfDataset(x:Dataset,v:Ref<Dataset>)
	export function unRefDataset(v:Ref<Dataset>):Dataset
	export function emptyDatasetBuilder():DatasetBuilder
	export function emptyRefDatasetBuilder():Ref<DatasetBuilder>
	export function refOfDatasetBuilder(x:DatasetBuilder,v:Ref<DatasetBuilder>)
	export function unRefDatasetBuilder(v:Ref<DatasetBuilder>):DatasetBuilder
	export function emptyDeleteDataSourceItemReqBuilder():DeleteDataSourceItemReqBuilder
	export function emptyRefDeleteDataSourceItemReqBuilder():Ref<DeleteDataSourceItemReqBuilder>
	export function refOfDeleteDataSourceItemReqBuilder(x:DeleteDataSourceItemReqBuilder,v:Ref<DeleteDataSourceItemReqBuilder>)
	export function unRefDeleteDataSourceItemReqBuilder(v:Ref<DeleteDataSourceItemReqBuilder>):DeleteDataSourceItemReqBuilder
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyCreateAppReqBuilder():CreateAppReqBuilder
	export function emptyRefCreateAppReqBuilder():Ref<CreateAppReqBuilder>
	export function refOfCreateAppReqBuilder(x:CreateAppReqBuilder,v:Ref<CreateAppReqBuilder>)
	export function unRefCreateAppReqBuilder(v:Ref<CreateAppReqBuilder>):CreateAppReqBuilder
	export function emptyV2():V2
	export function emptyRefV2():Ref<V2>
	export function refOfV2(x:V2,v:Ref<V2>)
	export function unRefV2(v:Ref<V2>):V2
	export function emptyCreateAppRespData():CreateAppRespData
	export function emptyRefCreateAppRespData():Ref<CreateAppRespData>
	export function refOfCreateAppRespData(x:CreateAppRespData,v:Ref<CreateAppRespData>)
	export function unRefCreateAppRespData(v:Ref<CreateAppRespData>):CreateAppRespData
	export function emptyPatchSchemaRespData():PatchSchemaRespData
	export function emptyRefPatchSchemaRespData():Ref<PatchSchemaRespData>
	export function refOfPatchSchemaRespData(x:PatchSchemaRespData,v:Ref<PatchSchemaRespData>)
	export function unRefPatchSchemaRespData(v:Ref<PatchSchemaRespData>):PatchSchemaRespData
	export function emptySchema():Schema
	export function emptyRefSchema():Ref<Schema>
	export function refOfSchema(x:Schema,v:Ref<Schema>)
	export function unRefSchema(v:Ref<Schema>):Schema
	export function emptySchemaEnumOptions():SchemaEnumOptions
	export function emptyRefSchemaEnumOptions():Ref<SchemaEnumOptions>
	export function refOfSchemaEnumOptions(x:SchemaEnumOptions,v:Ref<SchemaEnumOptions>)
	export function unRefSchemaEnumOptions(v:Ref<SchemaEnumOptions>):SchemaEnumOptions
	export function emptySchemaTagOptions():SchemaTagOptions
	export function emptyRefSchemaTagOptions():Ref<SchemaTagOptions>
	export function refOfSchemaTagOptions(x:SchemaTagOptions,v:Ref<SchemaTagOptions>)
	export function unRefSchemaTagOptions(v:Ref<SchemaTagOptions>):SchemaTagOptions
	export function emptyCreateAppReqBodyBuilder():CreateAppReqBodyBuilder
	export function emptyRefCreateAppReqBodyBuilder():Ref<CreateAppReqBodyBuilder>
	export function refOfCreateAppReqBodyBuilder(x:CreateAppReqBodyBuilder,v:Ref<CreateAppReqBodyBuilder>)
	export function unRefCreateAppReqBodyBuilder(v:Ref<CreateAppReqBodyBuilder>):CreateAppReqBodyBuilder
	export function emptyCreateDataSourceRespData():CreateDataSourceRespData
	export function emptyRefCreateDataSourceRespData():Ref<CreateDataSourceRespData>
	export function refOfCreateDataSourceRespData(x:CreateDataSourceRespData,v:Ref<CreateDataSourceRespData>)
	export function unRefCreateDataSourceRespData(v:Ref<CreateDataSourceRespData>):CreateDataSourceRespData
	export function emptyCreateMessagePathReqBodyBuilder():CreateMessagePathReqBodyBuilder
	export function emptyRefCreateMessagePathReqBodyBuilder():Ref<CreateMessagePathReqBodyBuilder>
	export function refOfCreateMessagePathReqBodyBuilder(x:CreateMessagePathReqBodyBuilder,v:Ref<CreateMessagePathReqBodyBuilder>)
	export function unRefCreateMessagePathReqBodyBuilder(v:Ref<CreateMessagePathReqBodyBuilder>):CreateMessagePathReqBodyBuilder
	export function emptySchemaFieldAnswerOptionBuilder():SchemaFieldAnswerOptionBuilder
	export function emptyRefSchemaFieldAnswerOptionBuilder():Ref<SchemaFieldAnswerOptionBuilder>
	export function refOfSchemaFieldAnswerOptionBuilder(x:SchemaFieldAnswerOptionBuilder,v:Ref<SchemaFieldAnswerOptionBuilder>)
	export function unRefSchemaFieldAnswerOptionBuilder(v:Ref<SchemaFieldAnswerOptionBuilder>):SchemaFieldAnswerOptionBuilder
	export function emptyDeleteDataSourceReqBuilder():DeleteDataSourceReqBuilder
	export function emptyRefDeleteDataSourceReqBuilder():Ref<DeleteDataSourceReqBuilder>
	export function refOfDeleteDataSourceReqBuilder(x:DeleteDataSourceReqBuilder,v:Ref<DeleteDataSourceReqBuilder>)
	export function unRefDeleteDataSourceReqBuilder(v:Ref<DeleteDataSourceReqBuilder>):DeleteDataSourceReqBuilder
	export function emptyGetDataSourceReqBuilder():GetDataSourceReqBuilder
	export function emptyRefGetDataSourceReqBuilder():Ref<GetDataSourceReqBuilder>
	export function refOfGetDataSourceReqBuilder(x:GetDataSourceReqBuilder,v:Ref<GetDataSourceReqBuilder>)
	export function unRefGetDataSourceReqBuilder(v:Ref<GetDataSourceReqBuilder>):GetDataSourceReqBuilder
	export function emptyGetSchemaResp():GetSchemaResp
	export function emptyRefGetSchemaResp():Ref<GetSchemaResp>
	export function refOfGetSchemaResp(x:GetSchemaResp,v:Ref<GetSchemaResp>)
	export function unRefGetSchemaResp(v:Ref<GetSchemaResp>):GetSchemaResp
	export function emptyPassageBuilder():PassageBuilder
	export function emptyRefPassageBuilder():Ref<PassageBuilder>
	export function refOfPassageBuilder(x:PassageBuilder,v:Ref<PassageBuilder>)
	export function unRefPassageBuilder(v:Ref<PassageBuilder>):PassageBuilder
	export function emptyCreateDataSourceItemReqBuilder():CreateDataSourceItemReqBuilder
	export function emptyRefCreateDataSourceItemReqBuilder():Ref<CreateDataSourceItemReqBuilder>
	export function refOfCreateDataSourceItemReqBuilder(x:CreateDataSourceItemReqBuilder,v:Ref<CreateDataSourceItemReqBuilder>)
	export function unRefCreateDataSourceItemReqBuilder(v:Ref<CreateDataSourceItemReqBuilder>):CreateDataSourceItemReqBuilder
	export function emptyCreateDataSourceReq():CreateDataSourceReq
	export function emptyRefCreateDataSourceReq():Ref<CreateDataSourceReq>
	export function refOfCreateDataSourceReq(x:CreateDataSourceReq,v:Ref<CreateDataSourceReq>)
	export function unRefCreateDataSourceReq(v:Ref<CreateDataSourceReq>):CreateDataSourceReq
	export function emptyDataSource():DataSource
	export function emptyRefDataSource():Ref<DataSource>
	export function refOfDataSource(x:DataSource,v:Ref<DataSource>)
	export function unRefDataSource(v:Ref<DataSource>):DataSource
	export function emptyDeleteDataSourceItemReq():DeleteDataSourceItemReq
	export function emptyRefDeleteDataSourceItemReq():Ref<DeleteDataSourceItemReq>
	export function refOfDeleteDataSourceItemReq(x:DeleteDataSourceItemReq,v:Ref<DeleteDataSourceItemReq>)
	export function unRefDeleteDataSourceItemReq(v:Ref<DeleteDataSourceItemReq>):DeleteDataSourceItemReq
	export function emptySchemaDisplayFieldMapping():SchemaDisplayFieldMapping
	export function emptyRefSchemaDisplayFieldMapping():Ref<SchemaDisplayFieldMapping>
	export function refOfSchemaDisplayFieldMapping(x:SchemaDisplayFieldMapping,v:Ref<SchemaDisplayFieldMapping>)
	export function unRefSchemaDisplayFieldMapping(v:Ref<SchemaDisplayFieldMapping>):SchemaDisplayFieldMapping
	export function emptySchemaUserIdsOptionBuilder():SchemaUserIdsOptionBuilder
	export function emptyRefSchemaUserIdsOptionBuilder():Ref<SchemaUserIdsOptionBuilder>
	export function refOfSchemaUserIdsOptionBuilder(x:SchemaUserIdsOptionBuilder,v:Ref<SchemaUserIdsOptionBuilder>)
	export function unRefSchemaUserIdsOptionBuilder(v:Ref<SchemaUserIdsOptionBuilder>):SchemaUserIdsOptionBuilder
	export function emptyAclBuilder():AclBuilder
	export function emptyRefAclBuilder():Ref<AclBuilder>
	export function refOfAclBuilder(x:AclBuilder,v:Ref<AclBuilder>)
	export function unRefAclBuilder(v:Ref<AclBuilder>):AclBuilder
	export function emptyCreateSchemaReq():CreateSchemaReq
	export function emptyRefCreateSchemaReq():Ref<CreateSchemaReq>
	export function refOfCreateSchemaReq(x:CreateSchemaReq,v:Ref<CreateSchemaReq>)
	export function unRefCreateSchemaReq(v:Ref<CreateSchemaReq>):CreateSchemaReq
	export function emptyDataSourceBuilder():DataSourceBuilder
	export function emptyRefDataSourceBuilder():Ref<DataSourceBuilder>
	export function refOfDataSourceBuilder(x:DataSourceBuilder,v:Ref<DataSourceBuilder>)
	export function unRefDataSourceBuilder(v:Ref<DataSourceBuilder>):DataSourceBuilder
	export function emptyItem():Item
	export function emptyRefItem():Ref<Item>
	export function refOfItem(x:Item,v:Ref<Item>)
	export function unRefItem(v:Ref<Item>):Item
	export function emptyI18nMeta():I18nMeta
	export function emptyRefI18nMeta():Ref<I18nMeta>
	export function refOfI18nMeta(x:I18nMeta,v:Ref<I18nMeta>)
	export function unRefI18nMeta(v:Ref<I18nMeta>):I18nMeta
	export function emptyRagAnswerResponse():RagAnswerResponse
	export function emptyRefRagAnswerResponse():Ref<RagAnswerResponse>
	export function refOfRagAnswerResponse(x:RagAnswerResponse,v:Ref<RagAnswerResponse>)
	export function unRefRagAnswerResponse(v:Ref<RagAnswerResponse>):RagAnswerResponse
	export function emptyScenarioContextExtra():ScenarioContextExtra
	export function emptyRefScenarioContextExtra():Ref<ScenarioContextExtra>
	export function refOfScenarioContextExtra(x:ScenarioContextExtra,v:Ref<ScenarioContextExtra>)
	export function unRefScenarioContextExtra(v:Ref<ScenarioContextExtra>):ScenarioContextExtra
	export function emptySchemaPropertyBuilder():SchemaPropertyBuilder
	export function emptyRefSchemaPropertyBuilder():Ref<SchemaPropertyBuilder>
	export function refOfSchemaPropertyBuilder(x:SchemaPropertyBuilder,v:Ref<SchemaPropertyBuilder>)
	export function unRefSchemaPropertyBuilder(v:Ref<SchemaPropertyBuilder>):SchemaPropertyBuilder
	export function emptyBatchItemResultBuilder():BatchItemResultBuilder
	export function emptyRefBatchItemResultBuilder():Ref<BatchItemResultBuilder>
	export function refOfBatchItemResultBuilder(x:BatchItemResultBuilder,v:Ref<BatchItemResultBuilder>)
	export function unRefBatchItemResultBuilder(v:Ref<BatchItemResultBuilder>):BatchItemResultBuilder
	export function emptyItemRecord():ItemRecord
	export function emptyRefItemRecord():Ref<ItemRecord>
	export function refOfItemRecord(x:ItemRecord,v:Ref<ItemRecord>)
	export function unRefItemRecord(v:Ref<ItemRecord>):ItemRecord
	export function emptyParaphraseResult():ParaphraseResult
	export function emptyRefParaphraseResult():Ref<ParaphraseResult>
	export function refOfParaphraseResult(x:ParaphraseResult,v:Ref<ParaphraseResult>)
	export function unRefParaphraseResult(v:Ref<ParaphraseResult>):ParaphraseResult
	export function emptySeperatePassage():SeperatePassage
	export function emptyRefSeperatePassage():Ref<SeperatePassage>
	export function refOfSeperatePassage(x:SeperatePassage,v:Ref<SeperatePassage>)
	export function unRefSeperatePassage(v:Ref<SeperatePassage>):SeperatePassage
	export function emptySchemaPredefineEnumStruct():SchemaPredefineEnumStruct
	export function emptyRefSchemaPredefineEnumStruct():Ref<SchemaPredefineEnumStruct>
	export function refOfSchemaPredefineEnumStruct(x:SchemaPredefineEnumStruct,v:Ref<SchemaPredefineEnumStruct>)
	export function unRefSchemaPredefineEnumStruct(v:Ref<SchemaPredefineEnumStruct>):SchemaPredefineEnumStruct
	export function emptyCreateSchemaResp():CreateSchemaResp
	export function emptyRefCreateSchemaResp():Ref<CreateSchemaResp>
	export function refOfCreateSchemaResp(x:CreateSchemaResp,v:Ref<CreateSchemaResp>)
	export function unRefCreateSchemaResp(v:Ref<CreateSchemaResp>):CreateSchemaResp
	export function emptyDialogSearchRequest():DialogSearchRequest
	export function emptyRefDialogSearchRequest():Ref<DialogSearchRequest>
	export function refOfDialogSearchRequest(x:DialogSearchRequest,v:Ref<DialogSearchRequest>)
	export function unRefDialogSearchRequest(v:Ref<DialogSearchRequest>):DialogSearchRequest
	export function emptyDocBuilder():DocBuilder
	export function emptyRefDocBuilder():Ref<DocBuilder>
	export function refOfDocBuilder(x:DocBuilder,v:Ref<DocBuilder>)
	export function unRefDocBuilder(v:Ref<DocBuilder>):DocBuilder
	export function emptyScenarioContext():ScenarioContext
	export function emptyRefScenarioContext():Ref<ScenarioContext>
	export function refOfScenarioContext(x:ScenarioContext,v:Ref<ScenarioContext>)
	export function unRefScenarioContext(v:Ref<ScenarioContext>):ScenarioContext
	export function emptySchemaSearchOptions():SchemaSearchOptions
	export function emptyRefSchemaSearchOptions():Ref<SchemaSearchOptions>
	export function refOfSchemaSearchOptions(x:SchemaSearchOptions,v:Ref<SchemaSearchOptions>)
	export function unRefSchemaSearchOptions(v:Ref<SchemaSearchOptions>):SchemaSearchOptions
	export function emptySchemaTagOptionsBuilder():SchemaTagOptionsBuilder
	export function emptyRefSchemaTagOptionsBuilder():Ref<SchemaTagOptionsBuilder>
	export function refOfSchemaTagOptionsBuilder(x:SchemaTagOptionsBuilder,v:Ref<SchemaTagOptionsBuilder>)
	export function unRefSchemaTagOptionsBuilder(v:Ref<SchemaTagOptionsBuilder>):SchemaTagOptionsBuilder
	export function emptyChunk():Chunk
	export function emptyRefChunk():Ref<Chunk>
	export function refOfChunk(x:Chunk,v:Ref<Chunk>)
	export function unRefChunk(v:Ref<Chunk>):Chunk
	export function emptyConnectDataSource():ConnectDataSource
	export function emptyRefConnectDataSource():Ref<ConnectDataSource>
	export function refOfConnectDataSource(x:ConnectDataSource,v:Ref<ConnectDataSource>)
	export function unRefConnectDataSource(v:Ref<ConnectDataSource>):ConnectDataSource
	export function emptyDeleteDataSourceResp():DeleteDataSourceResp
	export function emptyRefDeleteDataSourceResp():Ref<DeleteDataSourceResp>
	export function refOfDeleteDataSourceResp(x:DeleteDataSourceResp,v:Ref<DeleteDataSourceResp>)
	export function unRefDeleteDataSourceResp(v:Ref<DeleteDataSourceResp>):DeleteDataSourceResp
	export function emptyGetDataSourceItemReq():GetDataSourceItemReq
	export function emptyRefGetDataSourceItemReq():Ref<GetDataSourceItemReq>
	export function refOfGetDataSourceItemReq(x:GetDataSourceItemReq,v:Ref<GetDataSourceItemReq>)
	export function unRefGetDataSourceItemReq(v:Ref<GetDataSourceItemReq>):GetDataSourceItemReq
	export function emptyChunkBuilder():ChunkBuilder
	export function emptyRefChunkBuilder():Ref<ChunkBuilder>
	export function refOfChunkBuilder(x:ChunkBuilder,v:Ref<ChunkBuilder>)
	export function unRefChunkBuilder(v:Ref<ChunkBuilder>):ChunkBuilder
	export function emptyMemoryMessageBuilder():MemoryMessageBuilder
	export function emptyRefMemoryMessageBuilder():Ref<MemoryMessageBuilder>
	export function refOfMemoryMessageBuilder(x:MemoryMessageBuilder,v:Ref<MemoryMessageBuilder>)
	export function unRefMemoryMessageBuilder(v:Ref<MemoryMessageBuilder>):MemoryMessageBuilder
	export function emptySchemaTypeDefinitionsBuilder():SchemaTypeDefinitionsBuilder
	export function emptyRefSchemaTypeDefinitionsBuilder():Ref<SchemaTypeDefinitionsBuilder>
	export function refOfSchemaTypeDefinitionsBuilder(x:SchemaTypeDefinitionsBuilder,v:Ref<SchemaTypeDefinitionsBuilder>)
	export function unRefSchemaTypeDefinitionsBuilder(v:Ref<SchemaTypeDefinitionsBuilder>):SchemaTypeDefinitionsBuilder
	export function emptyWebPassageParamBuilder():WebPassageParamBuilder
	export function emptyRefWebPassageParamBuilder():Ref<WebPassageParamBuilder>
	export function refOfWebPassageParamBuilder(x:WebPassageParamBuilder,v:Ref<WebPassageParamBuilder>)
	export function unRefWebPassageParamBuilder(v:Ref<WebPassageParamBuilder>):WebPassageParamBuilder
	export function emptySchemaTypeDefinitions():SchemaTypeDefinitions
	export function emptyRefSchemaTypeDefinitions():Ref<SchemaTypeDefinitions>
	export function refOfSchemaTypeDefinitions(x:SchemaTypeDefinitions,v:Ref<SchemaTypeDefinitions>)
	export function unRefSchemaTypeDefinitions(v:Ref<SchemaTypeDefinitions>):SchemaTypeDefinitions
	export function emptyDeleteDataSourceReq():DeleteDataSourceReq
	export function emptyRefDeleteDataSourceReq():Ref<DeleteDataSourceReq>
	export function refOfDeleteDataSourceReq(x:DeleteDataSourceReq,v:Ref<DeleteDataSourceReq>)
	export function unRefDeleteDataSourceReq(v:Ref<DeleteDataSourceReq>):DeleteDataSourceReq
	export function emptyLingoPassageParam():LingoPassageParam
	export function emptyRefLingoPassageParam():Ref<LingoPassageParam>
	export function refOfLingoPassageParam(x:LingoPassageParam,v:Ref<LingoPassageParam>)
	export function unRefLingoPassageParam(v:Ref<LingoPassageParam>):LingoPassageParam
	export function emptyListDataSourceIterator():ListDataSourceIterator
	export function emptyRefListDataSourceIterator():Ref<ListDataSourceIterator>
	export function refOfListDataSourceIterator(x:ListDataSourceIterator,v:Ref<ListDataSourceIterator>)
	export function unRefListDataSourceIterator(v:Ref<ListDataSourceIterator>):ListDataSourceIterator
	export function emptyRagAnswerResponseBuilder():RagAnswerResponseBuilder
	export function emptyRefRagAnswerResponseBuilder():Ref<RagAnswerResponseBuilder>
	export function refOfRagAnswerResponseBuilder(x:RagAnswerResponseBuilder,v:Ref<RagAnswerResponseBuilder>)
	export function unRefRagAnswerResponseBuilder(v:Ref<RagAnswerResponseBuilder>):RagAnswerResponseBuilder
	export function emptyCreateDataSourceItemResp():CreateDataSourceItemResp
	export function emptyRefCreateDataSourceItemResp():Ref<CreateDataSourceItemResp>
	export function refOfCreateDataSourceItemResp(x:CreateDataSourceItemResp,v:Ref<CreateDataSourceItemResp>)
	export function unRefCreateDataSourceItemResp(v:Ref<CreateDataSourceItemResp>):CreateDataSourceItemResp
	export function emptyGetDataSourceReq():GetDataSourceReq
	export function emptyRefGetDataSourceReq():Ref<GetDataSourceReq>
	export function refOfGetDataSourceReq(x:GetDataSourceReq,v:Ref<GetDataSourceReq>)
	export function unRefGetDataSourceReq(v:Ref<GetDataSourceReq>):GetDataSourceReq
	export function emptySchemaDisplayBuilder():SchemaDisplayBuilder
	export function emptyRefSchemaDisplayBuilder():Ref<SchemaDisplayBuilder>
	export function refOfSchemaDisplayBuilder(x:SchemaDisplayBuilder,v:Ref<SchemaDisplayBuilder>)
	export function unRefSchemaDisplayBuilder(v:Ref<SchemaDisplayBuilder>):SchemaDisplayBuilder
	export function emptyItemMetadataBuilder():ItemMetadataBuilder
	export function emptyRefItemMetadataBuilder():Ref<ItemMetadataBuilder>
	export function refOfItemMetadataBuilder(x:ItemMetadataBuilder,v:Ref<ItemMetadataBuilder>)
	export function unRefItemMetadataBuilder(v:Ref<ItemMetadataBuilder>):ItemMetadataBuilder
	export function emptyLlmModelConfig():LlmModelConfig
	export function emptyRefLlmModelConfig():Ref<LlmModelConfig>
	export function refOfLlmModelConfig(x:LlmModelConfig,v:Ref<LlmModelConfig>)
	export function unRefLlmModelConfig(v:Ref<LlmModelConfig>):LlmModelConfig
	export function emptyWikiPassageParamBuilder():WikiPassageParamBuilder
	export function emptyRefWikiPassageParamBuilder():Ref<WikiPassageParamBuilder>
	export function refOfWikiPassageParamBuilder(x:WikiPassageParamBuilder,v:Ref<WikiPassageParamBuilder>)
	export function unRefWikiPassageParamBuilder(v:Ref<WikiPassageParamBuilder>):WikiPassageParamBuilder
	export function emptyBatchItemResult():BatchItemResult
	export function emptyRefBatchItemResult():Ref<BatchItemResult>
	export function refOfBatchItemResult(x:BatchItemResult,v:Ref<BatchItemResult>)
	export function unRefBatchItemResult(v:Ref<BatchItemResult>):BatchItemResult
	export function emptyCreateDataSourceReqBuilder():CreateDataSourceReqBuilder
	export function emptyRefCreateDataSourceReqBuilder():Ref<CreateDataSourceReqBuilder>
	export function refOfCreateDataSourceReqBuilder(x:CreateDataSourceReqBuilder,v:Ref<CreateDataSourceReqBuilder>)
	export function unRefCreateDataSourceReqBuilder(v:Ref<CreateDataSourceReqBuilder>):CreateDataSourceReqBuilder
	export function emptyCreateDocParam():CreateDocParam
	export function emptyRefCreateDocParam():Ref<CreateDocParam>
	export function refOfCreateDocParam(x:CreateDocParam,v:Ref<CreateDocParam>)
	export function unRefCreateDocParam(v:Ref<CreateDocParam>):CreateDocParam
	export function emptyCreateMessageReqBuilder():CreateMessageReqBuilder
	export function emptyRefCreateMessageReqBuilder():Ref<CreateMessageReqBuilder>
	export function refOfCreateMessageReqBuilder(x:CreateMessageReqBuilder,v:Ref<CreateMessageReqBuilder>)
	export function unRefCreateMessageReqBuilder(v:Ref<CreateMessageReqBuilder>):CreateMessageReqBuilder
	export function emptyPatchSchemaPropertyBuilder():PatchSchemaPropertyBuilder
	export function emptyRefPatchSchemaPropertyBuilder():Ref<PatchSchemaPropertyBuilder>
	export function refOfPatchSchemaPropertyBuilder(x:PatchSchemaPropertyBuilder,v:Ref<PatchSchemaPropertyBuilder>)
	export function unRefPatchSchemaPropertyBuilder(v:Ref<PatchSchemaPropertyBuilder>):PatchSchemaPropertyBuilder
	export function emptySchemaDisplay():SchemaDisplay
	export function emptyRefSchemaDisplay():Ref<SchemaDisplay>
	export function refOfSchemaDisplay(x:SchemaDisplay,v:Ref<SchemaDisplay>)
	export function unRefSchemaDisplay(v:Ref<SchemaDisplay>):SchemaDisplay
	export function emptySchemaSortOptions():SchemaSortOptions
	export function emptyRefSchemaSortOptions():Ref<SchemaSortOptions>
	export function refOfSchemaSortOptions(x:SchemaSortOptions,v:Ref<SchemaSortOptions>)
	export function unRefSchemaSortOptions(v:Ref<SchemaSortOptions>):SchemaSortOptions
	export function emptyWebPassageParam():WebPassageParam
	export function emptyRefWebPassageParam():Ref<WebPassageParam>
	export function refOfWebPassageParam(x:WebPassageParam,v:Ref<WebPassageParam>)
	export function unRefWebPassageParam(v:Ref<WebPassageParam>):WebPassageParam
	export function emptyFilterSchemaBuilder():FilterSchemaBuilder
	export function emptyRefFilterSchemaBuilder():Ref<FilterSchemaBuilder>
	export function refOfFilterSchemaBuilder(x:FilterSchemaBuilder,v:Ref<FilterSchemaBuilder>)
	export function unRefFilterSchemaBuilder(v:Ref<FilterSchemaBuilder>):FilterSchemaBuilder
	export function emptyGetDataSourceItemResp():GetDataSourceItemResp
	export function emptyRefGetDataSourceItemResp():Ref<GetDataSourceItemResp>
	export function refOfGetDataSourceItemResp(x:GetDataSourceItemResp,v:Ref<GetDataSourceItemResp>)
	export function unRefGetDataSourceItemResp(v:Ref<GetDataSourceItemResp>):GetDataSourceItemResp
	export function emptyGetDataSourceResp():GetDataSourceResp
	export function emptyRefGetDataSourceResp():Ref<GetDataSourceResp>
	export function refOfGetDataSourceResp(x:GetDataSourceResp,v:Ref<GetDataSourceResp>)
	export function unRefGetDataSourceResp(v:Ref<GetDataSourceResp>):GetDataSourceResp
	export function emptyLlmModelConfigBuilder():LlmModelConfigBuilder
	export function emptyRefLlmModelConfigBuilder():Ref<LlmModelConfigBuilder>
	export function refOfLlmModelConfigBuilder(x:LlmModelConfigBuilder,v:Ref<LlmModelConfigBuilder>)
	export function unRefLlmModelConfigBuilder(v:Ref<LlmModelConfigBuilder>):LlmModelConfigBuilder
	export function emptySchemaFilterOptions():SchemaFilterOptions
	export function emptyRefSchemaFilterOptions():Ref<SchemaFilterOptions>
	export function refOfSchemaFilterOptions(x:SchemaFilterOptions,v:Ref<SchemaFilterOptions>)
	export function unRefSchemaFilterOptions(v:Ref<SchemaFilterOptions>):SchemaFilterOptions
	export function emptySeperatePassageBuilder():SeperatePassageBuilder
	export function emptyRefSeperatePassageBuilder():Ref<SeperatePassageBuilder>
	export function refOfSeperatePassageBuilder(x:SeperatePassageBuilder,v:Ref<SeperatePassageBuilder>)
	export function unRefSeperatePassageBuilder(v:Ref<SeperatePassageBuilder>):SeperatePassageBuilder
	export function emptyWikiPassageParam():WikiPassageParam
	export function emptyRefWikiPassageParam():Ref<WikiPassageParam>
	export function refOfWikiPassageParam(x:WikiPassageParam,v:Ref<WikiPassageParam>)
	export function unRefWikiPassageParam(v:Ref<WikiPassageParam>):WikiPassageParam
	export function emptyCreateMessageReqBody():CreateMessageReqBody
	export function emptyRefCreateMessageReqBody():Ref<CreateMessageReqBody>
	export function refOfCreateMessageReqBody(x:CreateMessageReqBody,v:Ref<CreateMessageReqBody>)
	export function unRefCreateMessageReqBody(v:Ref<CreateMessageReqBody>):CreateMessageReqBody
	export function emptyDeleteSchemaResp():DeleteSchemaResp
	export function emptyRefDeleteSchemaResp():Ref<DeleteSchemaResp>
	export function refOfDeleteSchemaResp(x:DeleteSchemaResp,v:Ref<DeleteSchemaResp>)
	export function unRefDeleteSchemaResp(v:Ref<DeleteSchemaResp>):DeleteSchemaResp
	export function emptyDepartmentIdBuilder():DepartmentIdBuilder
	export function emptyRefDepartmentIdBuilder():Ref<DepartmentIdBuilder>
	export function refOfDepartmentIdBuilder(x:DepartmentIdBuilder,v:Ref<DepartmentIdBuilder>)
	export function unRefDepartmentIdBuilder(v:Ref<DepartmentIdBuilder>):DepartmentIdBuilder
	export function emptyMemoryMessage():MemoryMessage
	export function emptyRefMemoryMessage():Ref<MemoryMessage>
	export function refOfMemoryMessage(x:MemoryMessage,v:Ref<MemoryMessage>)
	export function unRefMemoryMessage(v:Ref<MemoryMessage>):MemoryMessage
	export function emptyPatchSchemaPathReqBodyBuilder():PatchSchemaPathReqBodyBuilder
	export function emptyRefPatchSchemaPathReqBodyBuilder():Ref<PatchSchemaPathReqBodyBuilder>
	export function refOfPatchSchemaPathReqBodyBuilder(x:PatchSchemaPathReqBodyBuilder,v:Ref<PatchSchemaPathReqBodyBuilder>)
	export function unRefPatchSchemaPathReqBodyBuilder(v:Ref<PatchSchemaPathReqBodyBuilder>):PatchSchemaPathReqBodyBuilder
	export function emptyConnectorParamBuilder():ConnectorParamBuilder
	export function emptyRefConnectorParamBuilder():Ref<ConnectorParamBuilder>
	export function refOfConnectorParamBuilder(x:ConnectorParamBuilder,v:Ref<ConnectorParamBuilder>)
	export function unRefConnectorParamBuilder(v:Ref<ConnectorParamBuilder>):ConnectorParamBuilder
	export function emptyItemBuilder():ItemBuilder
	export function emptyRefItemBuilder():Ref<ItemBuilder>
	export function refOfItemBuilder(x:ItemBuilder,v:Ref<ItemBuilder>)
	export function unRefItemBuilder(v:Ref<ItemBuilder>):ItemBuilder
	export function emptyItemContent():ItemContent
	export function emptyRefItemContent():Ref<ItemContent>
	export function refOfItemContent(x:ItemContent,v:Ref<ItemContent>)
	export function unRefItemContent(v:Ref<ItemContent>):ItemContent
	export function emptyPassageParamBuilder():PassageParamBuilder
	export function emptyRefPassageParamBuilder():Ref<PassageParamBuilder>
	export function refOfPassageParamBuilder(x:PassageParamBuilder,v:Ref<PassageParamBuilder>)
	export function unRefPassageParamBuilder(v:Ref<PassageParamBuilder>):PassageParamBuilder
	export function emptyModelParam():ModelParam
	export function emptyRefModelParam():Ref<ModelParam>
	export function refOfModelParam(x:ModelParam,v:Ref<ModelParam>)
	export function unRefModelParam(v:Ref<ModelParam>):ModelParam
	export function emptyPatchDataSourceReq():PatchDataSourceReq
	export function emptyRefPatchDataSourceReq():Ref<PatchDataSourceReq>
	export function refOfPatchDataSourceReq(x:PatchDataSourceReq,v:Ref<PatchDataSourceReq>)
	export function unRefPatchDataSourceReq(v:Ref<PatchDataSourceReq>):PatchDataSourceReq
	export function emptyUserInfo():UserInfo
	export function emptyRefUserInfo():Ref<UserInfo>
	export function refOfUserInfo(x:UserInfo,v:Ref<UserInfo>)
	export function unRefUserInfo(v:Ref<UserInfo>):UserInfo
	export function emptyConnectorParam():ConnectorParam
	export function emptyRefConnectorParam():Ref<ConnectorParam>
	export function refOfConnectorParam(x:ConnectorParam,v:Ref<ConnectorParam>)
	export function unRefConnectorParam(v:Ref<ConnectorParam>):ConnectorParam
	export function emptyCreateAppResp():CreateAppResp
	export function emptyRefCreateAppResp():Ref<CreateAppResp>
	export function refOfCreateAppResp(x:CreateAppResp,v:Ref<CreateAppResp>)
	export function unRefCreateAppResp(v:Ref<CreateAppResp>):CreateAppResp
	export function emptyCreateMessageResp():CreateMessageResp
	export function emptyRefCreateMessageResp():Ref<CreateMessageResp>
	export function refOfCreateMessageResp(x:CreateMessageResp,v:Ref<CreateMessageResp>)
	export function unRefCreateMessageResp(v:Ref<CreateMessageResp>):CreateMessageResp
	export function emptyLingoPassageParamBuilder():LingoPassageParamBuilder
	export function emptyRefLingoPassageParamBuilder():Ref<LingoPassageParamBuilder>
	export function refOfLingoPassageParamBuilder(x:LingoPassageParamBuilder,v:Ref<LingoPassageParamBuilder>)
	export function unRefLingoPassageParamBuilder(v:Ref<LingoPassageParamBuilder>):LingoPassageParamBuilder
	export function emptyRagProbe():RagProbe
	export function emptyRefRagProbe():Ref<RagProbe>
	export function refOfRagProbe(x:RagProbe,v:Ref<RagProbe>)
	export function unRefRagProbe(v:Ref<RagProbe>):RagProbe
	export function emptySystemInfo():SystemInfo
	export function emptyRefSystemInfo():Ref<SystemInfo>
	export function refOfSystemInfo(x:SystemInfo,v:Ref<SystemInfo>)
	export function unRefSystemInfo(v:Ref<SystemInfo>):SystemInfo
	export function emptyCreateAppReqBody():CreateAppReqBody
	export function emptyRefCreateAppReqBody():Ref<CreateAppReqBody>
	export function refOfCreateAppReqBody(x:CreateAppReqBody,v:Ref<CreateAppReqBody>)
	export function unRefCreateAppReqBody(v:Ref<CreateAppReqBody>):CreateAppReqBody
	export function emptyDoc():Doc
	export function emptyRefDoc():Ref<Doc>
	export function refOfDoc(x:Doc,v:Ref<Doc>)
	export function unRefDoc(v:Ref<Doc>):Doc
	export function emptyListDataSourceResp():ListDataSourceResp
	export function emptyRefListDataSourceResp():Ref<ListDataSourceResp>
	export function refOfListDataSourceResp(x:ListDataSourceResp,v:Ref<ListDataSourceResp>)
	export function unRefListDataSourceResp(v:Ref<ListDataSourceResp>):ListDataSourceResp
	export function emptyPatchSchemaReqBody():PatchSchemaReqBody
	export function emptyRefPatchSchemaReqBody():Ref<PatchSchemaReqBody>
	export function refOfPatchSchemaReqBody(x:PatchSchemaReqBody,v:Ref<PatchSchemaReqBody>)
	export function unRefPatchSchemaReqBody(v:Ref<PatchSchemaReqBody>):PatchSchemaReqBody
	export function emptyPassage():Passage
	export function emptyRefPassage():Ref<Passage>
	export function refOfPassage(x:Passage,v:Ref<Passage>)
	export function unRefPassage(v:Ref<Passage>):Passage
	export function emptyCreateAppPathReqBodyBuilder():CreateAppPathReqBodyBuilder
	export function emptyRefCreateAppPathReqBodyBuilder():Ref<CreateAppPathReqBodyBuilder>
	export function refOfCreateAppPathReqBodyBuilder(x:CreateAppPathReqBodyBuilder,v:Ref<CreateAppPathReqBodyBuilder>)
	export function unRefCreateAppPathReqBodyBuilder(v:Ref<CreateAppPathReqBodyBuilder>):CreateAppPathReqBodyBuilder
	export function emptyCreateSchemaReqBuilder():CreateSchemaReqBuilder
	export function emptyRefCreateSchemaReqBuilder():Ref<CreateSchemaReqBuilder>
	export function refOfCreateSchemaReqBuilder(x:CreateSchemaReqBuilder,v:Ref<CreateSchemaReqBuilder>)
	export function unRefCreateSchemaReqBuilder(v:Ref<CreateSchemaReqBuilder>):CreateSchemaReqBuilder
	export function emptyNlsModelConfig():NlsModelConfig
	export function emptyRefNlsModelConfig():Ref<NlsModelConfig>
	export function refOfNlsModelConfig(x:NlsModelConfig,v:Ref<NlsModelConfig>)
	export function unRefNlsModelConfig(v:Ref<NlsModelConfig>):NlsModelConfig
	export function emptyParaphraseResultBuilder():ParaphraseResultBuilder
	export function emptyRefParaphraseResultBuilder():Ref<ParaphraseResultBuilder>
	export function refOfParaphraseResultBuilder(x:ParaphraseResultBuilder,v:Ref<ParaphraseResultBuilder>)
	export function unRefParaphraseResultBuilder(v:Ref<ParaphraseResultBuilder>):ParaphraseResultBuilder
	export function emptyItemRecordBuilder():ItemRecordBuilder
	export function emptyRefItemRecordBuilder():Ref<ItemRecordBuilder>
	export function refOfItemRecordBuilder(x:ItemRecordBuilder,v:Ref<ItemRecordBuilder>)
	export function unRefItemRecordBuilder(v:Ref<ItemRecordBuilder>):ItemRecordBuilder
	export function emptyModelConfig():ModelConfig
	export function emptyRefModelConfig():Ref<ModelConfig>
	export function refOfModelConfig(x:ModelConfig,v:Ref<ModelConfig>)
	export function unRefModelConfig(v:Ref<ModelConfig>):ModelConfig
	export function emptyDeleteDataSourceItemResp():DeleteDataSourceItemResp
	export function emptyRefDeleteDataSourceItemResp():Ref<DeleteDataSourceItemResp>
	export function refOfDeleteDataSourceItemResp(x:DeleteDataSourceItemResp,v:Ref<DeleteDataSourceItemResp>)
	export function unRefDeleteDataSourceItemResp(v:Ref<DeleteDataSourceItemResp>):DeleteDataSourceItemResp
	export function emptyGetSchemaReq():GetSchemaReq
	export function emptyRefGetSchemaReq():Ref<GetSchemaReq>
	export function refOfGetSchemaReq(x:GetSchemaReq,v:Ref<GetSchemaReq>)
	export function unRefGetSchemaReq(v:Ref<GetSchemaReq>):GetSchemaReq
	export function emptyGetSchemaRespData():GetSchemaRespData
	export function emptyRefGetSchemaRespData():Ref<GetSchemaRespData>
	export function refOfGetSchemaRespData(x:GetSchemaRespData,v:Ref<GetSchemaRespData>)
	export function unRefGetSchemaRespData(v:Ref<GetSchemaRespData>):GetSchemaRespData
	export function emptyI18nMetaBuilder():I18nMetaBuilder
	export function emptyRefI18nMetaBuilder():Ref<I18nMetaBuilder>
	export function refOfI18nMetaBuilder(x:I18nMetaBuilder,v:Ref<I18nMetaBuilder>)
	export function unRefI18nMetaBuilder(v:Ref<I18nMetaBuilder>):I18nMetaBuilder
	export function emptySchemaFilterOptionsBuilder():SchemaFilterOptionsBuilder
	export function emptyRefSchemaFilterOptionsBuilder():Ref<SchemaFilterOptionsBuilder>
	export function refOfSchemaFilterOptionsBuilder(x:SchemaFilterOptionsBuilder,v:Ref<SchemaFilterOptionsBuilder>)
	export function unRefSchemaFilterOptionsBuilder(v:Ref<SchemaFilterOptionsBuilder>):SchemaFilterOptionsBuilder
	export function emptySchemaProperty():SchemaProperty
	export function emptyRefSchemaProperty():Ref<SchemaProperty>
	export function refOfSchemaProperty(x:SchemaProperty,v:Ref<SchemaProperty>)
	export function unRefSchemaProperty(v:Ref<SchemaProperty>):SchemaProperty
	export function emptyAcl():Acl
	export function emptyRefAcl():Ref<Acl>
	export function refOfAcl(x:Acl,v:Ref<Acl>)
	export function unRefAcl(v:Ref<Acl>):Acl
	export function emptyPatchSchemaResp():PatchSchemaResp
	export function emptyRefPatchSchemaResp():Ref<PatchSchemaResp>
	export function refOfPatchSchemaResp(x:PatchSchemaResp,v:Ref<PatchSchemaResp>)
	export function unRefPatchSchemaResp(v:Ref<PatchSchemaResp>):PatchSchemaResp
	export function emptySchemaDisplayFieldMappingBuilder():SchemaDisplayFieldMappingBuilder
	export function emptyRefSchemaDisplayFieldMappingBuilder():Ref<SchemaDisplayFieldMappingBuilder>
	export function refOfSchemaDisplayFieldMappingBuilder(x:SchemaDisplayFieldMappingBuilder,v:Ref<SchemaDisplayFieldMappingBuilder>)
	export function unRefSchemaDisplayFieldMappingBuilder(v:Ref<SchemaDisplayFieldMappingBuilder>):SchemaDisplayFieldMappingBuilder
	export function emptySchemaFieldAnswerOption():SchemaFieldAnswerOption
	export function emptyRefSchemaFieldAnswerOption():Ref<SchemaFieldAnswerOption>
	export function refOfSchemaFieldAnswerOption(x:SchemaFieldAnswerOption,v:Ref<SchemaFieldAnswerOption>)
	export function unRefSchemaFieldAnswerOption(v:Ref<SchemaFieldAnswerOption>):SchemaFieldAnswerOption
	export function emptyPatchDataSourcePathReqBodyBuilder():PatchDataSourcePathReqBodyBuilder
	export function emptyRefPatchDataSourcePathReqBodyBuilder():Ref<PatchDataSourcePathReqBodyBuilder>
	export function refOfPatchDataSourcePathReqBodyBuilder(x:PatchDataSourcePathReqBodyBuilder,v:Ref<PatchDataSourcePathReqBodyBuilder>)
	export function unRefPatchDataSourcePathReqBodyBuilder(v:Ref<PatchDataSourcePathReqBodyBuilder>):PatchDataSourcePathReqBodyBuilder
	export function emptySchemaBuilder():SchemaBuilder
	export function emptyRefSchemaBuilder():Ref<SchemaBuilder>
	export function refOfSchemaBuilder(x:SchemaBuilder,v:Ref<SchemaBuilder>)
	export function unRefSchemaBuilder(v:Ref<SchemaBuilder>):SchemaBuilder
	export function emptyUserInfoBuilder():UserInfoBuilder
	export function emptyRefUserInfoBuilder():Ref<UserInfoBuilder>
	export function refOfUserInfoBuilder(x:UserInfoBuilder,v:Ref<UserInfoBuilder>)
	export function unRefUserInfoBuilder(v:Ref<UserInfoBuilder>):UserInfoBuilder
	export function emptyCreateMessageRespData():CreateMessageRespData
	export function emptyRefCreateMessageRespData():Ref<CreateMessageRespData>
	export function refOfCreateMessageRespData(x:CreateMessageRespData,v:Ref<CreateMessageRespData>)
	export function unRefCreateMessageRespData(v:Ref<CreateMessageRespData>):CreateMessageRespData
	export function emptyDeleteSchemaReqBuilder():DeleteSchemaReqBuilder
	export function emptyRefDeleteSchemaReqBuilder():Ref<DeleteSchemaReqBuilder>
	export function refOfDeleteSchemaReqBuilder(x:DeleteSchemaReqBuilder,v:Ref<DeleteSchemaReqBuilder>)
	export function unRefDeleteSchemaReqBuilder(v:Ref<DeleteSchemaReqBuilder>):DeleteSchemaReqBuilder
	export function emptyGetDataSourceItemReqBuilder():GetDataSourceItemReqBuilder
	export function emptyRefGetDataSourceItemReqBuilder():Ref<GetDataSourceItemReqBuilder>
	export function refOfGetDataSourceItemReqBuilder(x:GetDataSourceItemReqBuilder,v:Ref<GetDataSourceItemReqBuilder>)
	export function unRefGetDataSourceItemReqBuilder(v:Ref<GetDataSourceItemReqBuilder>):GetDataSourceItemReqBuilder
	export function emptyModelConfigBuilder():ModelConfigBuilder
	export function emptyRefModelConfigBuilder():Ref<ModelConfigBuilder>
	export function refOfModelConfigBuilder(x:ModelConfigBuilder,v:Ref<ModelConfigBuilder>)
	export function unRefModelConfigBuilder(v:Ref<ModelConfigBuilder>):ModelConfigBuilder
	export function emptyDocPassageParamBuilder():DocPassageParamBuilder
	export function emptyRefDocPassageParamBuilder():Ref<DocPassageParamBuilder>
	export function refOfDocPassageParamBuilder(x:DocPassageParamBuilder,v:Ref<DocPassageParamBuilder>)
	export function unRefDocPassageParamBuilder(v:Ref<DocPassageParamBuilder>):DocPassageParamBuilder
	export function emptyGetDataSourceRespData():GetDataSourceRespData
	export function emptyRefGetDataSourceRespData():Ref<GetDataSourceRespData>
	export function refOfGetDataSourceRespData(x:GetDataSourceRespData,v:Ref<GetDataSourceRespData>)
	export function unRefGetDataSourceRespData(v:Ref<GetDataSourceRespData>):GetDataSourceRespData
	export function emptyPassageParam():PassageParam
	export function emptyRefPassageParam():Ref<PassageParam>
	export function refOfPassageParam(x:PassageParam,v:Ref<PassageParam>)
	export function unRefPassageParam(v:Ref<PassageParam>):PassageParam
	export function emptyPatchSchemaReq():PatchSchemaReq
	export function emptyRefPatchSchemaReq():Ref<PatchSchemaReq>
	export function refOfPatchSchemaReq(x:PatchSchemaReq,v:Ref<PatchSchemaReq>)
	export function unRefPatchSchemaReq(v:Ref<PatchSchemaReq>):PatchSchemaReq
	export function emptyCreateSchemaRespData():CreateSchemaRespData
	export function emptyRefCreateSchemaRespData():Ref<CreateSchemaRespData>
	export function refOfCreateSchemaRespData(x:CreateSchemaRespData,v:Ref<CreateSchemaRespData>)
	export function unRefCreateSchemaRespData(v:Ref<CreateSchemaRespData>):CreateSchemaRespData
	export function emptyGetDataSourceItemRespData():GetDataSourceItemRespData
	export function emptyRefGetDataSourceItemRespData():Ref<GetDataSourceItemRespData>
	export function refOfGetDataSourceItemRespData(x:GetDataSourceItemRespData,v:Ref<GetDataSourceItemRespData>)
	export function unRefGetDataSourceItemRespData(v:Ref<GetDataSourceItemRespData>):GetDataSourceItemRespData
	export function emptyModelParamBuilder():ModelParamBuilder
	export function emptyRefModelParamBuilder():Ref<ModelParamBuilder>
	export function refOfModelParamBuilder(x:ModelParamBuilder,v:Ref<ModelParamBuilder>)
	export function unRefModelParamBuilder(v:Ref<ModelParamBuilder>):ModelParamBuilder
	export function emptyNlsModelConfigBuilder():NlsModelConfigBuilder
	export function emptyRefNlsModelConfigBuilder():Ref<NlsModelConfigBuilder>
	export function refOfNlsModelConfigBuilder(x:NlsModelConfigBuilder,v:Ref<NlsModelConfigBuilder>)
	export function unRefNlsModelConfigBuilder(v:Ref<NlsModelConfigBuilder>):NlsModelConfigBuilder
	export function emptyScenarioContextExtraBuilder():ScenarioContextExtraBuilder
	export function emptyRefScenarioContextExtraBuilder():Ref<ScenarioContextExtraBuilder>
	export function refOfScenarioContextExtraBuilder(x:ScenarioContextExtraBuilder,v:Ref<ScenarioContextExtraBuilder>)
	export function unRefScenarioContextExtraBuilder(v:Ref<ScenarioContextExtraBuilder>):ScenarioContextExtraBuilder
	export function emptySchemaEnumOptionsBuilder():SchemaEnumOptionsBuilder
	export function emptyRefSchemaEnumOptionsBuilder():Ref<SchemaEnumOptionsBuilder>
	export function refOfSchemaEnumOptionsBuilder(x:SchemaEnumOptionsBuilder,v:Ref<SchemaEnumOptionsBuilder>)
	export function unRefSchemaEnumOptionsBuilder(v:Ref<SchemaEnumOptionsBuilder>):SchemaEnumOptionsBuilder
	export function emptySchemaUserIdsOption():SchemaUserIdsOption
	export function emptyRefSchemaUserIdsOption():Ref<SchemaUserIdsOption>
	export function refOfSchemaUserIdsOption(x:SchemaUserIdsOption,v:Ref<SchemaUserIdsOption>)
	export function unRefSchemaUserIdsOption(v:Ref<SchemaUserIdsOption>):SchemaUserIdsOption
	export function emptyCreateDataSourceItemReq():CreateDataSourceItemReq
	export function emptyRefCreateDataSourceItemReq():Ref<CreateDataSourceItemReq>
	export function refOfCreateDataSourceItemReq(x:CreateDataSourceItemReq,v:Ref<CreateDataSourceItemReq>)
	export function unRefCreateDataSourceItemReq(v:Ref<CreateDataSourceItemReq>):CreateDataSourceItemReq
	export function emptyCreateDocParamBuilder():CreateDocParamBuilder
	export function emptyRefCreateDocParamBuilder():Ref<CreateDocParamBuilder>
	export function refOfCreateDocParamBuilder(x:CreateDocParamBuilder,v:Ref<CreateDocParamBuilder>)
	export function unRefCreateDocParamBuilder(v:Ref<CreateDocParamBuilder>):CreateDocParamBuilder
	export function emptyListDataSourceReq():ListDataSourceReq
	export function emptyRefListDataSourceReq():Ref<ListDataSourceReq>
	export function refOfListDataSourceReq(x:ListDataSourceReq,v:Ref<ListDataSourceReq>)
	export function unRefListDataSourceReq(v:Ref<ListDataSourceReq>):ListDataSourceReq
	export function emptyPresent():Present
	export function emptyRefPresent():Ref<Present>
	export function refOfPresent(x:Present,v:Ref<Present>)
	export function unRefPresent(v:Ref<Present>):Present
	export function emptyCreateAppReq():CreateAppReq
	export function emptyRefCreateAppReq():Ref<CreateAppReq>
	export function refOfCreateAppReq(x:CreateAppReq,v:Ref<CreateAppReq>)
	export function unRefCreateAppReq(v:Ref<CreateAppReq>):CreateAppReq
	export function emptyHelpdeskPassageParam():HelpdeskPassageParam
	export function emptyRefHelpdeskPassageParam():Ref<HelpdeskPassageParam>
	export function refOfHelpdeskPassageParam(x:HelpdeskPassageParam,v:Ref<HelpdeskPassageParam>)
	export function unRefHelpdeskPassageParam(v:Ref<HelpdeskPassageParam>):HelpdeskPassageParam
	export function emptySchemaPredefineEnumStructBuilder():SchemaPredefineEnumStructBuilder
	export function emptyRefSchemaPredefineEnumStructBuilder():Ref<SchemaPredefineEnumStructBuilder>
	export function refOfSchemaPredefineEnumStructBuilder(x:SchemaPredefineEnumStructBuilder,v:Ref<SchemaPredefineEnumStructBuilder>)
	export function unRefSchemaPredefineEnumStructBuilder(v:Ref<SchemaPredefineEnumStructBuilder>):SchemaPredefineEnumStructBuilder
	export function emptySchemaSearchOptionsBuilder():SchemaSearchOptionsBuilder
	export function emptyRefSchemaSearchOptionsBuilder():Ref<SchemaSearchOptionsBuilder>
	export function refOfSchemaSearchOptionsBuilder(x:SchemaSearchOptionsBuilder,v:Ref<SchemaSearchOptionsBuilder>)
	export function unRefSchemaSearchOptionsBuilder(v:Ref<SchemaSearchOptionsBuilder>):SchemaSearchOptionsBuilder
	export function emptyPatchDataSourceResp():PatchDataSourceResp
	export function emptyRefPatchDataSourceResp():Ref<PatchDataSourceResp>
	export function refOfPatchDataSourceResp(x:PatchDataSourceResp,v:Ref<PatchDataSourceResp>)
	export function unRefPatchDataSourceResp(v:Ref<PatchDataSourceResp>):PatchDataSourceResp
	export function emptyPatchSchemaReqBuilder():PatchSchemaReqBuilder
	export function emptyRefPatchSchemaReqBuilder():Ref<PatchSchemaReqBuilder>
	export function refOfPatchSchemaReqBuilder(x:PatchSchemaReqBuilder,v:Ref<PatchSchemaReqBuilder>)
	export function unRefPatchSchemaReqBuilder(v:Ref<PatchSchemaReqBuilder>):PatchSchemaReqBuilder
	export function emptyDeleteSchemaReq():DeleteSchemaReq
	export function emptyRefDeleteSchemaReq():Ref<DeleteSchemaReq>
	export function refOfDeleteSchemaReq(x:DeleteSchemaReq,v:Ref<DeleteSchemaReq>)
	export function unRefDeleteSchemaReq(v:Ref<DeleteSchemaReq>):DeleteSchemaReq
	export function emptyDialogSearchRequestBuilder():DialogSearchRequestBuilder
	export function emptyRefDialogSearchRequestBuilder():Ref<DialogSearchRequestBuilder>
	export function refOfDialogSearchRequestBuilder(x:DialogSearchRequestBuilder,v:Ref<DialogSearchRequestBuilder>)
	export function unRefDialogSearchRequestBuilder(v:Ref<DialogSearchRequestBuilder>):DialogSearchRequestBuilder
	export function emptyFilterSchema():FilterSchema
	export function emptyRefFilterSchema():Ref<FilterSchema>
	export function refOfFilterSchema(x:FilterSchema,v:Ref<FilterSchema>)
	export function unRefFilterSchema(v:Ref<FilterSchema>):FilterSchema
	export function emptyGetSchemaReqBuilder():GetSchemaReqBuilder
	export function emptyRefGetSchemaReqBuilder():Ref<GetSchemaReqBuilder>
	export function refOfGetSchemaReqBuilder(x:GetSchemaReqBuilder,v:Ref<GetSchemaReqBuilder>)
	export function unRefGetSchemaReqBuilder(v:Ref<GetSchemaReqBuilder>):GetSchemaReqBuilder
	export function emptyCreateDataSourceResp():CreateDataSourceResp
	export function emptyRefCreateDataSourceResp():Ref<CreateDataSourceResp>
	export function refOfCreateDataSourceResp(x:CreateDataSourceResp,v:Ref<CreateDataSourceResp>)
	export function unRefCreateDataSourceResp(v:Ref<CreateDataSourceResp>):CreateDataSourceResp
	export function emptyPatchDataSourceReqBody():PatchDataSourceReqBody
	export function emptyRefPatchDataSourceReqBody():Ref<PatchDataSourceReqBody>
	export function refOfPatchDataSourceReqBody(x:PatchDataSourceReqBody,v:Ref<PatchDataSourceReqBody>)
	export function unRefPatchDataSourceReqBody(v:Ref<PatchDataSourceReqBody>):PatchDataSourceReqBody
	export function emptyPatchDataSourceReqBuilder():PatchDataSourceReqBuilder
	export function emptyRefPatchDataSourceReqBuilder():Ref<PatchDataSourceReqBuilder>
	export function refOfPatchDataSourceReqBuilder(x:PatchDataSourceReqBuilder,v:Ref<PatchDataSourceReqBuilder>)
	export function unRefPatchDataSourceReqBuilder(v:Ref<PatchDataSourceReqBuilder>):PatchDataSourceReqBuilder
	export function emptyPresentBuilder():PresentBuilder
	export function emptyRefPresentBuilder():Ref<PresentBuilder>
	export function refOfPresentBuilder(x:PresentBuilder,v:Ref<PresentBuilder>)
	export function unRefPresentBuilder(v:Ref<PresentBuilder>):PresentBuilder
	export function emptyRagProbeBuilder():RagProbeBuilder
	export function emptyRefRagProbeBuilder():Ref<RagProbeBuilder>
	export function refOfRagProbeBuilder(x:RagProbeBuilder,v:Ref<RagProbeBuilder>)
	export function unRefRagProbeBuilder(v:Ref<RagProbeBuilder>):RagProbeBuilder
	export function emptyScenarioContextBuilder():ScenarioContextBuilder
	export function emptyRefScenarioContextBuilder():Ref<ScenarioContextBuilder>
	export function refOfScenarioContextBuilder(x:ScenarioContextBuilder,v:Ref<ScenarioContextBuilder>)
	export function unRefScenarioContextBuilder(v:Ref<ScenarioContextBuilder>):ScenarioContextBuilder
	export function emptyCreateMessageReq():CreateMessageReq
	export function emptyRefCreateMessageReq():Ref<CreateMessageReq>
	export function refOfCreateMessageReq(x:CreateMessageReq,v:Ref<CreateMessageReq>)
	export function unRefCreateMessageReq(v:Ref<CreateMessageReq>):CreateMessageReq
	export function emptyDocPassageParam():DocPassageParam
	export function emptyRefDocPassageParam():Ref<DocPassageParam>
	export function refOfDocPassageParam(x:DocPassageParam,v:Ref<DocPassageParam>)
	export function unRefDocPassageParam(v:Ref<DocPassageParam>):DocPassageParam
	export function emptyHelpdeskPassageParamBuilder():HelpdeskPassageParamBuilder
	export function emptyRefHelpdeskPassageParamBuilder():Ref<HelpdeskPassageParamBuilder>
	export function refOfHelpdeskPassageParamBuilder(x:HelpdeskPassageParamBuilder,v:Ref<HelpdeskPassageParamBuilder>)
	export function unRefHelpdeskPassageParamBuilder(v:Ref<HelpdeskPassageParamBuilder>):HelpdeskPassageParamBuilder
	export function emptyItemMetadata():ItemMetadata
	export function emptyRefItemMetadata():Ref<ItemMetadata>
	export function refOfItemMetadata(x:ItemMetadata,v:Ref<ItemMetadata>)
	export function unRefItemMetadata(v:Ref<ItemMetadata>):ItemMetadata
	export function emptyCreateMessageReqBodyBuilder():CreateMessageReqBodyBuilder
	export function emptyRefCreateMessageReqBodyBuilder():Ref<CreateMessageReqBodyBuilder>
	export function refOfCreateMessageReqBodyBuilder(x:CreateMessageReqBodyBuilder,v:Ref<CreateMessageReqBodyBuilder>)
	export function unRefCreateMessageReqBodyBuilder(v:Ref<CreateMessageReqBodyBuilder>):CreateMessageReqBodyBuilder
	export function emptyListDataSourceRespData():ListDataSourceRespData
	export function emptyRefListDataSourceRespData():Ref<ListDataSourceRespData>
	export function refOfListDataSourceRespData(x:ListDataSourceRespData,v:Ref<ListDataSourceRespData>)
	export function unRefListDataSourceRespData(v:Ref<ListDataSourceRespData>):ListDataSourceRespData
	export function emptyPatchDataSourceReqBodyBuilder():PatchDataSourceReqBodyBuilder
	export function emptyRefPatchDataSourceReqBodyBuilder():Ref<PatchDataSourceReqBodyBuilder>
	export function refOfPatchDataSourceReqBodyBuilder(x:PatchDataSourceReqBodyBuilder,v:Ref<PatchDataSourceReqBodyBuilder>)
	export function unRefPatchDataSourceReqBodyBuilder(v:Ref<PatchDataSourceReqBodyBuilder>):PatchDataSourceReqBodyBuilder
	export function emptyPatchDataSourceRespData():PatchDataSourceRespData
	export function emptyRefPatchDataSourceRespData():Ref<PatchDataSourceRespData>
	export function refOfPatchDataSourceRespData(x:PatchDataSourceRespData,v:Ref<PatchDataSourceRespData>)
	export function unRefPatchDataSourceRespData(v:Ref<PatchDataSourceRespData>):PatchDataSourceRespData
}