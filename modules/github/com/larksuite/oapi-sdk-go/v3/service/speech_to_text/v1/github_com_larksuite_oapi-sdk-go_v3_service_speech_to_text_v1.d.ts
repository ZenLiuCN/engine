// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/speech_to_text/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {bool,int,Ref,Struct,error} from 'go'
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface FileConfig extends Struct<FileConfig>{

			fileId:Ref<string>
			format:Ref<string>
			engineType:Ref<string>
	}
	export interface FileConfigBuilder extends Struct<FileConfigBuilder>{

			fileId(fileId:string):Ref<FileConfigBuilder>
			format(format:string):Ref<FileConfigBuilder>
			engineType(engineType:string):Ref<FileConfigBuilder>
			build():Ref<FileConfig>
	}
	export interface FileRecognizeSpeechPathReqBodyBuilder extends Struct<FileRecognizeSpeechPathReqBodyBuilder>{

			speech(speech:Ref<Speech>):Ref<FileRecognizeSpeechPathReqBodyBuilder>
			config(config:Ref<FileConfig>):Ref<FileRecognizeSpeechPathReqBodyBuilder>
			build():Ref<FileRecognizeSpeechReqBody>
	}
	export interface FileRecognizeSpeechReq extends Struct<FileRecognizeSpeechReq>{

			body:Ref<FileRecognizeSpeechReqBody>
	}
	export interface FileRecognizeSpeechReqBody extends Struct<FileRecognizeSpeechReqBody>{

			speech:Ref<Speech>
			config:Ref<FileConfig>
	}
	export interface FileRecognizeSpeechReqBodyBuilder extends Struct<FileRecognizeSpeechReqBodyBuilder>{

			speech(speech:Ref<Speech>):Ref<FileRecognizeSpeechReqBodyBuilder>
			config(config:Ref<FileConfig>):Ref<FileRecognizeSpeechReqBodyBuilder>
			build():Ref<FileRecognizeSpeechReqBody>
	}
	export interface FileRecognizeSpeechReqBuilder extends Struct<FileRecognizeSpeechReqBuilder>{

			body(body:Ref<FileRecognizeSpeechReqBody>):Ref<FileRecognizeSpeechReqBuilder>
			build():Ref<FileRecognizeSpeechReq>
	}
	export interface FileRecognizeSpeechResp extends Struct<FileRecognizeSpeechResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<FileRecognizeSpeechRespData>
			success():bool
	}
	export interface FileRecognizeSpeechRespData extends Struct<FileRecognizeSpeechRespData>{

			recognitionText:Ref<string>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newFileConfigBuilder():Ref<FileConfigBuilder>

	export function newFileRecognizeSpeechPathReqBodyBuilder():Ref<FileRecognizeSpeechPathReqBodyBuilder>

	export function newFileRecognizeSpeechReqBodyBuilder():Ref<FileRecognizeSpeechReqBodyBuilder>

	export function newFileRecognizeSpeechReqBuilder():Ref<FileRecognizeSpeechReqBuilder>

	export function newSpeechBuilder():Ref<SpeechBuilder>

	export function newStreamConfigBuilder():Ref<StreamConfigBuilder>

	export function newStreamRecognizeSpeechPathReqBodyBuilder():Ref<StreamRecognizeSpeechPathReqBodyBuilder>

	export function newStreamRecognizeSpeechReqBodyBuilder():Ref<StreamRecognizeSpeechReqBodyBuilder>

	export function newStreamRecognizeSpeechReqBuilder():Ref<StreamRecognizeSpeechReqBuilder>

	export interface Speech extends Struct<Speech>{

			speech:Ref<string>
			speechKey:Ref<string>
	}
	export interface SpeechBuilder extends Struct<SpeechBuilder>{

			speech(speech:string):Ref<SpeechBuilder>
			speechKey(speechKey:string):Ref<SpeechBuilder>
			build():Ref<Speech>
	}
	export interface StreamConfig extends Struct<StreamConfig>{

			streamId:Ref<string>
			sequenceId:Ref<int>
			action:Ref<int>
			format:Ref<string>
			engineType:Ref<string>
	}
	export interface StreamConfigBuilder extends Struct<StreamConfigBuilder>{

			streamId(streamId:string):Ref<StreamConfigBuilder>
			sequenceId(sequenceId:int):Ref<StreamConfigBuilder>
			action(action:int):Ref<StreamConfigBuilder>
			format(format:string):Ref<StreamConfigBuilder>
			engineType(engineType:string):Ref<StreamConfigBuilder>
			build():Ref<StreamConfig>
	}
	export interface StreamRecognizeSpeechPathReqBodyBuilder extends Struct<StreamRecognizeSpeechPathReqBodyBuilder>{

			speech(speech:Ref<Speech>):Ref<StreamRecognizeSpeechPathReqBodyBuilder>
			config(config:Ref<StreamConfig>):Ref<StreamRecognizeSpeechPathReqBodyBuilder>
			build():Ref<StreamRecognizeSpeechReqBody>
	}
	export interface StreamRecognizeSpeechReq extends Struct<StreamRecognizeSpeechReq>{

			body:Ref<StreamRecognizeSpeechReqBody>
	}
	export interface StreamRecognizeSpeechReqBody extends Struct<StreamRecognizeSpeechReqBody>{

			speech:Ref<Speech>
			config:Ref<StreamConfig>
	}
	export interface StreamRecognizeSpeechReqBodyBuilder extends Struct<StreamRecognizeSpeechReqBodyBuilder>{

			speech(speech:Ref<Speech>):Ref<StreamRecognizeSpeechReqBodyBuilder>
			config(config:Ref<StreamConfig>):Ref<StreamRecognizeSpeechReqBodyBuilder>
			build():Ref<StreamRecognizeSpeechReqBody>
	}
	export interface StreamRecognizeSpeechReqBuilder extends Struct<StreamRecognizeSpeechReqBuilder>{

			body(body:Ref<StreamRecognizeSpeechReqBody>):Ref<StreamRecognizeSpeechReqBuilder>
			build():Ref<StreamRecognizeSpeechReq>
	}
	export interface StreamRecognizeSpeechResp extends Struct<StreamRecognizeSpeechResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<StreamRecognizeSpeechRespData>
			success():bool
	}
	export interface StreamRecognizeSpeechRespData extends Struct<StreamRecognizeSpeechRespData>{

			streamId:Ref<string>
			sequenceId:Ref<int>
			recognitionText:Ref<string>
	}
	export interface V1 extends Struct<V1>{

			speech:Ref<{
			
				fileRecognize(ctx:context.Context,req:Ref<FileRecognizeSpeechReq>,...options:larkcore.RequestOptionFunc[]):Ref<FileRecognizeSpeechResp>
				streamRecognize(ctx:context.Context,req:Ref<StreamRecognizeSpeechReq>,...options:larkcore.RequestOptionFunc[]):Ref<StreamRecognizeSpeechResp>
			}>
	}
	export function emptyFileConfig():FileConfig
	export function emptyRefFileConfig():Ref<FileConfig>
	export function refOfFileConfig(x:FileConfig,v:Ref<FileConfig>)
	export function unRefFileConfig(v:Ref<FileConfig>):FileConfig
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyStreamRecognizeSpeechResp():StreamRecognizeSpeechResp
	export function emptyRefStreamRecognizeSpeechResp():Ref<StreamRecognizeSpeechResp>
	export function refOfStreamRecognizeSpeechResp(x:StreamRecognizeSpeechResp,v:Ref<StreamRecognizeSpeechResp>)
	export function unRefStreamRecognizeSpeechResp(v:Ref<StreamRecognizeSpeechResp>):StreamRecognizeSpeechResp
	export function emptyFileRecognizeSpeechReqBody():FileRecognizeSpeechReqBody
	export function emptyRefFileRecognizeSpeechReqBody():Ref<FileRecognizeSpeechReqBody>
	export function refOfFileRecognizeSpeechReqBody(x:FileRecognizeSpeechReqBody,v:Ref<FileRecognizeSpeechReqBody>)
	export function unRefFileRecognizeSpeechReqBody(v:Ref<FileRecognizeSpeechReqBody>):FileRecognizeSpeechReqBody
	export function emptyFileRecognizeSpeechRespData():FileRecognizeSpeechRespData
	export function emptyRefFileRecognizeSpeechRespData():Ref<FileRecognizeSpeechRespData>
	export function refOfFileRecognizeSpeechRespData(x:FileRecognizeSpeechRespData,v:Ref<FileRecognizeSpeechRespData>)
	export function unRefFileRecognizeSpeechRespData(v:Ref<FileRecognizeSpeechRespData>):FileRecognizeSpeechRespData
	export function emptySpeech():Speech
	export function emptyRefSpeech():Ref<Speech>
	export function refOfSpeech(x:Speech,v:Ref<Speech>)
	export function unRefSpeech(v:Ref<Speech>):Speech
	export function emptyStreamRecognizeSpeechReqBody():StreamRecognizeSpeechReqBody
	export function emptyRefStreamRecognizeSpeechReqBody():Ref<StreamRecognizeSpeechReqBody>
	export function refOfStreamRecognizeSpeechReqBody(x:StreamRecognizeSpeechReqBody,v:Ref<StreamRecognizeSpeechReqBody>)
	export function unRefStreamRecognizeSpeechReqBody(v:Ref<StreamRecognizeSpeechReqBody>):StreamRecognizeSpeechReqBody
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyFileRecognizeSpeechResp():FileRecognizeSpeechResp
	export function emptyRefFileRecognizeSpeechResp():Ref<FileRecognizeSpeechResp>
	export function refOfFileRecognizeSpeechResp(x:FileRecognizeSpeechResp,v:Ref<FileRecognizeSpeechResp>)
	export function unRefFileRecognizeSpeechResp(v:Ref<FileRecognizeSpeechResp>):FileRecognizeSpeechResp
	export function emptyStreamRecognizeSpeechReq():StreamRecognizeSpeechReq
	export function emptyRefStreamRecognizeSpeechReq():Ref<StreamRecognizeSpeechReq>
	export function refOfStreamRecognizeSpeechReq(x:StreamRecognizeSpeechReq,v:Ref<StreamRecognizeSpeechReq>)
	export function unRefStreamRecognizeSpeechReq(v:Ref<StreamRecognizeSpeechReq>):StreamRecognizeSpeechReq
	export function emptyStreamRecognizeSpeechRespData():StreamRecognizeSpeechRespData
	export function emptyRefStreamRecognizeSpeechRespData():Ref<StreamRecognizeSpeechRespData>
	export function refOfStreamRecognizeSpeechRespData(x:StreamRecognizeSpeechRespData,v:Ref<StreamRecognizeSpeechRespData>)
	export function unRefStreamRecognizeSpeechRespData(v:Ref<StreamRecognizeSpeechRespData>):StreamRecognizeSpeechRespData
	export function emptyFileRecognizeSpeechReq():FileRecognizeSpeechReq
	export function emptyRefFileRecognizeSpeechReq():Ref<FileRecognizeSpeechReq>
	export function refOfFileRecognizeSpeechReq(x:FileRecognizeSpeechReq,v:Ref<FileRecognizeSpeechReq>)
	export function unRefFileRecognizeSpeechReq(v:Ref<FileRecognizeSpeechReq>):FileRecognizeSpeechReq
	export function emptyStreamConfig():StreamConfig
	export function emptyRefStreamConfig():Ref<StreamConfig>
	export function refOfStreamConfig(x:StreamConfig,v:Ref<StreamConfig>)
	export function unRefStreamConfig(v:Ref<StreamConfig>):StreamConfig
}