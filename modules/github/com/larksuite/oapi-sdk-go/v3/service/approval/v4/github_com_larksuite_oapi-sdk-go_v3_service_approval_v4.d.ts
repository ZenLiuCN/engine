// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/approval/v4'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as larkevent from 'github.com/larksuite/oapi-sdk-go/v3/event'
	// @ts-ignore
	import type {Struct,int,error,map,int64,Ref,bool} from 'go'
	export interface ActionConfig extends Struct<ActionConfig>{

			actionType:Ref<string>
			actionName:Ref<string>
			isNeedReason:Ref<bool>
			isReasonRequired:Ref<bool>
			isNeedAttachment:Ref<bool>
	}
	export interface ActionConfigBuilder extends Struct<ActionConfigBuilder>{

			actionType(actionType:string):Ref<ActionConfigBuilder>
			actionName(actionName:string):Ref<ActionConfigBuilder>
			isNeedReason(isNeedReason:bool):Ref<ActionConfigBuilder>
			isReasonRequired(isReasonRequired:bool):Ref<ActionConfigBuilder>
			isNeedAttachment(isNeedAttachment:bool):Ref<ActionConfigBuilder>
			build():Ref<ActionConfig>
	}
	//3
	export const AddSignEnumAddSignParallel:int
	//2
	export const AddSignEnumAddSignPost:int
	//1
	export const AddSignEnumAddSignPre:int
	export interface AddSignInstancePathReqBodyBuilder extends Struct<AddSignInstancePathReqBodyBuilder>{

			userId(userId:string):Ref<AddSignInstancePathReqBodyBuilder>
			approvalCode(approvalCode:string):Ref<AddSignInstancePathReqBodyBuilder>
			instanceCode(instanceCode:string):Ref<AddSignInstancePathReqBodyBuilder>
			taskId(taskId:string):Ref<AddSignInstancePathReqBodyBuilder>
			comment(comment:string):Ref<AddSignInstancePathReqBodyBuilder>
			addSignUserIds(addSignUserIds:string[]):Ref<AddSignInstancePathReqBodyBuilder>
			addSignType(addSignType:int):Ref<AddSignInstancePathReqBodyBuilder>
			approvalMethod(approvalMethod:int):Ref<AddSignInstancePathReqBodyBuilder>
			build():Ref<AddSignInstanceReqBody>
	}
	export interface AddSignInstanceReq extends Struct<AddSignInstanceReq>{

			body:Ref<AddSignInstanceReqBody>
	}
	export interface AddSignInstanceReqBody extends Struct<AddSignInstanceReqBody>{

			userId:Ref<string>
			approvalCode:Ref<string>
			instanceCode:Ref<string>
			taskId:Ref<string>
			comment:Ref<string>
			addSignUserIds:string[]
			addSignType:Ref<int>
			approvalMethod:Ref<int>
	}
	export interface AddSignInstanceReqBodyBuilder extends Struct<AddSignInstanceReqBodyBuilder>{

			userId(userId:string):Ref<AddSignInstanceReqBodyBuilder>
			approvalCode(approvalCode:string):Ref<AddSignInstanceReqBodyBuilder>
			instanceCode(instanceCode:string):Ref<AddSignInstanceReqBodyBuilder>
			taskId(taskId:string):Ref<AddSignInstanceReqBodyBuilder>
			comment(comment:string):Ref<AddSignInstanceReqBodyBuilder>
			addSignUserIds(addSignUserIds:string[]):Ref<AddSignInstanceReqBodyBuilder>
			addSignType(addSignType:int):Ref<AddSignInstanceReqBodyBuilder>
			approvalMethod(approvalMethod:int):Ref<AddSignInstanceReqBodyBuilder>
			build():Ref<AddSignInstanceReqBody>
	}
	export interface AddSignInstanceReqBuilder extends Struct<AddSignInstanceReqBuilder>{

			body(body:Ref<AddSignInstanceReqBody>):Ref<AddSignInstanceReqBuilder>
			build():Ref<AddSignInstanceReq>
	}
	export interface AddSignInstanceResp extends Struct<AddSignInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface Approval extends Struct<Approval>{

			approvalCode:Ref<string>
			approvalName:Ref<string>
			status:Ref<string>
	}
	export interface ApprovalApproverCcer extends Struct<ApprovalApproverCcer>{

			type:Ref<string>
			userId:Ref<string>
			level:Ref<string>
	}
	export interface ApprovalApproverCcerBuilder extends Struct<ApprovalApproverCcerBuilder>{

			type(type_:string):Ref<ApprovalApproverCcerBuilder>
			userId(userId:string):Ref<ApprovalApproverCcerBuilder>
			level(level:string):Ref<ApprovalApproverCcerBuilder>
			build():Ref<ApprovalApproverCcer>
	}
	export interface ApprovalBuilder extends Struct<ApprovalBuilder>{

			approvalCode(approvalCode:string):Ref<ApprovalBuilder>
			approvalName(approvalName:string):Ref<ApprovalBuilder>
			status(status:string):Ref<ApprovalBuilder>
			build():Ref<Approval>
	}
	export interface ApprovalConfig extends Struct<ApprovalConfig>{

			canUpdateViewer:Ref<bool>
			canUpdateForm:Ref<bool>
			canUpdateProcess:Ref<bool>
			canUpdateRevert:Ref<bool>
			helpUrl:Ref<string>
	}
	export interface ApprovalConfigBuilder extends Struct<ApprovalConfigBuilder>{

			canUpdateViewer(canUpdateViewer:bool):Ref<ApprovalConfigBuilder>
			canUpdateForm(canUpdateForm:bool):Ref<ApprovalConfigBuilder>
			canUpdateProcess(canUpdateProcess:bool):Ref<ApprovalConfigBuilder>
			canUpdateRevert(canUpdateRevert:bool):Ref<ApprovalConfigBuilder>
			helpUrl(helpUrl:string):Ref<ApprovalConfigBuilder>
			build():Ref<ApprovalConfig>
	}
	export interface ApprovalCreate extends Struct<ApprovalCreate>{

			approvalName:Ref<string>
			approvalCode:Ref<string>
			description:Ref<string>
			viewers:Ref<ApprovalCreateViewers>[]
			form:Ref<ApprovalForm>
			nodeList:Ref<ApprovalNode>[]
			settings:Ref<ApprovalSetting>
			config:Ref<ApprovalConfig>
			icon:Ref<int>
			i18nResources:Ref<I18nResource>[]
			processManagerIds:string[]
	}
	export interface ApprovalCreateBuilder extends Struct<ApprovalCreateBuilder>{

			approvalName(approvalName:string):Ref<ApprovalCreateBuilder>
			approvalCode(approvalCode:string):Ref<ApprovalCreateBuilder>
			description(description:string):Ref<ApprovalCreateBuilder>
			viewers(viewers:Ref<ApprovalCreateViewers>[]):Ref<ApprovalCreateBuilder>
			form(form:Ref<ApprovalForm>):Ref<ApprovalCreateBuilder>
			nodeList(nodeList:Ref<ApprovalNode>[]):Ref<ApprovalCreateBuilder>
			settings(settings:Ref<ApprovalSetting>):Ref<ApprovalCreateBuilder>
			config(config:Ref<ApprovalConfig>):Ref<ApprovalCreateBuilder>
			icon(icon:int):Ref<ApprovalCreateBuilder>
			i18nResources(i18nResources:Ref<I18nResource>[]):Ref<ApprovalCreateBuilder>
			processManagerIds(processManagerIds:string[]):Ref<ApprovalCreateBuilder>
			build():Ref<ApprovalCreate>
	}
	export interface ApprovalCreateExternal extends Struct<ApprovalCreateExternal>{

			bizName:Ref<string>
			bizType:Ref<string>
			createLinkMobile:Ref<string>
			createLinkPc:Ref<string>
			supportPc:Ref<bool>
			supportMobile:Ref<bool>
			supportBatchRead:Ref<bool>
			enableMarkReaded:Ref<bool>
			enableQuickOperate:Ref<bool>
			actionCallbackUrl:Ref<string>
			actionCallbackToken:Ref<string>
			actionCallbackKey:Ref<string>
			allowBatchOperate:Ref<bool>
			excludeEfficiencyStatistics:Ref<bool>
	}
	export interface ApprovalCreateExternalBuilder extends Struct<ApprovalCreateExternalBuilder>{

			bizName(bizName:string):Ref<ApprovalCreateExternalBuilder>
			bizType(bizType:string):Ref<ApprovalCreateExternalBuilder>
			createLinkMobile(createLinkMobile:string):Ref<ApprovalCreateExternalBuilder>
			createLinkPc(createLinkPc:string):Ref<ApprovalCreateExternalBuilder>
			supportPc(supportPc:bool):Ref<ApprovalCreateExternalBuilder>
			supportMobile(supportMobile:bool):Ref<ApprovalCreateExternalBuilder>
			supportBatchRead(supportBatchRead:bool):Ref<ApprovalCreateExternalBuilder>
			enableMarkReaded(enableMarkReaded:bool):Ref<ApprovalCreateExternalBuilder>
			enableQuickOperate(enableQuickOperate:bool):Ref<ApprovalCreateExternalBuilder>
			actionCallbackUrl(actionCallbackUrl:string):Ref<ApprovalCreateExternalBuilder>
			actionCallbackToken(actionCallbackToken:string):Ref<ApprovalCreateExternalBuilder>
			actionCallbackKey(actionCallbackKey:string):Ref<ApprovalCreateExternalBuilder>
			allowBatchOperate(allowBatchOperate:bool):Ref<ApprovalCreateExternalBuilder>
			excludeEfficiencyStatistics(excludeEfficiencyStatistics:bool):Ref<ApprovalCreateExternalBuilder>
			build():Ref<ApprovalCreateExternal>
	}
	export interface ApprovalCreateViewers extends Struct<ApprovalCreateViewers>{

			viewerType:Ref<string>
			viewerUserId:Ref<string>
			viewerDepartmentId:Ref<string>
	}
	export interface ApprovalCreateViewersBuilder extends Struct<ApprovalCreateViewersBuilder>{

			viewerType(viewerType:string):Ref<ApprovalCreateViewersBuilder>
			viewerUserId(viewerUserId:string):Ref<ApprovalCreateViewersBuilder>
			viewerDepartmentId(viewerDepartmentId:string):Ref<ApprovalCreateViewersBuilder>
			build():Ref<ApprovalCreateViewers>
	}
	export interface ApprovalEvent extends Struct<ApprovalEvent>{

			approvalId:Ref<string>
			approvalCode:Ref<string>
			versionId:Ref<string>
			widgetGroupType:Ref<int>
			formDefinitionId:Ref<string>
			processObj:Ref<string>
			timestamp:Ref<string>
			extra:Ref<string>
	}
	export interface ApprovalEventBuilder extends Struct<ApprovalEventBuilder>{

			approvalId(approvalId:string):Ref<ApprovalEventBuilder>
			approvalCode(approvalCode:string):Ref<ApprovalEventBuilder>
			versionId(versionId:string):Ref<ApprovalEventBuilder>
			widgetGroupType(widgetGroupType:int):Ref<ApprovalEventBuilder>
			formDefinitionId(formDefinitionId:string):Ref<ApprovalEventBuilder>
			processObj(processObj:string):Ref<ApprovalEventBuilder>
			timestamp(timestamp:string):Ref<ApprovalEventBuilder>
			extra(extra:string):Ref<ApprovalEventBuilder>
			build():Ref<ApprovalEvent>
	}
	export interface ApprovalForm extends Struct<ApprovalForm>{

			formContent:Ref<string>
			widgetRelation:Ref<string>
	}
	export interface ApprovalFormBuilder extends Struct<ApprovalFormBuilder>{

			formContent(formContent:string):Ref<ApprovalFormBuilder>
			widgetRelation(widgetRelation:string):Ref<ApprovalFormBuilder>
			build():Ref<ApprovalForm>
	}
	//2
	export const ApprovalMethodEnumAddSign:int
	//1
	export const ApprovalMethodEnumOrSign:int
	export interface ApprovalNode extends Struct<ApprovalNode>{

			id:Ref<string>
			name:Ref<string>
			nodeType:Ref<string>
			approver:Ref<ApprovalApproverCcer>[]
			ccer:Ref<ApprovalApproverCcer>[]
			privilegeField:Ref<FieldGroup>
			approverChosenMulti:Ref<bool>
			approverChosenRange:Ref<ApproverRange>[]
			starterAssignee:Ref<string>
	}
	export interface ApprovalNodeBuilder extends Struct<ApprovalNodeBuilder>{

			id(id:string):Ref<ApprovalNodeBuilder>
			name(name:string):Ref<ApprovalNodeBuilder>
			nodeType(nodeType:string):Ref<ApprovalNodeBuilder>
			approver(approver:Ref<ApprovalApproverCcer>[]):Ref<ApprovalNodeBuilder>
			ccer(ccer:Ref<ApprovalApproverCcer>[]):Ref<ApprovalNodeBuilder>
			privilegeField(privilegeField:Ref<FieldGroup>):Ref<ApprovalNodeBuilder>
			approverChosenMulti(approverChosenMulti:bool):Ref<ApprovalNodeBuilder>
			approverChosenRange(approverChosenRange:Ref<ApproverRange>[]):Ref<ApprovalNodeBuilder>
			starterAssignee(starterAssignee:string):Ref<ApprovalNodeBuilder>
			build():Ref<ApprovalNode>
	}
	export interface ApprovalNodeInfo extends Struct<ApprovalNodeInfo>{

			name:Ref<string>
			needApprover:Ref<bool>
			nodeId:Ref<string>
			customNodeId:Ref<string>
			nodeType:Ref<string>
			approverChosenMulti:Ref<bool>
			approverChosenRange:Ref<ApproverChosenRange>[]
			requireSignature:Ref<bool>
	}
	export interface ApprovalNodeInfoBuilder extends Struct<ApprovalNodeInfoBuilder>{

			name(name:string):Ref<ApprovalNodeInfoBuilder>
			needApprover(needApprover:bool):Ref<ApprovalNodeInfoBuilder>
			nodeId(nodeId:string):Ref<ApprovalNodeInfoBuilder>
			customNodeId(customNodeId:string):Ref<ApprovalNodeInfoBuilder>
			nodeType(nodeType:string):Ref<ApprovalNodeInfoBuilder>
			approverChosenMulti(approverChosenMulti:bool):Ref<ApprovalNodeInfoBuilder>
			approverChosenRange(approverChosenRange:Ref<ApproverChosenRange>[]):Ref<ApprovalNodeInfoBuilder>
			requireSignature(requireSignature:bool):Ref<ApprovalNodeInfoBuilder>
			build():Ref<ApprovalNodeInfo>
	}
	export interface ApprovalSetting extends Struct<ApprovalSetting>{

			revertInterval:Ref<int>
			revertOption:Ref<int>
			rejectOption:Ref<int>
			quickApprovalOption:Ref<int>
			overtimeDisable:Ref<bool>
			overtimeNoticeTime:Ref<int>
			overtimeCloseTime:Ref<int>
			overtimeRecoverTime:Ref<int>
	}
	export interface ApprovalSettingBuilder extends Struct<ApprovalSettingBuilder>{

			revertInterval(revertInterval:int):Ref<ApprovalSettingBuilder>
			revertOption(revertOption:int):Ref<ApprovalSettingBuilder>
			rejectOption(rejectOption:int):Ref<ApprovalSettingBuilder>
			quickApprovalOption(quickApprovalOption:int):Ref<ApprovalSettingBuilder>
			overtimeDisable(overtimeDisable:bool):Ref<ApprovalSettingBuilder>
			overtimeNoticeTime(overtimeNoticeTime:int):Ref<ApprovalSettingBuilder>
			overtimeCloseTime(overtimeCloseTime:int):Ref<ApprovalSettingBuilder>
			overtimeRecoverTime(overtimeRecoverTime:int):Ref<ApprovalSettingBuilder>
			build():Ref<ApprovalSetting>
	}
	export interface ApprovalViewer extends Struct<ApprovalViewer>{

			type:Ref<string>
			openId:Ref<string>
			userId:Ref<string>
			unionId:Ref<string>
	}
	export interface ApprovalViewerBuilder extends Struct<ApprovalViewerBuilder>{

			type(type_:string):Ref<ApprovalViewerBuilder>
			openId(openId:string):Ref<ApprovalViewerBuilder>
			userId(userId:string):Ref<ApprovalViewerBuilder>
			unionId(unionId:string):Ref<ApprovalViewerBuilder>
			build():Ref<ApprovalViewer>
	}
	export interface ApprovalViewerInfo extends Struct<ApprovalViewerInfo>{

			type:Ref<string>
			id:Ref<string>
			userId:Ref<string>
	}
	export interface ApprovalViewerInfoBuilder extends Struct<ApprovalViewerInfoBuilder>{

			type(type_:string):Ref<ApprovalViewerInfoBuilder>
			id(id:string):Ref<ApprovalViewerInfoBuilder>
			userId(userId:string):Ref<ApprovalViewerInfoBuilder>
			build():Ref<ApprovalViewerInfo>
	}
	export interface ApproveTaskReq extends Struct<ApproveTaskReq>{

			taskApprove:Ref<TaskApprove>
	}
	export interface ApproveTaskReqBuilder extends Struct<ApproveTaskReqBuilder>{

			userIdType(userIdType:string):Ref<ApproveTaskReqBuilder>
			taskApprove(taskApprove:Ref<TaskApprove>):Ref<ApproveTaskReqBuilder>
			build():Ref<ApproveTaskReq>
	}
	export interface ApproveTaskResp extends Struct<ApproveTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface ApproverChosenRange extends Struct<ApproverChosenRange>{

			approverRangeType:Ref<int>
			approverRangeIds:string[]
	}
	export interface ApproverChosenRangeBuilder extends Struct<ApproverChosenRangeBuilder>{

			approverRangeType(approverRangeType:int):Ref<ApproverChosenRangeBuilder>
			approverRangeIds(approverRangeIds:string[]):Ref<ApproverChosenRangeBuilder>
			build():Ref<ApproverChosenRange>
	}
	export interface ApproverRange extends Struct<ApproverRange>{

			type:Ref<string>
			idList:string[]
	}
	export interface ApproverRangeBuilder extends Struct<ApproverRangeBuilder>{

			type(type_:string):Ref<ApproverRangeBuilder>
			idList(idList:string[]):Ref<ApproverRangeBuilder>
			build():Ref<ApproverRange>
	}
	export interface CancelInstanceReq extends Struct<CancelInstanceReq>{

			instanceCancel:Ref<InstanceCancel>
	}
	export interface CancelInstanceReqBuilder extends Struct<CancelInstanceReqBuilder>{

			userIdType(userIdType:string):Ref<CancelInstanceReqBuilder>
			instanceCancel(instanceCancel:Ref<InstanceCancel>):Ref<CancelInstanceReqBuilder>
			build():Ref<CancelInstanceReq>
	}
	export interface CancelInstanceResp extends Struct<CancelInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface CcInstanceReq extends Struct<CcInstanceReq>{

			instanceCc:Ref<InstanceCc>
	}
	export interface CcInstanceReqBuilder extends Struct<CcInstanceReqBuilder>{

			userIdType(userIdType:string):Ref<CcInstanceReqBuilder>
			instanceCc(instanceCc:Ref<InstanceCc>):Ref<CcInstanceReqBuilder>
			build():Ref<CcInstanceReq>
	}
	export interface CcInstanceResp extends Struct<CcInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface CcNode extends Struct<CcNode>{

			ccId:Ref<string>
			userId:Ref<string>
			openId:Ref<string>
			links:Ref<ExternalInstanceLink>
			readStatus:Ref<string>
			extra:Ref<string>
			title:Ref<string>
			createTime:Ref<string>
			updateTime:Ref<string>
			displayMethod:Ref<string>
	}
	export interface CcNodeBuilder extends Struct<CcNodeBuilder>{

			ccId(ccId:string):Ref<CcNodeBuilder>
			userId(userId:string):Ref<CcNodeBuilder>
			openId(openId:string):Ref<CcNodeBuilder>
			links(links:Ref<ExternalInstanceLink>):Ref<CcNodeBuilder>
			readStatus(readStatus:string):Ref<CcNodeBuilder>
			extra(extra:string):Ref<CcNodeBuilder>
			title(title:string):Ref<CcNodeBuilder>
			createTime(createTime:string):Ref<CcNodeBuilder>
			updateTime(updateTime:string):Ref<CcNodeBuilder>
			displayMethod(displayMethod:string):Ref<CcNodeBuilder>
			build():Ref<CcNode>
	}
	export interface CcSearch extends Struct<CcSearch>{

			userId:Ref<string>
			approvalCode:Ref<string>
			instanceCode:Ref<string>
			instanceExternalId:Ref<string>
			groupExternalId:Ref<string>
			ccTitle:Ref<string>
			readStatus:Ref<string>
			ccCreateTimeFrom:Ref<string>
			ccCreateTimeTo:Ref<string>
			locale:Ref<string>
	}
	export interface CcSearchBuilder extends Struct<CcSearchBuilder>{

			userId(userId:string):Ref<CcSearchBuilder>
			approvalCode(approvalCode:string):Ref<CcSearchBuilder>
			instanceCode(instanceCode:string):Ref<CcSearchBuilder>
			instanceExternalId(instanceExternalId:string):Ref<CcSearchBuilder>
			groupExternalId(groupExternalId:string):Ref<CcSearchBuilder>
			ccTitle(ccTitle:string):Ref<CcSearchBuilder>
			readStatus(readStatus:string):Ref<CcSearchBuilder>
			ccCreateTimeFrom(ccCreateTimeFrom:string):Ref<CcSearchBuilder>
			ccCreateTimeTo(ccCreateTimeTo:string):Ref<CcSearchBuilder>
			locale(locale:string):Ref<CcSearchBuilder>
			build():Ref<CcSearch>
	}
	export interface CcSearchItem extends Struct<CcSearchItem>{

			approval:Ref<InstanceSearchApproval>
			group:Ref<InstanceSearchGroup>
			instance:Ref<InstanceSearchNode>
			cc:Ref<CcSearchNode>
	}
	export interface CcSearchItemBuilder extends Struct<CcSearchItemBuilder>{

			approval(approval:Ref<InstanceSearchApproval>):Ref<CcSearchItemBuilder>
			group(group:Ref<InstanceSearchGroup>):Ref<CcSearchItemBuilder>
			instance(instance:Ref<InstanceSearchNode>):Ref<CcSearchItemBuilder>
			cc(cc:Ref<CcSearchNode>):Ref<CcSearchItemBuilder>
			build():Ref<CcSearchItem>
	}
	export interface CcSearchNode extends Struct<CcSearchNode>{

			userId:Ref<string>
			createTime:Ref<string>
			readStatus:Ref<string>
			title:Ref<string>
			extra:Ref<string>
			link:Ref<InstanceSearchLink>
	}
	export interface CcSearchNodeBuilder extends Struct<CcSearchNodeBuilder>{

			userId(userId:string):Ref<CcSearchNodeBuilder>
			createTime(createTime:string):Ref<CcSearchNodeBuilder>
			readStatus(readStatus:string):Ref<CcSearchNodeBuilder>
			title(title:string):Ref<CcSearchNodeBuilder>
			extra(extra:string):Ref<CcSearchNodeBuilder>
			link(link:Ref<InstanceSearchLink>):Ref<CcSearchNodeBuilder>
			build():Ref<CcSearchNode>
	}
	export interface CheckExternalInstancePathReqBodyBuilder extends Struct<CheckExternalInstancePathReqBodyBuilder>{

			instances(instances:Ref<ExteranlInstanceCheck>[]):Ref<CheckExternalInstancePathReqBodyBuilder>
			build():Ref<CheckExternalInstanceReqBody>
	}
	export interface CheckExternalInstanceReq extends Struct<CheckExternalInstanceReq>{

			body:Ref<CheckExternalInstanceReqBody>
	}
	export interface CheckExternalInstanceReqBody extends Struct<CheckExternalInstanceReqBody>{

			instances:Ref<ExteranlInstanceCheck>[]
	}
	export interface CheckExternalInstanceReqBodyBuilder extends Struct<CheckExternalInstanceReqBodyBuilder>{

			instances(instances:Ref<ExteranlInstanceCheck>[]):Ref<CheckExternalInstanceReqBodyBuilder>
			build():Ref<CheckExternalInstanceReqBody>
	}
	export interface CheckExternalInstanceReqBuilder extends Struct<CheckExternalInstanceReqBuilder>{

			body(body:Ref<CheckExternalInstanceReqBody>):Ref<CheckExternalInstanceReqBuilder>
			build():Ref<CheckExternalInstanceReq>
	}
	export interface CheckExternalInstanceResp extends Struct<CheckExternalInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CheckExternalInstanceRespData>
			success():bool
	}
	export interface CheckExternalInstanceRespData extends Struct<CheckExternalInstanceRespData>{

			diffInstances:Ref<ExteranlInstanceCheckResponse>[]
	}
	export interface Comment extends Struct<Comment>{

			id:Ref<string>
			content:Ref<string>
			createTime:Ref<string>
			updateTime:Ref<string>
			isDelete:Ref<int>
			replies:Ref<CommentReply>[]
			atInfoList:Ref<CommentAtInfo>[]
			commentator:Ref<string>
			extra:Ref<string>
	}
	export interface CommentAtInfo extends Struct<CommentAtInfo>{

			userId:Ref<string>
			name:Ref<string>
			offset:Ref<string>
	}
	export interface CommentAtInfoBuilder extends Struct<CommentAtInfoBuilder>{

			userId(userId:string):Ref<CommentAtInfoBuilder>
			name(name:string):Ref<CommentAtInfoBuilder>
			offset(offset:string):Ref<CommentAtInfoBuilder>
			build():Ref<CommentAtInfo>
	}
	export interface CommentBuilder extends Struct<CommentBuilder>{

			id(id:string):Ref<CommentBuilder>
			content(content:string):Ref<CommentBuilder>
			createTime(createTime:string):Ref<CommentBuilder>
			updateTime(updateTime:string):Ref<CommentBuilder>
			isDelete(isDelete:int):Ref<CommentBuilder>
			replies(replies:Ref<CommentReply>[]):Ref<CommentBuilder>
			atInfoList(atInfoList:Ref<CommentAtInfo>[]):Ref<CommentBuilder>
			commentator(commentator:string):Ref<CommentBuilder>
			extra(extra:string):Ref<CommentBuilder>
			build():Ref<Comment>
	}
	export interface CommentReply extends Struct<CommentReply>{

			id:Ref<string>
			content:Ref<string>
			createTime:Ref<string>
			updateTime:Ref<string>
			isDelete:Ref<int>
			atInfoList:Ref<CommentAtInfo>[]
			commentator:Ref<string>
			extra:Ref<string>
	}
	export interface CommentReplyBuilder extends Struct<CommentReplyBuilder>{

			id(id:string):Ref<CommentReplyBuilder>
			content(content:string):Ref<CommentReplyBuilder>
			createTime(createTime:string):Ref<CommentReplyBuilder>
			updateTime(updateTime:string):Ref<CommentReplyBuilder>
			isDelete(isDelete:int):Ref<CommentReplyBuilder>
			atInfoList(atInfoList:Ref<CommentAtInfo>[]):Ref<CommentReplyBuilder>
			commentator(commentator:string):Ref<CommentReplyBuilder>
			extra(extra:string):Ref<CommentReplyBuilder>
			build():Ref<CommentReply>
	}
	export interface CommentRequest extends Struct<CommentRequest>{

			content:Ref<string>
			atInfoList:Ref<CommentAtInfo>[]
			parentCommentId:Ref<string>
			commentId:Ref<string>
			disableBot:Ref<bool>
			extra:Ref<string>
	}
	export interface CommentRequestBuilder extends Struct<CommentRequestBuilder>{

			content(content:string):Ref<CommentRequestBuilder>
			atInfoList(atInfoList:Ref<CommentAtInfo>[]):Ref<CommentRequestBuilder>
			parentCommentId(parentCommentId:string):Ref<CommentRequestBuilder>
			commentId(commentId:string):Ref<CommentRequestBuilder>
			disableBot(disableBot:bool):Ref<CommentRequestBuilder>
			extra(extra:string):Ref<CommentRequestBuilder>
			build():Ref<CommentRequest>
	}
	export interface ConnectorLog extends Struct<ConnectorLog>{

			logData:Ref<ConnectorLogData>[]
	}
	export interface ConnectorLogBuilder extends Struct<ConnectorLogBuilder>{

			logData(logData:Ref<ConnectorLogData>[]):Ref<ConnectorLogBuilder>
			build():Ref<ConnectorLog>
	}
	export interface ConnectorLogData extends Struct<ConnectorLogData>{

			dateTime:Ref<string>
			data:Ref<string>
			level:Ref<string>
			pod:Ref<string>
			location:Ref<string>
			type:Ref<string>
			version:Ref<string>
	}
	export interface ConnectorLogDataBuilder extends Struct<ConnectorLogDataBuilder>{

			dateTime(dateTime:string):Ref<ConnectorLogDataBuilder>
			data(data:string):Ref<ConnectorLogDataBuilder>
			level(level:string):Ref<ConnectorLogDataBuilder>
			pod(pod:string):Ref<ConnectorLogDataBuilder>
			location(location:string):Ref<ConnectorLogDataBuilder>
			type(type_:string):Ref<ConnectorLogDataBuilder>
			version(version:string):Ref<ConnectorLogDataBuilder>
			build():Ref<ConnectorLogData>
	}
	export interface Count extends Struct<Count>{

			total:Ref<int>
			hasMore:Ref<bool>
	}
	export interface CountBuilder extends Struct<CountBuilder>{

			total(total:int):Ref<CountBuilder>
			hasMore(hasMore:bool):Ref<CountBuilder>
			build():Ref<Count>
	}
	export interface CreateApprovalReq extends Struct<CreateApprovalReq>{

			approvalCreate:Ref<ApprovalCreate>
	}
	export interface CreateApprovalReqBuilder extends Struct<CreateApprovalReqBuilder>{

			departmentIdType(departmentIdType:string):Ref<CreateApprovalReqBuilder>
			userIdType(userIdType:string):Ref<CreateApprovalReqBuilder>
			approvalCreate(approvalCreate:Ref<ApprovalCreate>):Ref<CreateApprovalReqBuilder>
			build():Ref<CreateApprovalReq>
	}
	export interface CreateApprovalResp extends Struct<CreateApprovalResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateApprovalRespData>
			success():bool
	}
	export interface CreateApprovalRespData extends Struct<CreateApprovalRespData>{

			approvalCode:Ref<string>
			approvalId:Ref<string>
	}
	export interface CreateExternalApprovalReq extends Struct<CreateExternalApprovalReq>{

			externalApproval:Ref<ExternalApproval>
	}
	export interface CreateExternalApprovalReqBuilder extends Struct<CreateExternalApprovalReqBuilder>{

			departmentIdType(departmentIdType:string):Ref<CreateExternalApprovalReqBuilder>
			userIdType(userIdType:string):Ref<CreateExternalApprovalReqBuilder>
			externalApproval(externalApproval:Ref<ExternalApproval>):Ref<CreateExternalApprovalReqBuilder>
			build():Ref<CreateExternalApprovalReq>
	}
	export interface CreateExternalApprovalResp extends Struct<CreateExternalApprovalResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateExternalApprovalRespData>
			success():bool
	}
	export interface CreateExternalApprovalRespData extends Struct<CreateExternalApprovalRespData>{

			approvalCode:Ref<string>
	}
	export interface CreateExternalInstanceReq extends Struct<CreateExternalInstanceReq>{

			externalInstance:Ref<ExternalInstance>
	}
	export interface CreateExternalInstanceReqBuilder extends Struct<CreateExternalInstanceReqBuilder>{

			externalInstance(externalInstance:Ref<ExternalInstance>):Ref<CreateExternalInstanceReqBuilder>
			build():Ref<CreateExternalInstanceReq>
	}
	export interface CreateExternalInstanceResp extends Struct<CreateExternalInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateExternalInstanceRespData>
			success():bool
	}
	export interface CreateExternalInstanceRespData extends Struct<CreateExternalInstanceRespData>{

			data:Ref<ExternalInstance>
	}
	export interface CreateInstanceCommentReq extends Struct<CreateInstanceCommentReq>{

			commentRequest:Ref<CommentRequest>
	}
	export interface CreateInstanceCommentReqBuilder extends Struct<CreateInstanceCommentReqBuilder>{

			instanceId(instanceId:string):Ref<CreateInstanceCommentReqBuilder>
			userIdType(userIdType:string):Ref<CreateInstanceCommentReqBuilder>
			userId(userId:string):Ref<CreateInstanceCommentReqBuilder>
			commentRequest(commentRequest:Ref<CommentRequest>):Ref<CreateInstanceCommentReqBuilder>
			build():Ref<CreateInstanceCommentReq>
	}
	export interface CreateInstanceCommentResp extends Struct<CreateInstanceCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateInstanceCommentRespData>
			success():bool
	}
	export interface CreateInstanceCommentRespData extends Struct<CreateInstanceCommentRespData>{

			commentId:Ref<string>
	}
	export interface CreateInstanceReq extends Struct<CreateInstanceReq>{

			instanceCreate:Ref<InstanceCreate>
	}
	export interface CreateInstanceReqBuilder extends Struct<CreateInstanceReqBuilder>{

			instanceCreate(instanceCreate:Ref<InstanceCreate>):Ref<CreateInstanceReqBuilder>
			build():Ref<CreateInstanceReq>
	}
	export interface CreateInstanceResp extends Struct<CreateInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateInstanceRespData>
			success():bool
	}
	export interface CreateInstanceRespData extends Struct<CreateInstanceRespData>{

			instanceCode:Ref<string>
	}
	export interface Definition extends Struct<Definition>{

			approvalCode:Ref<string>
			approvalName:Ref<string>
			groupName:Ref<string>
			description:Ref<string>
			iconUrl:Ref<string>
			groupCode:Ref<string>
			isExternal:Ref<bool>
			createLinkPc:Ref<string>
			createLinkMobile:Ref<string>
	}
	export interface DefinitionBuilder extends Struct<DefinitionBuilder>{

			approvalCode(approvalCode:string):Ref<DefinitionBuilder>
			approvalName(approvalName:string):Ref<DefinitionBuilder>
			groupName(groupName:string):Ref<DefinitionBuilder>
			description(description:string):Ref<DefinitionBuilder>
			iconUrl(iconUrl:string):Ref<DefinitionBuilder>
			groupCode(groupCode:string):Ref<DefinitionBuilder>
			isExternal(isExternal:bool):Ref<DefinitionBuilder>
			createLinkPc(createLinkPc:string):Ref<DefinitionBuilder>
			createLinkMobile(createLinkMobile:string):Ref<DefinitionBuilder>
			build():Ref<Definition>
	}
	export interface DeleteInstanceCommentReq extends Struct<DeleteInstanceCommentReq>{

	}
	export interface DeleteInstanceCommentReqBuilder extends Struct<DeleteInstanceCommentReqBuilder>{

			instanceId(instanceId:string):Ref<DeleteInstanceCommentReqBuilder>
			commentId(commentId:string):Ref<DeleteInstanceCommentReqBuilder>
			userIdType(userIdType:string):Ref<DeleteInstanceCommentReqBuilder>
			userId(userId:string):Ref<DeleteInstanceCommentReqBuilder>
			build():Ref<DeleteInstanceCommentReq>
	}
	export interface DeleteInstanceCommentResp extends Struct<DeleteInstanceCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<DeleteInstanceCommentRespData>
			success():bool
	}
	export interface DeleteInstanceCommentRespData extends Struct<DeleteInstanceCommentRespData>{

			commentId:Ref<string>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	//"department_id"
	export const DepartmentIdTypeCreateExternalApprovalDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeCreateExternalApprovalOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeOpenDepartmentId:string
	//"BROWSER"
	export const DisplayMethodBrowser:string
	//"NORMAL"
	export const DisplayMethodNormal:string
	//"SIDEBAR"
	export const DisplayMethodSIdebar:string
	//"TRUSTEESHIP"
	export const DisplayMethodTrusteeship:string
	export interface ExteranlInstanceCheck extends Struct<ExteranlInstanceCheck>{

			instanceId:Ref<string>
			updateTime:Ref<string>
			tasks:Ref<ExternalInstanceTask>[]
	}
	export interface ExteranlInstanceCheckBuilder extends Struct<ExteranlInstanceCheckBuilder>{

			instanceId(instanceId:string):Ref<ExteranlInstanceCheckBuilder>
			updateTime(updateTime:string):Ref<ExteranlInstanceCheckBuilder>
			tasks(tasks:Ref<ExternalInstanceTask>[]):Ref<ExteranlInstanceCheckBuilder>
			build():Ref<ExteranlInstanceCheck>
	}
	export interface ExteranlInstanceCheckResponse extends Struct<ExteranlInstanceCheckResponse>{

			instanceId:Ref<string>
			updateTime:Ref<string>
			tasks:Ref<ExternalInstanceTask>[]
	}
	export interface ExteranlInstanceCheckResponseBuilder extends Struct<ExteranlInstanceCheckResponseBuilder>{

			instanceId(instanceId:string):Ref<ExteranlInstanceCheckResponseBuilder>
			updateTime(updateTime:string):Ref<ExteranlInstanceCheckResponseBuilder>
			tasks(tasks:Ref<ExternalInstanceTask>[]):Ref<ExteranlInstanceCheckResponseBuilder>
			build():Ref<ExteranlInstanceCheckResponse>
	}
	export interface ExternalApproval extends Struct<ExternalApproval>{

			approvalName:Ref<string>
			approvalCode:Ref<string>
			groupCode:Ref<string>
			groupName:Ref<string>
			description:Ref<string>
			external:Ref<ApprovalCreateExternal>
			viewers:Ref<ApprovalCreateViewers>[]
			i18nResources:Ref<I18nResource>[]
			managers:string[]
	}
	export interface ExternalApprovalBuilder extends Struct<ExternalApprovalBuilder>{

			approvalName(approvalName:string):Ref<ExternalApprovalBuilder>
			approvalCode(approvalCode:string):Ref<ExternalApprovalBuilder>
			groupCode(groupCode:string):Ref<ExternalApprovalBuilder>
			groupName(groupName:string):Ref<ExternalApprovalBuilder>
			description(description:string):Ref<ExternalApprovalBuilder>
			external(external:Ref<ApprovalCreateExternal>):Ref<ExternalApprovalBuilder>
			viewers(viewers:Ref<ApprovalCreateViewers>[]):Ref<ExternalApprovalBuilder>
			i18nResources(i18nResources:Ref<I18nResource>[]):Ref<ExternalApprovalBuilder>
			managers(managers:string[]):Ref<ExternalApprovalBuilder>
			build():Ref<ExternalApproval>
	}
	export interface ExternalInstance extends Struct<ExternalInstance>{

			approvalCode:Ref<string>
			status:Ref<string>
			extra:Ref<string>
			instanceId:Ref<string>
			links:Ref<ExternalInstanceLink>
			title:Ref<string>
			form:Ref<ExternalInstanceForm>[]
			userId:Ref<string>
			userName:Ref<string>
			openId:Ref<string>
			departmentId:Ref<string>
			departmentName:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			updateTime:Ref<string>
			displayMethod:Ref<string>
			updateMode:Ref<string>
			taskList:Ref<ExternalInstanceTaskNode>[]
			ccList:Ref<CcNode>[]
			i18nResources:Ref<I18nResource>[]
			trusteeshipUrlToken:Ref<string>
			trusteeshipUserIdType:Ref<string>
			trusteeshipUrls:Ref<TrusteeshipUrls>
			trusteeshipCacheConfig:Ref<TrusteeshipInstanceCacheConfig>
	}
	export interface ExternalInstanceBuilder extends Struct<ExternalInstanceBuilder>{

			approvalCode(approvalCode:string):Ref<ExternalInstanceBuilder>
			status(status:string):Ref<ExternalInstanceBuilder>
			extra(extra:string):Ref<ExternalInstanceBuilder>
			instanceId(instanceId:string):Ref<ExternalInstanceBuilder>
			links(links:Ref<ExternalInstanceLink>):Ref<ExternalInstanceBuilder>
			title(title:string):Ref<ExternalInstanceBuilder>
			form(form:Ref<ExternalInstanceForm>[]):Ref<ExternalInstanceBuilder>
			userId(userId:string):Ref<ExternalInstanceBuilder>
			userName(userName:string):Ref<ExternalInstanceBuilder>
			openId(openId:string):Ref<ExternalInstanceBuilder>
			departmentId(departmentId:string):Ref<ExternalInstanceBuilder>
			departmentName(departmentName:string):Ref<ExternalInstanceBuilder>
			startTime(startTime:string):Ref<ExternalInstanceBuilder>
			endTime(endTime:string):Ref<ExternalInstanceBuilder>
			updateTime(updateTime:string):Ref<ExternalInstanceBuilder>
			displayMethod(displayMethod:string):Ref<ExternalInstanceBuilder>
			updateMode(updateMode:string):Ref<ExternalInstanceBuilder>
			taskList(taskList:Ref<ExternalInstanceTaskNode>[]):Ref<ExternalInstanceBuilder>
			ccList(ccList:Ref<CcNode>[]):Ref<ExternalInstanceBuilder>
			i18nResources(i18nResources:Ref<I18nResource>[]):Ref<ExternalInstanceBuilder>
			trusteeshipUrlToken(trusteeshipUrlToken:string):Ref<ExternalInstanceBuilder>
			trusteeshipUserIdType(trusteeshipUserIdType:string):Ref<ExternalInstanceBuilder>
			trusteeshipUrls(trusteeshipUrls:Ref<TrusteeshipUrls>):Ref<ExternalInstanceBuilder>
			trusteeshipCacheConfig(trusteeshipCacheConfig:Ref<TrusteeshipInstanceCacheConfig>):Ref<ExternalInstanceBuilder>
			build():Ref<ExternalInstance>
	}
	export interface ExternalInstanceForm extends Struct<ExternalInstanceForm>{

			name:Ref<string>
			value:Ref<string>
	}
	export interface ExternalInstanceFormBuilder extends Struct<ExternalInstanceFormBuilder>{

			name(name:string):Ref<ExternalInstanceFormBuilder>
			value(value:string):Ref<ExternalInstanceFormBuilder>
			build():Ref<ExternalInstanceForm>
	}
	export interface ExternalInstanceLink extends Struct<ExternalInstanceLink>{

			pcLink:Ref<string>
			mobileLink:Ref<string>
	}
	export interface ExternalInstanceLinkBuilder extends Struct<ExternalInstanceLinkBuilder>{

			pcLink(pcLink:string):Ref<ExternalInstanceLinkBuilder>
			mobileLink(mobileLink:string):Ref<ExternalInstanceLinkBuilder>
			build():Ref<ExternalInstanceLink>
	}
	export interface ExternalInstanceTask extends Struct<ExternalInstanceTask>{

			taskId:Ref<string>
			updateTime:Ref<string>
	}
	export interface ExternalInstanceTaskBuilder extends Struct<ExternalInstanceTaskBuilder>{

			taskId(taskId:string):Ref<ExternalInstanceTaskBuilder>
			updateTime(updateTime:string):Ref<ExternalInstanceTaskBuilder>
			build():Ref<ExternalInstanceTask>
	}
	export interface ExternalInstanceTaskNode extends Struct<ExternalInstanceTaskNode>{

			taskId:Ref<string>
			userId:Ref<string>
			openId:Ref<string>
			title:Ref<string>
			links:Ref<ExternalInstanceLink>
			status:Ref<string>
			extra:Ref<string>
			createTime:Ref<string>
			endTime:Ref<string>
			updateTime:Ref<string>
			actionContext:Ref<string>
			actionConfigs:Ref<ActionConfig>[]
			displayMethod:Ref<string>
			excludeStatistics:Ref<bool>
			nodeId:Ref<string>
			nodeName:Ref<string>
	}
	export interface ExternalInstanceTaskNodeBuilder extends Struct<ExternalInstanceTaskNodeBuilder>{

			taskId(taskId:string):Ref<ExternalInstanceTaskNodeBuilder>
			userId(userId:string):Ref<ExternalInstanceTaskNodeBuilder>
			openId(openId:string):Ref<ExternalInstanceTaskNodeBuilder>
			title(title:string):Ref<ExternalInstanceTaskNodeBuilder>
			links(links:Ref<ExternalInstanceLink>):Ref<ExternalInstanceTaskNodeBuilder>
			status(status:string):Ref<ExternalInstanceTaskNodeBuilder>
			extra(extra:string):Ref<ExternalInstanceTaskNodeBuilder>
			createTime(createTime:string):Ref<ExternalInstanceTaskNodeBuilder>
			endTime(endTime:string):Ref<ExternalInstanceTaskNodeBuilder>
			updateTime(updateTime:string):Ref<ExternalInstanceTaskNodeBuilder>
			actionContext(actionContext:string):Ref<ExternalInstanceTaskNodeBuilder>
			actionConfigs(actionConfigs:Ref<ActionConfig>[]):Ref<ExternalInstanceTaskNodeBuilder>
			displayMethod(displayMethod:string):Ref<ExternalInstanceTaskNodeBuilder>
			excludeStatistics(excludeStatistics:bool):Ref<ExternalInstanceTaskNodeBuilder>
			nodeId(nodeId:string):Ref<ExternalInstanceTaskNodeBuilder>
			nodeName(nodeName:string):Ref<ExternalInstanceTaskNodeBuilder>
			build():Ref<ExternalInstanceTaskNode>
	}
	export interface ExternalTaskItem extends Struct<ExternalTaskItem>{

			id:Ref<string>
			status:Ref<string>
			updateTime:Ref<string>
	}
	export interface ExternalTaskItemBuilder extends Struct<ExternalTaskItemBuilder>{

			id(id:string):Ref<ExternalTaskItemBuilder>
			status(status:string):Ref<ExternalTaskItemBuilder>
			updateTime(updateTime:string):Ref<ExternalTaskItemBuilder>
			build():Ref<ExternalTaskItem>
	}
	export interface ExternalTaskList extends Struct<ExternalTaskList>{

			instanceId:Ref<string>
			approvalId:Ref<string>
			approvalCode:Ref<string>
			status:Ref<string>
			updateTime:Ref<string>
			tasks:Ref<ExternalTaskItem>[]
	}
	export interface ExternalTaskListBuilder extends Struct<ExternalTaskListBuilder>{

			instanceId(instanceId:string):Ref<ExternalTaskListBuilder>
			approvalId(approvalId:string):Ref<ExternalTaskListBuilder>
			approvalCode(approvalCode:string):Ref<ExternalTaskListBuilder>
			status(status:string):Ref<ExternalTaskListBuilder>
			updateTime(updateTime:string):Ref<ExternalTaskListBuilder>
			tasks(tasks:Ref<ExternalTaskItem>[]):Ref<ExternalTaskListBuilder>
			build():Ref<ExternalTaskList>
	}
	//"APPROVED"
	export const ExternalTaskStatusApproved:string
	//"DONE"
	export const ExternalTaskStatusDone:string
	//"PENDING"
	export const ExternalTaskStatusPending:string
	//"REJECTED"
	export const ExternalTaskStatusRejected:string
	//"TRANSFERRED"
	export const ExternalTaskStatusTransferred:string
	export interface FieldGroup extends Struct<FieldGroup>{

			writable:string[]
			readable:string[]
	}
	export interface FieldGroupBuilder extends Struct<FieldGroupBuilder>{

			writable(writable:string[]):Ref<FieldGroupBuilder>
			readable(readable:string[]):Ref<FieldGroupBuilder>
			build():Ref<FieldGroup>
	}
	export interface File extends Struct<File>{

			url:Ref<string>
			fileSize:Ref<int>
			title:Ref<string>
			type:Ref<string>
	}
	export interface FileBuilder extends Struct<FileBuilder>{

			url(url:string):Ref<FileBuilder>
			fileSize(fileSize:int):Ref<FileBuilder>
			title(title:string):Ref<FileBuilder>
			type(type_:string):Ref<FileBuilder>
			build():Ref<File>
	}
	export interface FileUrl extends Struct<FileUrl>{

			name:Ref<string>
			url:Ref<string>
	}
	export interface FileUrlBuilder extends Struct<FileUrlBuilder>{

			name(name:string):Ref<FileUrlBuilder>
			url(url:string):Ref<FileUrlBuilder>
			build():Ref<FileUrl>
	}
	export interface GetApprovalReq extends Struct<GetApprovalReq>{

	}
	export interface GetApprovalReqBuilder extends Struct<GetApprovalReqBuilder>{

			approvalCode(approvalCode:string):Ref<GetApprovalReqBuilder>
			locale(locale:string):Ref<GetApprovalReqBuilder>
			withAdminId(withAdminId:bool):Ref<GetApprovalReqBuilder>
			userIdType(userIdType:string):Ref<GetApprovalReqBuilder>
			build():Ref<GetApprovalReq>
	}
	export interface GetApprovalResp extends Struct<GetApprovalResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetApprovalRespData>
			success():bool
	}
	export interface GetApprovalRespData extends Struct<GetApprovalRespData>{

			approvalName:Ref<string>
			status:Ref<string>
			form:Ref<string>
			nodeList:Ref<ApprovalNodeInfo>[]
			viewers:Ref<ApprovalViewerInfo>[]
			approvalAdminIds:string[]
			formWidgetRelation:Ref<string>
	}
	export interface GetExternalApprovalReq extends Struct<GetExternalApprovalReq>{

	}
	export interface GetExternalApprovalReqBuilder extends Struct<GetExternalApprovalReqBuilder>{

			approvalCode(approvalCode:string):Ref<GetExternalApprovalReqBuilder>
			userIdType(userIdType:string):Ref<GetExternalApprovalReqBuilder>
			build():Ref<GetExternalApprovalReq>
	}
	export interface GetExternalApprovalResp extends Struct<GetExternalApprovalResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetExternalApprovalRespData>
			success():bool
	}
	export interface GetExternalApprovalRespData extends Struct<GetExternalApprovalRespData>{

			approvalName:Ref<string>
			approvalCode:Ref<string>
			groupCode:Ref<string>
			groupName:Ref<string>
			description:Ref<string>
			external:Ref<ApprovalCreateExternal>
			viewers:Ref<ApprovalCreateViewers>[]
			i18nResources:Ref<I18nResource>[]
			managers:string[]
	}
	export interface GetInstanceReq extends Struct<GetInstanceReq>{

	}
	export interface GetInstanceReqBuilder extends Struct<GetInstanceReqBuilder>{

			instanceId(instanceId:string):Ref<GetInstanceReqBuilder>
			locale(locale:string):Ref<GetInstanceReqBuilder>
			userId(userId:string):Ref<GetInstanceReqBuilder>
			userIdType(userIdType:string):Ref<GetInstanceReqBuilder>
			build():Ref<GetInstanceReq>
	}
	export interface GetInstanceResp extends Struct<GetInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetInstanceRespData>
			success():bool
	}
	export interface GetInstanceRespData extends Struct<GetInstanceRespData>{

			approvalName:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			userId:Ref<string>
			openId:Ref<string>
			serialNumber:Ref<string>
			departmentId:Ref<string>
			status:Ref<string>
			uuid:Ref<string>
			form:Ref<string>
			taskList:Ref<InstanceTask>[]
			commentList:Ref<InstanceComment>[]
			timeline:Ref<InstanceTimeline>[]
			modifiedInstanceCode:Ref<string>
			revertedInstanceCode:Ref<string>
			approvalCode:Ref<string>
			reverted:Ref<bool>
			instanceCode:Ref<string>
	}
	export interface I18nResource extends Struct<I18nResource>{

			locale:Ref<string>
			texts:Ref<I18nResourceText>[]
			isDefault:Ref<bool>
	}
	export interface I18nResourceBuilder extends Struct<I18nResourceBuilder>{

			locale(locale:string):Ref<I18nResourceBuilder>
			texts(texts:Ref<I18nResourceText>[]):Ref<I18nResourceBuilder>
			isDefault(isDefault:bool):Ref<I18nResourceBuilder>
			build():Ref<I18nResource>
	}
	export interface I18nResourceText extends Struct<I18nResourceText>{

			key:Ref<string>
			value:Ref<string>
	}
	export interface I18nResourceTextBuilder extends Struct<I18nResourceTextBuilder>{

			key(key:string):Ref<I18nResourceTextBuilder>
			value(value:string):Ref<I18nResourceTextBuilder>
			build():Ref<I18nResourceText>
	}
	export interface Instance extends Struct<Instance>{

			instanceCode:Ref<string>
			approvalName:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			userId:Ref<string>
			serialId:Ref<string>
	}
	export interface InstanceBuilder extends Struct<InstanceBuilder>{

			instanceCode(instanceCode:string):Ref<InstanceBuilder>
			approvalName(approvalName:string):Ref<InstanceBuilder>
			startTime(startTime:string):Ref<InstanceBuilder>
			endTime(endTime:string):Ref<InstanceBuilder>
			userId(userId:string):Ref<InstanceBuilder>
			serialId(serialId:string):Ref<InstanceBuilder>
			build():Ref<Instance>
	}
	export interface InstanceCancel extends Struct<InstanceCancel>{

			approvalCode:Ref<string>
			instanceCode:Ref<string>
			userId:Ref<string>
	}
	export interface InstanceCancelBuilder extends Struct<InstanceCancelBuilder>{

			approvalCode(approvalCode:string):Ref<InstanceCancelBuilder>
			instanceCode(instanceCode:string):Ref<InstanceCancelBuilder>
			userId(userId:string):Ref<InstanceCancelBuilder>
			build():Ref<InstanceCancel>
	}
	export interface InstanceCc extends Struct<InstanceCc>{

			approvalCode:Ref<string>
			instanceCode:Ref<string>
			userId:Ref<string>
			ccUserIds:string[]
			comment:Ref<string>
	}
	export interface InstanceCcBuilder extends Struct<InstanceCcBuilder>{

			approvalCode(approvalCode:string):Ref<InstanceCcBuilder>
			instanceCode(instanceCode:string):Ref<InstanceCcBuilder>
			userId(userId:string):Ref<InstanceCcBuilder>
			ccUserIds(ccUserIds:string[]):Ref<InstanceCcBuilder>
			comment(comment:string):Ref<InstanceCcBuilder>
			build():Ref<InstanceCc>
	}
	export interface InstanceCcUser extends Struct<InstanceCcUser>{

			userId:Ref<string>
			ccId:Ref<string>
			openId:Ref<string>
	}
	export interface InstanceCcUserBuilder extends Struct<InstanceCcUserBuilder>{

			userId(userId:string):Ref<InstanceCcUserBuilder>
			ccId(ccId:string):Ref<InstanceCcUserBuilder>
			openId(openId:string):Ref<InstanceCcUserBuilder>
			build():Ref<InstanceCcUser>
	}
	export interface InstanceComment extends Struct<InstanceComment>{

			id:Ref<string>
			userId:Ref<string>
			openId:Ref<string>
			comment:Ref<string>
			createTime:Ref<string>
			files:Ref<File>[]
	}
	export interface InstanceCommentBuilder extends Struct<InstanceCommentBuilder>{

			id(id:string):Ref<InstanceCommentBuilder>
			userId(userId:string):Ref<InstanceCommentBuilder>
			openId(openId:string):Ref<InstanceCommentBuilder>
			comment(comment:string):Ref<InstanceCommentBuilder>
			createTime(createTime:string):Ref<InstanceCommentBuilder>
			files(files:Ref<File>[]):Ref<InstanceCommentBuilder>
			build():Ref<InstanceComment>
	}
	export interface InstanceCreate extends Struct<InstanceCreate>{

			approvalCode:Ref<string>
			userId:Ref<string>
			openId:Ref<string>
			departmentId:Ref<string>
			form:Ref<string>
			nodeApproverUserIdList:Ref<NodeApprover>[]
			nodeApproverOpenIdList:Ref<NodeApprover>[]
			nodeCcUserIdList:Ref<NodeCc>[]
			nodeCcOpenIdList:Ref<NodeCc>[]
			uuid:Ref<string>
			allowResubmit:Ref<bool>
			allowSubmitAgain:Ref<bool>
			cancelBotNotification:Ref<string>
			forbidRevoke:Ref<bool>
			i18nResources:Ref<I18nResource>[]
			title:Ref<string>
			titleDisplayMethod:Ref<int>
			nodeAutoApprovalList:Ref<NodeAutoApproval>[]
	}
	export interface InstanceCreateBuilder extends Struct<InstanceCreateBuilder>{

			approvalCode(approvalCode:string):Ref<InstanceCreateBuilder>
			userId(userId:string):Ref<InstanceCreateBuilder>
			openId(openId:string):Ref<InstanceCreateBuilder>
			departmentId(departmentId:string):Ref<InstanceCreateBuilder>
			form(form:string):Ref<InstanceCreateBuilder>
			nodeApproverUserIdList(nodeApproverUserIdList:Ref<NodeApprover>[]):Ref<InstanceCreateBuilder>
			nodeApproverOpenIdList(nodeApproverOpenIdList:Ref<NodeApprover>[]):Ref<InstanceCreateBuilder>
			nodeCcUserIdList(nodeCcUserIdList:Ref<NodeCc>[]):Ref<InstanceCreateBuilder>
			nodeCcOpenIdList(nodeCcOpenIdList:Ref<NodeCc>[]):Ref<InstanceCreateBuilder>
			uuid(uuid:string):Ref<InstanceCreateBuilder>
			allowResubmit(allowResubmit:bool):Ref<InstanceCreateBuilder>
			allowSubmitAgain(allowSubmitAgain:bool):Ref<InstanceCreateBuilder>
			cancelBotNotification(cancelBotNotification:string):Ref<InstanceCreateBuilder>
			forbidRevoke(forbidRevoke:bool):Ref<InstanceCreateBuilder>
			i18nResources(i18nResources:Ref<I18nResource>[]):Ref<InstanceCreateBuilder>
			title(title:string):Ref<InstanceCreateBuilder>
			titleDisplayMethod(titleDisplayMethod:int):Ref<InstanceCreateBuilder>
			nodeAutoApprovalList(nodeAutoApprovalList:Ref<NodeAutoApproval>[]):Ref<InstanceCreateBuilder>
			build():Ref<InstanceCreate>
	}
	export interface InstanceDetailScenarioContext extends Struct<InstanceDetailScenarioContext>{

			object:Ref<ObjectContext>
			extra:Ref<MyAiInstanceDetailExtra>
	}
	export interface InstanceDetailScenarioContextBuilder extends Struct<InstanceDetailScenarioContextBuilder>{

			object(object:Ref<ObjectContext>):Ref<InstanceDetailScenarioContextBuilder>
			extra(extra:Ref<MyAiInstanceDetailExtra>):Ref<InstanceDetailScenarioContextBuilder>
			build():Ref<InstanceDetailScenarioContext>
	}
	export interface InstanceSearch extends Struct<InstanceSearch>{

			userId:Ref<string>
			approvalCode:Ref<string>
			instanceCode:Ref<string>
			instanceExternalId:Ref<string>
			groupExternalId:Ref<string>
			instanceTitle:Ref<string>
			instanceStatus:Ref<string>
			instanceStartTimeFrom:Ref<string>
			instanceStartTimeTo:Ref<string>
			locale:Ref<string>
	}
	export interface InstanceSearchApproval extends Struct<InstanceSearchApproval>{

			code:Ref<string>
			name:Ref<string>
			isExternal:Ref<bool>
			external:Ref<InstanceSearchApprovalExternal>
			approvalId:Ref<string>
			icon:Ref<string>
	}
	export interface InstanceSearchApprovalBuilder extends Struct<InstanceSearchApprovalBuilder>{

			code(code:string):Ref<InstanceSearchApprovalBuilder>
			name(name:string):Ref<InstanceSearchApprovalBuilder>
			isExternal(isExternal:bool):Ref<InstanceSearchApprovalBuilder>
			external(external:Ref<InstanceSearchApprovalExternal>):Ref<InstanceSearchApprovalBuilder>
			approvalId(approvalId:string):Ref<InstanceSearchApprovalBuilder>
			icon(icon:string):Ref<InstanceSearchApprovalBuilder>
			build():Ref<InstanceSearchApproval>
	}
	export interface InstanceSearchApprovalExternal extends Struct<InstanceSearchApprovalExternal>{

			batchCcRead:Ref<bool>
	}
	export interface InstanceSearchApprovalExternalBuilder extends Struct<InstanceSearchApprovalExternalBuilder>{

			batchCcRead(batchCcRead:bool):Ref<InstanceSearchApprovalExternalBuilder>
			build():Ref<InstanceSearchApprovalExternal>
	}
	export interface InstanceSearchBuilder extends Struct<InstanceSearchBuilder>{

			userId(userId:string):Ref<InstanceSearchBuilder>
			approvalCode(approvalCode:string):Ref<InstanceSearchBuilder>
			instanceCode(instanceCode:string):Ref<InstanceSearchBuilder>
			instanceExternalId(instanceExternalId:string):Ref<InstanceSearchBuilder>
			groupExternalId(groupExternalId:string):Ref<InstanceSearchBuilder>
			instanceTitle(instanceTitle:string):Ref<InstanceSearchBuilder>
			instanceStatus(instanceStatus:string):Ref<InstanceSearchBuilder>
			instanceStartTimeFrom(instanceStartTimeFrom:string):Ref<InstanceSearchBuilder>
			instanceStartTimeTo(instanceStartTimeTo:string):Ref<InstanceSearchBuilder>
			locale(locale:string):Ref<InstanceSearchBuilder>
			build():Ref<InstanceSearch>
	}
	export interface InstanceSearchGroup extends Struct<InstanceSearchGroup>{

			externalId:Ref<string>
			name:Ref<string>
	}
	export interface InstanceSearchGroupBuilder extends Struct<InstanceSearchGroupBuilder>{

			externalId(externalId:string):Ref<InstanceSearchGroupBuilder>
			name(name:string):Ref<InstanceSearchGroupBuilder>
			build():Ref<InstanceSearchGroup>
	}
	export interface InstanceSearchItem extends Struct<InstanceSearchItem>{

			approval:Ref<InstanceSearchApproval>
			group:Ref<InstanceSearchGroup>
			instance:Ref<InstanceSearchNode>
	}
	export interface InstanceSearchItemBuilder extends Struct<InstanceSearchItemBuilder>{

			approval(approval:Ref<InstanceSearchApproval>):Ref<InstanceSearchItemBuilder>
			group(group:Ref<InstanceSearchGroup>):Ref<InstanceSearchItemBuilder>
			instance(instance:Ref<InstanceSearchNode>):Ref<InstanceSearchItemBuilder>
			build():Ref<InstanceSearchItem>
	}
	export interface InstanceSearchLink extends Struct<InstanceSearchLink>{

			pcLink:Ref<string>
			mobileLink:Ref<string>
	}
	export interface InstanceSearchLinkBuilder extends Struct<InstanceSearchLinkBuilder>{

			pcLink(pcLink:string):Ref<InstanceSearchLinkBuilder>
			mobileLink(mobileLink:string):Ref<InstanceSearchLinkBuilder>
			build():Ref<InstanceSearchLink>
	}
	export interface InstanceSearchNode extends Struct<InstanceSearchNode>{

			code:Ref<string>
			externalId:Ref<string>
			userId:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			status:Ref<string>
			title:Ref<string>
			extra:Ref<string>
			serialId:Ref<string>
			link:Ref<InstanceSearchLink>
	}
	export interface InstanceSearchNodeBuilder extends Struct<InstanceSearchNodeBuilder>{

			code(code:string):Ref<InstanceSearchNodeBuilder>
			externalId(externalId:string):Ref<InstanceSearchNodeBuilder>
			userId(userId:string):Ref<InstanceSearchNodeBuilder>
			startTime(startTime:string):Ref<InstanceSearchNodeBuilder>
			endTime(endTime:string):Ref<InstanceSearchNodeBuilder>
			status(status:string):Ref<InstanceSearchNodeBuilder>
			title(title:string):Ref<InstanceSearchNodeBuilder>
			extra(extra:string):Ref<InstanceSearchNodeBuilder>
			serialId(serialId:string):Ref<InstanceSearchNodeBuilder>
			link(link:Ref<InstanceSearchLink>):Ref<InstanceSearchNodeBuilder>
			build():Ref<InstanceSearchNode>
	}
	//"ALL"
	export const InstanceStatusAll:string
	//"APPROVED"
	export const InstanceStatusApproverd:string
	//"DELETED"
	export const InstanceStatusDeleted:string
	//"PENDING"
	export const InstanceStatusPending:string
	//"RECALL"
	export const InstanceStatusRecall:string
	//"REJECT"
	export const InstanceStatusReject:string
	export interface InstanceTask extends Struct<InstanceTask>{

			id:Ref<string>
			userId:Ref<string>
			openId:Ref<string>
			status:Ref<string>
			nodeId:Ref<string>
			nodeName:Ref<string>
			customNodeId:Ref<string>
			type:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
	}
	export interface InstanceTaskBuilder extends Struct<InstanceTaskBuilder>{

			id(id:string):Ref<InstanceTaskBuilder>
			userId(userId:string):Ref<InstanceTaskBuilder>
			openId(openId:string):Ref<InstanceTaskBuilder>
			status(status:string):Ref<InstanceTaskBuilder>
			nodeId(nodeId:string):Ref<InstanceTaskBuilder>
			nodeName(nodeName:string):Ref<InstanceTaskBuilder>
			customNodeId(customNodeId:string):Ref<InstanceTaskBuilder>
			type(type_:string):Ref<InstanceTaskBuilder>
			startTime(startTime:string):Ref<InstanceTaskBuilder>
			endTime(endTime:string):Ref<InstanceTaskBuilder>
			build():Ref<InstanceTask>
	}
	export interface InstanceTimeline extends Struct<InstanceTimeline>{

			type:Ref<string>
			createTime:Ref<string>
			userId:Ref<string>
			openId:Ref<string>
			userIdList:string[]
			openIdList:string[]
			taskId:Ref<string>
			comment:Ref<string>
			ccUserList:Ref<InstanceCcUser>[]
			ext:Ref<string>
			nodeKey:Ref<string>
			files:Ref<File>[]
	}
	export interface InstanceTimelineBuilder extends Struct<InstanceTimelineBuilder>{

			type(type_:string):Ref<InstanceTimelineBuilder>
			createTime(createTime:string):Ref<InstanceTimelineBuilder>
			userId(userId:string):Ref<InstanceTimelineBuilder>
			openId(openId:string):Ref<InstanceTimelineBuilder>
			userIdList(userIdList:string[]):Ref<InstanceTimelineBuilder>
			openIdList(openIdList:string[]):Ref<InstanceTimelineBuilder>
			taskId(taskId:string):Ref<InstanceTimelineBuilder>
			comment(comment:string):Ref<InstanceTimelineBuilder>
			ccUserList(ccUserList:Ref<InstanceCcUser>[]):Ref<InstanceTimelineBuilder>
			ext(ext:string):Ref<InstanceTimelineBuilder>
			nodeKey(nodeKey:string):Ref<InstanceTimelineBuilder>
			files(files:Ref<File>[]):Ref<InstanceTimelineBuilder>
			build():Ref<InstanceTimeline>
	}
	export interface ListExternalTaskIterator extends Struct<ListExternalTaskIterator>{

			next():[bool,Ref<ExternalTaskList>]
			nextPageToken():Ref<string>
	}
	export interface ListExternalTaskPathReqBodyBuilder extends Struct<ListExternalTaskPathReqBodyBuilder>{

			approvalCodes(approvalCodes:string[]):Ref<ListExternalTaskPathReqBodyBuilder>
			instanceIds(instanceIds:string[]):Ref<ListExternalTaskPathReqBodyBuilder>
			userIds(userIds:string[]):Ref<ListExternalTaskPathReqBodyBuilder>
			status(status:string):Ref<ListExternalTaskPathReqBodyBuilder>
			build():Ref<ListExternalTaskReqBody>
	}
	export interface ListExternalTaskReq extends Struct<ListExternalTaskReq>{

			body:Ref<ListExternalTaskReqBody>
			limit:int
	}
	export interface ListExternalTaskReqBody extends Struct<ListExternalTaskReqBody>{

			approvalCodes:string[]
			instanceIds:string[]
			userIds:string[]
			status:Ref<string>
	}
	export interface ListExternalTaskReqBodyBuilder extends Struct<ListExternalTaskReqBodyBuilder>{

			approvalCodes(approvalCodes:string[]):Ref<ListExternalTaskReqBodyBuilder>
			instanceIds(instanceIds:string[]):Ref<ListExternalTaskReqBodyBuilder>
			userIds(userIds:string[]):Ref<ListExternalTaskReqBodyBuilder>
			status(status:string):Ref<ListExternalTaskReqBodyBuilder>
			build():Ref<ListExternalTaskReqBody>
	}
	export interface ListExternalTaskReqBuilder extends Struct<ListExternalTaskReqBuilder>{

			limit(limit:int):Ref<ListExternalTaskReqBuilder>
			pageSize(pageSize:int):Ref<ListExternalTaskReqBuilder>
			pageToken(pageToken:string):Ref<ListExternalTaskReqBuilder>
			body(body:Ref<ListExternalTaskReqBody>):Ref<ListExternalTaskReqBuilder>
			build():Ref<ListExternalTaskReq>
	}
	export interface ListExternalTaskResp extends Struct<ListExternalTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListExternalTaskRespData>
			success():bool
	}
	export interface ListExternalTaskRespData extends Struct<ListExternalTaskRespData>{

			data:Ref<ExternalTaskList>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListInstanceCommentReq extends Struct<ListInstanceCommentReq>{

	}
	export interface ListInstanceCommentReqBuilder extends Struct<ListInstanceCommentReqBuilder>{

			instanceId(instanceId:string):Ref<ListInstanceCommentReqBuilder>
			userIdType(userIdType:string):Ref<ListInstanceCommentReqBuilder>
			userId(userId:string):Ref<ListInstanceCommentReqBuilder>
			pageToken(pageToken:string):Ref<ListInstanceCommentReqBuilder>
			pageSize(pageSize:int):Ref<ListInstanceCommentReqBuilder>
			build():Ref<ListInstanceCommentReq>
	}
	export interface ListInstanceCommentResp extends Struct<ListInstanceCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListInstanceCommentRespData>
			success():bool
	}
	export interface ListInstanceCommentRespData extends Struct<ListInstanceCommentRespData>{

			comments:Ref<Comment>[]
	}
	export interface ListInstanceIterator extends Struct<ListInstanceIterator>{

			next():[bool,string]
			nextPageToken():Ref<string>
	}
	export interface ListInstanceReq extends Struct<ListInstanceReq>{

			limit:int
	}
	export interface ListInstanceReqBuilder extends Struct<ListInstanceReqBuilder>{

			limit(limit:int):Ref<ListInstanceReqBuilder>
			pageSize(pageSize:int):Ref<ListInstanceReqBuilder>
			pageToken(pageToken:string):Ref<ListInstanceReqBuilder>
			approvalCode(approvalCode:string):Ref<ListInstanceReqBuilder>
			startTime(startTime:string):Ref<ListInstanceReqBuilder>
			endTime(endTime:string):Ref<ListInstanceReqBuilder>
			build():Ref<ListInstanceReq>
	}
	export interface ListInstanceResp extends Struct<ListInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListInstanceRespData>
			success():bool
	}
	export interface ListInstanceRespData extends Struct<ListInstanceRespData>{

			instanceCodeList:string[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	//"en-US"
	export const LocaleEnus:string
	//"en-US"
	export const LocaleGetInstanceEnus:string
	//"ja-JP"
	export const LocaleGetInstanceJajp:string
	//"zh-CN"
	export const LocaleGetInstanceZhcn:string
	//"ja-JP"
	export const LocaleJajp:string
	//"en-US"
	export const LocaleQueryInstanceEnUs:string
	//"ja-JP"
	export const LocaleQueryInstanceJaJp:string
	//"zh-CN"
	export const LocaleQueryInstanceZhCn:string
	//"en-US"
	export const LocaleSearchCcInstanceEnUs:string
	//"ja-JP"
	export const LocaleSearchCcInstanceJaJp:string
	//"zh-CN"
	export const LocaleSearchCcInstanceZhCn:string
	//"en-US"
	export const LocaleSearchTaskEnUs:string
	//"ja-JP"
	export const LocaleSearchTaskJaJp:string
	//"zh-CN"
	export const LocaleSearchTaskZhCn:string
	//"zh-CN"
	export const LocaleZhcn:string
	export interface ManageableDefinition extends Struct<ManageableDefinition>{

			approvalCode:Ref<string>
			approvalName:Ref<string>
			approvalStatus:Ref<string>
			approvalAdminIds:string[]
	}
	export interface ManageableDefinitionBuilder extends Struct<ManageableDefinitionBuilder>{

			approvalCode(approvalCode:string):Ref<ManageableDefinitionBuilder>
			approvalName(approvalName:string):Ref<ManageableDefinitionBuilder>
			approvalStatus(approvalStatus:string):Ref<ManageableDefinitionBuilder>
			approvalAdminIds(approvalAdminIds:string[]):Ref<ManageableDefinitionBuilder>
			build():Ref<ManageableDefinition>
	}
	export interface ManageableInstanceItem extends Struct<ManageableInstanceItem>{

			instance:Ref<ManageableInstanceNode>
	}
	export interface ManageableInstanceItemBuilder extends Struct<ManageableInstanceItemBuilder>{

			instance(instance:Ref<ManageableInstanceNode>):Ref<ManageableInstanceItemBuilder>
			build():Ref<ManageableInstanceItem>
	}
	export interface ManageableInstanceNode extends Struct<ManageableInstanceNode>{

			code:Ref<string>
			startUserId:Ref<string>
			currentUserIds:string[]
			departmentId:Ref<string>
			nodeName:Ref<string>
			form:Ref<string>
			version:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			status:Ref<string>
			serialId:Ref<string>
			statusDisplay:Ref<string>
	}
	export interface ManageableInstanceNodeBuilder extends Struct<ManageableInstanceNodeBuilder>{

			code(code:string):Ref<ManageableInstanceNodeBuilder>
			startUserId(startUserId:string):Ref<ManageableInstanceNodeBuilder>
			currentUserIds(currentUserIds:string[]):Ref<ManageableInstanceNodeBuilder>
			departmentId(departmentId:string):Ref<ManageableInstanceNodeBuilder>
			nodeName(nodeName:string):Ref<ManageableInstanceNodeBuilder>
			form(form:string):Ref<ManageableInstanceNodeBuilder>
			version(version:string):Ref<ManageableInstanceNodeBuilder>
			startTime(startTime:string):Ref<ManageableInstanceNodeBuilder>
			endTime(endTime:string):Ref<ManageableInstanceNodeBuilder>
			status(status:string):Ref<ManageableInstanceNodeBuilder>
			serialId(serialId:string):Ref<ManageableInstanceNodeBuilder>
			statusDisplay(statusDisplay:string):Ref<ManageableInstanceNodeBuilder>
			build():Ref<ManageableInstanceNode>
	}
	export interface Message extends Struct<Message>{

			id:Ref<string>
			receiveId:Ref<string>
			content:Ref<string>
			msgType:Ref<string>
			config:Ref<string>
			extra:Ref<string>
			uuid:Ref<string>
	}
	export interface MessageBuilder extends Struct<MessageBuilder>{

			id(id:string):Ref<MessageBuilder>
			receiveId(receiveId:string):Ref<MessageBuilder>
			content(content:string):Ref<MessageBuilder>
			msgType(msgType:string):Ref<MessageBuilder>
			config(config:string):Ref<MessageBuilder>
			extra(extra:string):Ref<MessageBuilder>
			uuid(uuid:string):Ref<MessageBuilder>
			build():Ref<Message>
	}
	export interface MyAiCardAction extends Struct<MyAiCardAction>{

			tag:Ref<string>
			value:Ref<MyAiCardValue>
	}
	export interface MyAiCardActionBuilder extends Struct<MyAiCardActionBuilder>{

			tag(tag:string):Ref<MyAiCardActionBuilder>
			value(value:Ref<MyAiCardValue>):Ref<MyAiCardActionBuilder>
			build():Ref<MyAiCardAction>
	}
	export interface MyAiCardValue extends Struct<MyAiCardValue>{

			body:Ref<string>
			handle:Ref<string>
	}
	export interface MyAiCardValueBuilder extends Struct<MyAiCardValueBuilder>{

			body(body:string):Ref<MyAiCardValueBuilder>
			handle(handle:string):Ref<MyAiCardValueBuilder>
			build():Ref<MyAiCardValue>
	}
	export interface MyAiComment extends Struct<MyAiComment>{

			userName:Ref<string>
			comment:Ref<string>
	}
	export interface MyAiCommentBuilder extends Struct<MyAiCommentBuilder>{

			userName(userName:string):Ref<MyAiCommentBuilder>
			comment(comment:string):Ref<MyAiCommentBuilder>
			build():Ref<MyAiComment>
	}
	export interface MyAiInstance extends Struct<MyAiInstance>{

			name:Ref<string>
			form:Ref<string>
			tasks:Ref<MyAiTask>[]
			comments:Ref<MyAiComment>[]
	}
	export interface MyAiInstanceBuilder extends Struct<MyAiInstanceBuilder>{

			name(name:string):Ref<MyAiInstanceBuilder>
			form(form:string):Ref<MyAiInstanceBuilder>
			tasks(tasks:Ref<MyAiTask>[]):Ref<MyAiInstanceBuilder>
			comments(comments:Ref<MyAiComment>[]):Ref<MyAiInstanceBuilder>
			build():Ref<MyAiInstance>
	}
	export interface MyAiInstanceDetailExtra extends Struct<MyAiInstanceDetailExtra>{

			instanceId:Ref<string>
	}
	export interface MyAiInstanceDetailExtraBuilder extends Struct<MyAiInstanceDetailExtraBuilder>{

			instanceId(instanceId:string):Ref<MyAiInstanceDetailExtraBuilder>
			build():Ref<MyAiInstanceDetailExtra>
	}
	export interface MyAiMessageCallbackRequest extends Struct<MyAiMessageCallbackRequest>{

			messageId:Ref<string>
			callbackInfo:Ref<string>
	}
	export interface MyAiMessageCallbackRequestBuilder extends Struct<MyAiMessageCallbackRequestBuilder>{

			messageId(messageId:string):Ref<MyAiMessageCallbackRequestBuilder>
			callbackInfo(callbackInfo:string):Ref<MyAiMessageCallbackRequestBuilder>
			build():Ref<MyAiMessageCallbackRequest>
	}
	export interface MyAiObjectScenarioContext extends Struct<MyAiObjectScenarioContext>{

			object:Ref<ObjectContext>
	}
	export interface MyAiObjectScenarioContextBuilder extends Struct<MyAiObjectScenarioContextBuilder>{

			object(object:Ref<ObjectContext>):Ref<MyAiObjectScenarioContextBuilder>
			build():Ref<MyAiObjectScenarioContext>
	}
	export interface MyAiPresent extends Struct<MyAiPresent>{

			type:Ref<string>
			body:Ref<string>
			callbackUrl:Ref<string>
			callbackInfo:Ref<string>
			cardTemplateId:Ref<string>
			cardVariables:Ref<MyAiPresentCardVariables>
			interactable:Ref<bool>
			operationType:Ref<string>
			operationUrl:Ref<string>
	}
	export interface MyAiPresentBuilder extends Struct<MyAiPresentBuilder>{

			type(type_:string):Ref<MyAiPresentBuilder>
			body(body:string):Ref<MyAiPresentBuilder>
			callbackUrl(callbackUrl:string):Ref<MyAiPresentBuilder>
			callbackInfo(callbackInfo:string):Ref<MyAiPresentBuilder>
			cardTemplateId(cardTemplateId:string):Ref<MyAiPresentBuilder>
			cardVariables(cardVariables:Ref<MyAiPresentCardVariables>):Ref<MyAiPresentBuilder>
			interactable(interactable:bool):Ref<MyAiPresentBuilder>
			operationType(operationType:string):Ref<MyAiPresentBuilder>
			operationUrl(operationUrl:string):Ref<MyAiPresentBuilder>
			build():Ref<MyAiPresent>
	}
	export interface MyAiPresentCardVariables extends Struct<MyAiPresentCardVariables>{

			prologue:Ref<string>
			quickActions:Ref<string>
	}
	export interface MyAiPresentCardVariablesBuilder extends Struct<MyAiPresentCardVariablesBuilder>{

			prologue(prologue:string):Ref<MyAiPresentCardVariablesBuilder>
			quickActions(quickActions:string):Ref<MyAiPresentCardVariablesBuilder>
			build():Ref<MyAiPresentCardVariables>
	}
	export interface MyAiSimpleCommandResult extends Struct<MyAiSimpleCommandResult>{

			content:Ref<string>
	}
	export interface MyAiSimpleCommandResultBuilder extends Struct<MyAiSimpleCommandResultBuilder>{

			content(content:string):Ref<MyAiSimpleCommandResultBuilder>
			build():Ref<MyAiSimpleCommandResult>
	}
	export interface MyAiTask extends Struct<MyAiTask>{

			userName:Ref<string>
			type:Ref<string>
			nodeName:Ref<string>
	}
	export interface MyAiTaskBuilder extends Struct<MyAiTaskBuilder>{

			userName(userName:string):Ref<MyAiTaskBuilder>
			type(type_:string):Ref<MyAiTaskBuilder>
			nodeName(nodeName:string):Ref<MyAiTaskBuilder>
			build():Ref<MyAiTask>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V4>

	export function newActionConfigBuilder():Ref<ActionConfigBuilder>

	export function newAddSignInstancePathReqBodyBuilder():Ref<AddSignInstancePathReqBodyBuilder>

	export function newAddSignInstanceReqBodyBuilder():Ref<AddSignInstanceReqBodyBuilder>

	export function newAddSignInstanceReqBuilder():Ref<AddSignInstanceReqBuilder>

	export function newApprovalApproverCcerBuilder():Ref<ApprovalApproverCcerBuilder>

	export function newApprovalBuilder():Ref<ApprovalBuilder>

	export function newApprovalConfigBuilder():Ref<ApprovalConfigBuilder>

	export function newApprovalCreateBuilder():Ref<ApprovalCreateBuilder>

	export function newApprovalCreateExternalBuilder():Ref<ApprovalCreateExternalBuilder>

	export function newApprovalCreateViewersBuilder():Ref<ApprovalCreateViewersBuilder>

	export function newApprovalEventBuilder():Ref<ApprovalEventBuilder>

	export function newApprovalFormBuilder():Ref<ApprovalFormBuilder>

	export function newApprovalNodeBuilder():Ref<ApprovalNodeBuilder>

	export function newApprovalNodeInfoBuilder():Ref<ApprovalNodeInfoBuilder>

	export function newApprovalSettingBuilder():Ref<ApprovalSettingBuilder>

	export function newApprovalViewerBuilder():Ref<ApprovalViewerBuilder>

	export function newApprovalViewerInfoBuilder():Ref<ApprovalViewerInfoBuilder>

	export function newApproveTaskReqBuilder():Ref<ApproveTaskReqBuilder>

	export function newApproverChosenRangeBuilder():Ref<ApproverChosenRangeBuilder>

	export function newApproverRangeBuilder():Ref<ApproverRangeBuilder>

	export function newCancelInstanceReqBuilder():Ref<CancelInstanceReqBuilder>

	export function newCcInstanceReqBuilder():Ref<CcInstanceReqBuilder>

	export function newCcNodeBuilder():Ref<CcNodeBuilder>

	export function newCcSearchBuilder():Ref<CcSearchBuilder>

	export function newCcSearchItemBuilder():Ref<CcSearchItemBuilder>

	export function newCcSearchNodeBuilder():Ref<CcSearchNodeBuilder>

	export function newCheckExternalInstancePathReqBodyBuilder():Ref<CheckExternalInstancePathReqBodyBuilder>

	export function newCheckExternalInstanceReqBodyBuilder():Ref<CheckExternalInstanceReqBodyBuilder>

	export function newCheckExternalInstanceReqBuilder():Ref<CheckExternalInstanceReqBuilder>

	export function newCommentAtInfoBuilder():Ref<CommentAtInfoBuilder>

	export function newCommentBuilder():Ref<CommentBuilder>

	export function newCommentReplyBuilder():Ref<CommentReplyBuilder>

	export function newCommentRequestBuilder():Ref<CommentRequestBuilder>

	export function newConnectorLogBuilder():Ref<ConnectorLogBuilder>

	export function newConnectorLogDataBuilder():Ref<ConnectorLogDataBuilder>

	export function newCountBuilder():Ref<CountBuilder>

	export function newCreateApprovalReqBuilder():Ref<CreateApprovalReqBuilder>

	export function newCreateExternalApprovalReqBuilder():Ref<CreateExternalApprovalReqBuilder>

	export function newCreateExternalInstanceReqBuilder():Ref<CreateExternalInstanceReqBuilder>

	export function newCreateInstanceCommentReqBuilder():Ref<CreateInstanceCommentReqBuilder>

	export function newCreateInstanceReqBuilder():Ref<CreateInstanceReqBuilder>

	export function newDefinitionBuilder():Ref<DefinitionBuilder>

	export function newDeleteInstanceCommentReqBuilder():Ref<DeleteInstanceCommentReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newExteranlInstanceCheckBuilder():Ref<ExteranlInstanceCheckBuilder>

	export function newExteranlInstanceCheckResponseBuilder():Ref<ExteranlInstanceCheckResponseBuilder>

	export function newExternalApprovalBuilder():Ref<ExternalApprovalBuilder>

	export function newExternalInstanceBuilder():Ref<ExternalInstanceBuilder>

	export function newExternalInstanceFormBuilder():Ref<ExternalInstanceFormBuilder>

	export function newExternalInstanceLinkBuilder():Ref<ExternalInstanceLinkBuilder>

	export function newExternalInstanceTaskBuilder():Ref<ExternalInstanceTaskBuilder>

	export function newExternalInstanceTaskNodeBuilder():Ref<ExternalInstanceTaskNodeBuilder>

	export function newExternalTaskItemBuilder():Ref<ExternalTaskItemBuilder>

	export function newExternalTaskListBuilder():Ref<ExternalTaskListBuilder>

	export function newFieldGroupBuilder():Ref<FieldGroupBuilder>

	export function newFileBuilder():Ref<FileBuilder>

	export function newFileUrlBuilder():Ref<FileUrlBuilder>

	export function newGetApprovalReqBuilder():Ref<GetApprovalReqBuilder>

	export function newGetExternalApprovalReqBuilder():Ref<GetExternalApprovalReqBuilder>

	export function newGetInstanceReqBuilder():Ref<GetInstanceReqBuilder>

	export function newI18nResourceBuilder():Ref<I18nResourceBuilder>

	export function newI18nResourceTextBuilder():Ref<I18nResourceTextBuilder>

	export function newInstanceBuilder():Ref<InstanceBuilder>

	export function newInstanceCancelBuilder():Ref<InstanceCancelBuilder>

	export function newInstanceCcBuilder():Ref<InstanceCcBuilder>

	export function newInstanceCcUserBuilder():Ref<InstanceCcUserBuilder>

	export function newInstanceCommentBuilder():Ref<InstanceCommentBuilder>

	export function newInstanceCreateBuilder():Ref<InstanceCreateBuilder>

	export function newInstanceDetailScenarioContextBuilder():Ref<InstanceDetailScenarioContextBuilder>

	export function newInstanceSearchApprovalBuilder():Ref<InstanceSearchApprovalBuilder>

	export function newInstanceSearchApprovalExternalBuilder():Ref<InstanceSearchApprovalExternalBuilder>

	export function newInstanceSearchBuilder():Ref<InstanceSearchBuilder>

	export function newInstanceSearchGroupBuilder():Ref<InstanceSearchGroupBuilder>

	export function newInstanceSearchItemBuilder():Ref<InstanceSearchItemBuilder>

	export function newInstanceSearchLinkBuilder():Ref<InstanceSearchLinkBuilder>

	export function newInstanceSearchNodeBuilder():Ref<InstanceSearchNodeBuilder>

	export function newInstanceTaskBuilder():Ref<InstanceTaskBuilder>

	export function newInstanceTimelineBuilder():Ref<InstanceTimelineBuilder>

	export function newListExternalTaskPathReqBodyBuilder():Ref<ListExternalTaskPathReqBodyBuilder>

	export function newListExternalTaskReqBodyBuilder():Ref<ListExternalTaskReqBodyBuilder>

	export function newListExternalTaskReqBuilder():Ref<ListExternalTaskReqBuilder>

	export function newListInstanceCommentReqBuilder():Ref<ListInstanceCommentReqBuilder>

	export function newListInstanceReqBuilder():Ref<ListInstanceReqBuilder>

	export function newManageableDefinitionBuilder():Ref<ManageableDefinitionBuilder>

	export function newManageableInstanceItemBuilder():Ref<ManageableInstanceItemBuilder>

	export function newManageableInstanceNodeBuilder():Ref<ManageableInstanceNodeBuilder>

	export function newMessageBuilder():Ref<MessageBuilder>

	export function newMyAiCardActionBuilder():Ref<MyAiCardActionBuilder>

	export function newMyAiCardValueBuilder():Ref<MyAiCardValueBuilder>

	export function newMyAiCommentBuilder():Ref<MyAiCommentBuilder>

	export function newMyAiInstanceBuilder():Ref<MyAiInstanceBuilder>

	export function newMyAiInstanceDetailExtraBuilder():Ref<MyAiInstanceDetailExtraBuilder>

	export function newMyAiMessageCallbackRequestBuilder():Ref<MyAiMessageCallbackRequestBuilder>

	export function newMyAiObjectScenarioContextBuilder():Ref<MyAiObjectScenarioContextBuilder>

	export function newMyAiPresentBuilder():Ref<MyAiPresentBuilder>

	export function newMyAiPresentCardVariablesBuilder():Ref<MyAiPresentCardVariablesBuilder>

	export function newMyAiSimpleCommandResultBuilder():Ref<MyAiSimpleCommandResultBuilder>

	export function newMyAiTaskBuilder():Ref<MyAiTaskBuilder>

	export function newNodeApproverBuilder():Ref<NodeApproverBuilder>

	export function newNodeAutoApprovalBuilder():Ref<NodeAutoApprovalBuilder>

	export function newNodeCcBuilder():Ref<NodeCcBuilder>

	export function newObjectContextBuilder():Ref<ObjectContextBuilder>

	export function newP1LeaveApprovalV4Handler(v1:(v2:context.Context,v1:Ref<P1LeaveApprovalV4>)=>void/*error*/):Ref<P1LeaveApprovalV4Handler>

	export function newP1OutApprovalV4Handler(v1:(v2:context.Context,v1:Ref<P1OutApprovalV4>)=>void/*error*/):Ref<P1OutApprovalV4Handler>

	export function newP1RemedyApprovalV4Handler(v1:(v2:context.Context,v1:Ref<P1RemedyApprovalV4>)=>void/*error*/):Ref<P1RemedyApprovalV4Handler>

	export function newP1ShiftApprovalV4Handler(v1:(v2:context.Context,v1:Ref<P1ShiftApprovalV4>)=>void/*error*/):Ref<P1ShiftApprovalV4Handler>

	export function newP1TripApprovalV4Handler(v1:(v2:context.Context,v1:Ref<P1TripApprovalV4>)=>void/*error*/):Ref<P1TripApprovalV4Handler>

	export function newP1WorkApprovalV4Handler(v1:(v2:context.Context,v1:Ref<P1WorkApprovalV4>)=>void/*error*/):Ref<P1WorkApprovalV4Handler>

	export function newP2ApprovalUpdatedV4Handler(v1:(v2:context.Context,v1:Ref<P2ApprovalUpdatedV4>)=>void/*error*/):Ref<P2ApprovalUpdatedV4Handler>

	export function newPreviewInstancePathReqBodyBuilder():Ref<PreviewInstancePathReqBodyBuilder>

	export function newPreviewInstanceReqBodyBuilder():Ref<PreviewInstanceReqBodyBuilder>

	export function newPreviewInstanceReqBuilder():Ref<PreviewInstanceReqBuilder>

	export function newPreviewNodeBuilder():Ref<PreviewNodeBuilder>

	export function newQueryInstanceReqBuilder():Ref<QueryInstanceReqBuilder>

	export function newQueryTaskReqBuilder():Ref<QueryTaskReqBuilder>

	export function newReasonBuilder():Ref<ReasonBuilder>

	export function newRejectTaskReqBuilder():Ref<RejectTaskReqBuilder>

	export function newRemedyGroupBuilder():Ref<RemedyGroupBuilder>

	export function newRemoveInstanceCommentReqBuilder():Ref<RemoveInstanceCommentReqBuilder>

	export function newResubmitTaskReqBuilder():Ref<ResubmitTaskReqBuilder>

	export function newRevertEventBuilder():Ref<RevertEventBuilder>

	export function newRollbackNodeBuilder():Ref<RollbackNodeBuilder>

	export function newSearchCcInstanceReqBuilder():Ref<SearchCcInstanceReqBuilder>

	export function newSearchTaskReqBuilder():Ref<SearchTaskReqBuilder>

	export function newShiftGroupBuilder():Ref<ShiftGroupBuilder>

	export function newSignGroupBuilder():Ref<SignGroupBuilder>

	export function newSpecifiedRollbackBuilder():Ref<SpecifiedRollbackBuilder>

	export function newSpecifiedRollbackInstanceReqBuilder():Ref<SpecifiedRollbackInstanceReqBuilder>

	export function newSubscribeApprovalReqBuilder():Ref<SubscribeApprovalReqBuilder>

	export function newSwapShiftDetailBuilder():Ref<SwapShiftDetailBuilder>

	export function newTaskApproveBuilder():Ref<TaskApproveBuilder>

	export function newTaskBuilder():Ref<TaskBuilder>

	export function newTaskResubmitBuilder():Ref<TaskResubmitBuilder>

	export function newTaskRollbackBuilder():Ref<TaskRollbackBuilder>

	export function newTaskSearchBuilder():Ref<TaskSearchBuilder>

	export function newTaskSearchItemBuilder():Ref<TaskSearchItemBuilder>

	export function newTaskSearchNodeBuilder():Ref<TaskSearchNodeBuilder>

	export function newTaskTransferBuilder():Ref<TaskTransferBuilder>

	export function newTaskUrlsBuilder():Ref<TaskUrlsBuilder>

	export function newTransferTaskReqBuilder():Ref<TransferTaskReqBuilder>

	export function newTripGroupBuilder():Ref<TripGroupBuilder>

	export function newTripGroupScheduleBuilder():Ref<TripGroupScheduleBuilder>

	export function newTrusteeshipInstanceCacheConfigBuilder():Ref<TrusteeshipInstanceCacheConfigBuilder>

	export function newTrusteeshipUrlsBuilder():Ref<TrusteeshipUrlsBuilder>

	export function newUnsubscribeApprovalReqBuilder():Ref<UnsubscribeApprovalReqBuilder>

	export function newUrlDetailBuilder():Ref<UrlDetailBuilder>

	export function newUserBuilder():Ref<UserBuilder>

	export function newUserIdBuilder():Ref<UserIdBuilder>

	export interface NodeApprover extends Struct<NodeApprover>{

			key:Ref<string>
			value:string[]
	}
	export interface NodeApproverBuilder extends Struct<NodeApproverBuilder>{

			key(key:string):Ref<NodeApproverBuilder>
			value(value:string[]):Ref<NodeApproverBuilder>
			build():Ref<NodeApprover>
	}
	export interface NodeAutoApproval extends Struct<NodeAutoApproval>{

			nodeIdType:Ref<string>
			nodeId:Ref<string>
	}
	export interface NodeAutoApprovalBuilder extends Struct<NodeAutoApprovalBuilder>{

			nodeIdType(nodeIdType:string):Ref<NodeAutoApprovalBuilder>
			nodeId(nodeId:string):Ref<NodeAutoApprovalBuilder>
			build():Ref<NodeAutoApproval>
	}
	export interface NodeCc extends Struct<NodeCc>{

			key:Ref<string>
			value:string[]
	}
	export interface NodeCcBuilder extends Struct<NodeCcBuilder>{

			key(key:string):Ref<NodeCcBuilder>
			value(value:string[]):Ref<NodeCcBuilder>
			build():Ref<NodeCc>
	}
	export interface ObjectContext extends Struct<ObjectContext>{

			type:Ref<string>
			bizId:Ref<string>
	}
	export interface ObjectContextBuilder extends Struct<ObjectContextBuilder>{

			type(type_:string):Ref<ObjectContextBuilder>
			bizId(bizId:string):Ref<ObjectContextBuilder>
			build():Ref<ObjectContext>
	}
	//3
	export const OrderStartTimeASC:int
	//2
	export const OrderStartTimeDESC:int
	//1
	export const OrderUpdateTimeASC:int
	//0
	export const OrderUpdateTimeDESC:int
	export interface P1LeaveApprovalI18nResourceV4 extends Struct<P1LeaveApprovalI18nResourceV4>{

			locale:string
			isDefault:bool
			texts:map<string,string>
	}
	export interface P1LeaveApprovalV4 extends Struct<P1LeaveApprovalV4>,larkevent.EventHandlerModel{

			eventReq:Ref<larkevent.EventReq>
			eventBase:Ref<larkevent.EventBase>
			event:Ref<P1LeaveApprovalV4Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1LeaveApprovalV4Data extends Struct<P1LeaveApprovalV4Data>{

			appID:string
			tenantKey:string
			type:string
			instanceCode:string
			userID:string
			openID:string
			originInstanceCode:string
			startTime:int64
			endTime:int64
			leaveFeedingArriveLate:int64
			leaveFeedingLeaveEarly:int64
			leaveFeedingRestDaily:int64
			leaveName:string
			leaveUnit:string
			leaveStartTime:string
			leaveEndTime:string
			leaveDetail:string[]
			leaveRange:string[]
			leaveInterval:int64
			leaveReason:string
			i18nResources:Ref<P1LeaveApprovalI18nResourceV4>[]
	}
	export interface P1LeaveApprovalV4Handler extends Struct<P1LeaveApprovalV4Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1OutApprovalI18nResourceV4 extends Struct<P1OutApprovalI18nResourceV4>{

			isDefault:bool
			locale:string
			texts:map<string,string>
	}
	export interface P1OutApprovalV4 extends Struct<P1OutApprovalV4>,larkevent.EventHandlerModel{

			eventReq:Ref<larkevent.EventReq>
			eventBase:Ref<larkevent.EventBase>
			event:Ref<P1OutApprovalV4Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1OutApprovalV4Data extends Struct<P1OutApprovalV4Data>{

			appID:string
			i18nResources:Ref<P1OutApprovalI18nResourceV4>[]
			instanceCode:string
			outImage:string
			outInterval:int64
			outName:string
			outReason:string
			outStartTime:string
			outEndTime:string
			outUnit:string
			startTime:int64
			endTime:int64
			tenantKey:string
			type:string
			openID:string
			userID:string
	}
	export interface P1OutApprovalV4Handler extends Struct<P1OutApprovalV4Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1RemedyApprovalV4 extends Struct<P1RemedyApprovalV4>,larkevent.EventHandlerModel{

			eventReq:Ref<larkevent.EventReq>
			eventBase:Ref<larkevent.EventBase>
			event:Ref<P1RemedyApprovalV4Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1RemedyApprovalV4Data extends Struct<P1RemedyApprovalV4Data>{

			appID:string
			tenantKey:string
			type:string
			instanceCode:string
			employeeID:string
			openID:string
			startTime:int64
			endTime:int64
			remedyTime:string
			remedyReason:string
	}
	export interface P1RemedyApprovalV4Handler extends Struct<P1RemedyApprovalV4Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1ShiftApprovalV4 extends Struct<P1ShiftApprovalV4>,larkevent.EventHandlerModel{

			eventReq:Ref<larkevent.EventReq>
			eventBase:Ref<larkevent.EventBase>
			event:Ref<P1ShiftApprovalV4Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1ShiftApprovalV4Data extends Struct<P1ShiftApprovalV4Data>{

			appID:string
			tenantKey:string
			type:string
			instanceCode:string
			employeeID:string
			openID:string
			startTime:int64
			endTime:int64
			shiftTime:string
			returnTime:string
			shiftReason:string
	}
	export interface P1ShiftApprovalV4Handler extends larkevent.EventHandler,Struct<P1ShiftApprovalV4Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1TripApprovalScheduleV4 extends Struct<P1TripApprovalScheduleV4>{

			tripStartTime:string
			tripEndTime:string
			tripInterval:int64
			departure:string
			destination:string
			transportation:string
			tripType:string
			remark:string
	}
	export interface P1TripApprovalTripPeerV4 extends Struct<P1TripApprovalTripPeerV4>{

	}
	export interface P1TripApprovalV4 extends Struct<P1TripApprovalV4>,larkevent.EventHandlerModel{

			eventReq:Ref<larkevent.EventReq>
			eventBase:Ref<larkevent.EventBase>
			event:Ref<P1TripApprovalV4Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1TripApprovalV4Data extends Struct<P1TripApprovalV4Data>{

			appID:string
			tenantKey:string
			type:string
			instanceCode:string
			employeeID:string
			openID:string
			startTime:int64
			endTime:int64
			schedules:Ref<P1TripApprovalScheduleV4>[]
			tripInterval:int64
			tripReason:string
			tripPeers:string[]
	}
	export interface P1TripApprovalV4Handler extends larkevent.EventHandler,Struct<P1TripApprovalV4Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1WorkApprovalV4 extends Struct<P1WorkApprovalV4>,larkevent.EventHandlerModel{

			eventReq:Ref<larkevent.EventReq>
			eventBase:Ref<larkevent.EventBase>
			event:Ref<P1WorkApprovalV4Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1WorkApprovalV4Data extends Struct<P1WorkApprovalV4Data>{

			appID:string
			tenantKey:string
			type:string
			instanceCode:string
			employeeID:string
			openID:string
			startTime:int64
			endTime:int64
			workType:string
			workStartTime:string
			workEndTime:string
			workInterval:int64
			workReason:string
	}
	export interface P1WorkApprovalV4Handler extends Struct<P1WorkApprovalV4Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2ApprovalUpdatedV4 extends Struct<P2ApprovalUpdatedV4>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2ApprovalUpdatedV4Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2ApprovalUpdatedV4Data extends Struct<P2ApprovalUpdatedV4Data>{

			object:Ref<ApprovalEvent>
	}
	export interface P2ApprovalUpdatedV4Handler extends Struct<P2ApprovalUpdatedV4Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface PreviewInstancePathReqBodyBuilder extends Struct<PreviewInstancePathReqBodyBuilder>{

			userId(userId:string):Ref<PreviewInstancePathReqBodyBuilder>
			approvalCode(approvalCode:string):Ref<PreviewInstancePathReqBodyBuilder>
			departmentId(departmentId:string):Ref<PreviewInstancePathReqBodyBuilder>
			form(form:string):Ref<PreviewInstancePathReqBodyBuilder>
			instanceCode(instanceCode:string):Ref<PreviewInstancePathReqBodyBuilder>
			locale(locale:string):Ref<PreviewInstancePathReqBodyBuilder>
			taskId(taskId:string):Ref<PreviewInstancePathReqBodyBuilder>
			build():Ref<PreviewInstanceReqBody>
	}
	export interface PreviewInstanceReq extends Struct<PreviewInstanceReq>{

			body:Ref<PreviewInstanceReqBody>
	}
	export interface PreviewInstanceReqBody extends Struct<PreviewInstanceReqBody>{

			userId:Ref<string>
			approvalCode:Ref<string>
			departmentId:Ref<string>
			form:Ref<string>
			instanceCode:Ref<string>
			locale:Ref<string>
			taskId:Ref<string>
	}
	export interface PreviewInstanceReqBodyBuilder extends Struct<PreviewInstanceReqBodyBuilder>{

			userId(userId:string):Ref<PreviewInstanceReqBodyBuilder>
			approvalCode(approvalCode:string):Ref<PreviewInstanceReqBodyBuilder>
			departmentId(departmentId:string):Ref<PreviewInstanceReqBodyBuilder>
			form(form:string):Ref<PreviewInstanceReqBodyBuilder>
			instanceCode(instanceCode:string):Ref<PreviewInstanceReqBodyBuilder>
			locale(locale:string):Ref<PreviewInstanceReqBodyBuilder>
			taskId(taskId:string):Ref<PreviewInstanceReqBodyBuilder>
			build():Ref<PreviewInstanceReqBody>
	}
	export interface PreviewInstanceReqBuilder extends Struct<PreviewInstanceReqBuilder>{

			userIdType(userIdType:string):Ref<PreviewInstanceReqBuilder>
			body(body:Ref<PreviewInstanceReqBody>):Ref<PreviewInstanceReqBuilder>
			build():Ref<PreviewInstanceReq>
	}
	export interface PreviewInstanceResp extends Struct<PreviewInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PreviewInstanceRespData>
			success():bool
	}
	export interface PreviewInstanceRespData extends Struct<PreviewInstanceRespData>{

			previewNodes:Ref<PreviewNode>[]
	}
	export interface PreviewNode extends Struct<PreviewNode>{

			nodeId:Ref<string>
			nodeName:Ref<string>
			nodeType:Ref<string>
			comments:string[]
			customNodeId:Ref<string>
			userIdList:string[]
			endCcIdList:string[]
			isEmptyLogic:Ref<bool>
			isApproverTypeFree:Ref<bool>
			hasCcTypeFree:Ref<bool>
	}
	export interface PreviewNodeBuilder extends Struct<PreviewNodeBuilder>{

			nodeId(nodeId:string):Ref<PreviewNodeBuilder>
			nodeName(nodeName:string):Ref<PreviewNodeBuilder>
			nodeType(nodeType:string):Ref<PreviewNodeBuilder>
			comments(comments:string[]):Ref<PreviewNodeBuilder>
			customNodeId(customNodeId:string):Ref<PreviewNodeBuilder>
			userIdList(userIdList:string[]):Ref<PreviewNodeBuilder>
			endCcIdList(endCcIdList:string[]):Ref<PreviewNodeBuilder>
			isEmptyLogic(isEmptyLogic:bool):Ref<PreviewNodeBuilder>
			isApproverTypeFree(isApproverTypeFree:bool):Ref<PreviewNodeBuilder>
			hasCcTypeFree(hasCcTypeFree:bool):Ref<PreviewNodeBuilder>
			build():Ref<PreviewNode>
	}
	export interface QueryInstanceIterator extends Struct<QueryInstanceIterator>{

			next():[bool,Ref<InstanceSearchItem>]
			nextPageToken():Ref<string>
	}
	export interface QueryInstanceReq extends Struct<QueryInstanceReq>{

			instanceSearch:Ref<InstanceSearch>
			limit:int
	}
	export interface QueryInstanceReqBuilder extends Struct<QueryInstanceReqBuilder>{

			limit(limit:int):Ref<QueryInstanceReqBuilder>
			pageSize(pageSize:int):Ref<QueryInstanceReqBuilder>
			pageToken(pageToken:string):Ref<QueryInstanceReqBuilder>
			userIdType(userIdType:string):Ref<QueryInstanceReqBuilder>
			instanceSearch(instanceSearch:Ref<InstanceSearch>):Ref<QueryInstanceReqBuilder>
			build():Ref<QueryInstanceReq>
	}
	export interface QueryInstanceResp extends Struct<QueryInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryInstanceRespData>
			success():bool
	}
	export interface QueryInstanceRespData extends Struct<QueryInstanceRespData>{

			count:Ref<int>
			instanceList:Ref<InstanceSearchItem>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface QueryTaskIterator extends Struct<QueryTaskIterator>{

			next():[bool,Ref<Task>]
			nextPageToken():Ref<string>
	}
	export interface QueryTaskReq extends Struct<QueryTaskReq>{

			limit:int
	}
	export interface QueryTaskReqBuilder extends Struct<QueryTaskReqBuilder>{

			limit(limit:int):Ref<QueryTaskReqBuilder>
			pageSize(pageSize:int):Ref<QueryTaskReqBuilder>
			pageToken(pageToken:string):Ref<QueryTaskReqBuilder>
			userId(userId:string):Ref<QueryTaskReqBuilder>
			topic(topic:string):Ref<QueryTaskReqBuilder>
			userIdType(userIdType:string):Ref<QueryTaskReqBuilder>
			build():Ref<QueryTaskReq>
	}
	export interface QueryTaskResp extends Struct<QueryTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryTaskRespData>
			success():bool
	}
	export interface QueryTaskRespData extends Struct<QueryTaskRespData>{

			tasks:Ref<Task>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
			count:Ref<Count>
	}
	//"ALL"
	export const ReadStatusALL:string
	//"READ"
	export const ReadStatusREAD:string
	//"UNREAD"
	export const ReadStatusUNREAD:string
	export interface Reason extends Struct<Reason>{

			text:Ref<string>
			files:Ref<File>[]
	}
	export interface ReasonBuilder extends Struct<ReasonBuilder>{

			text(text:string):Ref<ReasonBuilder>
			files(files:Ref<File>[]):Ref<ReasonBuilder>
			build():Ref<Reason>
	}
	export interface RejectTaskReq extends Struct<RejectTaskReq>{

			taskApprove:Ref<TaskApprove>
	}
	export interface RejectTaskReqBuilder extends Struct<RejectTaskReqBuilder>{

			userIdType(userIdType:string):Ref<RejectTaskReqBuilder>
			taskApprove(taskApprove:Ref<TaskApprove>):Ref<RejectTaskReqBuilder>
			build():Ref<RejectTaskReq>
	}
	export interface RejectTaskResp extends Struct<RejectTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface RemedyGroup extends Struct<RemedyGroup>{

			type:Ref<string>
			instanceCode:Ref<string>
			employeeId:Ref<string>
			startTime:Ref<int>
			endTime:Ref<int>
			remedyTime:Ref<int>
			remedyReason:Ref<string>
			status:Ref<string>
	}
	export interface RemedyGroupBuilder extends Struct<RemedyGroupBuilder>{

			type(type_:string):Ref<RemedyGroupBuilder>
			instanceCode(instanceCode:string):Ref<RemedyGroupBuilder>
			employeeId(employeeId:string):Ref<RemedyGroupBuilder>
			startTime(startTime:int):Ref<RemedyGroupBuilder>
			endTime(endTime:int):Ref<RemedyGroupBuilder>
			remedyTime(remedyTime:int):Ref<RemedyGroupBuilder>
			remedyReason(remedyReason:string):Ref<RemedyGroupBuilder>
			status(status:string):Ref<RemedyGroupBuilder>
			build():Ref<RemedyGroup>
	}
	export interface RemoveInstanceCommentReq extends Struct<RemoveInstanceCommentReq>{

	}
	export interface RemoveInstanceCommentReqBuilder extends Struct<RemoveInstanceCommentReqBuilder>{

			instanceId(instanceId:string):Ref<RemoveInstanceCommentReqBuilder>
			userIdType(userIdType:string):Ref<RemoveInstanceCommentReqBuilder>
			userId(userId:string):Ref<RemoveInstanceCommentReqBuilder>
			build():Ref<RemoveInstanceCommentReq>
	}
	export interface RemoveInstanceCommentResp extends Struct<RemoveInstanceCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<RemoveInstanceCommentRespData>
			success():bool
	}
	export interface RemoveInstanceCommentRespData extends Struct<RemoveInstanceCommentRespData>{

			instanceId:Ref<string>
			externalId:Ref<string>
	}
	export interface ResubmitTaskReq extends Struct<ResubmitTaskReq>{

			taskResubmit:Ref<TaskResubmit>
	}
	export interface ResubmitTaskReqBuilder extends Struct<ResubmitTaskReqBuilder>{

			userIdType(userIdType:string):Ref<ResubmitTaskReqBuilder>
			taskResubmit(taskResubmit:Ref<TaskResubmit>):Ref<ResubmitTaskReqBuilder>
			build():Ref<ResubmitTaskReq>
	}
	export interface ResubmitTaskResp extends Struct<ResubmitTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface RevertEvent extends Struct<RevertEvent>{

			type:Ref<string>
			instanceCode:Ref<string>
			operateTime:Ref<string>
			status:Ref<string>
	}
	export interface RevertEventBuilder extends Struct<RevertEventBuilder>{

			type(type_:string):Ref<RevertEventBuilder>
			instanceCode(instanceCode:string):Ref<RevertEventBuilder>
			operateTime(operateTime:string):Ref<RevertEventBuilder>
			status(status:string):Ref<RevertEventBuilder>
			build():Ref<RevertEvent>
	}
	export interface RollbackNode extends Struct<RollbackNode>{

			nodeId:Ref<string>
			nodeName:Ref<string>
			customNodeId:Ref<string>
			nodeKey:Ref<string>
	}
	export interface RollbackNodeBuilder extends Struct<RollbackNodeBuilder>{

			nodeId(nodeId:string):Ref<RollbackNodeBuilder>
			nodeName(nodeName:string):Ref<RollbackNodeBuilder>
			customNodeId(customNodeId:string):Ref<RollbackNodeBuilder>
			nodeKey(nodeKey:string):Ref<RollbackNodeBuilder>
			build():Ref<RollbackNode>
	}
	export interface SearchCcInstanceReq extends Struct<SearchCcInstanceReq>{

			ccSearch:Ref<CcSearch>
	}
	export interface SearchCcInstanceReqBuilder extends Struct<SearchCcInstanceReqBuilder>{

			pageSize(pageSize:int):Ref<SearchCcInstanceReqBuilder>
			pageToken(pageToken:string):Ref<SearchCcInstanceReqBuilder>
			userIdType(userIdType:string):Ref<SearchCcInstanceReqBuilder>
			ccSearch(ccSearch:Ref<CcSearch>):Ref<SearchCcInstanceReqBuilder>
			build():Ref<SearchCcInstanceReq>
	}
	export interface SearchCcInstanceResp extends Struct<SearchCcInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SearchCcInstanceRespData>
			success():bool
	}
	export interface SearchCcInstanceRespData extends Struct<SearchCcInstanceRespData>{

			count:Ref<int>
			ccList:Ref<CcSearchItem>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface SearchTaskReq extends Struct<SearchTaskReq>{

			taskSearch:Ref<TaskSearch>
	}
	export interface SearchTaskReqBuilder extends Struct<SearchTaskReqBuilder>{

			pageSize(pageSize:int):Ref<SearchTaskReqBuilder>
			pageToken(pageToken:string):Ref<SearchTaskReqBuilder>
			userIdType(userIdType:string):Ref<SearchTaskReqBuilder>
			taskSearch(taskSearch:Ref<TaskSearch>):Ref<SearchTaskReqBuilder>
			build():Ref<SearchTaskReq>
	}
	export interface SearchTaskResp extends Struct<SearchTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SearchTaskRespData>
			success():bool
	}
	export interface SearchTaskRespData extends Struct<SearchTaskRespData>{

			count:Ref<int>
			taskList:Ref<TaskSearchItem>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ShiftGroup extends Struct<ShiftGroup>{

			type:Ref<string>
			instanceCode:Ref<string>
			userId:Ref<string>
			swapShiftUserId:Ref<string>
			startTime:Ref<int>
			endTime:Ref<int>
			shiftReason:Ref<string>
			swapShiftDetails:Ref<SwapShiftDetail>[]
	}
	export interface ShiftGroupBuilder extends Struct<ShiftGroupBuilder>{

			type(type_:string):Ref<ShiftGroupBuilder>
			instanceCode(instanceCode:string):Ref<ShiftGroupBuilder>
			userId(userId:string):Ref<ShiftGroupBuilder>
			swapShiftUserId(swapShiftUserId:string):Ref<ShiftGroupBuilder>
			startTime(startTime:int):Ref<ShiftGroupBuilder>
			endTime(endTime:int):Ref<ShiftGroupBuilder>
			shiftReason(shiftReason:string):Ref<ShiftGroupBuilder>
			swapShiftDetails(swapShiftDetails:Ref<SwapShiftDetail>[]):Ref<ShiftGroupBuilder>
			build():Ref<ShiftGroup>
	}
	export interface SignGroup extends Struct<SignGroup>{

			instanceCode:Ref<string>
			userId:Ref<UserId>
			accountCode:Ref<string>
			boilerplateUniqueCode:Ref<string>
			startTime:Ref<int>
			endTime:Ref<int>
			type:Ref<string>
	}
	export interface SignGroupBuilder extends Struct<SignGroupBuilder>{

			instanceCode(instanceCode:string):Ref<SignGroupBuilder>
			userId(userId:Ref<UserId>):Ref<SignGroupBuilder>
			accountCode(accountCode:string):Ref<SignGroupBuilder>
			boilerplateUniqueCode(boilerplateUniqueCode:string):Ref<SignGroupBuilder>
			startTime(startTime:int):Ref<SignGroupBuilder>
			endTime(endTime:int):Ref<SignGroupBuilder>
			type(type_:string):Ref<SignGroupBuilder>
			build():Ref<SignGroup>
	}
	export interface SpecifiedRollback extends Struct<SpecifiedRollback>{

			userId:Ref<string>
			taskId:Ref<string>
			reason:Ref<string>
			extra:Ref<string>
			taskDefKeyList:string[]
	}
	export interface SpecifiedRollbackBuilder extends Struct<SpecifiedRollbackBuilder>{

			userId(userId:string):Ref<SpecifiedRollbackBuilder>
			taskId(taskId:string):Ref<SpecifiedRollbackBuilder>
			reason(reason:string):Ref<SpecifiedRollbackBuilder>
			extra(extra:string):Ref<SpecifiedRollbackBuilder>
			taskDefKeyList(taskDefKeyList:string[]):Ref<SpecifiedRollbackBuilder>
			build():Ref<SpecifiedRollback>
	}
	export interface SpecifiedRollbackInstanceReq extends Struct<SpecifiedRollbackInstanceReq>{

			specifiedRollback:Ref<SpecifiedRollback>
	}
	export interface SpecifiedRollbackInstanceReqBuilder extends Struct<SpecifiedRollbackInstanceReqBuilder>{

			userIdType(userIdType:string):Ref<SpecifiedRollbackInstanceReqBuilder>
			specifiedRollback(specifiedRollback:Ref<SpecifiedRollback>):Ref<SpecifiedRollbackInstanceReqBuilder>
			build():Ref<SpecifiedRollbackInstanceReq>
	}
	export interface SpecifiedRollbackInstanceResp extends Struct<SpecifiedRollbackInstanceResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	//"APPROVED"
	export const StatusApproved:string
	//"CANCELED"
	export const StatusCanceled:string
	//"DELETED"
	export const StatusDeleted:string
	//"HIDDEN"
	export const StatusHidden:string
	//"PENDING"
	export const StatusPending:string
	//"REJECTED"
	export const StatusRejected:string
	//"TERMINATED"
	export const StatusTerminated:string
	export interface SubscribeApprovalReq extends Struct<SubscribeApprovalReq>{

	}
	export interface SubscribeApprovalReqBuilder extends Struct<SubscribeApprovalReqBuilder>{

			approvalCode(approvalCode:string):Ref<SubscribeApprovalReqBuilder>
			build():Ref<SubscribeApprovalReq>
	}
	export interface SubscribeApprovalResp extends Struct<SubscribeApprovalResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface SwapShiftDetail extends Struct<SwapShiftDetail>{

			date:Ref<string>
			returnDate:Ref<string>
			shfitId:Ref<string>
	}
	export interface SwapShiftDetailBuilder extends Struct<SwapShiftDetailBuilder>{

			date(date:string):Ref<SwapShiftDetailBuilder>
			returnDate(returnDate:string):Ref<SwapShiftDetailBuilder>
			shfitId(shfitId:string):Ref<SwapShiftDetailBuilder>
			build():Ref<SwapShiftDetail>
	}
	export interface Task extends Struct<Task>{

			topic:Ref<string>
			userId:Ref<string>
			title:Ref<string>
			urls:Ref<TaskUrls>
			processExternalId:Ref<string>
			taskExternalId:Ref<string>
			status:Ref<string>
			processStatus:Ref<string>
			definitionCode:Ref<string>
			initiators:string[]
			initiatorNames:string[]
			taskId:Ref<string>
			processId:Ref<string>
			processCode:Ref<string>
			definitionGroupId:Ref<string>
			definitionGroupName:Ref<string>
			definitionId:Ref<string>
			definitionName:Ref<string>
	}
	export interface TaskApprove extends Struct<TaskApprove>{

			approvalCode:Ref<string>
			instanceCode:Ref<string>
			userId:Ref<string>
			comment:Ref<string>
			taskId:Ref<string>
			form:Ref<string>
	}
	export interface TaskApproveBuilder extends Struct<TaskApproveBuilder>{

			approvalCode(approvalCode:string):Ref<TaskApproveBuilder>
			instanceCode(instanceCode:string):Ref<TaskApproveBuilder>
			userId(userId:string):Ref<TaskApproveBuilder>
			comment(comment:string):Ref<TaskApproveBuilder>
			taskId(taskId:string):Ref<TaskApproveBuilder>
			form(form:string):Ref<TaskApproveBuilder>
			build():Ref<TaskApprove>
	}
	export interface TaskBuilder extends Struct<TaskBuilder>{

			topic(topic:string):Ref<TaskBuilder>
			userId(userId:string):Ref<TaskBuilder>
			title(title:string):Ref<TaskBuilder>
			urls(urls:Ref<TaskUrls>):Ref<TaskBuilder>
			processExternalId(processExternalId:string):Ref<TaskBuilder>
			taskExternalId(taskExternalId:string):Ref<TaskBuilder>
			status(status:string):Ref<TaskBuilder>
			processStatus(processStatus:string):Ref<TaskBuilder>
			definitionCode(definitionCode:string):Ref<TaskBuilder>
			initiators(initiators:string[]):Ref<TaskBuilder>
			initiatorNames(initiatorNames:string[]):Ref<TaskBuilder>
			taskId(taskId:string):Ref<TaskBuilder>
			processId(processId:string):Ref<TaskBuilder>
			processCode(processCode:string):Ref<TaskBuilder>
			definitionGroupId(definitionGroupId:string):Ref<TaskBuilder>
			definitionGroupName(definitionGroupName:string):Ref<TaskBuilder>
			definitionId(definitionId:string):Ref<TaskBuilder>
			definitionName(definitionName:string):Ref<TaskBuilder>
			build():Ref<Task>
	}
	export interface TaskResubmit extends Struct<TaskResubmit>{

			approvalCode:Ref<string>
			instanceCode:Ref<string>
			userId:Ref<string>
			comment:Ref<string>
			taskId:Ref<string>
			form:Ref<string>
	}
	export interface TaskResubmitBuilder extends Struct<TaskResubmitBuilder>{

			approvalCode(approvalCode:string):Ref<TaskResubmitBuilder>
			instanceCode(instanceCode:string):Ref<TaskResubmitBuilder>
			userId(userId:string):Ref<TaskResubmitBuilder>
			comment(comment:string):Ref<TaskResubmitBuilder>
			taskId(taskId:string):Ref<TaskResubmitBuilder>
			form(form:string):Ref<TaskResubmitBuilder>
			build():Ref<TaskResubmit>
	}
	export interface TaskRollback extends Struct<TaskRollback>{

			userId:Ref<string>
			taskId:Ref<string>
			reason:Ref<string>
			extra:Ref<string>
			taskDefKey:Ref<string>
	}
	export interface TaskRollbackBuilder extends Struct<TaskRollbackBuilder>{

			userId(userId:string):Ref<TaskRollbackBuilder>
			taskId(taskId:string):Ref<TaskRollbackBuilder>
			reason(reason:string):Ref<TaskRollbackBuilder>
			extra(extra:string):Ref<TaskRollbackBuilder>
			taskDefKey(taskDefKey:string):Ref<TaskRollbackBuilder>
			build():Ref<TaskRollback>
	}
	export interface TaskSearch extends Struct<TaskSearch>{

			userId:Ref<string>
			approvalCode:Ref<string>
			instanceCode:Ref<string>
			instanceExternalId:Ref<string>
			groupExternalId:Ref<string>
			taskTitle:Ref<string>
			taskStatus:Ref<string>
			taskStartTimeFrom:Ref<string>
			taskStartTimeTo:Ref<string>
			locale:Ref<string>
			taskStatusList:string[]
			order:Ref<int>
	}
	export interface TaskSearchBuilder extends Struct<TaskSearchBuilder>{

			userId(userId:string):Ref<TaskSearchBuilder>
			approvalCode(approvalCode:string):Ref<TaskSearchBuilder>
			instanceCode(instanceCode:string):Ref<TaskSearchBuilder>
			instanceExternalId(instanceExternalId:string):Ref<TaskSearchBuilder>
			groupExternalId(groupExternalId:string):Ref<TaskSearchBuilder>
			taskTitle(taskTitle:string):Ref<TaskSearchBuilder>
			taskStatus(taskStatus:string):Ref<TaskSearchBuilder>
			taskStartTimeFrom(taskStartTimeFrom:string):Ref<TaskSearchBuilder>
			taskStartTimeTo(taskStartTimeTo:string):Ref<TaskSearchBuilder>
			locale(locale:string):Ref<TaskSearchBuilder>
			taskStatusList(taskStatusList:string[]):Ref<TaskSearchBuilder>
			order(order:int):Ref<TaskSearchBuilder>
			build():Ref<TaskSearch>
	}
	export interface TaskSearchItem extends Struct<TaskSearchItem>{

			approval:Ref<InstanceSearchApproval>
			group:Ref<InstanceSearchGroup>
			instance:Ref<InstanceSearchNode>
			task:Ref<TaskSearchNode>
	}
	export interface TaskSearchItemBuilder extends Struct<TaskSearchItemBuilder>{

			approval(approval:Ref<InstanceSearchApproval>):Ref<TaskSearchItemBuilder>
			group(group:Ref<InstanceSearchGroup>):Ref<TaskSearchItemBuilder>
			instance(instance:Ref<InstanceSearchNode>):Ref<TaskSearchItemBuilder>
			task(task:Ref<TaskSearchNode>):Ref<TaskSearchItemBuilder>
			build():Ref<TaskSearchItem>
	}
	export interface TaskSearchNode extends Struct<TaskSearchNode>{

			userId:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			status:Ref<string>
			title:Ref<string>
			extra:Ref<string>
			link:Ref<InstanceSearchLink>
			taskId:Ref<string>
			updateTime:Ref<string>
			taskExternalId:Ref<string>
	}
	export interface TaskSearchNodeBuilder extends Struct<TaskSearchNodeBuilder>{

			userId(userId:string):Ref<TaskSearchNodeBuilder>
			startTime(startTime:string):Ref<TaskSearchNodeBuilder>
			endTime(endTime:string):Ref<TaskSearchNodeBuilder>
			status(status:string):Ref<TaskSearchNodeBuilder>
			title(title:string):Ref<TaskSearchNodeBuilder>
			extra(extra:string):Ref<TaskSearchNodeBuilder>
			link(link:Ref<InstanceSearchLink>):Ref<TaskSearchNodeBuilder>
			taskId(taskId:string):Ref<TaskSearchNodeBuilder>
			updateTime(updateTime:string):Ref<TaskSearchNodeBuilder>
			taskExternalId(taskExternalId:string):Ref<TaskSearchNodeBuilder>
			build():Ref<TaskSearchNode>
	}
	//"ALL"
	export const TaskStatusALL:string
	//"APPROVED"
	export const TaskStatusApproverd:string
	//"DONE"
	export const TaskStatusDONE:string
	//"PROCESSED"
	export const TaskStatusPROCESSED:string
	//"PENDING"
	export const TaskStatusPending:string
	//"RM_REPEAT"
	export const TaskStatusRMREPEAT:string
	//"REJECTED"
	export const TaskStatusReject:string
	//"TRANSFERRED"
	export const TaskStatusTRANSFERRED:string
	export interface TaskTransfer extends Struct<TaskTransfer>{

			approvalCode:Ref<string>
			instanceCode:Ref<string>
			userId:Ref<string>
			comment:Ref<string>
			transferUserId:Ref<string>
			taskId:Ref<string>
	}
	export interface TaskTransferBuilder extends Struct<TaskTransferBuilder>{

			approvalCode(approvalCode:string):Ref<TaskTransferBuilder>
			instanceCode(instanceCode:string):Ref<TaskTransferBuilder>
			userId(userId:string):Ref<TaskTransferBuilder>
			comment(comment:string):Ref<TaskTransferBuilder>
			transferUserId(transferUserId:string):Ref<TaskTransferBuilder>
			taskId(taskId:string):Ref<TaskTransferBuilder>
			build():Ref<TaskTransfer>
	}
	export interface TaskUrls extends Struct<TaskUrls>{

			helpdesk:Ref<string>
			mobile:Ref<string>
			pc:Ref<string>
	}
	export interface TaskUrlsBuilder extends Struct<TaskUrlsBuilder>{

			helpdesk(helpdesk:string):Ref<TaskUrlsBuilder>
			mobile(mobile:string):Ref<TaskUrlsBuilder>
			pc(pc:string):Ref<TaskUrlsBuilder>
			build():Ref<TaskUrls>
	}
	//0
	export const TitleDisplayMethodDisplayAll:int
	//1
	export const TitleDisplayMethodDisplayInstanceTitle:int
	//"2"
	export const TopicDoneApproval:string
	//"3"
	export const TopicInitiatedApproval:string
	//"18"
	export const TopicReadNotice:string
	//"1"
	export const TopicTodoApproval:string
	//"17"
	export const TopicUnreadNotice:string
	export interface TransferTaskReq extends Struct<TransferTaskReq>{

			taskTransfer:Ref<TaskTransfer>
	}
	export interface TransferTaskReqBuilder extends Struct<TransferTaskReqBuilder>{

			userIdType(userIdType:string):Ref<TransferTaskReqBuilder>
			taskTransfer(taskTransfer:Ref<TaskTransfer>):Ref<TransferTaskReqBuilder>
			build():Ref<TransferTaskReq>
	}
	export interface TransferTaskResp extends Struct<TransferTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface TripGroup extends Struct<TripGroup>{

			type:Ref<string>
			instanceCode:Ref<string>
			startUser:Ref<User>
			startTime:Ref<string>
			endTime:Ref<string>
			tripInterval:Ref<string>
			tripReason:Ref<string>
			schedules:Ref<TripGroupSchedule>[]
			tripPeers:Ref<User>[]
	}
	export interface TripGroupBuilder extends Struct<TripGroupBuilder>{

			type(type_:string):Ref<TripGroupBuilder>
			instanceCode(instanceCode:string):Ref<TripGroupBuilder>
			startUser(startUser:Ref<User>):Ref<TripGroupBuilder>
			startTime(startTime:string):Ref<TripGroupBuilder>
			endTime(endTime:string):Ref<TripGroupBuilder>
			tripInterval(tripInterval:string):Ref<TripGroupBuilder>
			tripReason(tripReason:string):Ref<TripGroupBuilder>
			schedules(schedules:Ref<TripGroupSchedule>[]):Ref<TripGroupBuilder>
			tripPeers(tripPeers:Ref<User>[]):Ref<TripGroupBuilder>
			build():Ref<TripGroup>
	}
	export interface TripGroupSchedule extends Struct<TripGroupSchedule>{

			tripStartTime:Ref<string>
			tripEndTime:Ref<string>
			tripInterval:Ref<string>
			departure:Ref<string>
			destination:Ref<string>
			transportation:Ref<string>
			tripType:Ref<string>
			remark:Ref<string>
			departureId:Ref<string>
			destinationIds:string[]
	}
	export interface TripGroupScheduleBuilder extends Struct<TripGroupScheduleBuilder>{

			tripStartTime(tripStartTime:string):Ref<TripGroupScheduleBuilder>
			tripEndTime(tripEndTime:string):Ref<TripGroupScheduleBuilder>
			tripInterval(tripInterval:string):Ref<TripGroupScheduleBuilder>
			departure(departure:string):Ref<TripGroupScheduleBuilder>
			destination(destination:string):Ref<TripGroupScheduleBuilder>
			transportation(transportation:string):Ref<TripGroupScheduleBuilder>
			tripType(tripType:string):Ref<TripGroupScheduleBuilder>
			remark(remark:string):Ref<TripGroupScheduleBuilder>
			departureId(departureId:string):Ref<TripGroupScheduleBuilder>
			destinationIds(destinationIds:string[]):Ref<TripGroupScheduleBuilder>
			build():Ref<TripGroupSchedule>
	}
	export interface TrusteeshipInstanceCacheConfig extends Struct<TrusteeshipInstanceCacheConfig>{

			formPolicy:Ref<string>
			formVaryWithLocale:Ref<bool>
			formVersion:Ref<string>
	}
	export interface TrusteeshipInstanceCacheConfigBuilder extends Struct<TrusteeshipInstanceCacheConfigBuilder>{

			formPolicy(formPolicy:string):Ref<TrusteeshipInstanceCacheConfigBuilder>
			formVaryWithLocale(formVaryWithLocale:bool):Ref<TrusteeshipInstanceCacheConfigBuilder>
			formVersion(formVersion:string):Ref<TrusteeshipInstanceCacheConfigBuilder>
			build():Ref<TrusteeshipInstanceCacheConfig>
	}
	export interface TrusteeshipUrls extends Struct<TrusteeshipUrls>{

			formDetailUrl:Ref<string>
			actionDefinitionUrl:Ref<string>
			approvalNodeUrl:Ref<string>
			actionCallbackUrl:Ref<string>
			pullBusinessDataUrl:Ref<string>
	}
	export interface TrusteeshipUrlsBuilder extends Struct<TrusteeshipUrlsBuilder>{

			formDetailUrl(formDetailUrl:string):Ref<TrusteeshipUrlsBuilder>
			actionDefinitionUrl(actionDefinitionUrl:string):Ref<TrusteeshipUrlsBuilder>
			approvalNodeUrl(approvalNodeUrl:string):Ref<TrusteeshipUrlsBuilder>
			actionCallbackUrl(actionCallbackUrl:string):Ref<TrusteeshipUrlsBuilder>
			pullBusinessDataUrl(pullBusinessDataUrl:string):Ref<TrusteeshipUrlsBuilder>
			build():Ref<TrusteeshipUrls>
	}
	export interface UnsubscribeApprovalReq extends Struct<UnsubscribeApprovalReq>{

	}
	export interface UnsubscribeApprovalReqBuilder extends Struct<UnsubscribeApprovalReqBuilder>{

			approvalCode(approvalCode:string):Ref<UnsubscribeApprovalReqBuilder>
			build():Ref<UnsubscribeApprovalReq>
	}
	export interface UnsubscribeApprovalResp extends Struct<UnsubscribeApprovalResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	//"REPLACE"
	export const UpdateModeReplace:string
	//"UPDATE"
	export const UpdateModeUpdate:string
	export interface UrlDetail extends Struct<UrlDetail>{

			originUrl:Ref<string>
			url:Ref<string>
			code:Ref<string>
			message:Ref<string>
	}
	export interface UrlDetailBuilder extends Struct<UrlDetailBuilder>{

			originUrl(originUrl:string):Ref<UrlDetailBuilder>
			url(url:string):Ref<UrlDetailBuilder>
			code(code:string):Ref<UrlDetailBuilder>
			message(message:string):Ref<UrlDetailBuilder>
			build():Ref<UrlDetail>
	}
	export interface User extends Struct<User>{

			id:Ref<UserId>
			name:Ref<string>
	}
	export interface UserBuilder extends Struct<UserBuilder>{

			id(id:Ref<UserId>):Ref<UserBuilder>
			name(name:string):Ref<UserBuilder>
			build():Ref<User>
	}
	export interface UserId extends Struct<UserId>{

			userId:Ref<string>
			openId:Ref<string>
			unionId:Ref<string>
	}
	export interface UserIdBuilder extends Struct<UserIdBuilder>{

			userId(userId:string):Ref<UserIdBuilder>
			openId(openId:string):Ref<UserIdBuilder>
			unionId(unionId:string):Ref<UserIdBuilder>
			build():Ref<UserId>
	}
	//"open_id"
	export const UserIdTypeApproveTaskOpenId:string
	//"union_id"
	export const UserIdTypeApproveTaskUnionId:string
	//"user_id"
	export const UserIdTypeApproveTaskUserId:string
	//"open_id"
	export const UserIdTypeCancelInstanceOpenId:string
	//"union_id"
	export const UserIdTypeCancelInstanceUnionId:string
	//"user_id"
	export const UserIdTypeCancelInstanceUserId:string
	//"open_id"
	export const UserIdTypeCcInstanceOpenId:string
	//"union_id"
	export const UserIdTypeCcInstanceUnionId:string
	//"user_id"
	export const UserIdTypeCcInstanceUserId:string
	//"open_id"
	export const UserIdTypeCreateExternalApprovalOpenId:string
	//"union_id"
	export const UserIdTypeCreateExternalApprovalUnionId:string
	//"user_id"
	export const UserIdTypeCreateExternalApprovalUserId:string
	//"open_id"
	export const UserIdTypeCreateInstanceCommentOpenId:string
	//"union_id"
	export const UserIdTypeCreateInstanceCommentUnionId:string
	//"user_id"
	export const UserIdTypeCreateInstanceCommentUserId:string
	//"open_id"
	export const UserIdTypeDeleteInstanceCommentOpenId:string
	//"union_id"
	export const UserIdTypeDeleteInstanceCommentUnionId:string
	//"user_id"
	export const UserIdTypeDeleteInstanceCommentUserId:string
	//"open_id"
	export const UserIdTypeGetApprovalOpenId:string
	//"union_id"
	export const UserIdTypeGetApprovalUnionId:string
	//"user_id"
	export const UserIdTypeGetApprovalUserId:string
	//"open_id"
	export const UserIdTypeGetExternalApprovalOpenId:string
	//"union_id"
	export const UserIdTypeGetExternalApprovalUnionId:string
	//"user_id"
	export const UserIdTypeGetExternalApprovalUserId:string
	//"open_id"
	export const UserIdTypeGetInstanceOpenId:string
	//"union_id"
	export const UserIdTypeGetInstanceUnionId:string
	//"user_id"
	export const UserIdTypeGetInstanceUserId:string
	//"open_id"
	export const UserIdTypeListInstanceCommentOpenId:string
	//"union_id"
	export const UserIdTypeListInstanceCommentUnionId:string
	//"user_id"
	export const UserIdTypeListInstanceCommentUserId:string
	//"open_id"
	export const UserIdTypeOpenId:string
	//"open_id"
	export const UserIdTypePreviewInstanceOpenId:string
	//"union_id"
	export const UserIdTypePreviewInstanceUnionId:string
	//"user_id"
	export const UserIdTypePreviewInstanceUserId:string
	//"open_id"
	export const UserIdTypeQueryInstanceOpenId:string
	//"union_id"
	export const UserIdTypeQueryInstanceUnionId:string
	//"user_id"
	export const UserIdTypeQueryInstanceUserId:string
	//"open_id"
	export const UserIdTypeQueryTaskOpenId:string
	//"union_id"
	export const UserIdTypeQueryTaskUnionId:string
	//"user_id"
	export const UserIdTypeQueryTaskUserId:string
	//"open_id"
	export const UserIdTypeRejectTaskOpenId:string
	//"union_id"
	export const UserIdTypeRejectTaskUnionId:string
	//"user_id"
	export const UserIdTypeRejectTaskUserId:string
	//"open_id"
	export const UserIdTypeRemoveInstanceCommentOpenId:string
	//"union_id"
	export const UserIdTypeRemoveInstanceCommentUnionId:string
	//"user_id"
	export const UserIdTypeRemoveInstanceCommentUserId:string
	//"open_id"
	export const UserIdTypeResubmitTaskOpenId:string
	//"union_id"
	export const UserIdTypeResubmitTaskUnionId:string
	//"user_id"
	export const UserIdTypeResubmitTaskUserId:string
	//"open_id"
	export const UserIdTypeSearchCcInstanceOpenId:string
	//"union_id"
	export const UserIdTypeSearchCcInstanceUnionId:string
	//"user_id"
	export const UserIdTypeSearchCcInstanceUserId:string
	//"open_id"
	export const UserIdTypeSearchTaskOpenId:string
	//"union_id"
	export const UserIdTypeSearchTaskUnionId:string
	//"user_id"
	export const UserIdTypeSearchTaskUserId:string
	//"open_id"
	export const UserIdTypeSpecifiedRollbackInstanceOpenId:string
	//"union_id"
	export const UserIdTypeSpecifiedRollbackInstanceUnionId:string
	//"user_id"
	export const UserIdTypeSpecifiedRollbackInstanceUserId:string
	//"open_id"
	export const UserIdTypeTransferTaskOpenId:string
	//"union_id"
	export const UserIdTypeTransferTaskUnionId:string
	//"user_id"
	export const UserIdTypeTransferTaskUserId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V4 extends Struct<V4>{

			approval:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateApprovalReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateApprovalResp>
				get(ctx:context.Context,req:Ref<GetApprovalReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetApprovalResp>
				subscribe(ctx:context.Context,req:Ref<SubscribeApprovalReq>,...options:larkcore.RequestOptionFunc[]):Ref<SubscribeApprovalResp>
				unsubscribe(ctx:context.Context,req:Ref<UnsubscribeApprovalReq>,...options:larkcore.RequestOptionFunc[]):Ref<UnsubscribeApprovalResp>
			}>
			externalApproval:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateExternalApprovalReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateExternalApprovalResp>
				get(ctx:context.Context,req:Ref<GetExternalApprovalReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetExternalApprovalResp>
			}>
			externalInstance:Ref<{
			
				check(ctx:context.Context,req:Ref<CheckExternalInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<CheckExternalInstanceResp>
				create(ctx:context.Context,req:Ref<CreateExternalInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateExternalInstanceResp>
			}>
			externalTask:Ref<{
			
				list(ctx:context.Context,req:Ref<ListExternalTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListExternalTaskResp>
				listByIterator(ctx:context.Context,req:Ref<ListExternalTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListExternalTaskIterator>
			}>
			instance:Ref<{
			
				addSign(ctx:context.Context,req:Ref<AddSignInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<AddSignInstanceResp>
				cancel(ctx:context.Context,req:Ref<CancelInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<CancelInstanceResp>
				cc(ctx:context.Context,req:Ref<CcInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<CcInstanceResp>
				create(ctx:context.Context,req:Ref<CreateInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateInstanceResp>
				get(ctx:context.Context,req:Ref<GetInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetInstanceResp>
				list(ctx:context.Context,req:Ref<ListInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListInstanceResp>
				listByIterator(ctx:context.Context,req:Ref<ListInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListInstanceIterator>
				preview(ctx:context.Context,req:Ref<PreviewInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<PreviewInstanceResp>
				query(ctx:context.Context,req:Ref<QueryInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryInstanceResp>
				queryByIterator(ctx:context.Context,req:Ref<QueryInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryInstanceIterator>
				searchCc(ctx:context.Context,req:Ref<SearchCcInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchCcInstanceResp>
				specifiedRollback(ctx:context.Context,req:Ref<SpecifiedRollbackInstanceReq>,...options:larkcore.RequestOptionFunc[]):Ref<SpecifiedRollbackInstanceResp>
			}>
			instanceComment:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateInstanceCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateInstanceCommentResp>
				delete(ctx:context.Context,req:Ref<DeleteInstanceCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteInstanceCommentResp>
				list(ctx:context.Context,req:Ref<ListInstanceCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListInstanceCommentResp>
				remove(ctx:context.Context,req:Ref<RemoveInstanceCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<RemoveInstanceCommentResp>
			}>
			task:Ref<{
			
				approve(ctx:context.Context,req:Ref<ApproveTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<ApproveTaskResp>
				query(ctx:context.Context,req:Ref<QueryTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryTaskResp>
				queryByIterator(ctx:context.Context,req:Ref<QueryTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryTaskIterator>
				reject(ctx:context.Context,req:Ref<RejectTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<RejectTaskResp>
				resubmit(ctx:context.Context,req:Ref<ResubmitTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<ResubmitTaskResp>
				search(ctx:context.Context,req:Ref<SearchTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchTaskResp>
				transfer(ctx:context.Context,req:Ref<TransferTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<TransferTaskResp>
			}>
	}
	export function emptyAddSignInstanceReqBody():AddSignInstanceReqBody
	export function emptyRefAddSignInstanceReqBody():Ref<AddSignInstanceReqBody>
	export function refOfAddSignInstanceReqBody(x:AddSignInstanceReqBody,v:Ref<AddSignInstanceReqBody>)
	export function unRefAddSignInstanceReqBody(v:Ref<AddSignInstanceReqBody>):AddSignInstanceReqBody
	export function emptyTransferTaskReq():TransferTaskReq
	export function emptyRefTransferTaskReq():Ref<TransferTaskReq>
	export function refOfTransferTaskReq(x:TransferTaskReq,v:Ref<TransferTaskReq>)
	export function unRefTransferTaskReq(v:Ref<TransferTaskReq>):TransferTaskReq
	export function emptyGetInstanceRespData():GetInstanceRespData
	export function emptyRefGetInstanceRespData():Ref<GetInstanceRespData>
	export function refOfGetInstanceRespData(x:GetInstanceRespData,v:Ref<GetInstanceRespData>)
	export function unRefGetInstanceRespData(v:Ref<GetInstanceRespData>):GetInstanceRespData
	export function emptyInstanceSearchNode():InstanceSearchNode
	export function emptyRefInstanceSearchNode():Ref<InstanceSearchNode>
	export function refOfInstanceSearchNode(x:InstanceSearchNode,v:Ref<InstanceSearchNode>)
	export function unRefInstanceSearchNode(v:Ref<InstanceSearchNode>):InstanceSearchNode
	export function emptyListExternalTaskRespData():ListExternalTaskRespData
	export function emptyRefListExternalTaskRespData():Ref<ListExternalTaskRespData>
	export function refOfListExternalTaskRespData(x:ListExternalTaskRespData,v:Ref<ListExternalTaskRespData>)
	export function unRefListExternalTaskRespData(v:Ref<ListExternalTaskRespData>):ListExternalTaskRespData
	export function emptyListInstanceIterator():ListInstanceIterator
	export function emptyRefListInstanceIterator():Ref<ListInstanceIterator>
	export function refOfListInstanceIterator(x:ListInstanceIterator,v:Ref<ListInstanceIterator>)
	export function unRefListInstanceIterator(v:Ref<ListInstanceIterator>):ListInstanceIterator
	export function emptyP1LeaveApprovalV4Data():P1LeaveApprovalV4Data
	export function emptyRefP1LeaveApprovalV4Data():Ref<P1LeaveApprovalV4Data>
	export function refOfP1LeaveApprovalV4Data(x:P1LeaveApprovalV4Data,v:Ref<P1LeaveApprovalV4Data>)
	export function unRefP1LeaveApprovalV4Data(v:Ref<P1LeaveApprovalV4Data>):P1LeaveApprovalV4Data
	export function emptySearchTaskResp():SearchTaskResp
	export function emptyRefSearchTaskResp():Ref<SearchTaskResp>
	export function refOfSearchTaskResp(x:SearchTaskResp,v:Ref<SearchTaskResp>)
	export function unRefSearchTaskResp(v:Ref<SearchTaskResp>):SearchTaskResp
	export function emptyInstanceSearchApproval():InstanceSearchApproval
	export function emptyRefInstanceSearchApproval():Ref<InstanceSearchApproval>
	export function refOfInstanceSearchApproval(x:InstanceSearchApproval,v:Ref<InstanceSearchApproval>)
	export function unRefInstanceSearchApproval(v:Ref<InstanceSearchApproval>):InstanceSearchApproval
	export function emptyListExternalTaskReq():ListExternalTaskReq
	export function emptyRefListExternalTaskReq():Ref<ListExternalTaskReq>
	export function refOfListExternalTaskReq(x:ListExternalTaskReq,v:Ref<ListExternalTaskReq>)
	export function unRefListExternalTaskReq(v:Ref<ListExternalTaskReq>):ListExternalTaskReq
	export function emptyUserId():UserId
	export function emptyRefUserId():Ref<UserId>
	export function refOfUserId(x:UserId,v:Ref<UserId>)
	export function unRefUserId(v:Ref<UserId>):UserId
	export function emptyAddSignInstanceReq():AddSignInstanceReq
	export function emptyRefAddSignInstanceReq():Ref<AddSignInstanceReq>
	export function refOfAddSignInstanceReq(x:AddSignInstanceReq,v:Ref<AddSignInstanceReq>)
	export function unRefAddSignInstanceReq(v:Ref<AddSignInstanceReq>):AddSignInstanceReq
	export function emptyP1ShiftApprovalV4():P1ShiftApprovalV4
	export function emptyRefP1ShiftApprovalV4():Ref<P1ShiftApprovalV4>
	export function refOfP1ShiftApprovalV4(x:P1ShiftApprovalV4,v:Ref<P1ShiftApprovalV4>)
	export function unRefP1ShiftApprovalV4(v:Ref<P1ShiftApprovalV4>):P1ShiftApprovalV4
	export function emptyTaskResubmit():TaskResubmit
	export function emptyRefTaskResubmit():Ref<TaskResubmit>
	export function refOfTaskResubmit(x:TaskResubmit,v:Ref<TaskResubmit>)
	export function unRefTaskResubmit(v:Ref<TaskResubmit>):TaskResubmit
	export function emptyQueryInstanceIterator():QueryInstanceIterator
	export function emptyRefQueryInstanceIterator():Ref<QueryInstanceIterator>
	export function refOfQueryInstanceIterator(x:QueryInstanceIterator,v:Ref<QueryInstanceIterator>)
	export function unRefQueryInstanceIterator(v:Ref<QueryInstanceIterator>):QueryInstanceIterator
	export function emptyCreateExternalInstanceReq():CreateExternalInstanceReq
	export function emptyRefCreateExternalInstanceReq():Ref<CreateExternalInstanceReq>
	export function refOfCreateExternalInstanceReq(x:CreateExternalInstanceReq,v:Ref<CreateExternalInstanceReq>)
	export function unRefCreateExternalInstanceReq(v:Ref<CreateExternalInstanceReq>):CreateExternalInstanceReq
	export function emptyDeleteInstanceCommentResp():DeleteInstanceCommentResp
	export function emptyRefDeleteInstanceCommentResp():Ref<DeleteInstanceCommentResp>
	export function refOfDeleteInstanceCommentResp(x:DeleteInstanceCommentResp,v:Ref<DeleteInstanceCommentResp>)
	export function unRefDeleteInstanceCommentResp(v:Ref<DeleteInstanceCommentResp>):DeleteInstanceCommentResp
	export function emptyP1WorkApprovalV4Data():P1WorkApprovalV4Data
	export function emptyRefP1WorkApprovalV4Data():Ref<P1WorkApprovalV4Data>
	export function refOfP1WorkApprovalV4Data(x:P1WorkApprovalV4Data,v:Ref<P1WorkApprovalV4Data>)
	export function unRefP1WorkApprovalV4Data(v:Ref<P1WorkApprovalV4Data>):P1WorkApprovalV4Data
	export function emptyRejectTaskResp():RejectTaskResp
	export function emptyRefRejectTaskResp():Ref<RejectTaskResp>
	export function refOfRejectTaskResp(x:RejectTaskResp,v:Ref<RejectTaskResp>)
	export function unRefRejectTaskResp(v:Ref<RejectTaskResp>):RejectTaskResp
	export function emptySubscribeApprovalReq():SubscribeApprovalReq
	export function emptyRefSubscribeApprovalReq():Ref<SubscribeApprovalReq>
	export function refOfSubscribeApprovalReq(x:SubscribeApprovalReq,v:Ref<SubscribeApprovalReq>)
	export function unRefSubscribeApprovalReq(v:Ref<SubscribeApprovalReq>):SubscribeApprovalReq
	export function emptyQueryInstanceResp():QueryInstanceResp
	export function emptyRefQueryInstanceResp():Ref<QueryInstanceResp>
	export function refOfQueryInstanceResp(x:QueryInstanceResp,v:Ref<QueryInstanceResp>)
	export function unRefQueryInstanceResp(v:Ref<QueryInstanceResp>):QueryInstanceResp
	export function emptySpecifiedRollbackInstanceReq():SpecifiedRollbackInstanceReq
	export function emptyRefSpecifiedRollbackInstanceReq():Ref<SpecifiedRollbackInstanceReq>
	export function refOfSpecifiedRollbackInstanceReq(x:SpecifiedRollbackInstanceReq,v:Ref<SpecifiedRollbackInstanceReq>)
	export function unRefSpecifiedRollbackInstanceReq(v:Ref<SpecifiedRollbackInstanceReq>):SpecifiedRollbackInstanceReq
	export function emptyApprovalForm():ApprovalForm
	export function emptyRefApprovalForm():Ref<ApprovalForm>
	export function refOfApprovalForm(x:ApprovalForm,v:Ref<ApprovalForm>)
	export function unRefApprovalForm(v:Ref<ApprovalForm>):ApprovalForm
	export function emptyCcInstanceResp():CcInstanceResp
	export function emptyRefCcInstanceResp():Ref<CcInstanceResp>
	export function refOfCcInstanceResp(x:CcInstanceResp,v:Ref<CcInstanceResp>)
	export function unRefCcInstanceResp(v:Ref<CcInstanceResp>):CcInstanceResp
	export function emptyFieldGroup():FieldGroup
	export function emptyRefFieldGroup():Ref<FieldGroup>
	export function refOfFieldGroup(x:FieldGroup,v:Ref<FieldGroup>)
	export function unRefFieldGroup(v:Ref<FieldGroup>):FieldGroup
	export function emptyMessage():Message
	export function emptyRefMessage():Ref<Message>
	export function refOfMessage(x:Message,v:Ref<Message>)
	export function unRefMessage(v:Ref<Message>):Message
	export function emptyP1RemedyApprovalV4Data():P1RemedyApprovalV4Data
	export function emptyRefP1RemedyApprovalV4Data():Ref<P1RemedyApprovalV4Data>
	export function refOfP1RemedyApprovalV4Data(x:P1RemedyApprovalV4Data,v:Ref<P1RemedyApprovalV4Data>)
	export function unRefP1RemedyApprovalV4Data(v:Ref<P1RemedyApprovalV4Data>):P1RemedyApprovalV4Data
	export function emptyCreateExternalApprovalReq():CreateExternalApprovalReq
	export function emptyRefCreateExternalApprovalReq():Ref<CreateExternalApprovalReq>
	export function refOfCreateExternalApprovalReq(x:CreateExternalApprovalReq,v:Ref<CreateExternalApprovalReq>)
	export function unRefCreateExternalApprovalReq(v:Ref<CreateExternalApprovalReq>):CreateExternalApprovalReq
	export function emptyCreateExternalInstanceRespData():CreateExternalInstanceRespData
	export function emptyRefCreateExternalInstanceRespData():Ref<CreateExternalInstanceRespData>
	export function refOfCreateExternalInstanceRespData(x:CreateExternalInstanceRespData,v:Ref<CreateExternalInstanceRespData>)
	export function unRefCreateExternalInstanceRespData(v:Ref<CreateExternalInstanceRespData>):CreateExternalInstanceRespData
	export function emptyExternalTaskItem():ExternalTaskItem
	export function emptyRefExternalTaskItem():Ref<ExternalTaskItem>
	export function refOfExternalTaskItem(x:ExternalTaskItem,v:Ref<ExternalTaskItem>)
	export function unRefExternalTaskItem(v:Ref<ExternalTaskItem>):ExternalTaskItem
	export function emptyUrlDetail():UrlDetail
	export function emptyRefUrlDetail():Ref<UrlDetail>
	export function refOfUrlDetail(x:UrlDetail,v:Ref<UrlDetail>)
	export function unRefUrlDetail(v:Ref<UrlDetail>):UrlDetail
	export function emptyTaskSearch():TaskSearch
	export function emptyRefTaskSearch():Ref<TaskSearch>
	export function refOfTaskSearch(x:TaskSearch,v:Ref<TaskSearch>)
	export function unRefTaskSearch(v:Ref<TaskSearch>):TaskSearch
	export function emptyCreateExternalApprovalRespData():CreateExternalApprovalRespData
	export function emptyRefCreateExternalApprovalRespData():Ref<CreateExternalApprovalRespData>
	export function refOfCreateExternalApprovalRespData(x:CreateExternalApprovalRespData,v:Ref<CreateExternalApprovalRespData>)
	export function unRefCreateExternalApprovalRespData(v:Ref<CreateExternalApprovalRespData>):CreateExternalApprovalRespData
	export function emptyInstanceCancel():InstanceCancel
	export function emptyRefInstanceCancel():Ref<InstanceCancel>
	export function refOfInstanceCancel(x:InstanceCancel,v:Ref<InstanceCancel>)
	export function unRefInstanceCancel(v:Ref<InstanceCancel>):InstanceCancel
	export function emptyObjectContext():ObjectContext
	export function emptyRefObjectContext():Ref<ObjectContext>
	export function refOfObjectContext(x:ObjectContext,v:Ref<ObjectContext>)
	export function unRefObjectContext(v:Ref<ObjectContext>):ObjectContext
	export function emptyCreateExternalInstanceResp():CreateExternalInstanceResp
	export function emptyRefCreateExternalInstanceResp():Ref<CreateExternalInstanceResp>
	export function refOfCreateExternalInstanceResp(x:CreateExternalInstanceResp,v:Ref<CreateExternalInstanceResp>)
	export function unRefCreateExternalInstanceResp(v:Ref<CreateExternalInstanceResp>):CreateExternalInstanceResp
	export function emptyExternalInstanceTaskNode():ExternalInstanceTaskNode
	export function emptyRefExternalInstanceTaskNode():Ref<ExternalInstanceTaskNode>
	export function refOfExternalInstanceTaskNode(x:ExternalInstanceTaskNode,v:Ref<ExternalInstanceTaskNode>)
	export function unRefExternalInstanceTaskNode(v:Ref<ExternalInstanceTaskNode>):ExternalInstanceTaskNode
	export function emptyGetExternalApprovalReq():GetExternalApprovalReq
	export function emptyRefGetExternalApprovalReq():Ref<GetExternalApprovalReq>
	export function refOfGetExternalApprovalReq(x:GetExternalApprovalReq,v:Ref<GetExternalApprovalReq>)
	export function unRefGetExternalApprovalReq(v:Ref<GetExternalApprovalReq>):GetExternalApprovalReq
	export function emptyCreateInstanceCommentResp():CreateInstanceCommentResp
	export function emptyRefCreateInstanceCommentResp():Ref<CreateInstanceCommentResp>
	export function refOfCreateInstanceCommentResp(x:CreateInstanceCommentResp,v:Ref<CreateInstanceCommentResp>)
	export function unRefCreateInstanceCommentResp(v:Ref<CreateInstanceCommentResp>):CreateInstanceCommentResp
	export function emptyExternalInstanceTask():ExternalInstanceTask
	export function emptyRefExternalInstanceTask():Ref<ExternalInstanceTask>
	export function refOfExternalInstanceTask(x:ExternalInstanceTask,v:Ref<ExternalInstanceTask>)
	export function unRefExternalInstanceTask(v:Ref<ExternalInstanceTask>):ExternalInstanceTask
	export function emptyGetApprovalResp():GetApprovalResp
	export function emptyRefGetApprovalResp():Ref<GetApprovalResp>
	export function refOfGetApprovalResp(x:GetApprovalResp,v:Ref<GetApprovalResp>)
	export function unRefGetApprovalResp(v:Ref<GetApprovalResp>):GetApprovalResp
	export function emptyRemedyGroup():RemedyGroup
	export function emptyRefRemedyGroup():Ref<RemedyGroup>
	export function refOfRemedyGroup(x:RemedyGroup,v:Ref<RemedyGroup>)
	export function unRefRemedyGroup(v:Ref<RemedyGroup>):RemedyGroup
	export function emptyTaskTransfer():TaskTransfer
	export function emptyRefTaskTransfer():Ref<TaskTransfer>
	export function refOfTaskTransfer(x:TaskTransfer,v:Ref<TaskTransfer>)
	export function unRefTaskTransfer(v:Ref<TaskTransfer>):TaskTransfer
	export function emptyUnsubscribeApprovalReq():UnsubscribeApprovalReq
	export function emptyRefUnsubscribeApprovalReq():Ref<UnsubscribeApprovalReq>
	export function refOfUnsubscribeApprovalReq(x:UnsubscribeApprovalReq,v:Ref<UnsubscribeApprovalReq>)
	export function unRefUnsubscribeApprovalReq(v:Ref<UnsubscribeApprovalReq>):UnsubscribeApprovalReq
	export function emptyCcSearchItem():CcSearchItem
	export function emptyRefCcSearchItem():Ref<CcSearchItem>
	export function refOfCcSearchItem(x:CcSearchItem,v:Ref<CcSearchItem>)
	export function unRefCcSearchItem(v:Ref<CcSearchItem>):CcSearchItem
	export function emptyCreateInstanceRespData():CreateInstanceRespData
	export function emptyRefCreateInstanceRespData():Ref<CreateInstanceRespData>
	export function refOfCreateInstanceRespData(x:CreateInstanceRespData,v:Ref<CreateInstanceRespData>)
	export function unRefCreateInstanceRespData(v:Ref<CreateInstanceRespData>):CreateInstanceRespData
	export function emptyI18nResourceText():I18nResourceText
	export function emptyRefI18nResourceText():Ref<I18nResourceText>
	export function refOfI18nResourceText(x:I18nResourceText,v:Ref<I18nResourceText>)
	export function unRefI18nResourceText(v:Ref<I18nResourceText>):I18nResourceText
	export function emptyP1RemedyApprovalV4():P1RemedyApprovalV4
	export function emptyRefP1RemedyApprovalV4():Ref<P1RemedyApprovalV4>
	export function refOfP1RemedyApprovalV4(x:P1RemedyApprovalV4,v:Ref<P1RemedyApprovalV4>)
	export function unRefP1RemedyApprovalV4(v:Ref<P1RemedyApprovalV4>):P1RemedyApprovalV4
	export function emptyCancelInstanceReq():CancelInstanceReq
	export function emptyRefCancelInstanceReq():Ref<CancelInstanceReq>
	export function refOfCancelInstanceReq(x:CancelInstanceReq,v:Ref<CancelInstanceReq>)
	export function unRefCancelInstanceReq(v:Ref<CancelInstanceReq>):CancelInstanceReq
	export function emptyCcNode():CcNode
	export function emptyRefCcNode():Ref<CcNode>
	export function refOfCcNode(x:CcNode,v:Ref<CcNode>)
	export function unRefCcNode(v:Ref<CcNode>):CcNode
	export function emptyTransferTaskResp():TransferTaskResp
	export function emptyRefTransferTaskResp():Ref<TransferTaskResp>
	export function refOfTransferTaskResp(x:TransferTaskResp,v:Ref<TransferTaskResp>)
	export function unRefTransferTaskResp(v:Ref<TransferTaskResp>):TransferTaskResp
	export function emptyInstanceSearchItem():InstanceSearchItem
	export function emptyRefInstanceSearchItem():Ref<InstanceSearchItem>
	export function refOfInstanceSearchItem(x:InstanceSearchItem,v:Ref<InstanceSearchItem>)
	export function unRefInstanceSearchItem(v:Ref<InstanceSearchItem>):InstanceSearchItem
	export function emptyP1LeaveApprovalV4():P1LeaveApprovalV4
	export function emptyRefP1LeaveApprovalV4():Ref<P1LeaveApprovalV4>
	export function refOfP1LeaveApprovalV4(x:P1LeaveApprovalV4,v:Ref<P1LeaveApprovalV4>)
	export function unRefP1LeaveApprovalV4(v:Ref<P1LeaveApprovalV4>):P1LeaveApprovalV4
	export function emptyInstanceTimeline():InstanceTimeline
	export function emptyRefInstanceTimeline():Ref<InstanceTimeline>
	export function refOfInstanceTimeline(x:InstanceTimeline,v:Ref<InstanceTimeline>)
	export function unRefInstanceTimeline(v:Ref<InstanceTimeline>):InstanceTimeline
	export function emptyApprovalCreateExternal():ApprovalCreateExternal
	export function emptyRefApprovalCreateExternal():Ref<ApprovalCreateExternal>
	export function refOfApprovalCreateExternal(x:ApprovalCreateExternal,v:Ref<ApprovalCreateExternal>)
	export function unRefApprovalCreateExternal(v:Ref<ApprovalCreateExternal>):ApprovalCreateExternal
	export function emptyCheckExternalInstanceRespData():CheckExternalInstanceRespData
	export function emptyRefCheckExternalInstanceRespData():Ref<CheckExternalInstanceRespData>
	export function refOfCheckExternalInstanceRespData(x:CheckExternalInstanceRespData,v:Ref<CheckExternalInstanceRespData>)
	export function unRefCheckExternalInstanceRespData(v:Ref<CheckExternalInstanceRespData>):CheckExternalInstanceRespData
	export function emptyListInstanceCommentRespData():ListInstanceCommentRespData
	export function emptyRefListInstanceCommentRespData():Ref<ListInstanceCommentRespData>
	export function refOfListInstanceCommentRespData(x:ListInstanceCommentRespData,v:Ref<ListInstanceCommentRespData>)
	export function unRefListInstanceCommentRespData(v:Ref<ListInstanceCommentRespData>):ListInstanceCommentRespData
	export function emptyP1TripApprovalScheduleV4():P1TripApprovalScheduleV4
	export function emptyRefP1TripApprovalScheduleV4():Ref<P1TripApprovalScheduleV4>
	export function refOfP1TripApprovalScheduleV4(x:P1TripApprovalScheduleV4,v:Ref<P1TripApprovalScheduleV4>)
	export function unRefP1TripApprovalScheduleV4(v:Ref<P1TripApprovalScheduleV4>):P1TripApprovalScheduleV4
	export function emptyP1TripApprovalV4Data():P1TripApprovalV4Data
	export function emptyRefP1TripApprovalV4Data():Ref<P1TripApprovalV4Data>
	export function refOfP1TripApprovalV4Data(x:P1TripApprovalV4Data,v:Ref<P1TripApprovalV4Data>)
	export function unRefP1TripApprovalV4Data(v:Ref<P1TripApprovalV4Data>):P1TripApprovalV4Data
	export function emptyActionConfig():ActionConfig
	export function emptyRefActionConfig():Ref<ActionConfig>
	export function refOfActionConfig(x:ActionConfig,v:Ref<ActionConfig>)
	export function unRefActionConfig(v:Ref<ActionConfig>):ActionConfig
	export function emptyShiftGroup():ShiftGroup
	export function emptyRefShiftGroup():Ref<ShiftGroup>
	export function refOfShiftGroup(x:ShiftGroup,v:Ref<ShiftGroup>)
	export function unRefShiftGroup(v:Ref<ShiftGroup>):ShiftGroup
	export function emptyTaskSearchNode():TaskSearchNode
	export function emptyRefTaskSearchNode():Ref<TaskSearchNode>
	export function refOfTaskSearchNode(x:TaskSearchNode,v:Ref<TaskSearchNode>)
	export function unRefTaskSearchNode(v:Ref<TaskSearchNode>):TaskSearchNode
	export function emptyDeleteInstanceCommentRespData():DeleteInstanceCommentRespData
	export function emptyRefDeleteInstanceCommentRespData():Ref<DeleteInstanceCommentRespData>
	export function refOfDeleteInstanceCommentRespData(x:DeleteInstanceCommentRespData,v:Ref<DeleteInstanceCommentRespData>)
	export function unRefDeleteInstanceCommentRespData(v:Ref<DeleteInstanceCommentRespData>):DeleteInstanceCommentRespData
	export function emptyExteranlInstanceCheck():ExteranlInstanceCheck
	export function emptyRefExteranlInstanceCheck():Ref<ExteranlInstanceCheck>
	export function refOfExteranlInstanceCheck(x:ExteranlInstanceCheck,v:Ref<ExteranlInstanceCheck>)
	export function unRefExteranlInstanceCheck(v:Ref<ExteranlInstanceCheck>):ExteranlInstanceCheck
	export function emptyListExternalTaskReqBody():ListExternalTaskReqBody
	export function emptyRefListExternalTaskReqBody():Ref<ListExternalTaskReqBody>
	export function refOfListExternalTaskReqBody(x:ListExternalTaskReqBody,v:Ref<ListExternalTaskReqBody>)
	export function unRefListExternalTaskReqBody(v:Ref<ListExternalTaskReqBody>):ListExternalTaskReqBody
	export function emptyMyAiCardAction():MyAiCardAction
	export function emptyRefMyAiCardAction():Ref<MyAiCardAction>
	export function refOfMyAiCardAction(x:MyAiCardAction,v:Ref<MyAiCardAction>)
	export function unRefMyAiCardAction(v:Ref<MyAiCardAction>):MyAiCardAction
	export function emptyNodeCc():NodeCc
	export function emptyRefNodeCc():Ref<NodeCc>
	export function refOfNodeCc(x:NodeCc,v:Ref<NodeCc>)
	export function unRefNodeCc(v:Ref<NodeCc>):NodeCc
	export function emptyCheckExternalInstanceReqBody():CheckExternalInstanceReqBody
	export function emptyRefCheckExternalInstanceReqBody():Ref<CheckExternalInstanceReqBody>
	export function refOfCheckExternalInstanceReqBody(x:CheckExternalInstanceReqBody,v:Ref<CheckExternalInstanceReqBody>)
	export function unRefCheckExternalInstanceReqBody(v:Ref<CheckExternalInstanceReqBody>):CheckExternalInstanceReqBody
	export function emptyCount():Count
	export function emptyRefCount():Ref<Count>
	export function refOfCount(x:Count,v:Ref<Count>)
	export function unRefCount(v:Ref<Count>):Count
	export function emptyMyAiPresent():MyAiPresent
	export function emptyRefMyAiPresent():Ref<MyAiPresent>
	export function refOfMyAiPresent(x:MyAiPresent,v:Ref<MyAiPresent>)
	export function unRefMyAiPresent(v:Ref<MyAiPresent>):MyAiPresent
	export function emptyMyAiSimpleCommandResult():MyAiSimpleCommandResult
	export function emptyRefMyAiSimpleCommandResult():Ref<MyAiSimpleCommandResult>
	export function refOfMyAiSimpleCommandResult(x:MyAiSimpleCommandResult,v:Ref<MyAiSimpleCommandResult>)
	export function unRefMyAiSimpleCommandResult(v:Ref<MyAiSimpleCommandResult>):MyAiSimpleCommandResult
	export function emptyUser():User
	export function emptyRefUser():Ref<User>
	export function refOfUser(x:User,v:Ref<User>)
	export function unRefUser(v:Ref<User>):User
	export function emptyCheckExternalInstanceResp():CheckExternalInstanceResp
	export function emptyRefCheckExternalInstanceResp():Ref<CheckExternalInstanceResp>
	export function refOfCheckExternalInstanceResp(x:CheckExternalInstanceResp,v:Ref<CheckExternalInstanceResp>)
	export function unRefCheckExternalInstanceResp(v:Ref<CheckExternalInstanceResp>):CheckExternalInstanceResp
	export function emptyConnectorLogData():ConnectorLogData
	export function emptyRefConnectorLogData():Ref<ConnectorLogData>
	export function refOfConnectorLogData(x:ConnectorLogData,v:Ref<ConnectorLogData>)
	export function unRefConnectorLogData(v:Ref<ConnectorLogData>):ConnectorLogData
	export function emptyManageableInstanceItem():ManageableInstanceItem
	export function emptyRefManageableInstanceItem():Ref<ManageableInstanceItem>
	export function refOfManageableInstanceItem(x:ManageableInstanceItem,v:Ref<ManageableInstanceItem>)
	export function unRefManageableInstanceItem(v:Ref<ManageableInstanceItem>):ManageableInstanceItem
	export function emptyMyAiTask():MyAiTask
	export function emptyRefMyAiTask():Ref<MyAiTask>
	export function refOfMyAiTask(x:MyAiTask,v:Ref<MyAiTask>)
	export function unRefMyAiTask(v:Ref<MyAiTask>):MyAiTask
	export function emptyRemoveInstanceCommentResp():RemoveInstanceCommentResp
	export function emptyRefRemoveInstanceCommentResp():Ref<RemoveInstanceCommentResp>
	export function refOfRemoveInstanceCommentResp(x:RemoveInstanceCommentResp,v:Ref<RemoveInstanceCommentResp>)
	export function unRefRemoveInstanceCommentResp(v:Ref<RemoveInstanceCommentResp>):RemoveInstanceCommentResp
	export function emptyResubmitTaskResp():ResubmitTaskResp
	export function emptyRefResubmitTaskResp():Ref<ResubmitTaskResp>
	export function refOfResubmitTaskResp(x:ResubmitTaskResp,v:Ref<ResubmitTaskResp>)
	export function unRefResubmitTaskResp(v:Ref<ResubmitTaskResp>):ResubmitTaskResp
	export function emptyManageableDefinition():ManageableDefinition
	export function emptyRefManageableDefinition():Ref<ManageableDefinition>
	export function refOfManageableDefinition(x:ManageableDefinition,v:Ref<ManageableDefinition>)
	export function unRefManageableDefinition(v:Ref<ManageableDefinition>):ManageableDefinition
	export function emptyApprovalCreate():ApprovalCreate
	export function emptyRefApprovalCreate():Ref<ApprovalCreate>
	export function refOfApprovalCreate(x:ApprovalCreate,v:Ref<ApprovalCreate>)
	export function unRefApprovalCreate(v:Ref<ApprovalCreate>):ApprovalCreate
	export function emptyApproveTaskReq():ApproveTaskReq
	export function emptyRefApproveTaskReq():Ref<ApproveTaskReq>
	export function refOfApproveTaskReq(x:ApproveTaskReq,v:Ref<ApproveTaskReq>)
	export function unRefApproveTaskReq(v:Ref<ApproveTaskReq>):ApproveTaskReq
	export function emptyCcSearch():CcSearch
	export function emptyRefCcSearch():Ref<CcSearch>
	export function refOfCcSearch(x:CcSearch,v:Ref<CcSearch>)
	export function unRefCcSearch(v:Ref<CcSearch>):CcSearch
	export function emptyFileUrl():FileUrl
	export function emptyRefFileUrl():Ref<FileUrl>
	export function refOfFileUrl(x:FileUrl,v:Ref<FileUrl>)
	export function unRefFileUrl(v:Ref<FileUrl>):FileUrl
	export function emptyListInstanceCommentReq():ListInstanceCommentReq
	export function emptyRefListInstanceCommentReq():Ref<ListInstanceCommentReq>
	export function refOfListInstanceCommentReq(x:ListInstanceCommentReq,v:Ref<ListInstanceCommentReq>)
	export function unRefListInstanceCommentReq(v:Ref<ListInstanceCommentReq>):ListInstanceCommentReq
	export function emptySearchCcInstanceResp():SearchCcInstanceResp
	export function emptyRefSearchCcInstanceResp():Ref<SearchCcInstanceResp>
	export function refOfSearchCcInstanceResp(x:SearchCcInstanceResp,v:Ref<SearchCcInstanceResp>)
	export function unRefSearchCcInstanceResp(v:Ref<SearchCcInstanceResp>):SearchCcInstanceResp
	export function emptyTripGroupSchedule():TripGroupSchedule
	export function emptyRefTripGroupSchedule():Ref<TripGroupSchedule>
	export function refOfTripGroupSchedule(x:TripGroupSchedule,v:Ref<TripGroupSchedule>)
	export function unRefTripGroupSchedule(v:Ref<TripGroupSchedule>):TripGroupSchedule
	export function emptySearchTaskRespData():SearchTaskRespData
	export function emptyRefSearchTaskRespData():Ref<SearchTaskRespData>
	export function refOfSearchTaskRespData(x:SearchTaskRespData,v:Ref<SearchTaskRespData>)
	export function unRefSearchTaskRespData(v:Ref<SearchTaskRespData>):SearchTaskRespData
	export function emptyApproverChosenRange():ApproverChosenRange
	export function emptyRefApproverChosenRange():Ref<ApproverChosenRange>
	export function refOfApproverChosenRange(x:ApproverChosenRange,v:Ref<ApproverChosenRange>)
	export function unRefApproverChosenRange(v:Ref<ApproverChosenRange>):ApproverChosenRange
	export function emptyI18nResource():I18nResource
	export function emptyRefI18nResource():Ref<I18nResource>
	export function refOfI18nResource(x:I18nResource,v:Ref<I18nResource>)
	export function unRefI18nResource(v:Ref<I18nResource>):I18nResource
	export function emptyTaskUrls():TaskUrls
	export function emptyRefTaskUrls():Ref<TaskUrls>
	export function refOfTaskUrls(x:TaskUrls,v:Ref<TaskUrls>)
	export function unRefTaskUrls(v:Ref<TaskUrls>):TaskUrls
	export function emptyComment():Comment
	export function emptyRefComment():Ref<Comment>
	export function refOfComment(x:Comment,v:Ref<Comment>)
	export function unRefComment(v:Ref<Comment>):Comment
	export function emptyGetExternalApprovalResp():GetExternalApprovalResp
	export function emptyRefGetExternalApprovalResp():Ref<GetExternalApprovalResp>
	export function refOfGetExternalApprovalResp(x:GetExternalApprovalResp,v:Ref<GetExternalApprovalResp>)
	export function unRefGetExternalApprovalResp(v:Ref<GetExternalApprovalResp>):GetExternalApprovalResp
	export function emptyCcInstanceReq():CcInstanceReq
	export function emptyRefCcInstanceReq():Ref<CcInstanceReq>
	export function refOfCcInstanceReq(x:CcInstanceReq,v:Ref<CcInstanceReq>)
	export function unRefCcInstanceReq(v:Ref<CcInstanceReq>):CcInstanceReq
	export function emptyManageableInstanceNode():ManageableInstanceNode
	export function emptyRefManageableInstanceNode():Ref<ManageableInstanceNode>
	export function refOfManageableInstanceNode(x:ManageableInstanceNode,v:Ref<ManageableInstanceNode>)
	export function unRefManageableInstanceNode(v:Ref<ManageableInstanceNode>):ManageableInstanceNode
	export function emptyRemoveInstanceCommentRespData():RemoveInstanceCommentRespData
	export function emptyRefRemoveInstanceCommentRespData():Ref<RemoveInstanceCommentRespData>
	export function refOfRemoveInstanceCommentRespData(x:RemoveInstanceCommentRespData,v:Ref<RemoveInstanceCommentRespData>)
	export function unRefRemoveInstanceCommentRespData(v:Ref<RemoveInstanceCommentRespData>):RemoveInstanceCommentRespData
	export function emptyTripGroup():TripGroup
	export function emptyRefTripGroup():Ref<TripGroup>
	export function refOfTripGroup(x:TripGroup,v:Ref<TripGroup>)
	export function unRefTripGroup(v:Ref<TripGroup>):TripGroup
	export function emptyApproverRange():ApproverRange
	export function emptyRefApproverRange():Ref<ApproverRange>
	export function refOfApproverRange(x:ApproverRange,v:Ref<ApproverRange>)
	export function unRefApproverRange(v:Ref<ApproverRange>):ApproverRange
	export function emptyCancelInstanceResp():CancelInstanceResp
	export function emptyRefCancelInstanceResp():Ref<CancelInstanceResp>
	export function refOfCancelInstanceResp(x:CancelInstanceResp,v:Ref<CancelInstanceResp>)
	export function unRefCancelInstanceResp(v:Ref<CancelInstanceResp>):CancelInstanceResp
	export function emptyP1OutApprovalI18nResourceV4():P1OutApprovalI18nResourceV4
	export function emptyRefP1OutApprovalI18nResourceV4():Ref<P1OutApprovalI18nResourceV4>
	export function refOfP1OutApprovalI18nResourceV4(x:P1OutApprovalI18nResourceV4,v:Ref<P1OutApprovalI18nResourceV4>)
	export function unRefP1OutApprovalI18nResourceV4(v:Ref<P1OutApprovalI18nResourceV4>):P1OutApprovalI18nResourceV4
	export function emptyApprovalViewerInfo():ApprovalViewerInfo
	export function emptyRefApprovalViewerInfo():Ref<ApprovalViewerInfo>
	export function refOfApprovalViewerInfo(x:ApprovalViewerInfo,v:Ref<ApprovalViewerInfo>)
	export function unRefApprovalViewerInfo(v:Ref<ApprovalViewerInfo>):ApprovalViewerInfo
	export function emptyInstanceSearchLink():InstanceSearchLink
	export function emptyRefInstanceSearchLink():Ref<InstanceSearchLink>
	export function refOfInstanceSearchLink(x:InstanceSearchLink,v:Ref<InstanceSearchLink>)
	export function unRefInstanceSearchLink(v:Ref<InstanceSearchLink>):InstanceSearchLink
	export function emptyMyAiMessageCallbackRequest():MyAiMessageCallbackRequest
	export function emptyRefMyAiMessageCallbackRequest():Ref<MyAiMessageCallbackRequest>
	export function refOfMyAiMessageCallbackRequest(x:MyAiMessageCallbackRequest,v:Ref<MyAiMessageCallbackRequest>)
	export function unRefMyAiMessageCallbackRequest(v:Ref<MyAiMessageCallbackRequest>):MyAiMessageCallbackRequest
	export function emptyCreateInstanceCommentReq():CreateInstanceCommentReq
	export function emptyRefCreateInstanceCommentReq():Ref<CreateInstanceCommentReq>
	export function refOfCreateInstanceCommentReq(x:CreateInstanceCommentReq,v:Ref<CreateInstanceCommentReq>)
	export function unRefCreateInstanceCommentReq(v:Ref<CreateInstanceCommentReq>):CreateInstanceCommentReq
	export function emptyV4():V4
	export function emptyRefV4():Ref<V4>
	export function refOfV4(x:V4,v:Ref<V4>)
	export function unRefV4(v:Ref<V4>):V4
	export function emptyTask():Task
	export function emptyRefTask():Ref<Task>
	export function refOfTask(x:Task,v:Ref<Task>)
	export function unRefTask(v:Ref<Task>):Task
	export function emptyApprovalConfig():ApprovalConfig
	export function emptyRefApprovalConfig():Ref<ApprovalConfig>
	export function refOfApprovalConfig(x:ApprovalConfig,v:Ref<ApprovalConfig>)
	export function unRefApprovalConfig(v:Ref<ApprovalConfig>):ApprovalConfig
	export function emptyInstanceCcUser():InstanceCcUser
	export function emptyRefInstanceCcUser():Ref<InstanceCcUser>
	export function refOfInstanceCcUser(x:InstanceCcUser,v:Ref<InstanceCcUser>)
	export function unRefInstanceCcUser(v:Ref<InstanceCcUser>):InstanceCcUser
	export function emptyP1OutApprovalV4():P1OutApprovalV4
	export function emptyRefP1OutApprovalV4():Ref<P1OutApprovalV4>
	export function refOfP1OutApprovalV4(x:P1OutApprovalV4,v:Ref<P1OutApprovalV4>)
	export function unRefP1OutApprovalV4(v:Ref<P1OutApprovalV4>):P1OutApprovalV4
	export function emptyP1ShiftApprovalV4Data():P1ShiftApprovalV4Data
	export function emptyRefP1ShiftApprovalV4Data():Ref<P1ShiftApprovalV4Data>
	export function refOfP1ShiftApprovalV4Data(x:P1ShiftApprovalV4Data,v:Ref<P1ShiftApprovalV4Data>)
	export function unRefP1ShiftApprovalV4Data(v:Ref<P1ShiftApprovalV4Data>):P1ShiftApprovalV4Data
	export function emptyRollbackNode():RollbackNode
	export function emptyRefRollbackNode():Ref<RollbackNode>
	export function refOfRollbackNode(x:RollbackNode,v:Ref<RollbackNode>)
	export function unRefRollbackNode(v:Ref<RollbackNode>):RollbackNode
	export function emptyApprovalCreateViewers():ApprovalCreateViewers
	export function emptyRefApprovalCreateViewers():Ref<ApprovalCreateViewers>
	export function refOfApprovalCreateViewers(x:ApprovalCreateViewers,v:Ref<ApprovalCreateViewers>)
	export function unRefApprovalCreateViewers(v:Ref<ApprovalCreateViewers>):ApprovalCreateViewers
	export function emptyInstanceComment():InstanceComment
	export function emptyRefInstanceComment():Ref<InstanceComment>
	export function refOfInstanceComment(x:InstanceComment,v:Ref<InstanceComment>)
	export function unRefInstanceComment(v:Ref<InstanceComment>):InstanceComment
	export function emptyRevertEvent():RevertEvent
	export function emptyRefRevertEvent():Ref<RevertEvent>
	export function refOfRevertEvent(x:RevertEvent,v:Ref<RevertEvent>)
	export function unRefRevertEvent(v:Ref<RevertEvent>):RevertEvent
	export function emptyCreateApprovalRespData():CreateApprovalRespData
	export function emptyRefCreateApprovalRespData():Ref<CreateApprovalRespData>
	export function refOfCreateApprovalRespData(x:CreateApprovalRespData,v:Ref<CreateApprovalRespData>)
	export function unRefCreateApprovalRespData(v:Ref<CreateApprovalRespData>):CreateApprovalRespData
	export function emptyP2ApprovalUpdatedV4Data():P2ApprovalUpdatedV4Data
	export function emptyRefP2ApprovalUpdatedV4Data():Ref<P2ApprovalUpdatedV4Data>
	export function refOfP2ApprovalUpdatedV4Data(x:P2ApprovalUpdatedV4Data,v:Ref<P2ApprovalUpdatedV4Data>)
	export function unRefP2ApprovalUpdatedV4Data(v:Ref<P2ApprovalUpdatedV4Data>):P2ApprovalUpdatedV4Data
	export function emptyQueryTaskReq():QueryTaskReq
	export function emptyRefQueryTaskReq():Ref<QueryTaskReq>
	export function refOfQueryTaskReq(x:QueryTaskReq,v:Ref<QueryTaskReq>)
	export function unRefQueryTaskReq(v:Ref<QueryTaskReq>):QueryTaskReq
	export function emptyCreateInstanceCommentRespData():CreateInstanceCommentRespData
	export function emptyRefCreateInstanceCommentRespData():Ref<CreateInstanceCommentRespData>
	export function refOfCreateInstanceCommentRespData(x:CreateInstanceCommentRespData,v:Ref<CreateInstanceCommentRespData>)
	export function unRefCreateInstanceCommentRespData(v:Ref<CreateInstanceCommentRespData>):CreateInstanceCommentRespData
	export function emptyFile():File
	export function emptyRefFile():Ref<File>
	export function refOfFile(x:File,v:Ref<File>)
	export function unRefFile(v:Ref<File>):File
	export function emptyMyAiInstance():MyAiInstance
	export function emptyRefMyAiInstance():Ref<MyAiInstance>
	export function refOfMyAiInstance(x:MyAiInstance,v:Ref<MyAiInstance>)
	export function unRefMyAiInstance(v:Ref<MyAiInstance>):MyAiInstance
	export function emptyP2ApprovalUpdatedV4():P2ApprovalUpdatedV4
	export function emptyRefP2ApprovalUpdatedV4():Ref<P2ApprovalUpdatedV4>
	export function refOfP2ApprovalUpdatedV4(x:P2ApprovalUpdatedV4,v:Ref<P2ApprovalUpdatedV4>)
	export function unRefP2ApprovalUpdatedV4(v:Ref<P2ApprovalUpdatedV4>):P2ApprovalUpdatedV4
	export function emptyTaskRollback():TaskRollback
	export function emptyRefTaskRollback():Ref<TaskRollback>
	export function refOfTaskRollback(x:TaskRollback,v:Ref<TaskRollback>)
	export function unRefTaskRollback(v:Ref<TaskRollback>):TaskRollback
	export function emptyCommentRequest():CommentRequest
	export function emptyRefCommentRequest():Ref<CommentRequest>
	export function refOfCommentRequest(x:CommentRequest,v:Ref<CommentRequest>)
	export function unRefCommentRequest(v:Ref<CommentRequest>):CommentRequest
	export function emptyInstanceCreate():InstanceCreate
	export function emptyRefInstanceCreate():Ref<InstanceCreate>
	export function refOfInstanceCreate(x:InstanceCreate,v:Ref<InstanceCreate>)
	export function unRefInstanceCreate(v:Ref<InstanceCreate>):InstanceCreate
	export function emptyP1TripApprovalV4():P1TripApprovalV4
	export function emptyRefP1TripApprovalV4():Ref<P1TripApprovalV4>
	export function refOfP1TripApprovalV4(x:P1TripApprovalV4,v:Ref<P1TripApprovalV4>)
	export function unRefP1TripApprovalV4(v:Ref<P1TripApprovalV4>):P1TripApprovalV4
	export function emptyPreviewInstanceResp():PreviewInstanceResp
	export function emptyRefPreviewInstanceResp():Ref<PreviewInstanceResp>
	export function refOfPreviewInstanceResp(x:PreviewInstanceResp,v:Ref<PreviewInstanceResp>)
	export function unRefPreviewInstanceResp(v:Ref<PreviewInstanceResp>):PreviewInstanceResp
	export function emptyPreviewInstanceRespData():PreviewInstanceRespData
	export function emptyRefPreviewInstanceRespData():Ref<PreviewInstanceRespData>
	export function refOfPreviewInstanceRespData(x:PreviewInstanceRespData,v:Ref<PreviewInstanceRespData>)
	export function unRefPreviewInstanceRespData(v:Ref<PreviewInstanceRespData>):PreviewInstanceRespData
	export function emptyCreateInstanceResp():CreateInstanceResp
	export function emptyRefCreateInstanceResp():Ref<CreateInstanceResp>
	export function refOfCreateInstanceResp(x:CreateInstanceResp,v:Ref<CreateInstanceResp>)
	export function unRefCreateInstanceResp(v:Ref<CreateInstanceResp>):CreateInstanceResp
	export function emptyGetInstanceResp():GetInstanceResp
	export function emptyRefGetInstanceResp():Ref<GetInstanceResp>
	export function refOfGetInstanceResp(x:GetInstanceResp,v:Ref<GetInstanceResp>)
	export function unRefGetInstanceResp(v:Ref<GetInstanceResp>):GetInstanceResp
	export function emptyExternalTaskList():ExternalTaskList
	export function emptyRefExternalTaskList():Ref<ExternalTaskList>
	export function refOfExternalTaskList(x:ExternalTaskList,v:Ref<ExternalTaskList>)
	export function unRefExternalTaskList(v:Ref<ExternalTaskList>):ExternalTaskList
	export function emptySubscribeApprovalResp():SubscribeApprovalResp
	export function emptyRefSubscribeApprovalResp():Ref<SubscribeApprovalResp>
	export function refOfSubscribeApprovalResp(x:SubscribeApprovalResp,v:Ref<SubscribeApprovalResp>)
	export function unRefSubscribeApprovalResp(v:Ref<SubscribeApprovalResp>):SubscribeApprovalResp
	export function emptyTrusteeshipInstanceCacheConfig():TrusteeshipInstanceCacheConfig
	export function emptyRefTrusteeshipInstanceCacheConfig():Ref<TrusteeshipInstanceCacheConfig>
	export function refOfTrusteeshipInstanceCacheConfig(x:TrusteeshipInstanceCacheConfig,v:Ref<TrusteeshipInstanceCacheConfig>)
	export function unRefTrusteeshipInstanceCacheConfig(v:Ref<TrusteeshipInstanceCacheConfig>):TrusteeshipInstanceCacheConfig
	export function emptyApprovalApproverCcer():ApprovalApproverCcer
	export function emptyRefApprovalApproverCcer():Ref<ApprovalApproverCcer>
	export function refOfApprovalApproverCcer(x:ApprovalApproverCcer,v:Ref<ApprovalApproverCcer>)
	export function unRefApprovalApproverCcer(v:Ref<ApprovalApproverCcer>):ApprovalApproverCcer
	export function emptyCreateExternalApprovalResp():CreateExternalApprovalResp
	export function emptyRefCreateExternalApprovalResp():Ref<CreateExternalApprovalResp>
	export function refOfCreateExternalApprovalResp(x:CreateExternalApprovalResp,v:Ref<CreateExternalApprovalResp>)
	export function unRefCreateExternalApprovalResp(v:Ref<CreateExternalApprovalResp>):CreateExternalApprovalResp
	export function emptyDefinition():Definition
	export function emptyRefDefinition():Ref<Definition>
	export function refOfDefinition(x:Definition,v:Ref<Definition>)
	export function unRefDefinition(v:Ref<Definition>):Definition
	export function emptyMyAiObjectScenarioContext():MyAiObjectScenarioContext
	export function emptyRefMyAiObjectScenarioContext():Ref<MyAiObjectScenarioContext>
	export function refOfMyAiObjectScenarioContext(x:MyAiObjectScenarioContext,v:Ref<MyAiObjectScenarioContext>)
	export function unRefMyAiObjectScenarioContext(v:Ref<MyAiObjectScenarioContext>):MyAiObjectScenarioContext
	export function emptySearchCcInstanceReq():SearchCcInstanceReq
	export function emptyRefSearchCcInstanceReq():Ref<SearchCcInstanceReq>
	export function refOfSearchCcInstanceReq(x:SearchCcInstanceReq,v:Ref<SearchCcInstanceReq>)
	export function unRefSearchCcInstanceReq(v:Ref<SearchCcInstanceReq>):SearchCcInstanceReq
	export function emptySearchTaskReq():SearchTaskReq
	export function emptyRefSearchTaskReq():Ref<SearchTaskReq>
	export function refOfSearchTaskReq(x:SearchTaskReq,v:Ref<SearchTaskReq>)
	export function unRefSearchTaskReq(v:Ref<SearchTaskReq>):SearchTaskReq
	export function emptyNodeApprover():NodeApprover
	export function emptyRefNodeApprover():Ref<NodeApprover>
	export function refOfNodeApprover(x:NodeApprover,v:Ref<NodeApprover>)
	export function unRefNodeApprover(v:Ref<NodeApprover>):NodeApprover
	export function emptyPreviewNode():PreviewNode
	export function emptyRefPreviewNode():Ref<PreviewNode>
	export function refOfPreviewNode(x:PreviewNode,v:Ref<PreviewNode>)
	export function unRefPreviewNode(v:Ref<PreviewNode>):PreviewNode
	export function emptyReason():Reason
	export function emptyRefReason():Ref<Reason>
	export function refOfReason(x:Reason,v:Ref<Reason>)
	export function unRefReason(v:Ref<Reason>):Reason
	export function emptyRejectTaskReq():RejectTaskReq
	export function emptyRefRejectTaskReq():Ref<RejectTaskReq>
	export function refOfRejectTaskReq(x:RejectTaskReq,v:Ref<RejectTaskReq>)
	export function unRefRejectTaskReq(v:Ref<RejectTaskReq>):RejectTaskReq
	export function emptyCcSearchNode():CcSearchNode
	export function emptyRefCcSearchNode():Ref<CcSearchNode>
	export function refOfCcSearchNode(x:CcSearchNode,v:Ref<CcSearchNode>)
	export function unRefCcSearchNode(v:Ref<CcSearchNode>):CcSearchNode
	export function emptyMyAiCardValue():MyAiCardValue
	export function emptyRefMyAiCardValue():Ref<MyAiCardValue>
	export function refOfMyAiCardValue(x:MyAiCardValue,v:Ref<MyAiCardValue>)
	export function unRefMyAiCardValue(v:Ref<MyAiCardValue>):MyAiCardValue
	export function emptyP1OutApprovalV4Data():P1OutApprovalV4Data
	export function emptyRefP1OutApprovalV4Data():Ref<P1OutApprovalV4Data>
	export function refOfP1OutApprovalV4Data(x:P1OutApprovalV4Data,v:Ref<P1OutApprovalV4Data>)
	export function unRefP1OutApprovalV4Data(v:Ref<P1OutApprovalV4Data>):P1OutApprovalV4Data
	export function emptySpecifiedRollbackInstanceResp():SpecifiedRollbackInstanceResp
	export function emptyRefSpecifiedRollbackInstanceResp():Ref<SpecifiedRollbackInstanceResp>
	export function refOfSpecifiedRollbackInstanceResp(x:SpecifiedRollbackInstanceResp,v:Ref<SpecifiedRollbackInstanceResp>)
	export function unRefSpecifiedRollbackInstanceResp(v:Ref<SpecifiedRollbackInstanceResp>):SpecifiedRollbackInstanceResp
	export function emptyQueryTaskResp():QueryTaskResp
	export function emptyRefQueryTaskResp():Ref<QueryTaskResp>
	export function refOfQueryTaskResp(x:QueryTaskResp,v:Ref<QueryTaskResp>)
	export function unRefQueryTaskResp(v:Ref<QueryTaskResp>):QueryTaskResp
	export function emptyApprovalNodeInfo():ApprovalNodeInfo
	export function emptyRefApprovalNodeInfo():Ref<ApprovalNodeInfo>
	export function refOfApprovalNodeInfo(x:ApprovalNodeInfo,v:Ref<ApprovalNodeInfo>)
	export function unRefApprovalNodeInfo(v:Ref<ApprovalNodeInfo>):ApprovalNodeInfo
	export function emptyCommentReply():CommentReply
	export function emptyRefCommentReply():Ref<CommentReply>
	export function refOfCommentReply(x:CommentReply,v:Ref<CommentReply>)
	export function unRefCommentReply(v:Ref<CommentReply>):CommentReply
	export function emptyExternalInstanceLink():ExternalInstanceLink
	export function emptyRefExternalInstanceLink():Ref<ExternalInstanceLink>
	export function refOfExternalInstanceLink(x:ExternalInstanceLink,v:Ref<ExternalInstanceLink>)
	export function unRefExternalInstanceLink(v:Ref<ExternalInstanceLink>):ExternalInstanceLink
	export function emptyGetApprovalRespData():GetApprovalRespData
	export function emptyRefGetApprovalRespData():Ref<GetApprovalRespData>
	export function refOfGetApprovalRespData(x:GetApprovalRespData,v:Ref<GetApprovalRespData>)
	export function unRefGetApprovalRespData(v:Ref<GetApprovalRespData>):GetApprovalRespData
	export function emptyInstanceSearchGroup():InstanceSearchGroup
	export function emptyRefInstanceSearchGroup():Ref<InstanceSearchGroup>
	export function refOfInstanceSearchGroup(x:InstanceSearchGroup,v:Ref<InstanceSearchGroup>)
	export function unRefInstanceSearchGroup(v:Ref<InstanceSearchGroup>):InstanceSearchGroup
	export function emptyQueryTaskRespData():QueryTaskRespData
	export function emptyRefQueryTaskRespData():Ref<QueryTaskRespData>
	export function refOfQueryTaskRespData(x:QueryTaskRespData,v:Ref<QueryTaskRespData>)
	export function unRefQueryTaskRespData(v:Ref<QueryTaskRespData>):QueryTaskRespData
	export function emptyListInstanceResp():ListInstanceResp
	export function emptyRefListInstanceResp():Ref<ListInstanceResp>
	export function refOfListInstanceResp(x:ListInstanceResp,v:Ref<ListInstanceResp>)
	export function unRefListInstanceResp(v:Ref<ListInstanceResp>):ListInstanceResp
	export function emptyMyAiPresentCardVariables():MyAiPresentCardVariables
	export function emptyRefMyAiPresentCardVariables():Ref<MyAiPresentCardVariables>
	export function refOfMyAiPresentCardVariables(x:MyAiPresentCardVariables,v:Ref<MyAiPresentCardVariables>)
	export function unRefMyAiPresentCardVariables(v:Ref<MyAiPresentCardVariables>):MyAiPresentCardVariables
	export function emptyConnectorLog():ConnectorLog
	export function emptyRefConnectorLog():Ref<ConnectorLog>
	export function refOfConnectorLog(x:ConnectorLog,v:Ref<ConnectorLog>)
	export function unRefConnectorLog(v:Ref<ConnectorLog>):ConnectorLog
	export function emptyExternalInstanceForm():ExternalInstanceForm
	export function emptyRefExternalInstanceForm():Ref<ExternalInstanceForm>
	export function refOfExternalInstanceForm(x:ExternalInstanceForm,v:Ref<ExternalInstanceForm>)
	export function unRefExternalInstanceForm(v:Ref<ExternalInstanceForm>):ExternalInstanceForm
	export function emptyP1TripApprovalTripPeerV4():P1TripApprovalTripPeerV4
	export function emptyRefP1TripApprovalTripPeerV4():Ref<P1TripApprovalTripPeerV4>
	export function refOfP1TripApprovalTripPeerV4(x:P1TripApprovalTripPeerV4,v:Ref<P1TripApprovalTripPeerV4>)
	export function unRefP1TripApprovalTripPeerV4(v:Ref<P1TripApprovalTripPeerV4>):P1TripApprovalTripPeerV4
	export function emptyInstanceTask():InstanceTask
	export function emptyRefInstanceTask():Ref<InstanceTask>
	export function refOfInstanceTask(x:InstanceTask,v:Ref<InstanceTask>)
	export function unRefInstanceTask(v:Ref<InstanceTask>):InstanceTask
	export function emptyApprovalEvent():ApprovalEvent
	export function emptyRefApprovalEvent():Ref<ApprovalEvent>
	export function refOfApprovalEvent(x:ApprovalEvent,v:Ref<ApprovalEvent>)
	export function unRefApprovalEvent(v:Ref<ApprovalEvent>):ApprovalEvent
	export function emptyExternalInstance():ExternalInstance
	export function emptyRefExternalInstance():Ref<ExternalInstance>
	export function refOfExternalInstance(x:ExternalInstance,v:Ref<ExternalInstance>)
	export function unRefExternalInstance(v:Ref<ExternalInstance>):ExternalInstance
	export function emptyGetExternalApprovalRespData():GetExternalApprovalRespData
	export function emptyRefGetExternalApprovalRespData():Ref<GetExternalApprovalRespData>
	export function refOfGetExternalApprovalRespData(x:GetExternalApprovalRespData,v:Ref<GetExternalApprovalRespData>)
	export function unRefGetExternalApprovalRespData(v:Ref<GetExternalApprovalRespData>):GetExternalApprovalRespData
	export function emptyP1LeaveApprovalI18nResourceV4():P1LeaveApprovalI18nResourceV4
	export function emptyRefP1LeaveApprovalI18nResourceV4():Ref<P1LeaveApprovalI18nResourceV4>
	export function refOfP1LeaveApprovalI18nResourceV4(x:P1LeaveApprovalI18nResourceV4,v:Ref<P1LeaveApprovalI18nResourceV4>)
	export function unRefP1LeaveApprovalI18nResourceV4(v:Ref<P1LeaveApprovalI18nResourceV4>):P1LeaveApprovalI18nResourceV4
	export function emptyCreateApprovalResp():CreateApprovalResp
	export function emptyRefCreateApprovalResp():Ref<CreateApprovalResp>
	export function refOfCreateApprovalResp(x:CreateApprovalResp,v:Ref<CreateApprovalResp>)
	export function unRefCreateApprovalResp(v:Ref<CreateApprovalResp>):CreateApprovalResp
	export function emptyInstanceSearch():InstanceSearch
	export function emptyRefInstanceSearch():Ref<InstanceSearch>
	export function refOfInstanceSearch(x:InstanceSearch,v:Ref<InstanceSearch>)
	export function unRefInstanceSearch(v:Ref<InstanceSearch>):InstanceSearch
	export function emptyListInstanceRespData():ListInstanceRespData
	export function emptyRefListInstanceRespData():Ref<ListInstanceRespData>
	export function refOfListInstanceRespData(x:ListInstanceRespData,v:Ref<ListInstanceRespData>)
	export function unRefListInstanceRespData(v:Ref<ListInstanceRespData>):ListInstanceRespData
	export function emptyMyAiInstanceDetailExtra():MyAiInstanceDetailExtra
	export function emptyRefMyAiInstanceDetailExtra():Ref<MyAiInstanceDetailExtra>
	export function refOfMyAiInstanceDetailExtra(x:MyAiInstanceDetailExtra,v:Ref<MyAiInstanceDetailExtra>)
	export function unRefMyAiInstanceDetailExtra(v:Ref<MyAiInstanceDetailExtra>):MyAiInstanceDetailExtra
	export function emptyRemoveInstanceCommentReq():RemoveInstanceCommentReq
	export function emptyRefRemoveInstanceCommentReq():Ref<RemoveInstanceCommentReq>
	export function refOfRemoveInstanceCommentReq(x:RemoveInstanceCommentReq,v:Ref<RemoveInstanceCommentReq>)
	export function unRefRemoveInstanceCommentReq(v:Ref<RemoveInstanceCommentReq>):RemoveInstanceCommentReq
	export function emptyDeleteInstanceCommentReq():DeleteInstanceCommentReq
	export function emptyRefDeleteInstanceCommentReq():Ref<DeleteInstanceCommentReq>
	export function refOfDeleteInstanceCommentReq(x:DeleteInstanceCommentReq,v:Ref<DeleteInstanceCommentReq>)
	export function unRefDeleteInstanceCommentReq(v:Ref<DeleteInstanceCommentReq>):DeleteInstanceCommentReq
	export function emptyExteranlInstanceCheckResponse():ExteranlInstanceCheckResponse
	export function emptyRefExteranlInstanceCheckResponse():Ref<ExteranlInstanceCheckResponse>
	export function refOfExteranlInstanceCheckResponse(x:ExteranlInstanceCheckResponse,v:Ref<ExteranlInstanceCheckResponse>)
	export function unRefExteranlInstanceCheckResponse(v:Ref<ExteranlInstanceCheckResponse>):ExteranlInstanceCheckResponse
	export function emptyExternalApproval():ExternalApproval
	export function emptyRefExternalApproval():Ref<ExternalApproval>
	export function refOfExternalApproval(x:ExternalApproval,v:Ref<ExternalApproval>)
	export function unRefExternalApproval(v:Ref<ExternalApproval>):ExternalApproval
	export function emptyUnsubscribeApprovalResp():UnsubscribeApprovalResp
	export function emptyRefUnsubscribeApprovalResp():Ref<UnsubscribeApprovalResp>
	export function refOfUnsubscribeApprovalResp(x:UnsubscribeApprovalResp,v:Ref<UnsubscribeApprovalResp>)
	export function unRefUnsubscribeApprovalResp(v:Ref<UnsubscribeApprovalResp>):UnsubscribeApprovalResp
	export function emptyAddSignInstanceResp():AddSignInstanceResp
	export function emptyRefAddSignInstanceResp():Ref<AddSignInstanceResp>
	export function refOfAddSignInstanceResp(x:AddSignInstanceResp,v:Ref<AddSignInstanceResp>)
	export function unRefAddSignInstanceResp(v:Ref<AddSignInstanceResp>):AddSignInstanceResp
	export function emptyApprovalViewer():ApprovalViewer
	export function emptyRefApprovalViewer():Ref<ApprovalViewer>
	export function refOfApprovalViewer(x:ApprovalViewer,v:Ref<ApprovalViewer>)
	export function unRefApprovalViewer(v:Ref<ApprovalViewer>):ApprovalViewer
	export function emptyGetInstanceReq():GetInstanceReq
	export function emptyRefGetInstanceReq():Ref<GetInstanceReq>
	export function refOfGetInstanceReq(x:GetInstanceReq,v:Ref<GetInstanceReq>)
	export function unRefGetInstanceReq(v:Ref<GetInstanceReq>):GetInstanceReq
	export function emptyInstanceCc():InstanceCc
	export function emptyRefInstanceCc():Ref<InstanceCc>
	export function refOfInstanceCc(x:InstanceCc,v:Ref<InstanceCc>)
	export function unRefInstanceCc(v:Ref<InstanceCc>):InstanceCc
	export function emptyListExternalTaskResp():ListExternalTaskResp
	export function emptyRefListExternalTaskResp():Ref<ListExternalTaskResp>
	export function refOfListExternalTaskResp(x:ListExternalTaskResp,v:Ref<ListExternalTaskResp>)
	export function unRefListExternalTaskResp(v:Ref<ListExternalTaskResp>):ListExternalTaskResp
	export function emptySpecifiedRollback():SpecifiedRollback
	export function emptyRefSpecifiedRollback():Ref<SpecifiedRollback>
	export function refOfSpecifiedRollback(x:SpecifiedRollback,v:Ref<SpecifiedRollback>)
	export function unRefSpecifiedRollback(v:Ref<SpecifiedRollback>):SpecifiedRollback
	export function emptyApproval():Approval
	export function emptyRefApproval():Ref<Approval>
	export function refOfApproval(x:Approval,v:Ref<Approval>)
	export function unRefApproval(v:Ref<Approval>):Approval
	export function emptyPreviewInstanceReqBody():PreviewInstanceReqBody
	export function emptyRefPreviewInstanceReqBody():Ref<PreviewInstanceReqBody>
	export function refOfPreviewInstanceReqBody(x:PreviewInstanceReqBody,v:Ref<PreviewInstanceReqBody>)
	export function unRefPreviewInstanceReqBody(v:Ref<PreviewInstanceReqBody>):PreviewInstanceReqBody
	export function emptyListInstanceCommentResp():ListInstanceCommentResp
	export function emptyRefListInstanceCommentResp():Ref<ListInstanceCommentResp>
	export function refOfListInstanceCommentResp(x:ListInstanceCommentResp,v:Ref<ListInstanceCommentResp>)
	export function unRefListInstanceCommentResp(v:Ref<ListInstanceCommentResp>):ListInstanceCommentResp
	export function emptyPreviewInstanceReq():PreviewInstanceReq
	export function emptyRefPreviewInstanceReq():Ref<PreviewInstanceReq>
	export function refOfPreviewInstanceReq(x:PreviewInstanceReq,v:Ref<PreviewInstanceReq>)
	export function unRefPreviewInstanceReq(v:Ref<PreviewInstanceReq>):PreviewInstanceReq
	export function emptyQueryInstanceReq():QueryInstanceReq
	export function emptyRefQueryInstanceReq():Ref<QueryInstanceReq>
	export function refOfQueryInstanceReq(x:QueryInstanceReq,v:Ref<QueryInstanceReq>)
	export function unRefQueryInstanceReq(v:Ref<QueryInstanceReq>):QueryInstanceReq
	export function emptyQueryTaskIterator():QueryTaskIterator
	export function emptyRefQueryTaskIterator():Ref<QueryTaskIterator>
	export function refOfQueryTaskIterator(x:QueryTaskIterator,v:Ref<QueryTaskIterator>)
	export function unRefQueryTaskIterator(v:Ref<QueryTaskIterator>):QueryTaskIterator
	export function emptyInstance():Instance
	export function emptyRefInstance():Ref<Instance>
	export function refOfInstance(x:Instance,v:Ref<Instance>)
	export function unRefInstance(v:Ref<Instance>):Instance
	export function emptyInstanceDetailScenarioContext():InstanceDetailScenarioContext
	export function emptyRefInstanceDetailScenarioContext():Ref<InstanceDetailScenarioContext>
	export function refOfInstanceDetailScenarioContext(x:InstanceDetailScenarioContext,v:Ref<InstanceDetailScenarioContext>)
	export function unRefInstanceDetailScenarioContext(v:Ref<InstanceDetailScenarioContext>):InstanceDetailScenarioContext
	export function emptyListInstanceReq():ListInstanceReq
	export function emptyRefListInstanceReq():Ref<ListInstanceReq>
	export function refOfListInstanceReq(x:ListInstanceReq,v:Ref<ListInstanceReq>)
	export function unRefListInstanceReq(v:Ref<ListInstanceReq>):ListInstanceReq
	export function emptyTrusteeshipUrls():TrusteeshipUrls
	export function emptyRefTrusteeshipUrls():Ref<TrusteeshipUrls>
	export function refOfTrusteeshipUrls(x:TrusteeshipUrls,v:Ref<TrusteeshipUrls>)
	export function unRefTrusteeshipUrls(v:Ref<TrusteeshipUrls>):TrusteeshipUrls
	export function emptyCreateInstanceReq():CreateInstanceReq
	export function emptyRefCreateInstanceReq():Ref<CreateInstanceReq>
	export function refOfCreateInstanceReq(x:CreateInstanceReq,v:Ref<CreateInstanceReq>)
	export function unRefCreateInstanceReq(v:Ref<CreateInstanceReq>):CreateInstanceReq
	export function emptyGetApprovalReq():GetApprovalReq
	export function emptyRefGetApprovalReq():Ref<GetApprovalReq>
	export function refOfGetApprovalReq(x:GetApprovalReq,v:Ref<GetApprovalReq>)
	export function unRefGetApprovalReq(v:Ref<GetApprovalReq>):GetApprovalReq
	export function emptyApprovalNode():ApprovalNode
	export function emptyRefApprovalNode():Ref<ApprovalNode>
	export function refOfApprovalNode(x:ApprovalNode,v:Ref<ApprovalNode>)
	export function unRefApprovalNode(v:Ref<ApprovalNode>):ApprovalNode
	export function emptyTaskApprove():TaskApprove
	export function emptyRefTaskApprove():Ref<TaskApprove>
	export function refOfTaskApprove(x:TaskApprove,v:Ref<TaskApprove>)
	export function unRefTaskApprove(v:Ref<TaskApprove>):TaskApprove
	export function emptyCheckExternalInstanceReq():CheckExternalInstanceReq
	export function emptyRefCheckExternalInstanceReq():Ref<CheckExternalInstanceReq>
	export function refOfCheckExternalInstanceReq(x:CheckExternalInstanceReq,v:Ref<CheckExternalInstanceReq>)
	export function unRefCheckExternalInstanceReq(v:Ref<CheckExternalInstanceReq>):CheckExternalInstanceReq
	export function emptySwapShiftDetail():SwapShiftDetail
	export function emptyRefSwapShiftDetail():Ref<SwapShiftDetail>
	export function refOfSwapShiftDetail(x:SwapShiftDetail,v:Ref<SwapShiftDetail>)
	export function unRefSwapShiftDetail(v:Ref<SwapShiftDetail>):SwapShiftDetail
	export function emptyTaskSearchItem():TaskSearchItem
	export function emptyRefTaskSearchItem():Ref<TaskSearchItem>
	export function refOfTaskSearchItem(x:TaskSearchItem,v:Ref<TaskSearchItem>)
	export function unRefTaskSearchItem(v:Ref<TaskSearchItem>):TaskSearchItem
	export function emptyQueryInstanceRespData():QueryInstanceRespData
	export function emptyRefQueryInstanceRespData():Ref<QueryInstanceRespData>
	export function refOfQueryInstanceRespData(x:QueryInstanceRespData,v:Ref<QueryInstanceRespData>)
	export function unRefQueryInstanceRespData(v:Ref<QueryInstanceRespData>):QueryInstanceRespData
	export function emptyApproveTaskResp():ApproveTaskResp
	export function emptyRefApproveTaskResp():Ref<ApproveTaskResp>
	export function refOfApproveTaskResp(x:ApproveTaskResp,v:Ref<ApproveTaskResp>)
	export function unRefApproveTaskResp(v:Ref<ApproveTaskResp>):ApproveTaskResp
	export function emptyCommentAtInfo():CommentAtInfo
	export function emptyRefCommentAtInfo():Ref<CommentAtInfo>
	export function refOfCommentAtInfo(x:CommentAtInfo,v:Ref<CommentAtInfo>)
	export function unRefCommentAtInfo(v:Ref<CommentAtInfo>):CommentAtInfo
	export function emptySearchCcInstanceRespData():SearchCcInstanceRespData
	export function emptyRefSearchCcInstanceRespData():Ref<SearchCcInstanceRespData>
	export function refOfSearchCcInstanceRespData(x:SearchCcInstanceRespData,v:Ref<SearchCcInstanceRespData>)
	export function unRefSearchCcInstanceRespData(v:Ref<SearchCcInstanceRespData>):SearchCcInstanceRespData
	export function emptyApprovalSetting():ApprovalSetting
	export function emptyRefApprovalSetting():Ref<ApprovalSetting>
	export function refOfApprovalSetting(x:ApprovalSetting,v:Ref<ApprovalSetting>)
	export function unRefApprovalSetting(v:Ref<ApprovalSetting>):ApprovalSetting
	export function emptyListExternalTaskIterator():ListExternalTaskIterator
	export function emptyRefListExternalTaskIterator():Ref<ListExternalTaskIterator>
	export function refOfListExternalTaskIterator(x:ListExternalTaskIterator,v:Ref<ListExternalTaskIterator>)
	export function unRefListExternalTaskIterator(v:Ref<ListExternalTaskIterator>):ListExternalTaskIterator
	export function emptyNodeAutoApproval():NodeAutoApproval
	export function emptyRefNodeAutoApproval():Ref<NodeAutoApproval>
	export function refOfNodeAutoApproval(x:NodeAutoApproval,v:Ref<NodeAutoApproval>)
	export function unRefNodeAutoApproval(v:Ref<NodeAutoApproval>):NodeAutoApproval
	export function emptySignGroup():SignGroup
	export function emptyRefSignGroup():Ref<SignGroup>
	export function refOfSignGroup(x:SignGroup,v:Ref<SignGroup>)
	export function unRefSignGroup(v:Ref<SignGroup>):SignGroup
	export function emptyCreateApprovalReq():CreateApprovalReq
	export function emptyRefCreateApprovalReq():Ref<CreateApprovalReq>
	export function refOfCreateApprovalReq(x:CreateApprovalReq,v:Ref<CreateApprovalReq>)
	export function unRefCreateApprovalReq(v:Ref<CreateApprovalReq>):CreateApprovalReq
	export function emptyMyAiComment():MyAiComment
	export function emptyRefMyAiComment():Ref<MyAiComment>
	export function refOfMyAiComment(x:MyAiComment,v:Ref<MyAiComment>)
	export function unRefMyAiComment(v:Ref<MyAiComment>):MyAiComment
	export function emptyP1WorkApprovalV4():P1WorkApprovalV4
	export function emptyRefP1WorkApprovalV4():Ref<P1WorkApprovalV4>
	export function refOfP1WorkApprovalV4(x:P1WorkApprovalV4,v:Ref<P1WorkApprovalV4>)
	export function unRefP1WorkApprovalV4(v:Ref<P1WorkApprovalV4>):P1WorkApprovalV4
	export function emptyResubmitTaskReq():ResubmitTaskReq
	export function emptyRefResubmitTaskReq():Ref<ResubmitTaskReq>
	export function refOfResubmitTaskReq(x:ResubmitTaskReq,v:Ref<ResubmitTaskReq>)
	export function unRefResubmitTaskReq(v:Ref<ResubmitTaskReq>):ResubmitTaskReq
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyInstanceSearchApprovalExternal():InstanceSearchApprovalExternal
	export function emptyRefInstanceSearchApprovalExternal():Ref<InstanceSearchApprovalExternal>
	export function refOfInstanceSearchApprovalExternal(x:InstanceSearchApprovalExternal,v:Ref<InstanceSearchApprovalExternal>)
	export function unRefInstanceSearchApprovalExternal(v:Ref<InstanceSearchApprovalExternal>):InstanceSearchApprovalExternal
}