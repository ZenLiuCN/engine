// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/block/v2'{

	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import type {Struct,Ref,error,bool} from 'go'
	export interface CreateEntityPathReqBodyBuilder extends Struct<CreateEntityPathReqBodyBuilder>{

			title(title:string):Ref<CreateEntityPathReqBodyBuilder>
			blockTypeId(blockTypeId:string):Ref<CreateEntityPathReqBodyBuilder>
			sourceData(sourceData:string):Ref<CreateEntityPathReqBodyBuilder>
			sourceMeta(sourceMeta:string):Ref<CreateEntityPathReqBodyBuilder>
			version(version:string):Ref<CreateEntityPathReqBodyBuilder>
			sourceLink(sourceLink:string):Ref<CreateEntityPathReqBodyBuilder>
			owner(owner:string):Ref<CreateEntityPathReqBodyBuilder>
			extra(extra:string):Ref<CreateEntityPathReqBodyBuilder>
			i18nSummary(i18nSummary:string):Ref<CreateEntityPathReqBodyBuilder>
			i18nPreview(i18nPreview:string):Ref<CreateEntityPathReqBodyBuilder>
			summary(summary:string):Ref<CreateEntityPathReqBodyBuilder>
			preview(preview:string):Ref<CreateEntityPathReqBodyBuilder>
			build():Ref<CreateEntityReqBody>
	}
	export interface CreateEntityReq extends Struct<CreateEntityReq>{

			body:Ref<CreateEntityReqBody>
	}
	export interface CreateEntityReqBody extends Struct<CreateEntityReqBody>{

			title:Ref<string>
			blockTypeId:Ref<string>
			sourceData:Ref<string>
			sourceMeta:Ref<string>
			version:Ref<string>
			sourceLink:Ref<string>
			owner:Ref<string>
			extra:Ref<string>
			i18nSummary:Ref<string>
			i18nPreview:Ref<string>
			summary:Ref<string>
			preview:Ref<string>
	}
	export interface CreateEntityReqBodyBuilder extends Struct<CreateEntityReqBodyBuilder>{

			title(title:string):Ref<CreateEntityReqBodyBuilder>
			blockTypeId(blockTypeId:string):Ref<CreateEntityReqBodyBuilder>
			sourceData(sourceData:string):Ref<CreateEntityReqBodyBuilder>
			sourceMeta(sourceMeta:string):Ref<CreateEntityReqBodyBuilder>
			version(version:string):Ref<CreateEntityReqBodyBuilder>
			sourceLink(sourceLink:string):Ref<CreateEntityReqBodyBuilder>
			owner(owner:string):Ref<CreateEntityReqBodyBuilder>
			extra(extra:string):Ref<CreateEntityReqBodyBuilder>
			i18nSummary(i18nSummary:string):Ref<CreateEntityReqBodyBuilder>
			i18nPreview(i18nPreview:string):Ref<CreateEntityReqBodyBuilder>
			summary(summary:string):Ref<CreateEntityReqBodyBuilder>
			preview(preview:string):Ref<CreateEntityReqBodyBuilder>
			build():Ref<CreateEntityReqBody>
	}
	export interface CreateEntityReqBuilder extends Struct<CreateEntityReqBuilder>{

			body(body:Ref<CreateEntityReqBody>):Ref<CreateEntityReqBuilder>
			build():Ref<CreateEntityReq>
	}
	export interface CreateEntityResp extends Struct<CreateEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateEntityRespData>
			success():bool
	}
	export interface CreateEntityRespData extends Struct<CreateEntityRespData>{

			entity:Ref<Entity>
	}
	export interface CreateMessageReq extends Struct<CreateMessageReq>{

			message:Ref<Message>
	}
	export interface CreateMessageReqBuilder extends Struct<CreateMessageReqBuilder>{

			message(message:Ref<Message>):Ref<CreateMessageReqBuilder>
			build():Ref<CreateMessageReq>
	}
	export interface CreateMessageResp extends Struct<CreateMessageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Entity extends Struct<Entity>{

			blockId:Ref<string>
			title:Ref<string>
			blockTypeId:Ref<string>
			sourceData:Ref<string>
			sourceMeta:Ref<string>
			version:Ref<string>
			sourceLink:Ref<string>
			summary:Ref<string>
			preview:Ref<string>
			i18nSummay:Ref<string>
			i18nPreview:Ref<string>
			owner:Ref<string>
			extra:Ref<string>
	}
	export interface EntityBuilder extends Struct<EntityBuilder>{

			blockId(blockId:string):Ref<EntityBuilder>
			title(title:string):Ref<EntityBuilder>
			blockTypeId(blockTypeId:string):Ref<EntityBuilder>
			sourceData(sourceData:string):Ref<EntityBuilder>
			sourceMeta(sourceMeta:string):Ref<EntityBuilder>
			version(version:string):Ref<EntityBuilder>
			sourceLink(sourceLink:string):Ref<EntityBuilder>
			summary(summary:string):Ref<EntityBuilder>
			preview(preview:string):Ref<EntityBuilder>
			i18nSummay(i18nSummay:string):Ref<EntityBuilder>
			i18nPreview(i18nPreview:string):Ref<EntityBuilder>
			owner(owner:string):Ref<EntityBuilder>
			extra(extra:string):Ref<EntityBuilder>
			build():Ref<Entity>
	}
	export interface Message extends Struct<Message>{

			body:Ref<string>
			version:Ref<string>
			blockId:Ref<string>
			resource:Ref<string>
			openIds:string[]
	}
	export interface MessageBuilder extends Struct<MessageBuilder>{

			body(body:string):Ref<MessageBuilder>
			version(version:string):Ref<MessageBuilder>
			blockId(blockId:string):Ref<MessageBuilder>
			resource(resource:string):Ref<MessageBuilder>
			openIds(openIds:string[]):Ref<MessageBuilder>
			build():Ref<Message>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V2>

	export function newCreateEntityPathReqBodyBuilder():Ref<CreateEntityPathReqBodyBuilder>

	export function newCreateEntityReqBodyBuilder():Ref<CreateEntityReqBodyBuilder>

	export function newCreateEntityReqBuilder():Ref<CreateEntityReqBuilder>

	export function newCreateMessageReqBuilder():Ref<CreateMessageReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newEntityBuilder():Ref<EntityBuilder>

	export function newMessageBuilder():Ref<MessageBuilder>

	export function newUpdateEntityReqBuilder():Ref<UpdateEntityReqBuilder>

	export interface UpdateEntityReq extends Struct<UpdateEntityReq>{

			entity:Ref<Entity>
	}
	export interface UpdateEntityReqBuilder extends Struct<UpdateEntityReqBuilder>{

			blockId(blockId:string):Ref<UpdateEntityReqBuilder>
			entity(entity:Ref<Entity>):Ref<UpdateEntityReqBuilder>
			build():Ref<UpdateEntityReq>
	}
	export interface UpdateEntityResp extends Struct<UpdateEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface V2 extends Struct<V2>{

			entity:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateEntityResp>
				update(ctx:context.Context,req:Ref<UpdateEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateEntityResp>
			}>
			message:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateMessageReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateMessageResp>
			}>
	}
	export function emptyCreateEntityRespData():CreateEntityRespData
	export function emptyRefCreateEntityRespData():Ref<CreateEntityRespData>
	export function refOfCreateEntityRespData(x:CreateEntityRespData,v:Ref<CreateEntityRespData>)
	export function unRefCreateEntityRespData(v:Ref<CreateEntityRespData>):CreateEntityRespData
	export function emptyV2():V2
	export function emptyRefV2():Ref<V2>
	export function refOfV2(x:V2,v:Ref<V2>)
	export function unRefV2(v:Ref<V2>):V2
	export function emptyCreateEntityReq():CreateEntityReq
	export function emptyRefCreateEntityReq():Ref<CreateEntityReq>
	export function refOfCreateEntityReq(x:CreateEntityReq,v:Ref<CreateEntityReq>)
	export function unRefCreateEntityReq(v:Ref<CreateEntityReq>):CreateEntityReq
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyMessage():Message
	export function emptyRefMessage():Ref<Message>
	export function refOfMessage(x:Message,v:Ref<Message>)
	export function unRefMessage(v:Ref<Message>):Message
	export function emptyCreateEntityResp():CreateEntityResp
	export function emptyRefCreateEntityResp():Ref<CreateEntityResp>
	export function refOfCreateEntityResp(x:CreateEntityResp,v:Ref<CreateEntityResp>)
	export function unRefCreateEntityResp(v:Ref<CreateEntityResp>):CreateEntityResp
	export function emptyCreateMessageResp():CreateMessageResp
	export function emptyRefCreateMessageResp():Ref<CreateMessageResp>
	export function refOfCreateMessageResp(x:CreateMessageResp,v:Ref<CreateMessageResp>)
	export function unRefCreateMessageResp(v:Ref<CreateMessageResp>):CreateMessageResp
	export function emptyCreateMessageReq():CreateMessageReq
	export function emptyRefCreateMessageReq():Ref<CreateMessageReq>
	export function refOfCreateMessageReq(x:CreateMessageReq,v:Ref<CreateMessageReq>)
	export function unRefCreateMessageReq(v:Ref<CreateMessageReq>):CreateMessageReq
	export function emptyEntity():Entity
	export function emptyRefEntity():Ref<Entity>
	export function refOfEntity(x:Entity,v:Ref<Entity>)
	export function unRefEntity(v:Ref<Entity>):Entity
	export function emptyUpdateEntityReq():UpdateEntityReq
	export function emptyRefUpdateEntityReq():Ref<UpdateEntityReq>
	export function refOfUpdateEntityReq(x:UpdateEntityReq,v:Ref<UpdateEntityReq>)
	export function unRefUpdateEntityReq(v:Ref<UpdateEntityReq>):UpdateEntityReq
	export function emptyUpdateEntityResp():UpdateEntityResp
	export function emptyRefUpdateEntityResp():Ref<UpdateEntityResp>
	export function refOfUpdateEntityResp(x:UpdateEntityResp,v:Ref<UpdateEntityResp>)
	export function unRefUpdateEntityResp(v:Ref<UpdateEntityResp>):UpdateEntityResp
	export function emptyCreateEntityReqBody():CreateEntityReqBody
	export function emptyRefCreateEntityReqBody():Ref<CreateEntityReqBody>
	export function refOfCreateEntityReqBody(x:CreateEntityReqBody,v:Ref<CreateEntityReqBody>)
	export function unRefCreateEntityReqBody(v:Ref<CreateEntityReqBody>):CreateEntityReqBody
}