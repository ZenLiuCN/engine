// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/optical_char_recognition/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {error,bool,Alias,Nothing,Struct,Ref} from 'go'
	export interface BasicRecognizeImagePathReqBodyBuilder extends Struct<BasicRecognizeImagePathReqBodyBuilder>{

			image(image:string):Ref<BasicRecognizeImagePathReqBodyBuilder>
			build():Ref<BasicRecognizeImageReqBody>
	}
	export interface BasicRecognizeImageReq extends Struct<BasicRecognizeImageReq>{

			body:Ref<BasicRecognizeImageReqBody>
	}
	export interface BasicRecognizeImageReqBody extends Struct<BasicRecognizeImageReqBody>{

			image:Ref<string>
	}
	export interface BasicRecognizeImageReqBodyBuilder extends Struct<BasicRecognizeImageReqBodyBuilder>{

			image(image:string):Ref<BasicRecognizeImageReqBodyBuilder>
			build():Ref<BasicRecognizeImageReqBody>
	}
	export interface BasicRecognizeImageReqBuilder extends Struct<BasicRecognizeImageReqBuilder>{

			body(body:Ref<BasicRecognizeImageReqBody>):Ref<BasicRecognizeImageReqBuilder>
			build():Ref<BasicRecognizeImageReq>
	}
	export interface BasicRecognizeImageResp extends Struct<BasicRecognizeImageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BasicRecognizeImageRespData>
			success():bool
	}
	export interface BasicRecognizeImageRespData extends Struct<BasicRecognizeImageRespData>{

			textList:string[]
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Image extends Alias<Nothing>{

	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newBasicRecognizeImagePathReqBodyBuilder():Ref<BasicRecognizeImagePathReqBodyBuilder>

	export function newBasicRecognizeImageReqBodyBuilder():Ref<BasicRecognizeImageReqBodyBuilder>

	export function newBasicRecognizeImageReqBuilder():Ref<BasicRecognizeImageReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export interface V1 extends Struct<V1>{

			image:Ref<{
			
				basicRecognize(ctx:context.Context,req:Ref<BasicRecognizeImageReq>,...options:larkcore.RequestOptionFunc[]):Ref<BasicRecognizeImageResp>
			}>
	}
	export function emptyBasicRecognizeImageRespData():BasicRecognizeImageRespData
	export function emptyRefBasicRecognizeImageRespData():Ref<BasicRecognizeImageRespData>
	export function refOfBasicRecognizeImageRespData(x:BasicRecognizeImageRespData,v:Ref<BasicRecognizeImageRespData>)
	export function unRefBasicRecognizeImageRespData(v:Ref<BasicRecognizeImageRespData>):BasicRecognizeImageRespData
	export function emptyBasicRecognizeImageReq():BasicRecognizeImageReq
	export function emptyRefBasicRecognizeImageReq():Ref<BasicRecognizeImageReq>
	export function refOfBasicRecognizeImageReq(x:BasicRecognizeImageReq,v:Ref<BasicRecognizeImageReq>)
	export function unRefBasicRecognizeImageReq(v:Ref<BasicRecognizeImageReq>):BasicRecognizeImageReq
	export function emptyBasicRecognizeImageReqBody():BasicRecognizeImageReqBody
	export function emptyRefBasicRecognizeImageReqBody():Ref<BasicRecognizeImageReqBody>
	export function refOfBasicRecognizeImageReqBody(x:BasicRecognizeImageReqBody,v:Ref<BasicRecognizeImageReqBody>)
	export function unRefBasicRecognizeImageReqBody(v:Ref<BasicRecognizeImageReqBody>):BasicRecognizeImageReqBody
	export function emptyBasicRecognizeImageResp():BasicRecognizeImageResp
	export function emptyRefBasicRecognizeImageResp():Ref<BasicRecognizeImageResp>
	export function refOfBasicRecognizeImageResp(x:BasicRecognizeImageResp,v:Ref<BasicRecognizeImageResp>)
	export function unRefBasicRecognizeImageResp(v:Ref<BasicRecognizeImageResp>):BasicRecognizeImageResp
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
}