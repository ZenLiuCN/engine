// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/admin/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Struct,bool,float64,error,Ref,int} from 'go'
	export interface AdminDeptStat extends Struct<AdminDeptStat>{

			date:Ref<string>
			departmentId:Ref<string>
			departmentName:Ref<string>
			departmentPath:Ref<string>
			totalUserNum:Ref<int>
			activeUserNum:Ref<int>
			activeUserRate:Ref<string>
			suiteDau:Ref<int>
			suiteActiveRate:Ref<string>
			newUserNum:Ref<int>
			newActiveNum:Ref<int>
			resignUserNum:Ref<int>
			imDau:Ref<int>
			sendMessengerUserNum:Ref<int>
			sendMessengerNum:Ref<int>
			avgSendMessengerNum:Ref<string>
			docsDau:Ref<int>
			createDocsUserNum:Ref<int>
			createDocsNum:Ref<int>
			avgCreateDocsNum:Ref<string>
			calDau:Ref<int>
			createCalUserNum:Ref<int>
			createCalNum:Ref<int>
			avgCreateCalNum:Ref<string>
			vcDau:Ref<int>
			vcDuration:Ref<int>
			avgVcDuration:Ref<string>
			avgDuration:Ref<string>
			taskDau:Ref<int>
			createTaskUserNum:Ref<int>
			createTaskNum:Ref<int>
			avgCreateTaskNum:Ref<string>
			emailSendCount:Ref<string>
			emailReceiveCount:Ref<string>
			emailSendExtCount:Ref<string>
			emailReceiveExtCount:Ref<string>
			emailSendInCount:Ref<string>
			emailReceiveInCount:Ref<string>
	}
	export interface AdminDeptStatBuilder extends Struct<AdminDeptStatBuilder>{

			date(date:string):Ref<AdminDeptStatBuilder>
			departmentId(departmentId:string):Ref<AdminDeptStatBuilder>
			departmentName(departmentName:string):Ref<AdminDeptStatBuilder>
			departmentPath(departmentPath:string):Ref<AdminDeptStatBuilder>
			totalUserNum(totalUserNum:int):Ref<AdminDeptStatBuilder>
			activeUserNum(activeUserNum:int):Ref<AdminDeptStatBuilder>
			activeUserRate(activeUserRate:string):Ref<AdminDeptStatBuilder>
			suiteDau(suiteDau:int):Ref<AdminDeptStatBuilder>
			suiteActiveRate(suiteActiveRate:string):Ref<AdminDeptStatBuilder>
			newUserNum(newUserNum:int):Ref<AdminDeptStatBuilder>
			newActiveNum(newActiveNum:int):Ref<AdminDeptStatBuilder>
			resignUserNum(resignUserNum:int):Ref<AdminDeptStatBuilder>
			imDau(imDau:int):Ref<AdminDeptStatBuilder>
			sendMessengerUserNum(sendMessengerUserNum:int):Ref<AdminDeptStatBuilder>
			sendMessengerNum(sendMessengerNum:int):Ref<AdminDeptStatBuilder>
			avgSendMessengerNum(avgSendMessengerNum:string):Ref<AdminDeptStatBuilder>
			docsDau(docsDau:int):Ref<AdminDeptStatBuilder>
			createDocsUserNum(createDocsUserNum:int):Ref<AdminDeptStatBuilder>
			createDocsNum(createDocsNum:int):Ref<AdminDeptStatBuilder>
			avgCreateDocsNum(avgCreateDocsNum:string):Ref<AdminDeptStatBuilder>
			calDau(calDau:int):Ref<AdminDeptStatBuilder>
			createCalUserNum(createCalUserNum:int):Ref<AdminDeptStatBuilder>
			createCalNum(createCalNum:int):Ref<AdminDeptStatBuilder>
			avgCreateCalNum(avgCreateCalNum:string):Ref<AdminDeptStatBuilder>
			vcDau(vcDau:int):Ref<AdminDeptStatBuilder>
			vcDuration(vcDuration:int):Ref<AdminDeptStatBuilder>
			avgVcDuration(avgVcDuration:string):Ref<AdminDeptStatBuilder>
			avgDuration(avgDuration:string):Ref<AdminDeptStatBuilder>
			taskDau(taskDau:int):Ref<AdminDeptStatBuilder>
			createTaskUserNum(createTaskUserNum:int):Ref<AdminDeptStatBuilder>
			createTaskNum(createTaskNum:int):Ref<AdminDeptStatBuilder>
			avgCreateTaskNum(avgCreateTaskNum:string):Ref<AdminDeptStatBuilder>
			emailSendCount(emailSendCount:string):Ref<AdminDeptStatBuilder>
			emailReceiveCount(emailReceiveCount:string):Ref<AdminDeptStatBuilder>
			emailSendExtCount(emailSendExtCount:string):Ref<AdminDeptStatBuilder>
			emailReceiveExtCount(emailReceiveExtCount:string):Ref<AdminDeptStatBuilder>
			emailSendInCount(emailSendInCount:string):Ref<AdminDeptStatBuilder>
			emailReceiveInCount(emailReceiveInCount:string):Ref<AdminDeptStatBuilder>
			build():Ref<AdminDeptStat>
	}
	export interface AdminUserStat extends Struct<AdminUserStat>{

			date:Ref<string>
			userId:Ref<string>
			userName:Ref<string>
			departmentName:Ref<string>
			departmentPath:Ref<string>
			createTime:Ref<string>
			userActiveFlag:Ref<int>
			registerTime:Ref<string>
			suiteActiveFlag:Ref<int>
			lastActiveTime:Ref<string>
			imActiveFlag:Ref<int>
			sendMessengerNum:Ref<int>
			docsActiveFlag:Ref<int>
			createDocsNum:Ref<int>
			calActiveFlag:Ref<int>
			createCalNum:Ref<int>
			vcActiveFlag:Ref<int>
			vcDuration:Ref<int>
			activeOs:Ref<string>
			createTaskNum:Ref<int>
			vcNum:Ref<int>
			appPackageType:Ref<string>
			osName:Ref<string>
			emailSendCount:Ref<string>
			emailReceiveCount:Ref<string>
			emailSendExtCount:Ref<string>
			emailReceiveExtCount:Ref<string>
			emailSendInCount:Ref<string>
			emailReceiveInCount:Ref<string>
	}
	export interface AdminUserStatBuilder extends Struct<AdminUserStatBuilder>{

			date(date:string):Ref<AdminUserStatBuilder>
			userId(userId:string):Ref<AdminUserStatBuilder>
			userName(userName:string):Ref<AdminUserStatBuilder>
			departmentName(departmentName:string):Ref<AdminUserStatBuilder>
			departmentPath(departmentPath:string):Ref<AdminUserStatBuilder>
			createTime(createTime:string):Ref<AdminUserStatBuilder>
			userActiveFlag(userActiveFlag:int):Ref<AdminUserStatBuilder>
			registerTime(registerTime:string):Ref<AdminUserStatBuilder>
			suiteActiveFlag(suiteActiveFlag:int):Ref<AdminUserStatBuilder>
			lastActiveTime(lastActiveTime:string):Ref<AdminUserStatBuilder>
			imActiveFlag(imActiveFlag:int):Ref<AdminUserStatBuilder>
			sendMessengerNum(sendMessengerNum:int):Ref<AdminUserStatBuilder>
			docsActiveFlag(docsActiveFlag:int):Ref<AdminUserStatBuilder>
			createDocsNum(createDocsNum:int):Ref<AdminUserStatBuilder>
			calActiveFlag(calActiveFlag:int):Ref<AdminUserStatBuilder>
			createCalNum(createCalNum:int):Ref<AdminUserStatBuilder>
			vcActiveFlag(vcActiveFlag:int):Ref<AdminUserStatBuilder>
			vcDuration(vcDuration:int):Ref<AdminUserStatBuilder>
			activeOs(activeOs:string):Ref<AdminUserStatBuilder>
			createTaskNum(createTaskNum:int):Ref<AdminUserStatBuilder>
			vcNum(vcNum:int):Ref<AdminUserStatBuilder>
			appPackageType(appPackageType:string):Ref<AdminUserStatBuilder>
			osName(osName:string):Ref<AdminUserStatBuilder>
			emailSendCount(emailSendCount:string):Ref<AdminUserStatBuilder>
			emailReceiveCount(emailReceiveCount:string):Ref<AdminUserStatBuilder>
			emailSendExtCount(emailSendExtCount:string):Ref<AdminUserStatBuilder>
			emailReceiveExtCount(emailReceiveExtCount:string):Ref<AdminUserStatBuilder>
			emailSendInCount(emailSendInCount:string):Ref<AdminUserStatBuilder>
			emailReceiveInCount(emailReceiveInCount:string):Ref<AdminUserStatBuilder>
			build():Ref<AdminUserStat>
	}
	export interface Administrator extends Struct<Administrator>{

			userId:Ref<string>
			isSuperAdministrator:Ref<bool>
			isAdministrator:Ref<bool>
	}
	export interface AdministratorBuilder extends Struct<AdministratorBuilder>{

			userId(userId:string):Ref<AdministratorBuilder>
			isSuperAdministrator(isSuperAdministrator:bool):Ref<AdministratorBuilder>
			isAdministrator(isAdministrator:bool):Ref<AdministratorBuilder>
			build():Ref<Administrator>
	}
	export interface AnnualReportMapFloat extends Struct<AnnualReportMapFloat>{

			year:Ref<string>
			num:Ref<float64>
	}
	export interface AnnualReportMapFloatBuilder extends Struct<AnnualReportMapFloatBuilder>{

			year(year:string):Ref<AnnualReportMapFloatBuilder>
			num(num:float64):Ref<AnnualReportMapFloatBuilder>
			build():Ref<AnnualReportMapFloat>
	}
	export interface AnnualReportMapInt extends Struct<AnnualReportMapInt>{

			year:Ref<string>
			count:Ref<string>
	}
	export interface AnnualReportMapIntBuilder extends Struct<AnnualReportMapIntBuilder>{

			year(year:string):Ref<AnnualReportMapIntBuilder>
			count(count:string):Ref<AnnualReportMapIntBuilder>
			build():Ref<AnnualReportMapInt>
	}
	export interface ApiAuditCommonDrawers extends Struct<ApiAuditCommonDrawers>{

			commonDrawInfoList:Ref<ApiAuditDrawerInfo>[]
	}
	export interface ApiAuditCommonDrawersBuilder extends Struct<ApiAuditCommonDrawersBuilder>{

			commonDrawInfoList(commonDrawInfoList:Ref<ApiAuditDrawerInfo>[]):Ref<ApiAuditCommonDrawersBuilder>
			build():Ref<ApiAuditCommonDrawers>
	}
	export interface ApiAuditDrawerInfo extends Struct<ApiAuditDrawerInfo>{

			infoKey:Ref<string>
			infoVal:Ref<string>
			keyI18nKey:Ref<string>
			valType:Ref<string>
			valI18nKey:Ref<string>
	}
	export interface ApiAuditDrawerInfoBuilder extends Struct<ApiAuditDrawerInfoBuilder>{

			infoKey(infoKey:string):Ref<ApiAuditDrawerInfoBuilder>
			infoVal(infoVal:string):Ref<ApiAuditDrawerInfoBuilder>
			keyI18nKey(keyI18nKey:string):Ref<ApiAuditDrawerInfoBuilder>
			valType(valType:string):Ref<ApiAuditDrawerInfoBuilder>
			valI18nKey(valI18nKey:string):Ref<ApiAuditDrawerInfoBuilder>
			build():Ref<ApiAuditDrawerInfo>
	}
	export interface AuditAndroidContext extends Struct<AuditAndroidContext>{

			udid:Ref<string>
			did:Ref<string>
			appVer:Ref<string>
			ver:Ref<string>
			region:Ref<string>
			idI:Ref<string>
			idR:Ref<string>
			hwBrand:Ref<string>
			hwManuf:Ref<string>
			wifip:Ref<string>
			routeIip:Ref<string>
			routeGip:Ref<string>
			envSu:Ref<string>
			envTz:Ref<string>
			envMl:Ref<string>
			location:Ref<string>
			activeIp:Ref<string>
			activeIpDetail:Ref<string>
			cellBaseStation:Ref<string>
			ip:Ref<string>
	}
	export interface AuditAndroidContextBuilder extends Struct<AuditAndroidContextBuilder>{

			udid(udid:string):Ref<AuditAndroidContextBuilder>
			did(did:string):Ref<AuditAndroidContextBuilder>
			appVer(appVer:string):Ref<AuditAndroidContextBuilder>
			ver(ver:string):Ref<AuditAndroidContextBuilder>
			region(region:string):Ref<AuditAndroidContextBuilder>
			idI(idI:string):Ref<AuditAndroidContextBuilder>
			idR(idR:string):Ref<AuditAndroidContextBuilder>
			hwBrand(hwBrand:string):Ref<AuditAndroidContextBuilder>
			hwManuf(hwManuf:string):Ref<AuditAndroidContextBuilder>
			wifip(wifip:string):Ref<AuditAndroidContextBuilder>
			routeIip(routeIip:string):Ref<AuditAndroidContextBuilder>
			routeGip(routeGip:string):Ref<AuditAndroidContextBuilder>
			envSu(envSu:string):Ref<AuditAndroidContextBuilder>
			envTz(envTz:string):Ref<AuditAndroidContextBuilder>
			envMl(envMl:string):Ref<AuditAndroidContextBuilder>
			location(location:string):Ref<AuditAndroidContextBuilder>
			activeIp(activeIp:string):Ref<AuditAndroidContextBuilder>
			activeIpDetail(activeIpDetail:string):Ref<AuditAndroidContextBuilder>
			cellBaseStation(cellBaseStation:string):Ref<AuditAndroidContextBuilder>
			ip(iP:string):Ref<AuditAndroidContextBuilder>
			build():Ref<AuditAndroidContext>
	}
	export interface AuditContext extends Struct<AuditContext>{

			terminalType:Ref<int>
			iosContext:Ref<AuditIosContext>
			pcContext:Ref<AuditPcContext>
			webContext:Ref<AuditWebContext>
			androidContext:Ref<AuditAndroidContext>
	}
	export interface AuditContextBuilder extends Struct<AuditContextBuilder>{

			terminalType(terminalType:int):Ref<AuditContextBuilder>
			iosContext(iosContext:Ref<AuditIosContext>):Ref<AuditContextBuilder>
			pcContext(pcContext:Ref<AuditPcContext>):Ref<AuditContextBuilder>
			webContext(webContext:Ref<AuditWebContext>):Ref<AuditContextBuilder>
			androidContext(androidContext:Ref<AuditAndroidContext>):Ref<AuditContextBuilder>
			build():Ref<AuditContext>
	}
	export interface AuditDetail extends Struct<AuditDetail>{

			mc:Ref<string>
			deviceModel:Ref<string>
			os:Ref<string>
			city:Ref<string>
	}
	export interface AuditDetailBuilder extends Struct<AuditDetailBuilder>{

			mc(mc:string):Ref<AuditDetailBuilder>
			deviceModel(deviceModel:string):Ref<AuditDetailBuilder>
			os(os:string):Ref<AuditDetailBuilder>
			city(city:string):Ref<AuditDetailBuilder>
			build():Ref<AuditDetail>
	}
	export interface AuditEventExtend extends Struct<AuditEventExtend>{

			commentType:Ref<string>
			appDetail:Ref<string>
			twoStepValidation:Ref<bool>
			loginMethod:Ref<string>
			newPeopleNumInVideo:Ref<int>
			externalPeopleNumInVideo:Ref<int>
			externalPeopleNumInChat:Ref<int>
			joinGroup:Ref<int>
			quitGroup:Ref<int>
			externalPeopleNumInDocShare:Ref<int>
	}
	export interface AuditEventExtendBuilder extends Struct<AuditEventExtendBuilder>{

			commentType(commentType:string):Ref<AuditEventExtendBuilder>
			appDetail(appDetail:string):Ref<AuditEventExtendBuilder>
			twoStepValidation(twoStepValidation:bool):Ref<AuditEventExtendBuilder>
			loginMethod(loginMethod:string):Ref<AuditEventExtendBuilder>
			newPeopleNumInVideo(newPeopleNumInVideo:int):Ref<AuditEventExtendBuilder>
			externalPeopleNumInVideo(externalPeopleNumInVideo:int):Ref<AuditEventExtendBuilder>
			externalPeopleNumInChat(externalPeopleNumInChat:int):Ref<AuditEventExtendBuilder>
			joinGroup(joinGroup:int):Ref<AuditEventExtendBuilder>
			quitGroup(quitGroup:int):Ref<AuditEventExtendBuilder>
			externalPeopleNumInDocShare(externalPeopleNumInDocShare:int):Ref<AuditEventExtendBuilder>
			build():Ref<AuditEventExtend>
	}
	export interface AuditInfo extends Struct<AuditInfo>{

			eventId:Ref<string>
			uniqueId:Ref<string>
			eventName:Ref<string>
			departmentIds:string[]
			eventModule:Ref<int>
			operatorType:Ref<int>
			operatorValue:Ref<string>
			objects:Ref<AuditObjectEntity>[]
			recipients:Ref<AuditRecipientEntity>[]
			eventTime:Ref<int>
			ip:Ref<string>
			operatorApp:Ref<string>
			auditContext:Ref<AuditContext>
			extend:Ref<AuditEventExtend>
			operatorAppName:Ref<string>
			commonDrawers:Ref<ApiAuditCommonDrawers>
			auditDetail:Ref<AuditDetail>
			operatorTenant:Ref<string>
	}
	export interface AuditInfoBuilder extends Struct<AuditInfoBuilder>{

			eventId(eventId:string):Ref<AuditInfoBuilder>
			uniqueId(uniqueId:string):Ref<AuditInfoBuilder>
			eventName(eventName:string):Ref<AuditInfoBuilder>
			departmentIds(departmentIds:string[]):Ref<AuditInfoBuilder>
			eventModule(eventModule:int):Ref<AuditInfoBuilder>
			operatorType(operatorType:int):Ref<AuditInfoBuilder>
			operatorValue(operatorValue:string):Ref<AuditInfoBuilder>
			objects(objects:Ref<AuditObjectEntity>[]):Ref<AuditInfoBuilder>
			recipients(recipients:Ref<AuditRecipientEntity>[]):Ref<AuditInfoBuilder>
			eventTime(eventTime:int):Ref<AuditInfoBuilder>
			ip(ip:string):Ref<AuditInfoBuilder>
			operatorApp(operatorApp:string):Ref<AuditInfoBuilder>
			auditContext(auditContext:Ref<AuditContext>):Ref<AuditInfoBuilder>
			extend(extend:Ref<AuditEventExtend>):Ref<AuditInfoBuilder>
			operatorAppName(operatorAppName:string):Ref<AuditInfoBuilder>
			commonDrawers(commonDrawers:Ref<ApiAuditCommonDrawers>):Ref<AuditInfoBuilder>
			auditDetail(auditDetail:Ref<AuditDetail>):Ref<AuditInfoBuilder>
			operatorTenant(operatorTenant:string):Ref<AuditInfoBuilder>
			build():Ref<AuditInfo>
	}
	export interface AuditIosContext extends Struct<AuditIosContext>{

			udid:Ref<string>
			did:Ref<string>
			appVer:Ref<string>
			ver:Ref<string>
			os:Ref<string>
			stZone:Ref<string>
			ml:Ref<string>
			sjd:Ref<string>
			proxyip:Ref<string>
			wifip:Ref<string>
			location:Ref<string>
			activeIp:Ref<string>
			activeIpDetail:Ref<string>
			cellBaseStation:Ref<string>
			ip:Ref<string>
	}
	export interface AuditIosContextBuilder extends Struct<AuditIosContextBuilder>{

			udid(udid:string):Ref<AuditIosContextBuilder>
			did(did:string):Ref<AuditIosContextBuilder>
			appVer(appVer:string):Ref<AuditIosContextBuilder>
			ver(ver:string):Ref<AuditIosContextBuilder>
			os(os:string):Ref<AuditIosContextBuilder>
			stZone(sTZone:string):Ref<AuditIosContextBuilder>
			ml(mL:string):Ref<AuditIosContextBuilder>
			sjd(sjd:string):Ref<AuditIosContextBuilder>
			proxyip(proxyip:string):Ref<AuditIosContextBuilder>
			wifip(wifip:string):Ref<AuditIosContextBuilder>
			location(location:string):Ref<AuditIosContextBuilder>
			activeIp(activeIp:string):Ref<AuditIosContextBuilder>
			activeIpDetail(activeIpDetail:string):Ref<AuditIosContextBuilder>
			cellBaseStation(cellBaseStation:string):Ref<AuditIosContextBuilder>
			ip(iP:string):Ref<AuditIosContextBuilder>
			build():Ref<AuditIosContext>
	}
	export interface AuditObjectDetail extends Struct<AuditObjectDetail>{

			cloneSource:Ref<string>
			textDetail:Ref<string>
			fileName:Ref<string>
			thirdPartyAppID:Ref<string>
			containFileNum:Ref<int>
			permissionSettingType:Ref<string>
			permissionExternalAccessType:Ref<bool>
			permissionShareType:Ref<string>
			fileServiceSource:Ref<string>
			okrDownloadContent:Ref<string>
			containerType:Ref<string>
			containerId:Ref<string>
			currentPage:Ref<string>
	}
	export interface AuditObjectDetailBuilder extends Struct<AuditObjectDetailBuilder>{

			cloneSource(cloneSource:string):Ref<AuditObjectDetailBuilder>
			textDetail(textDetail:string):Ref<AuditObjectDetailBuilder>
			fileName(fileName:string):Ref<AuditObjectDetailBuilder>
			thirdPartyAppID(thirdPartyAppID:string):Ref<AuditObjectDetailBuilder>
			containFileNum(containFileNum:int):Ref<AuditObjectDetailBuilder>
			permissionSettingType(permissionSettingType:string):Ref<AuditObjectDetailBuilder>
			permissionExternalAccessType(permissionExternalAccessType:bool):Ref<AuditObjectDetailBuilder>
			permissionShareType(permissionShareType:string):Ref<AuditObjectDetailBuilder>
			fileServiceSource(fileServiceSource:string):Ref<AuditObjectDetailBuilder>
			okrDownloadContent(okrDownloadContent:string):Ref<AuditObjectDetailBuilder>
			containerType(containerType:string):Ref<AuditObjectDetailBuilder>
			containerId(containerId:string):Ref<AuditObjectDetailBuilder>
			currentPage(currentPage:string):Ref<AuditObjectDetailBuilder>
			build():Ref<AuditObjectDetail>
	}
	export interface AuditObjectEntity extends Struct<AuditObjectEntity>{

			objectType:Ref<string>
			objectValue:Ref<string>
			objectName:Ref<string>
			objectOwner:Ref<string>
			objectDetail:Ref<AuditObjectDetail>
	}
	export interface AuditObjectEntityBuilder extends Struct<AuditObjectEntityBuilder>{

			objectType(objectType:string):Ref<AuditObjectEntityBuilder>
			objectValue(objectValue:string):Ref<AuditObjectEntityBuilder>
			objectName(objectName:string):Ref<AuditObjectEntityBuilder>
			objectOwner(objectOwner:string):Ref<AuditObjectEntityBuilder>
			objectDetail(objectDetail:Ref<AuditObjectDetail>):Ref<AuditObjectEntityBuilder>
			build():Ref<AuditObjectEntity>
	}
	export interface AuditPcContext extends Struct<AuditPcContext>{

			udid:Ref<string>
			did:Ref<string>
			appVer:Ref<string>
			ver:Ref<string>
			os:Ref<string>
			wifip:Ref<string>
			region:Ref<string>
			ip:Ref<string>
	}
	export interface AuditPcContextBuilder extends Struct<AuditPcContextBuilder>{

			udid(udid:string):Ref<AuditPcContextBuilder>
			did(did:string):Ref<AuditPcContextBuilder>
			appVer(appVer:string):Ref<AuditPcContextBuilder>
			ver(ver:string):Ref<AuditPcContextBuilder>
			os(os:string):Ref<AuditPcContextBuilder>
			wifip(wifip:string):Ref<AuditPcContextBuilder>
			region(region:string):Ref<AuditPcContextBuilder>
			ip(iP:string):Ref<AuditPcContextBuilder>
			build():Ref<AuditPcContext>
	}
	export interface AuditRecipientDetail extends Struct<AuditRecipientDetail>{

			permissionActionType:Ref<string>
	}
	export interface AuditRecipientDetailBuilder extends Struct<AuditRecipientDetailBuilder>{

			permissionActionType(permissionActionType:string):Ref<AuditRecipientDetailBuilder>
			build():Ref<AuditRecipientDetail>
	}
	export interface AuditRecipientEntity extends Struct<AuditRecipientEntity>{

			recipientType:Ref<string>
			recipientValue:Ref<string>
			recipientDetail:Ref<AuditRecipientDetail>
	}
	export interface AuditRecipientEntityBuilder extends Struct<AuditRecipientEntityBuilder>{

			recipientType(recipientType:string):Ref<AuditRecipientEntityBuilder>
			recipientValue(recipientValue:string):Ref<AuditRecipientEntityBuilder>
			recipientDetail(recipientDetail:Ref<AuditRecipientDetail>):Ref<AuditRecipientEntityBuilder>
			build():Ref<AuditRecipientEntity>
	}
	export interface AuditWebContext extends Struct<AuditWebContext>{

			userAgent:Ref<string>
			ip:Ref<string>
	}
	export interface AuditWebContextBuilder extends Struct<AuditWebContextBuilder>{

			userAgent(userAgent:string):Ref<AuditWebContextBuilder>
			ip(iP:string):Ref<AuditWebContextBuilder>
			build():Ref<AuditWebContext>
	}
	export interface Badge extends Struct<Badge>{

			id:Ref<string>
			name:Ref<string>
			explanation:Ref<string>
			detailImage:Ref<string>
			showImage:Ref<string>
			i18nName:Ref<I18n>
			i18nExplanation:Ref<I18n>
	}
	export interface BadgeBuilder extends Struct<BadgeBuilder>{

			id(id:string):Ref<BadgeBuilder>
			name(name:string):Ref<BadgeBuilder>
			explanation(explanation:string):Ref<BadgeBuilder>
			detailImage(detailImage:string):Ref<BadgeBuilder>
			showImage(showImage:string):Ref<BadgeBuilder>
			i18nName(i18nName:Ref<I18n>):Ref<BadgeBuilder>
			i18nExplanation(i18nExplanation:Ref<I18n>):Ref<BadgeBuilder>
			build():Ref<Badge>
	}
	export interface CreateBadgeGrantReq extends Struct<CreateBadgeGrantReq>{

			grant:Ref<Grant>
	}
	export interface CreateBadgeGrantReqBuilder extends Struct<CreateBadgeGrantReqBuilder>{

			badgeId(badgeId:string):Ref<CreateBadgeGrantReqBuilder>
			userIdType(userIdType:string):Ref<CreateBadgeGrantReqBuilder>
			departmentIdType(departmentIdType:string):Ref<CreateBadgeGrantReqBuilder>
			grant(grant:Ref<Grant>):Ref<CreateBadgeGrantReqBuilder>
			build():Ref<CreateBadgeGrantReq>
	}
	export interface CreateBadgeGrantResp extends Struct<CreateBadgeGrantResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateBadgeGrantRespData>
			success():bool
	}
	export interface CreateBadgeGrantRespData extends Struct<CreateBadgeGrantRespData>{

			grant:Ref<Grant>
	}
	export interface CreateBadgeImagePathReqBodyBuilder extends Struct<CreateBadgeImagePathReqBodyBuilder>{

			imageFilePath(imageFilePath:string):Ref<CreateBadgeImagePathReqBodyBuilder>
			imageType(imageType:int):Ref<CreateBadgeImagePathReqBodyBuilder>
			build():Ref<CreateBadgeImageReqBody>
	}
	export interface CreateBadgeImageReq extends Struct<CreateBadgeImageReq>{

			body:Ref<CreateBadgeImageReqBody>
	}
	export interface CreateBadgeImageReqBody extends Struct<CreateBadgeImageReqBody>{

			imageFile:io.Reader
			imageType:Ref<int>
	}
	export interface CreateBadgeImageReqBodyBuilder extends Struct<CreateBadgeImageReqBodyBuilder>{

			imageFile(imageFile:io.Reader):Ref<CreateBadgeImageReqBodyBuilder>
			imageType(imageType:int):Ref<CreateBadgeImageReqBodyBuilder>
			build():Ref<CreateBadgeImageReqBody>
	}
	export interface CreateBadgeImageReqBuilder extends Struct<CreateBadgeImageReqBuilder>{

			body(body:Ref<CreateBadgeImageReqBody>):Ref<CreateBadgeImageReqBuilder>
			build():Ref<CreateBadgeImageReq>
	}
	export interface CreateBadgeImageResp extends Struct<CreateBadgeImageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateBadgeImageRespData>
			success():bool
	}
	export interface CreateBadgeImageRespData extends Struct<CreateBadgeImageRespData>{

			imageKey:Ref<string>
	}
	export interface CreateBadgeReq extends Struct<CreateBadgeReq>{

			badge:Ref<Badge>
	}
	export interface CreateBadgeReqBuilder extends Struct<CreateBadgeReqBuilder>{

			badge(badge:Ref<Badge>):Ref<CreateBadgeReqBuilder>
			build():Ref<CreateBadgeReq>
	}
	export interface CreateBadgeResp extends Struct<CreateBadgeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateBadgeRespData>
			success():bool
	}
	export interface CreateBadgeRespData extends Struct<CreateBadgeRespData>{

			badge:Ref<Badge>
	}
	export interface DeleteBadgeGrantReq extends Struct<DeleteBadgeGrantReq>{

	}
	export interface DeleteBadgeGrantReqBuilder extends Struct<DeleteBadgeGrantReqBuilder>{

			badgeId(badgeId:string):Ref<DeleteBadgeGrantReqBuilder>
			grantId(grantId:string):Ref<DeleteBadgeGrantReqBuilder>
			build():Ref<DeleteBadgeGrantReq>
	}
	export interface DeleteBadgeGrantResp extends Struct<DeleteBadgeGrantResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	//"department_id"
	export const DepartmentIdTypeCreateBadgeGrantDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeCreateBadgeGrantOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeGetBadgeGrantDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeGetBadgeGrantOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeListAdminUserStatDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeListAdminUserStatOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeListBadgeGrantDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeListBadgeGrantOpenDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeUpdateBadgeGrantDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeUpdateBadgeGrantOpenDepartmentId:string
	export interface File extends Struct<File>{

			title:Ref<string>
			type:Ref<string>
			owner:Ref<User>
			size:Ref<string>
			lastOpTime:Ref<string>
			status:Ref<string>
			token:Ref<string>
	}
	export interface FileBuilder extends Struct<FileBuilder>{

			title(title:string):Ref<FileBuilder>
			type(type_:string):Ref<FileBuilder>
			owner(owner:Ref<User>):Ref<FileBuilder>
			size(size:string):Ref<FileBuilder>
			lastOpTime(lastOpTime:string):Ref<FileBuilder>
			status(status:string):Ref<FileBuilder>
			token(token:string):Ref<FileBuilder>
			build():Ref<File>
	}
	export interface FileList extends Struct<FileList>{

			files:Ref<File>[]
	}
	export interface FileListBuilder extends Struct<FileListBuilder>{

			files(files:Ref<File>[]):Ref<FileListBuilder>
			build():Ref<FileList>
	}
	export interface GetBadgeGrantReq extends Struct<GetBadgeGrantReq>{

	}
	export interface GetBadgeGrantReqBuilder extends Struct<GetBadgeGrantReqBuilder>{

			badgeId(badgeId:string):Ref<GetBadgeGrantReqBuilder>
			grantId(grantId:string):Ref<GetBadgeGrantReqBuilder>
			userIdType(userIdType:string):Ref<GetBadgeGrantReqBuilder>
			departmentIdType(departmentIdType:string):Ref<GetBadgeGrantReqBuilder>
			build():Ref<GetBadgeGrantReq>
	}
	export interface GetBadgeGrantResp extends Struct<GetBadgeGrantResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetBadgeGrantRespData>
			success():bool
	}
	export interface GetBadgeGrantRespData extends Struct<GetBadgeGrantRespData>{

			grant:Ref<Grant>
	}
	export interface GetBadgeReq extends Struct<GetBadgeReq>{

	}
	export interface GetBadgeReqBuilder extends Struct<GetBadgeReqBuilder>{

			badgeId(badgeId:string):Ref<GetBadgeReqBuilder>
			build():Ref<GetBadgeReq>
	}
	export interface GetBadgeResp extends Struct<GetBadgeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetBadgeRespData>
			success():bool
	}
	export interface GetBadgeRespData extends Struct<GetBadgeRespData>{

			badge:Ref<Badge>
	}
	export interface Grant extends Struct<Grant>{

			id:Ref<string>
			badgeId:Ref<string>
			name:Ref<string>
			grantType:Ref<int>
			timeZone:Ref<string>
			ruleDetail:Ref<RuleDetail>
			isGrantAll:Ref<bool>
			userIds:string[]
			departmentIds:string[]
			groupIds:string[]
	}
	export interface GrantBuilder extends Struct<GrantBuilder>{

			id(id:string):Ref<GrantBuilder>
			badgeId(badgeId:string):Ref<GrantBuilder>
			name(name:string):Ref<GrantBuilder>
			grantType(grantType:int):Ref<GrantBuilder>
			timeZone(timeZone:string):Ref<GrantBuilder>
			ruleDetail(ruleDetail:Ref<RuleDetail>):Ref<GrantBuilder>
			isGrantAll(isGrantAll:bool):Ref<GrantBuilder>
			userIds(userIds:string[]):Ref<GrantBuilder>
			departmentIds(departmentIds:string[]):Ref<GrantBuilder>
			groupIds(groupIds:string[]):Ref<GrantBuilder>
			build():Ref<Grant>
	}
	//1
	export const GrantTypeJoinTime:int
	//0
	export const GrantTypeManual:int
	//1
	export const GrantTypeUpdateBadgeGrantJoinTime:int
	//0
	export const GrantTypeUpdateBadgeGrantManual:int
	export interface I18n extends Struct<I18n>{

			zhCn:Ref<string>
			enUs:Ref<string>
			jaJp:Ref<string>
	}
	export interface I18nBuilder extends Struct<I18nBuilder>{

			zhCn(zhCn:string):Ref<I18nBuilder>
			enUs(enUs:string):Ref<I18nBuilder>
			jaJp(jaJp:string):Ref<I18nBuilder>
			build():Ref<I18n>
	}
	//1
	export const ImageTypeDetail:int
	//2
	export const ImageTypeShow:int
	export interface ListAdminDeptStatReq extends Struct<ListAdminDeptStatReq>{

	}
	export interface ListAdminDeptStatReqBuilder extends Struct<ListAdminDeptStatReqBuilder>{

			departmentIdType(departmentIdType:string):Ref<ListAdminDeptStatReqBuilder>
			startDate(startDate:string):Ref<ListAdminDeptStatReqBuilder>
			endDate(endDate:string):Ref<ListAdminDeptStatReqBuilder>
			departmentId(departmentId:string):Ref<ListAdminDeptStatReqBuilder>
			containsChildDept(containsChildDept:bool):Ref<ListAdminDeptStatReqBuilder>
			pageSize(pageSize:int):Ref<ListAdminDeptStatReqBuilder>
			pageToken(pageToken:string):Ref<ListAdminDeptStatReqBuilder>
			targetGeo(targetGeo:string):Ref<ListAdminDeptStatReqBuilder>
			build():Ref<ListAdminDeptStatReq>
	}
	export interface ListAdminDeptStatResp extends Struct<ListAdminDeptStatResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListAdminDeptStatRespData>
			success():bool
	}
	export interface ListAdminDeptStatRespData extends Struct<ListAdminDeptStatRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<AdminDeptStat>[]
	}
	export interface ListAdminUserStatReq extends Struct<ListAdminUserStatReq>{

	}
	export interface ListAdminUserStatReqBuilder extends Struct<ListAdminUserStatReqBuilder>{

			userIdType(userIdType:string):Ref<ListAdminUserStatReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListAdminUserStatReqBuilder>
			startDate(startDate:string):Ref<ListAdminUserStatReqBuilder>
			endDate(endDate:string):Ref<ListAdminUserStatReqBuilder>
			departmentId(departmentId:string):Ref<ListAdminUserStatReqBuilder>
			userId(userId:string):Ref<ListAdminUserStatReqBuilder>
			pageSize(pageSize:int):Ref<ListAdminUserStatReqBuilder>
			pageToken(pageToken:string):Ref<ListAdminUserStatReqBuilder>
			targetGeo(targetGeo:string):Ref<ListAdminUserStatReqBuilder>
			build():Ref<ListAdminUserStatReq>
	}
	export interface ListAdminUserStatResp extends Struct<ListAdminUserStatResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListAdminUserStatRespData>
			success():bool
	}
	export interface ListAdminUserStatRespData extends Struct<ListAdminUserStatRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<AdminUserStat>[]
	}
	export interface ListAuditInfoIterator extends Struct<ListAuditInfoIterator>{

			next():[bool,Ref<AuditInfo>]
			nextPageToken():Ref<string>
	}
	export interface ListAuditInfoReq extends Struct<ListAuditInfoReq>{

			limit:int
	}
	export interface ListAuditInfoReqBuilder extends Struct<ListAuditInfoReqBuilder>{

			limit(limit:int):Ref<ListAuditInfoReqBuilder>
			userIdType(userIdType:string):Ref<ListAuditInfoReqBuilder>
			latest(latest:int):Ref<ListAuditInfoReqBuilder>
			oldest(oldest:int):Ref<ListAuditInfoReqBuilder>
			eventName(eventName:string):Ref<ListAuditInfoReqBuilder>
			operatorType(operatorType:string):Ref<ListAuditInfoReqBuilder>
			operatorValue(operatorValue:string):Ref<ListAuditInfoReqBuilder>
			eventModule(eventModule:int):Ref<ListAuditInfoReqBuilder>
			pageToken(pageToken:string):Ref<ListAuditInfoReqBuilder>
			pageSize(pageSize:int):Ref<ListAuditInfoReqBuilder>
			userType(userType:int):Ref<ListAuditInfoReqBuilder>
			objectType(objectType:int):Ref<ListAuditInfoReqBuilder>
			objectValue(objectValue:string):Ref<ListAuditInfoReqBuilder>
			build():Ref<ListAuditInfoReq>
	}
	export interface ListAuditInfoResp extends Struct<ListAuditInfoResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListAuditInfoRespData>
			success():bool
	}
	export interface ListAuditInfoRespData extends Struct<ListAuditInfoRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<AuditInfo>[]
	}
	export interface ListBadgeGrantIterator extends Struct<ListBadgeGrantIterator>{

			next():[bool,Ref<Grant>]
			nextPageToken():Ref<string>
	}
	export interface ListBadgeGrantReq extends Struct<ListBadgeGrantReq>{

			limit:int
	}
	export interface ListBadgeGrantReqBuilder extends Struct<ListBadgeGrantReqBuilder>{

			limit(limit:int):Ref<ListBadgeGrantReqBuilder>
			badgeId(badgeId:string):Ref<ListBadgeGrantReqBuilder>
			pageSize(pageSize:int):Ref<ListBadgeGrantReqBuilder>
			pageToken(pageToken:string):Ref<ListBadgeGrantReqBuilder>
			userIdType(userIdType:string):Ref<ListBadgeGrantReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListBadgeGrantReqBuilder>
			name(name:string):Ref<ListBadgeGrantReqBuilder>
			build():Ref<ListBadgeGrantReq>
	}
	export interface ListBadgeGrantResp extends Struct<ListBadgeGrantResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListBadgeGrantRespData>
			success():bool
	}
	export interface ListBadgeGrantRespData extends Struct<ListBadgeGrantRespData>{

			grants:Ref<Grant>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListBadgeIterator extends Struct<ListBadgeIterator>{

			next():[bool,Ref<Badge>]
			nextPageToken():Ref<string>
	}
	export interface ListBadgeReq extends Struct<ListBadgeReq>{

			limit:int
	}
	export interface ListBadgeReqBuilder extends Struct<ListBadgeReqBuilder>{

			limit(limit:int):Ref<ListBadgeReqBuilder>
			pageSize(pageSize:int):Ref<ListBadgeReqBuilder>
			pageToken(pageToken:string):Ref<ListBadgeReqBuilder>
			name(name:string):Ref<ListBadgeReqBuilder>
			build():Ref<ListBadgeReq>
	}
	export interface ListBadgeResp extends Struct<ListBadgeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListBadgeRespData>
			success():bool
	}
	export interface ListBadgeRespData extends Struct<ListBadgeRespData>{

			badges:Ref<Badge>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAdminDeptStatBuilder():Ref<AdminDeptStatBuilder>

	export function newAdminUserStatBuilder():Ref<AdminUserStatBuilder>

	export function newAdministratorBuilder():Ref<AdministratorBuilder>

	export function newAnnualReportMapFloatBuilder():Ref<AnnualReportMapFloatBuilder>

	export function newAnnualReportMapIntBuilder():Ref<AnnualReportMapIntBuilder>

	export function newApiAuditCommonDrawersBuilder():Ref<ApiAuditCommonDrawersBuilder>

	export function newApiAuditDrawerInfoBuilder():Ref<ApiAuditDrawerInfoBuilder>

	export function newAuditAndroidContextBuilder():Ref<AuditAndroidContextBuilder>

	export function newAuditContextBuilder():Ref<AuditContextBuilder>

	export function newAuditDetailBuilder():Ref<AuditDetailBuilder>

	export function newAuditEventExtendBuilder():Ref<AuditEventExtendBuilder>

	export function newAuditInfoBuilder():Ref<AuditInfoBuilder>

	export function newAuditIosContextBuilder():Ref<AuditIosContextBuilder>

	export function newAuditObjectDetailBuilder():Ref<AuditObjectDetailBuilder>

	export function newAuditObjectEntityBuilder():Ref<AuditObjectEntityBuilder>

	export function newAuditPcContextBuilder():Ref<AuditPcContextBuilder>

	export function newAuditRecipientDetailBuilder():Ref<AuditRecipientDetailBuilder>

	export function newAuditRecipientEntityBuilder():Ref<AuditRecipientEntityBuilder>

	export function newAuditWebContextBuilder():Ref<AuditWebContextBuilder>

	export function newBadgeBuilder():Ref<BadgeBuilder>

	export function newCreateBadgeGrantReqBuilder():Ref<CreateBadgeGrantReqBuilder>

	export function newCreateBadgeImagePathReqBodyBuilder():Ref<CreateBadgeImagePathReqBodyBuilder>

	export function newCreateBadgeImageReqBodyBuilder():Ref<CreateBadgeImageReqBodyBuilder>

	export function newCreateBadgeImageReqBuilder():Ref<CreateBadgeImageReqBuilder>

	export function newCreateBadgeReqBuilder():Ref<CreateBadgeReqBuilder>

	export function newDeleteBadgeGrantReqBuilder():Ref<DeleteBadgeGrantReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newFileBuilder():Ref<FileBuilder>

	export function newFileListBuilder():Ref<FileListBuilder>

	export function newGetBadgeGrantReqBuilder():Ref<GetBadgeGrantReqBuilder>

	export function newGetBadgeReqBuilder():Ref<GetBadgeReqBuilder>

	export function newGrantBuilder():Ref<GrantBuilder>

	export function newI18nBuilder():Ref<I18nBuilder>

	export function newListAdminDeptStatReqBuilder():Ref<ListAdminDeptStatReqBuilder>

	export function newListAdminUserStatReqBuilder():Ref<ListAdminUserStatReqBuilder>

	export function newListAuditInfoReqBuilder():Ref<ListAuditInfoReqBuilder>

	export function newListBadgeGrantReqBuilder():Ref<ListBadgeGrantReqBuilder>

	export function newListBadgeReqBuilder():Ref<ListBadgeReqBuilder>

	export function newPasswordBuilder():Ref<PasswordBuilder>

	export function newResetPasswordPathReqBodyBuilder():Ref<ResetPasswordPathReqBodyBuilder>

	export function newResetPasswordReqBodyBuilder():Ref<ResetPasswordReqBodyBuilder>

	export function newResetPasswordReqBuilder():Ref<ResetPasswordReqBuilder>

	export function newRuleDetailBuilder():Ref<RuleDetailBuilder>

	export function newSplashPageStatBuilder():Ref<SplashPageStatBuilder>

	export function newTaskBuilder():Ref<TaskBuilder>

	export function newUpdateBadgeGrantReqBuilder():Ref<UpdateBadgeGrantReqBuilder>

	export function newUpdateBadgeReqBuilder():Ref<UpdateBadgeReqBuilder>

	export function newUserAnnualReportBuilder():Ref<UserAnnualReportBuilder>

	export function newUserBuilder():Ref<UserBuilder>

	export function newUserReport2021Builder():Ref<UserReport2021Builder>

	export function newUserReport2022Builder():Ref<UserReport2022Builder>

	export function newUserReport2023Builder():Ref<UserReport2023Builder>

	//"bot"
	export const OperatorTypeBot:string
	//"user"
	export const OperatorTypeUser:string
	export interface Password extends Struct<Password>{

			entEmailPassword:Ref<string>
	}
	export interface PasswordBuilder extends Struct<PasswordBuilder>{

			entEmailPassword(entEmailPassword:string):Ref<PasswordBuilder>
			build():Ref<Password>
	}
	export interface ResetPasswordPathReqBodyBuilder extends Struct<ResetPasswordPathReqBodyBuilder>{

			password(password:Ref<Password>):Ref<ResetPasswordPathReqBodyBuilder>
			userId(userId:string):Ref<ResetPasswordPathReqBodyBuilder>
			build():Ref<ResetPasswordReqBody>
	}
	export interface ResetPasswordReq extends Struct<ResetPasswordReq>{

			body:Ref<ResetPasswordReqBody>
	}
	export interface ResetPasswordReqBody extends Struct<ResetPasswordReqBody>{

			password:Ref<Password>
			userId:Ref<string>
	}
	export interface ResetPasswordReqBodyBuilder extends Struct<ResetPasswordReqBodyBuilder>{

			password(password:Ref<Password>):Ref<ResetPasswordReqBodyBuilder>
			userId(userId:string):Ref<ResetPasswordReqBodyBuilder>
			build():Ref<ResetPasswordReqBody>
	}
	export interface ResetPasswordReqBuilder extends Struct<ResetPasswordReqBuilder>{

			userIdType(userIdType:string):Ref<ResetPasswordReqBuilder>
			body(body:Ref<ResetPasswordReqBody>):Ref<ResetPasswordReqBuilder>
			build():Ref<ResetPasswordReq>
	}
	export interface ResetPasswordResp extends Struct<ResetPasswordResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface RuleDetail extends Struct<RuleDetail>{

			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			anniversary:Ref<int>
			effectivePeriod:Ref<int>
	}
	export interface RuleDetailBuilder extends Struct<RuleDetailBuilder>{

			effectiveTime(effectiveTime:string):Ref<RuleDetailBuilder>
			expirationTime(expirationTime:string):Ref<RuleDetailBuilder>
			anniversary(anniversary:int):Ref<RuleDetailBuilder>
			effectivePeriod(effectivePeriod:int):Ref<RuleDetailBuilder>
			build():Ref<RuleDetail>
	}
	export interface SplashPageStat extends Struct<SplashPageStat>{

			date:Ref<string>
			splashId:Ref<string>
			impressionCount:Ref<int>
			clickCount:Ref<int>
			skipCount:Ref<int>
			impressionCountAccumulate:Ref<int>
			clickCountAccumulate:Ref<int>
			skipCountAccumulate:Ref<int>
	}
	export interface SplashPageStatBuilder extends Struct<SplashPageStatBuilder>{

			date(date:string):Ref<SplashPageStatBuilder>
			splashId(splashId:string):Ref<SplashPageStatBuilder>
			impressionCount(impressionCount:int):Ref<SplashPageStatBuilder>
			clickCount(clickCount:int):Ref<SplashPageStatBuilder>
			skipCount(skipCount:int):Ref<SplashPageStatBuilder>
			impressionCountAccumulate(impressionCountAccumulate:int):Ref<SplashPageStatBuilder>
			clickCountAccumulate(clickCountAccumulate:int):Ref<SplashPageStatBuilder>
			skipCountAccumulate(skipCountAccumulate:int):Ref<SplashPageStatBuilder>
			build():Ref<SplashPageStat>
	}
	export interface Task extends Struct<Task>{

			originalUserId:Ref<string>
			targetOwnerId:Ref<string>
			fileList:Ref<File>[]
			taskId:Ref<string>
			status:Ref<int>
			originalUserEmail:Ref<string>
			targetOwnerEmail:Ref<string>
	}
	export interface TaskBuilder extends Struct<TaskBuilder>{

			originalUserId(originalUserId:string):Ref<TaskBuilder>
			targetOwnerId(targetOwnerId:string):Ref<TaskBuilder>
			fileList(fileList:Ref<File>[]):Ref<TaskBuilder>
			taskId(taskId:string):Ref<TaskBuilder>
			status(status:int):Ref<TaskBuilder>
			originalUserEmail(originalUserEmail:string):Ref<TaskBuilder>
			targetOwnerEmail(targetOwnerEmail:string):Ref<TaskBuilder>
			build():Ref<Task>
	}
	export interface UpdateBadgeGrantReq extends Struct<UpdateBadgeGrantReq>{

			grant:Ref<Grant>
	}
	export interface UpdateBadgeGrantReqBuilder extends Struct<UpdateBadgeGrantReqBuilder>{

			badgeId(badgeId:string):Ref<UpdateBadgeGrantReqBuilder>
			grantId(grantId:string):Ref<UpdateBadgeGrantReqBuilder>
			userIdType(userIdType:string):Ref<UpdateBadgeGrantReqBuilder>
			departmentIdType(departmentIdType:string):Ref<UpdateBadgeGrantReqBuilder>
			grant(grant:Ref<Grant>):Ref<UpdateBadgeGrantReqBuilder>
			build():Ref<UpdateBadgeGrantReq>
	}
	export interface UpdateBadgeGrantResp extends Struct<UpdateBadgeGrantResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateBadgeGrantRespData>
			success():bool
	}
	export interface UpdateBadgeGrantRespData extends Struct<UpdateBadgeGrantRespData>{

			grant:Ref<Grant>
	}
	export interface UpdateBadgeReq extends Struct<UpdateBadgeReq>{

			badge:Ref<Badge>
	}
	export interface UpdateBadgeReqBuilder extends Struct<UpdateBadgeReqBuilder>{

			badgeId(badgeId:string):Ref<UpdateBadgeReqBuilder>
			badge(badge:Ref<Badge>):Ref<UpdateBadgeReqBuilder>
			build():Ref<UpdateBadgeReq>
	}
	export interface UpdateBadgeResp extends Struct<UpdateBadgeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateBadgeRespData>
			success():bool
	}
	export interface UpdateBadgeRespData extends Struct<UpdateBadgeRespData>{

			badge:Ref<Badge>
	}
	export interface User extends Struct<User>{

			name:Ref<string>
			avatar:Ref<string>
			id:Ref<string>
	}
	export interface UserAnnualReport extends Struct<UserAnnualReport>{

			year2021:Ref<UserReport2021>
			year2022:Ref<UserReport2022>
			year2023:Ref<UserReport2023>
	}
	export interface UserAnnualReportBuilder extends Struct<UserAnnualReportBuilder>{

			year2021(year2021:Ref<UserReport2021>):Ref<UserAnnualReportBuilder>
			year2022(year2022:Ref<UserReport2022>):Ref<UserAnnualReportBuilder>
			year2023(year2023:Ref<UserReport2023>):Ref<UserAnnualReportBuilder>
			build():Ref<UserAnnualReport>
	}
	export interface UserBuilder extends Struct<UserBuilder>{

			name(name:string):Ref<UserBuilder>
			avatar(avatar:string):Ref<UserBuilder>
			id(id:string):Ref<UserBuilder>
			build():Ref<User>
	}
	//"open_id"
	export const UserIdTypeCreateBadgeGrantOpenId:string
	//"union_id"
	export const UserIdTypeCreateBadgeGrantUnionId:string
	//"user_id"
	export const UserIdTypeCreateBadgeGrantUserId:string
	//"open_id"
	export const UserIdTypeGetBadgeGrantOpenId:string
	//"union_id"
	export const UserIdTypeGetBadgeGrantUnionId:string
	//"user_id"
	export const UserIdTypeGetBadgeGrantUserId:string
	//"open_id"
	export const UserIdTypeListAuditInfoOpenId:string
	//"union_id"
	export const UserIdTypeListAuditInfoUnionId:string
	//"user_id"
	export const UserIdTypeListAuditInfoUserId:string
	//"open_id"
	export const UserIdTypeListBadgeGrantOpenId:string
	//"union_id"
	export const UserIdTypeListBadgeGrantUnionId:string
	//"user_id"
	export const UserIdTypeListBadgeGrantUserId:string
	//"open_id"
	export const UserIdTypeOpenId:string
	//"open_id"
	export const UserIdTypeResetPasswordOpenId:string
	//"union_id"
	export const UserIdTypeResetPasswordUnionId:string
	//"user_id"
	export const UserIdTypeResetPasswordUserId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"open_id"
	export const UserIdTypeUpdateBadgeGrantOpenId:string
	//"union_id"
	export const UserIdTypeUpdateBadgeGrantUnionId:string
	//"user_id"
	export const UserIdTypeUpdateBadgeGrantUserId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface UserReport2021 extends Struct<UserReport2021>{

			activeDayCount:Ref<int>
			busyWeek:Ref<string>
			p2pChatCount:Ref<string>
			talkedChatCount:Ref<string>
			favoriteEmoji:Ref<string>
			reactionCount:Ref<string>
			conferenceCreateCount:Ref<string>
			totalPartiCount:Ref<string>
			minutesObjectCount:Ref<string>
			minutesDuration:Ref<float64>
			createEditFileCount:Ref<string>
			createFileCount:Ref<string>
			cooperateEditFileCount:Ref<string>
			likeRecordCount:Ref<string>
			okrCumOCount:Ref<string>
			okrCumKrCount:Ref<string>
			okrAlignedUserRankfirst:Ref<string>
			approvalStartCount:Ref<string>
			approvalExecuteCount:Ref<string>
			approvalRelationUserRankfirst:Ref<string>
			userId:Ref<string>
			busyWeekSumDuration:Ref<string>
			busyWeekMdate:Ref<string>
			busyWeekActDays:Ref<int>
			createReadUserCount:Ref<string>
	}
	export interface UserReport2021Builder extends Struct<UserReport2021Builder>{

			activeDayCount(activeDayCount:int):Ref<UserReport2021Builder>
			busyWeek(busyWeek:string):Ref<UserReport2021Builder>
			p2pChatCount(p2pChatCount:string):Ref<UserReport2021Builder>
			talkedChatCount(talkedChatCount:string):Ref<UserReport2021Builder>
			favoriteEmoji(favoriteEmoji:string):Ref<UserReport2021Builder>
			reactionCount(reactionCount:string):Ref<UserReport2021Builder>
			conferenceCreateCount(conferenceCreateCount:string):Ref<UserReport2021Builder>
			totalPartiCount(totalPartiCount:string):Ref<UserReport2021Builder>
			minutesObjectCount(minutesObjectCount:string):Ref<UserReport2021Builder>
			minutesDuration(minutesDuration:float64):Ref<UserReport2021Builder>
			createEditFileCount(createEditFileCount:string):Ref<UserReport2021Builder>
			createFileCount(createFileCount:string):Ref<UserReport2021Builder>
			cooperateEditFileCount(cooperateEditFileCount:string):Ref<UserReport2021Builder>
			likeRecordCount(likeRecordCount:string):Ref<UserReport2021Builder>
			okrCumOCount(okrCumOCount:string):Ref<UserReport2021Builder>
			okrCumKrCount(okrCumKrCount:string):Ref<UserReport2021Builder>
			okrAlignedUserRankfirst(okrAlignedUserRankfirst:string):Ref<UserReport2021Builder>
			approvalStartCount(approvalStartCount:string):Ref<UserReport2021Builder>
			approvalExecuteCount(approvalExecuteCount:string):Ref<UserReport2021Builder>
			approvalRelationUserRankfirst(approvalRelationUserRankfirst:string):Ref<UserReport2021Builder>
			userId(userId:string):Ref<UserReport2021Builder>
			busyWeekSumDuration(busyWeekSumDuration:string):Ref<UserReport2021Builder>
			busyWeekMdate(busyWeekMdate:string):Ref<UserReport2021Builder>
			busyWeekActDays(busyWeekActDays:int):Ref<UserReport2021Builder>
			createReadUserCount(createReadUserCount:string):Ref<UserReport2021Builder>
			build():Ref<UserReport2021>
	}
	export interface UserReport2022 extends Struct<UserReport2022>{

			userId:Ref<string>
			userRegisterDate:Ref<string>
			activeDayCount:Ref<int>
			msgBusyDate:Ref<string>
			msgBusyDateSendMsgCount:Ref<string>
			p2pChatCount:Ref<string>
			talkedChatCount:Ref<string>
			positiveReactionCount:Ref<string>
			firstPositiveReaction:Ref<string>
			secondPositiveReaction:Ref<string>
			thirdPositiveReaction:Ref<string>
			fourthPositiveReaction:Ref<string>
			fifthPositiveReaction:Ref<string>
			createFileCount:Ref<string>
			createdFileViewCount:Ref<string>
			commentFileCount:Ref<string>
			attendEventCount:Ref<string>
			eventBusyDate:Ref<string>
			eventBusyDateEventCount:Ref<string>
			eventStartTimeRange1:Ref<string>
			conferenceCreateCount:Ref<string>
			totalPartiCount:Ref<string>
			okrCumOCount:Ref<string>
			okrCumKrCount:Ref<string>
			okrAlignedUserCount:Ref<string>
			peopleInterviewNum:Ref<string>
			sendEmailCount:Ref<string>
			receiveEmailCount:Ref<string>
	}
	export interface UserReport2022Builder extends Struct<UserReport2022Builder>{

			userId(userId:string):Ref<UserReport2022Builder>
			userRegisterDate(userRegisterDate:string):Ref<UserReport2022Builder>
			activeDayCount(activeDayCount:int):Ref<UserReport2022Builder>
			msgBusyDate(msgBusyDate:string):Ref<UserReport2022Builder>
			msgBusyDateSendMsgCount(msgBusyDateSendMsgCount:string):Ref<UserReport2022Builder>
			p2pChatCount(p2pChatCount:string):Ref<UserReport2022Builder>
			talkedChatCount(talkedChatCount:string):Ref<UserReport2022Builder>
			positiveReactionCount(positiveReactionCount:string):Ref<UserReport2022Builder>
			firstPositiveReaction(firstPositiveReaction:string):Ref<UserReport2022Builder>
			secondPositiveReaction(secondPositiveReaction:string):Ref<UserReport2022Builder>
			thirdPositiveReaction(thirdPositiveReaction:string):Ref<UserReport2022Builder>
			fourthPositiveReaction(fourthPositiveReaction:string):Ref<UserReport2022Builder>
			fifthPositiveReaction(fifthPositiveReaction:string):Ref<UserReport2022Builder>
			createFileCount(createFileCount:string):Ref<UserReport2022Builder>
			createdFileViewCount(createdFileViewCount:string):Ref<UserReport2022Builder>
			commentFileCount(commentFileCount:string):Ref<UserReport2022Builder>
			attendEventCount(attendEventCount:string):Ref<UserReport2022Builder>
			eventBusyDate(eventBusyDate:string):Ref<UserReport2022Builder>
			eventBusyDateEventCount(eventBusyDateEventCount:string):Ref<UserReport2022Builder>
			eventStartTimeRange1(eventStartTimeRange1:string):Ref<UserReport2022Builder>
			conferenceCreateCount(conferenceCreateCount:string):Ref<UserReport2022Builder>
			totalPartiCount(totalPartiCount:string):Ref<UserReport2022Builder>
			okrCumOCount(okrCumOCount:string):Ref<UserReport2022Builder>
			okrCumKrCount(okrCumKrCount:string):Ref<UserReport2022Builder>
			okrAlignedUserCount(okrAlignedUserCount:string):Ref<UserReport2022Builder>
			peopleInterviewNum(peopleInterviewNum:string):Ref<UserReport2022Builder>
			sendEmailCount(sendEmailCount:string):Ref<UserReport2022Builder>
			receiveEmailCount(receiveEmailCount:string):Ref<UserReport2022Builder>
			build():Ref<UserReport2022>
	}
	export interface UserReport2023 extends Struct<UserReport2023>{

			userId:Ref<string>
			tenantAllCnt:Ref<int>
			userRegisterDate:Ref<string>
			allDayCnt:Ref<int>
			activeDayCnt:Ref<int>
			durationCnt2:Ref<AnnualReportMapFloat>[]
			durationCntRank:Ref<string>
			busyMonth:Ref<string>
			busyMonthSumDuration:Ref<float64>
			busyMonthSendMsgCnt:Ref<int>
			busyMonthMeetingCnt:Ref<int>
			busyMonthLastMeetingTime:Ref<string>
			busyMonthCreateEditFileCnt:Ref<int>
			imSendMsgCnt2:Ref<AnnualReportMapInt>[]
			imSendMsgCntRank:Ref<string>
			imBusyDate:Ref<string>
			imBusyDateSendMsgCnt:Ref<int>
			imLastSendMsgTime:Ref<string>
			imTalkedChatCnt:Ref<int>
			imPrivateChatCnt:Ref<int>
			imEmojiTop1:Ref<string>
			imEmojiTop1Cnt:Ref<string>
			imEmojiTop2:Ref<string>
			imEmojiTop2Cnt:Ref<string>
			imEmojiTop3:Ref<string>
			imEmojiTop3Cnt:Ref<string>
			imPositiveReactionCnt2:Ref<AnnualReportMapInt>[]
			imPositiveReactionCntRank:Ref<string>
			ccmCreateCnt2:Ref<AnnualReportMapInt>[]
			ccmCreateCntRank:Ref<string>
			ccmCreateBusyMonth:Ref<string>
			ccmCreateBusyMonthCnt:Ref<int>
			ccmCreateViewedUcnt:Ref<int>
			ccmCreateLikedCnt:Ref<int>
			ccmCreateLikedCntRank:Ref<string>
			ccmEditCommentFcnt2:Ref<AnnualReportMapInt>[]
			ccmEditCommentFcntRank:Ref<string>
			ccmViewOtherFcnt:Ref<int>
			ccmViewOtherFcntRank:Ref<string>
			vcSentMeetingCnt2:Ref<AnnualReportMapInt>[]
			vcSentMeetingCntRank:Ref<string>
			vcSentMeetingUcnt:Ref<int>
			vcJoinMeetingCnt2:Ref<AnnualReportMapInt>[]
			vcJoinMeetingCntRank:Ref<string>
			vcAllMeetingCnt:Ref<int>
			vcAllMeetingCntRank:Ref<string>
			vcAllMeetingDuration2:Ref<AnnualReportMapFloat>[]
			calCommentCalTime:Ref<string>
			peopleProfileViewCnt:Ref<string>
			peopleInterviewNum2:Ref<AnnualReportMapInt>[]
			peopleInterviewNumRank:Ref<string>
			peopleInterviewOfferNum2:Ref<AnnualReportMapInt>[]
			peopleInterviewOfferNumRank:Ref<string>
			emailSendEmailCount:Ref<int>
			emailReceiveEmailCount:Ref<int>
	}
	export interface UserReport2023Builder extends Struct<UserReport2023Builder>{

			userId(userId:string):Ref<UserReport2023Builder>
			tenantAllCnt(tenantAllCnt:int):Ref<UserReport2023Builder>
			userRegisterDate(userRegisterDate:string):Ref<UserReport2023Builder>
			allDayCnt(allDayCnt:int):Ref<UserReport2023Builder>
			activeDayCnt(activeDayCnt:int):Ref<UserReport2023Builder>
			durationCnt2(durationCnt2:Ref<AnnualReportMapFloat>[]):Ref<UserReport2023Builder>
			durationCntRank(durationCntRank:string):Ref<UserReport2023Builder>
			busyMonth(busyMonth:string):Ref<UserReport2023Builder>
			busyMonthSumDuration(busyMonthSumDuration:float64):Ref<UserReport2023Builder>
			busyMonthSendMsgCnt(busyMonthSendMsgCnt:int):Ref<UserReport2023Builder>
			busyMonthMeetingCnt(busyMonthMeetingCnt:int):Ref<UserReport2023Builder>
			busyMonthLastMeetingTime(busyMonthLastMeetingTime:string):Ref<UserReport2023Builder>
			busyMonthCreateEditFileCnt(busyMonthCreateEditFileCnt:int):Ref<UserReport2023Builder>
			imSendMsgCnt2(imSendMsgCnt2:Ref<AnnualReportMapInt>[]):Ref<UserReport2023Builder>
			imSendMsgCntRank(imSendMsgCntRank:string):Ref<UserReport2023Builder>
			imBusyDate(imBusyDate:string):Ref<UserReport2023Builder>
			imBusyDateSendMsgCnt(imBusyDateSendMsgCnt:int):Ref<UserReport2023Builder>
			imLastSendMsgTime(imLastSendMsgTime:string):Ref<UserReport2023Builder>
			imTalkedChatCnt(imTalkedChatCnt:int):Ref<UserReport2023Builder>
			imPrivateChatCnt(imPrivateChatCnt:int):Ref<UserReport2023Builder>
			imEmojiTop1(imEmojiTop1:string):Ref<UserReport2023Builder>
			imEmojiTop1Cnt(imEmojiTop1Cnt:string):Ref<UserReport2023Builder>
			imEmojiTop2(imEmojiTop2:string):Ref<UserReport2023Builder>
			imEmojiTop2Cnt(imEmojiTop2Cnt:string):Ref<UserReport2023Builder>
			imEmojiTop3(imEmojiTop3:string):Ref<UserReport2023Builder>
			imEmojiTop3Cnt(imEmojiTop3Cnt:string):Ref<UserReport2023Builder>
			imPositiveReactionCnt2(imPositiveReactionCnt2:Ref<AnnualReportMapInt>[]):Ref<UserReport2023Builder>
			imPositiveReactionCntRank(imPositiveReactionCntRank:string):Ref<UserReport2023Builder>
			ccmCreateCnt2(ccmCreateCnt2:Ref<AnnualReportMapInt>[]):Ref<UserReport2023Builder>
			ccmCreateCntRank(ccmCreateCntRank:string):Ref<UserReport2023Builder>
			ccmCreateBusyMonth(ccmCreateBusyMonth:string):Ref<UserReport2023Builder>
			ccmCreateBusyMonthCnt(ccmCreateBusyMonthCnt:int):Ref<UserReport2023Builder>
			ccmCreateViewedUcnt(ccmCreateViewedUcnt:int):Ref<UserReport2023Builder>
			ccmCreateLikedCnt(ccmCreateLikedCnt:int):Ref<UserReport2023Builder>
			ccmCreateLikedCntRank(ccmCreateLikedCntRank:string):Ref<UserReport2023Builder>
			ccmEditCommentFcnt2(ccmEditCommentFcnt2:Ref<AnnualReportMapInt>[]):Ref<UserReport2023Builder>
			ccmEditCommentFcntRank(ccmEditCommentFcntRank:string):Ref<UserReport2023Builder>
			ccmViewOtherFcnt(ccmViewOtherFcnt:int):Ref<UserReport2023Builder>
			ccmViewOtherFcntRank(ccmViewOtherFcntRank:string):Ref<UserReport2023Builder>
			vcSentMeetingCnt2(vcSentMeetingCnt2:Ref<AnnualReportMapInt>[]):Ref<UserReport2023Builder>
			vcSentMeetingCntRank(vcSentMeetingCntRank:string):Ref<UserReport2023Builder>
			vcSentMeetingUcnt(vcSentMeetingUcnt:int):Ref<UserReport2023Builder>
			vcJoinMeetingCnt2(vcJoinMeetingCnt2:Ref<AnnualReportMapInt>[]):Ref<UserReport2023Builder>
			vcJoinMeetingCntRank(vcJoinMeetingCntRank:string):Ref<UserReport2023Builder>
			vcAllMeetingCnt(vcAllMeetingCnt:int):Ref<UserReport2023Builder>
			vcAllMeetingCntRank(vcAllMeetingCntRank:string):Ref<UserReport2023Builder>
			vcAllMeetingDuration2(vcAllMeetingDuration2:Ref<AnnualReportMapFloat>[]):Ref<UserReport2023Builder>
			calCommentCalTime(calCommentCalTime:string):Ref<UserReport2023Builder>
			peopleProfileViewCnt(peopleProfileViewCnt:string):Ref<UserReport2023Builder>
			peopleInterviewNum2(peopleInterviewNum2:Ref<AnnualReportMapInt>[]):Ref<UserReport2023Builder>
			peopleInterviewNumRank(peopleInterviewNumRank:string):Ref<UserReport2023Builder>
			peopleInterviewOfferNum2(peopleInterviewOfferNum2:Ref<AnnualReportMapInt>[]):Ref<UserReport2023Builder>
			peopleInterviewOfferNumRank(peopleInterviewOfferNumRank:string):Ref<UserReport2023Builder>
			emailSendEmailCount(emailSendEmailCount:int):Ref<UserReport2023Builder>
			emailReceiveEmailCount(emailReceiveEmailCount:int):Ref<UserReport2023Builder>
			build():Ref<UserReport2023>
	}
	//0
	export const UserTypeAll:int
	//2
	export const UserTypeExternalUser:int
	//1
	export const UserTypeNormalUser:int
	export interface V1 extends Struct<V1>{

			adminDeptStat:Ref<{
			
				list(ctx:context.Context,req:Ref<ListAdminDeptStatReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListAdminDeptStatResp>
			}>
			adminUserStat:Ref<{
			
				list(ctx:context.Context,req:Ref<ListAdminUserStatReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListAdminUserStatResp>
			}>
			auditInfo:Ref<{
			
				list(ctx:context.Context,req:Ref<ListAuditInfoReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListAuditInfoResp>
				listByIterator(ctx:context.Context,req:Ref<ListAuditInfoReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListAuditInfoIterator>
			}>
			badge:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateBadgeReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateBadgeResp>
				get(ctx:context.Context,req:Ref<GetBadgeReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetBadgeResp>
				list(ctx:context.Context,req:Ref<ListBadgeReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListBadgeResp>
				listByIterator(ctx:context.Context,req:Ref<ListBadgeReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListBadgeIterator>
				update(ctx:context.Context,req:Ref<UpdateBadgeReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateBadgeResp>
			}>
			badgeGrant:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateBadgeGrantReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateBadgeGrantResp>
				delete(ctx:context.Context,req:Ref<DeleteBadgeGrantReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteBadgeGrantResp>
				get(ctx:context.Context,req:Ref<GetBadgeGrantReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetBadgeGrantResp>
				list(ctx:context.Context,req:Ref<ListBadgeGrantReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListBadgeGrantResp>
				listByIterator(ctx:context.Context,req:Ref<ListBadgeGrantReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListBadgeGrantIterator>
				update(ctx:context.Context,req:Ref<UpdateBadgeGrantReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateBadgeGrantResp>
			}>
			badgeImage:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateBadgeImageReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateBadgeImageResp>
			}>
			password:Ref<{
			
				reset(ctx:context.Context,req:Ref<ResetPasswordReq>,...options:larkcore.RequestOptionFunc[]):Ref<ResetPasswordResp>
			}>
	}
	export function emptyAdminUserStat():AdminUserStat
	export function emptyRefAdminUserStat():Ref<AdminUserStat>
	export function refOfAdminUserStat(x:AdminUserStat,v:Ref<AdminUserStat>)
	export function unRefAdminUserStat(v:Ref<AdminUserStat>):AdminUserStat
	export function emptyCreateBadgeResp():CreateBadgeResp
	export function emptyRefCreateBadgeResp():Ref<CreateBadgeResp>
	export function refOfCreateBadgeResp(x:CreateBadgeResp,v:Ref<CreateBadgeResp>)
	export function unRefCreateBadgeResp(v:Ref<CreateBadgeResp>):CreateBadgeResp
	export function emptyListBadgeGrantRespData():ListBadgeGrantRespData
	export function emptyRefListBadgeGrantRespData():Ref<ListBadgeGrantRespData>
	export function refOfListBadgeGrantRespData(x:ListBadgeGrantRespData,v:Ref<ListBadgeGrantRespData>)
	export function unRefListBadgeGrantRespData(v:Ref<ListBadgeGrantRespData>):ListBadgeGrantRespData
	export function emptyCreateBadgeImageReq():CreateBadgeImageReq
	export function emptyRefCreateBadgeImageReq():Ref<CreateBadgeImageReq>
	export function refOfCreateBadgeImageReq(x:CreateBadgeImageReq,v:Ref<CreateBadgeImageReq>)
	export function unRefCreateBadgeImageReq(v:Ref<CreateBadgeImageReq>):CreateBadgeImageReq
	export function emptyCreateBadgeImageResp():CreateBadgeImageResp
	export function emptyRefCreateBadgeImageResp():Ref<CreateBadgeImageResp>
	export function refOfCreateBadgeImageResp(x:CreateBadgeImageResp,v:Ref<CreateBadgeImageResp>)
	export function unRefCreateBadgeImageResp(v:Ref<CreateBadgeImageResp>):CreateBadgeImageResp
	export function emptyListBadgeGrantIterator():ListBadgeGrantIterator
	export function emptyRefListBadgeGrantIterator():Ref<ListBadgeGrantIterator>
	export function refOfListBadgeGrantIterator(x:ListBadgeGrantIterator,v:Ref<ListBadgeGrantIterator>)
	export function unRefListBadgeGrantIterator(v:Ref<ListBadgeGrantIterator>):ListBadgeGrantIterator
	export function emptyAdministrator():Administrator
	export function emptyRefAdministrator():Ref<Administrator>
	export function refOfAdministrator(x:Administrator,v:Ref<Administrator>)
	export function unRefAdministrator(v:Ref<Administrator>):Administrator
	export function emptyResetPasswordPathReqBodyBuilder():ResetPasswordPathReqBodyBuilder
	export function emptyRefResetPasswordPathReqBodyBuilder():Ref<ResetPasswordPathReqBodyBuilder>
	export function refOfResetPasswordPathReqBodyBuilder(x:ResetPasswordPathReqBodyBuilder,v:Ref<ResetPasswordPathReqBodyBuilder>)
	export function unRefResetPasswordPathReqBodyBuilder(v:Ref<ResetPasswordPathReqBodyBuilder>):ResetPasswordPathReqBodyBuilder
	export function emptyListBadgeResp():ListBadgeResp
	export function emptyRefListBadgeResp():Ref<ListBadgeResp>
	export function refOfListBadgeResp(x:ListBadgeResp,v:Ref<ListBadgeResp>)
	export function unRefListBadgeResp(v:Ref<ListBadgeResp>):ListBadgeResp
	export function emptyAuditContext():AuditContext
	export function emptyRefAuditContext():Ref<AuditContext>
	export function refOfAuditContext(x:AuditContext,v:Ref<AuditContext>)
	export function unRefAuditContext(v:Ref<AuditContext>):AuditContext
	export function emptyDeleteBadgeGrantResp():DeleteBadgeGrantResp
	export function emptyRefDeleteBadgeGrantResp():Ref<DeleteBadgeGrantResp>
	export function refOfDeleteBadgeGrantResp(x:DeleteBadgeGrantResp,v:Ref<DeleteBadgeGrantResp>)
	export function unRefDeleteBadgeGrantResp(v:Ref<DeleteBadgeGrantResp>):DeleteBadgeGrantResp
	export function emptySplashPageStatBuilder():SplashPageStatBuilder
	export function emptyRefSplashPageStatBuilder():Ref<SplashPageStatBuilder>
	export function refOfSplashPageStatBuilder(x:SplashPageStatBuilder,v:Ref<SplashPageStatBuilder>)
	export function unRefSplashPageStatBuilder(v:Ref<SplashPageStatBuilder>):SplashPageStatBuilder
	export function emptyUpdateBadgeReqBuilder():UpdateBadgeReqBuilder
	export function emptyRefUpdateBadgeReqBuilder():Ref<UpdateBadgeReqBuilder>
	export function refOfUpdateBadgeReqBuilder(x:UpdateBadgeReqBuilder,v:Ref<UpdateBadgeReqBuilder>)
	export function unRefUpdateBadgeReqBuilder(v:Ref<UpdateBadgeReqBuilder>):UpdateBadgeReqBuilder
	export function emptyUser():User
	export function emptyRefUser():Ref<User>
	export function refOfUser(x:User,v:Ref<User>)
	export function unRefUser(v:Ref<User>):User
	export function emptyAuditRecipientEntityBuilder():AuditRecipientEntityBuilder
	export function emptyRefAuditRecipientEntityBuilder():Ref<AuditRecipientEntityBuilder>
	export function refOfAuditRecipientEntityBuilder(x:AuditRecipientEntityBuilder,v:Ref<AuditRecipientEntityBuilder>)
	export function unRefAuditRecipientEntityBuilder(v:Ref<AuditRecipientEntityBuilder>):AuditRecipientEntityBuilder
	export function emptyAuditWebContextBuilder():AuditWebContextBuilder
	export function emptyRefAuditWebContextBuilder():Ref<AuditWebContextBuilder>
	export function refOfAuditWebContextBuilder(x:AuditWebContextBuilder,v:Ref<AuditWebContextBuilder>)
	export function unRefAuditWebContextBuilder(v:Ref<AuditWebContextBuilder>):AuditWebContextBuilder
	export function emptyDeleteBadgeGrantReqBuilder():DeleteBadgeGrantReqBuilder
	export function emptyRefDeleteBadgeGrantReqBuilder():Ref<DeleteBadgeGrantReqBuilder>
	export function refOfDeleteBadgeGrantReqBuilder(x:DeleteBadgeGrantReqBuilder,v:Ref<DeleteBadgeGrantReqBuilder>)
	export function unRefDeleteBadgeGrantReqBuilder(v:Ref<DeleteBadgeGrantReqBuilder>):DeleteBadgeGrantReqBuilder
	export function emptyListAdminDeptStatResp():ListAdminDeptStatResp
	export function emptyRefListAdminDeptStatResp():Ref<ListAdminDeptStatResp>
	export function refOfListAdminDeptStatResp(x:ListAdminDeptStatResp,v:Ref<ListAdminDeptStatResp>)
	export function unRefListAdminDeptStatResp(v:Ref<ListAdminDeptStatResp>):ListAdminDeptStatResp
	export function emptyRuleDetailBuilder():RuleDetailBuilder
	export function emptyRefRuleDetailBuilder():Ref<RuleDetailBuilder>
	export function refOfRuleDetailBuilder(x:RuleDetailBuilder,v:Ref<RuleDetailBuilder>)
	export function unRefRuleDetailBuilder(v:Ref<RuleDetailBuilder>):RuleDetailBuilder
	export function emptyUpdateBadgeReq():UpdateBadgeReq
	export function emptyRefUpdateBadgeReq():Ref<UpdateBadgeReq>
	export function refOfUpdateBadgeReq(x:UpdateBadgeReq,v:Ref<UpdateBadgeReq>)
	export function unRefUpdateBadgeReq(v:Ref<UpdateBadgeReq>):UpdateBadgeReq
	export function emptyAnnualReportMapInt():AnnualReportMapInt
	export function emptyRefAnnualReportMapInt():Ref<AnnualReportMapInt>
	export function refOfAnnualReportMapInt(x:AnnualReportMapInt,v:Ref<AnnualReportMapInt>)
	export function unRefAnnualReportMapInt(v:Ref<AnnualReportMapInt>):AnnualReportMapInt
	export function emptyAuditAndroidContext():AuditAndroidContext
	export function emptyRefAuditAndroidContext():Ref<AuditAndroidContext>
	export function refOfAuditAndroidContext(x:AuditAndroidContext,v:Ref<AuditAndroidContext>)
	export function unRefAuditAndroidContext(v:Ref<AuditAndroidContext>):AuditAndroidContext
	export function emptyGetBadgeGrantReq():GetBadgeGrantReq
	export function emptyRefGetBadgeGrantReq():Ref<GetBadgeGrantReq>
	export function refOfGetBadgeGrantReq(x:GetBadgeGrantReq,v:Ref<GetBadgeGrantReq>)
	export function unRefGetBadgeGrantReq(v:Ref<GetBadgeGrantReq>):GetBadgeGrantReq
	export function emptyGrantBuilder():GrantBuilder
	export function emptyRefGrantBuilder():Ref<GrantBuilder>
	export function refOfGrantBuilder(x:GrantBuilder,v:Ref<GrantBuilder>)
	export function unRefGrantBuilder(v:Ref<GrantBuilder>):GrantBuilder
	export function emptyResetPasswordReqBodyBuilder():ResetPasswordReqBodyBuilder
	export function emptyRefResetPasswordReqBodyBuilder():Ref<ResetPasswordReqBodyBuilder>
	export function refOfResetPasswordReqBodyBuilder(x:ResetPasswordReqBodyBuilder,v:Ref<ResetPasswordReqBodyBuilder>)
	export function unRefResetPasswordReqBodyBuilder(v:Ref<ResetPasswordReqBodyBuilder>):ResetPasswordReqBodyBuilder
	export function emptySplashPageStat():SplashPageStat
	export function emptyRefSplashPageStat():Ref<SplashPageStat>
	export function refOfSplashPageStat(x:SplashPageStat,v:Ref<SplashPageStat>)
	export function unRefSplashPageStat(v:Ref<SplashPageStat>):SplashPageStat
	export function emptyUserReport2022():UserReport2022
	export function emptyRefUserReport2022():Ref<UserReport2022>
	export function refOfUserReport2022(x:UserReport2022,v:Ref<UserReport2022>)
	export function unRefUserReport2022(v:Ref<UserReport2022>):UserReport2022
	export function emptyApiAuditCommonDrawers():ApiAuditCommonDrawers
	export function emptyRefApiAuditCommonDrawers():Ref<ApiAuditCommonDrawers>
	export function refOfApiAuditCommonDrawers(x:ApiAuditCommonDrawers,v:Ref<ApiAuditCommonDrawers>)
	export function unRefApiAuditCommonDrawers(v:Ref<ApiAuditCommonDrawers>):ApiAuditCommonDrawers
	export function emptyAuditIosContext():AuditIosContext
	export function emptyRefAuditIosContext():Ref<AuditIosContext>
	export function refOfAuditIosContext(x:AuditIosContext,v:Ref<AuditIosContext>)
	export function unRefAuditIosContext(v:Ref<AuditIosContext>):AuditIosContext
	export function emptyAuditPcContext():AuditPcContext
	export function emptyRefAuditPcContext():Ref<AuditPcContext>
	export function refOfAuditPcContext(x:AuditPcContext,v:Ref<AuditPcContext>)
	export function unRefAuditPcContext(v:Ref<AuditPcContext>):AuditPcContext
	export function emptyAuditRecipientDetail():AuditRecipientDetail
	export function emptyRefAuditRecipientDetail():Ref<AuditRecipientDetail>
	export function refOfAuditRecipientDetail(x:AuditRecipientDetail,v:Ref<AuditRecipientDetail>)
	export function unRefAuditRecipientDetail(v:Ref<AuditRecipientDetail>):AuditRecipientDetail
	export function emptyFile():File
	export function emptyRefFile():Ref<File>
	export function refOfFile(x:File,v:Ref<File>)
	export function unRefFile(v:Ref<File>):File
	export function emptyListAdminDeptStatReqBuilder():ListAdminDeptStatReqBuilder
	export function emptyRefListAdminDeptStatReqBuilder():Ref<ListAdminDeptStatReqBuilder>
	export function refOfListAdminDeptStatReqBuilder(x:ListAdminDeptStatReqBuilder,v:Ref<ListAdminDeptStatReqBuilder>)
	export function unRefListAdminDeptStatReqBuilder(v:Ref<ListAdminDeptStatReqBuilder>):ListAdminDeptStatReqBuilder
	export function emptyAuditEventExtend():AuditEventExtend
	export function emptyRefAuditEventExtend():Ref<AuditEventExtend>
	export function refOfAuditEventExtend(x:AuditEventExtend,v:Ref<AuditEventExtend>)
	export function unRefAuditEventExtend(v:Ref<AuditEventExtend>):AuditEventExtend
	export function emptyAuditObjectDetail():AuditObjectDetail
	export function emptyRefAuditObjectDetail():Ref<AuditObjectDetail>
	export function refOfAuditObjectDetail(x:AuditObjectDetail,v:Ref<AuditObjectDetail>)
	export function unRefAuditObjectDetail(v:Ref<AuditObjectDetail>):AuditObjectDetail
	export function emptyResetPasswordReqBody():ResetPasswordReqBody
	export function emptyRefResetPasswordReqBody():Ref<ResetPasswordReqBody>
	export function refOfResetPasswordReqBody(x:ResetPasswordReqBody,v:Ref<ResetPasswordReqBody>)
	export function unRefResetPasswordReqBody(v:Ref<ResetPasswordReqBody>):ResetPasswordReqBody
	export function emptyAuditObjectEntity():AuditObjectEntity
	export function emptyRefAuditObjectEntity():Ref<AuditObjectEntity>
	export function refOfAuditObjectEntity(x:AuditObjectEntity,v:Ref<AuditObjectEntity>)
	export function unRefAuditObjectEntity(v:Ref<AuditObjectEntity>):AuditObjectEntity
	export function emptyGetBadgeReq():GetBadgeReq
	export function emptyRefGetBadgeReq():Ref<GetBadgeReq>
	export function refOfGetBadgeReq(x:GetBadgeReq,v:Ref<GetBadgeReq>)
	export function unRefGetBadgeReq(v:Ref<GetBadgeReq>):GetBadgeReq
	export function emptyListAdminUserStatResp():ListAdminUserStatResp
	export function emptyRefListAdminUserStatResp():Ref<ListAdminUserStatResp>
	export function refOfListAdminUserStatResp(x:ListAdminUserStatResp,v:Ref<ListAdminUserStatResp>)
	export function unRefListAdminUserStatResp(v:Ref<ListAdminUserStatResp>):ListAdminUserStatResp
	export function emptyListAuditInfoReq():ListAuditInfoReq
	export function emptyRefListAuditInfoReq():Ref<ListAuditInfoReq>
	export function refOfListAuditInfoReq(x:ListAuditInfoReq,v:Ref<ListAuditInfoReq>)
	export function unRefListAuditInfoReq(v:Ref<ListAuditInfoReq>):ListAuditInfoReq
	export function emptyTask():Task
	export function emptyRefTask():Ref<Task>
	export function refOfTask(x:Task,v:Ref<Task>)
	export function unRefTask(v:Ref<Task>):Task
	export function emptyAnnualReportMapIntBuilder():AnnualReportMapIntBuilder
	export function emptyRefAnnualReportMapIntBuilder():Ref<AnnualReportMapIntBuilder>
	export function refOfAnnualReportMapIntBuilder(x:AnnualReportMapIntBuilder,v:Ref<AnnualReportMapIntBuilder>)
	export function unRefAnnualReportMapIntBuilder(v:Ref<AnnualReportMapIntBuilder>):AnnualReportMapIntBuilder
	export function emptyCreateBadgeReqBuilder():CreateBadgeReqBuilder
	export function emptyRefCreateBadgeReqBuilder():Ref<CreateBadgeReqBuilder>
	export function refOfCreateBadgeReqBuilder(x:CreateBadgeReqBuilder,v:Ref<CreateBadgeReqBuilder>)
	export function unRefCreateBadgeReqBuilder(v:Ref<CreateBadgeReqBuilder>):CreateBadgeReqBuilder
	export function emptyFileList():FileList
	export function emptyRefFileList():Ref<FileList>
	export function refOfFileList(x:FileList,v:Ref<FileList>)
	export function unRefFileList(v:Ref<FileList>):FileList
	export function emptyGetBadgeGrantResp():GetBadgeGrantResp
	export function emptyRefGetBadgeGrantResp():Ref<GetBadgeGrantResp>
	export function refOfGetBadgeGrantResp(x:GetBadgeGrantResp,v:Ref<GetBadgeGrantResp>)
	export function unRefGetBadgeGrantResp(v:Ref<GetBadgeGrantResp>):GetBadgeGrantResp
	export function emptyListAdminUserStatReq():ListAdminUserStatReq
	export function emptyRefListAdminUserStatReq():Ref<ListAdminUserStatReq>
	export function refOfListAdminUserStatReq(x:ListAdminUserStatReq,v:Ref<ListAdminUserStatReq>)
	export function unRefListAdminUserStatReq(v:Ref<ListAdminUserStatReq>):ListAdminUserStatReq
	export function emptyUpdateBadgeGrantResp():UpdateBadgeGrantResp
	export function emptyRefUpdateBadgeGrantResp():Ref<UpdateBadgeGrantResp>
	export function refOfUpdateBadgeGrantResp(x:UpdateBadgeGrantResp,v:Ref<UpdateBadgeGrantResp>)
	export function unRefUpdateBadgeGrantResp(v:Ref<UpdateBadgeGrantResp>):UpdateBadgeGrantResp
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyPassword():Password
	export function emptyRefPassword():Ref<Password>
	export function refOfPassword(x:Password,v:Ref<Password>)
	export function unRefPassword(v:Ref<Password>):Password
	export function emptyUpdateBadgeGrantRespData():UpdateBadgeGrantRespData
	export function emptyRefUpdateBadgeGrantRespData():Ref<UpdateBadgeGrantRespData>
	export function refOfUpdateBadgeGrantRespData(x:UpdateBadgeGrantRespData,v:Ref<UpdateBadgeGrantRespData>)
	export function unRefUpdateBadgeGrantRespData(v:Ref<UpdateBadgeGrantRespData>):UpdateBadgeGrantRespData
	export function emptyResetPasswordReq():ResetPasswordReq
	export function emptyRefResetPasswordReq():Ref<ResetPasswordReq>
	export function refOfResetPasswordReq(x:ResetPasswordReq,v:Ref<ResetPasswordReq>)
	export function unRefResetPasswordReq(v:Ref<ResetPasswordReq>):ResetPasswordReq
	export function emptyAdminUserStatBuilder():AdminUserStatBuilder
	export function emptyRefAdminUserStatBuilder():Ref<AdminUserStatBuilder>
	export function refOfAdminUserStatBuilder(x:AdminUserStatBuilder,v:Ref<AdminUserStatBuilder>)
	export function unRefAdminUserStatBuilder(v:Ref<AdminUserStatBuilder>):AdminUserStatBuilder
	export function emptyAnnualReportMapFloatBuilder():AnnualReportMapFloatBuilder
	export function emptyRefAnnualReportMapFloatBuilder():Ref<AnnualReportMapFloatBuilder>
	export function refOfAnnualReportMapFloatBuilder(x:AnnualReportMapFloatBuilder,v:Ref<AnnualReportMapFloatBuilder>)
	export function unRefAnnualReportMapFloatBuilder(v:Ref<AnnualReportMapFloatBuilder>):AnnualReportMapFloatBuilder
	export function emptyApiAuditCommonDrawersBuilder():ApiAuditCommonDrawersBuilder
	export function emptyRefApiAuditCommonDrawersBuilder():Ref<ApiAuditCommonDrawersBuilder>
	export function refOfApiAuditCommonDrawersBuilder(x:ApiAuditCommonDrawersBuilder,v:Ref<ApiAuditCommonDrawersBuilder>)
	export function unRefApiAuditCommonDrawersBuilder(v:Ref<ApiAuditCommonDrawersBuilder>):ApiAuditCommonDrawersBuilder
	export function emptyBadge():Badge
	export function emptyRefBadge():Ref<Badge>
	export function refOfBadge(x:Badge,v:Ref<Badge>)
	export function unRefBadge(v:Ref<Badge>):Badge
	export function emptyFileBuilder():FileBuilder
	export function emptyRefFileBuilder():Ref<FileBuilder>
	export function refOfFileBuilder(x:FileBuilder,v:Ref<FileBuilder>)
	export function unRefFileBuilder(v:Ref<FileBuilder>):FileBuilder
	export function emptyGetBadgeGrantRespData():GetBadgeGrantRespData
	export function emptyRefGetBadgeGrantRespData():Ref<GetBadgeGrantRespData>
	export function refOfGetBadgeGrantRespData(x:GetBadgeGrantRespData,v:Ref<GetBadgeGrantRespData>)
	export function unRefGetBadgeGrantRespData(v:Ref<GetBadgeGrantRespData>):GetBadgeGrantRespData
	export function emptyListBadgeGrantReqBuilder():ListBadgeGrantReqBuilder
	export function emptyRefListBadgeGrantReqBuilder():Ref<ListBadgeGrantReqBuilder>
	export function refOfListBadgeGrantReqBuilder(x:ListBadgeGrantReqBuilder,v:Ref<ListBadgeGrantReqBuilder>)
	export function unRefListBadgeGrantReqBuilder(v:Ref<ListBadgeGrantReqBuilder>):ListBadgeGrantReqBuilder
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyAuditDetailBuilder():AuditDetailBuilder
	export function emptyRefAuditDetailBuilder():Ref<AuditDetailBuilder>
	export function refOfAuditDetailBuilder(x:AuditDetailBuilder,v:Ref<AuditDetailBuilder>)
	export function unRefAuditDetailBuilder(v:Ref<AuditDetailBuilder>):AuditDetailBuilder
	export function emptyCreateBadgeImageReqBody():CreateBadgeImageReqBody
	export function emptyRefCreateBadgeImageReqBody():Ref<CreateBadgeImageReqBody>
	export function refOfCreateBadgeImageReqBody(x:CreateBadgeImageReqBody,v:Ref<CreateBadgeImageReqBody>)
	export function unRefCreateBadgeImageReqBody(v:Ref<CreateBadgeImageReqBody>):CreateBadgeImageReqBody
	export function emptyCreateBadgeRespData():CreateBadgeRespData
	export function emptyRefCreateBadgeRespData():Ref<CreateBadgeRespData>
	export function refOfCreateBadgeRespData(x:CreateBadgeRespData,v:Ref<CreateBadgeRespData>)
	export function unRefCreateBadgeRespData(v:Ref<CreateBadgeRespData>):CreateBadgeRespData
	export function emptyGetBadgeReqBuilder():GetBadgeReqBuilder
	export function emptyRefGetBadgeReqBuilder():Ref<GetBadgeReqBuilder>
	export function refOfGetBadgeReqBuilder(x:GetBadgeReqBuilder,v:Ref<GetBadgeReqBuilder>)
	export function unRefGetBadgeReqBuilder(v:Ref<GetBadgeReqBuilder>):GetBadgeReqBuilder
	export function emptyListAdminDeptStatRespData():ListAdminDeptStatRespData
	export function emptyRefListAdminDeptStatRespData():Ref<ListAdminDeptStatRespData>
	export function refOfListAdminDeptStatRespData(x:ListAdminDeptStatRespData,v:Ref<ListAdminDeptStatRespData>)
	export function unRefListAdminDeptStatRespData(v:Ref<ListAdminDeptStatRespData>):ListAdminDeptStatRespData
	export function emptyUpdateBadgeRespData():UpdateBadgeRespData
	export function emptyRefUpdateBadgeRespData():Ref<UpdateBadgeRespData>
	export function refOfUpdateBadgeRespData(x:UpdateBadgeRespData,v:Ref<UpdateBadgeRespData>)
	export function unRefUpdateBadgeRespData(v:Ref<UpdateBadgeRespData>):UpdateBadgeRespData
	export function emptyUserAnnualReportBuilder():UserAnnualReportBuilder
	export function emptyRefUserAnnualReportBuilder():Ref<UserAnnualReportBuilder>
	export function refOfUserAnnualReportBuilder(x:UserAnnualReportBuilder,v:Ref<UserAnnualReportBuilder>)
	export function unRefUserAnnualReportBuilder(v:Ref<UserAnnualReportBuilder>):UserAnnualReportBuilder
	export function emptyAuditInfo():AuditInfo
	export function emptyRefAuditInfo():Ref<AuditInfo>
	export function refOfAuditInfo(x:AuditInfo,v:Ref<AuditInfo>)
	export function unRefAuditInfo(v:Ref<AuditInfo>):AuditInfo
	export function emptyBadgeBuilder():BadgeBuilder
	export function emptyRefBadgeBuilder():Ref<BadgeBuilder>
	export function refOfBadgeBuilder(x:BadgeBuilder,v:Ref<BadgeBuilder>)
	export function unRefBadgeBuilder(v:Ref<BadgeBuilder>):BadgeBuilder
	export function emptyResetPasswordResp():ResetPasswordResp
	export function emptyRefResetPasswordResp():Ref<ResetPasswordResp>
	export function refOfResetPasswordResp(x:ResetPasswordResp,v:Ref<ResetPasswordResp>)
	export function unRefResetPasswordResp(v:Ref<ResetPasswordResp>):ResetPasswordResp
	export function emptyUserAnnualReport():UserAnnualReport
	export function emptyRefUserAnnualReport():Ref<UserAnnualReport>
	export function refOfUserAnnualReport(x:UserAnnualReport,v:Ref<UserAnnualReport>)
	export function unRefUserAnnualReport(v:Ref<UserAnnualReport>):UserAnnualReport
	export function emptyUserReport2022Builder():UserReport2022Builder
	export function emptyRefUserReport2022Builder():Ref<UserReport2022Builder>
	export function refOfUserReport2022Builder(x:UserReport2022Builder,v:Ref<UserReport2022Builder>)
	export function unRefUserReport2022Builder(v:Ref<UserReport2022Builder>):UserReport2022Builder
	export function emptyGetBadgeRespData():GetBadgeRespData
	export function emptyRefGetBadgeRespData():Ref<GetBadgeRespData>
	export function refOfGetBadgeRespData(x:GetBadgeRespData,v:Ref<GetBadgeRespData>)
	export function unRefGetBadgeRespData(v:Ref<GetBadgeRespData>):GetBadgeRespData
	export function emptyTaskBuilder():TaskBuilder
	export function emptyRefTaskBuilder():Ref<TaskBuilder>
	export function refOfTaskBuilder(x:TaskBuilder,v:Ref<TaskBuilder>)
	export function unRefTaskBuilder(v:Ref<TaskBuilder>):TaskBuilder
	export function emptyCreateBadgeImageRespData():CreateBadgeImageRespData
	export function emptyRefCreateBadgeImageRespData():Ref<CreateBadgeImageRespData>
	export function refOfCreateBadgeImageRespData(x:CreateBadgeImageRespData,v:Ref<CreateBadgeImageRespData>)
	export function unRefCreateBadgeImageRespData(v:Ref<CreateBadgeImageRespData>):CreateBadgeImageRespData
	export function emptyCreateBadgeReq():CreateBadgeReq
	export function emptyRefCreateBadgeReq():Ref<CreateBadgeReq>
	export function refOfCreateBadgeReq(x:CreateBadgeReq,v:Ref<CreateBadgeReq>)
	export function unRefCreateBadgeReq(v:Ref<CreateBadgeReq>):CreateBadgeReq
	export function emptyListBadgeReq():ListBadgeReq
	export function emptyRefListBadgeReq():Ref<ListBadgeReq>
	export function refOfListBadgeReq(x:ListBadgeReq,v:Ref<ListBadgeReq>)
	export function unRefListBadgeReq(v:Ref<ListBadgeReq>):ListBadgeReq
	export function emptyAuditIosContextBuilder():AuditIosContextBuilder
	export function emptyRefAuditIosContextBuilder():Ref<AuditIosContextBuilder>
	export function refOfAuditIosContextBuilder(x:AuditIosContextBuilder,v:Ref<AuditIosContextBuilder>)
	export function unRefAuditIosContextBuilder(v:Ref<AuditIosContextBuilder>):AuditIosContextBuilder
	export function emptyI18nBuilder():I18nBuilder
	export function emptyRefI18nBuilder():Ref<I18nBuilder>
	export function refOfI18nBuilder(x:I18nBuilder,v:Ref<I18nBuilder>)
	export function unRefI18nBuilder(v:Ref<I18nBuilder>):I18nBuilder
	export function emptyListBadgeGrantReq():ListBadgeGrantReq
	export function emptyRefListBadgeGrantReq():Ref<ListBadgeGrantReq>
	export function refOfListBadgeGrantReq(x:ListBadgeGrantReq,v:Ref<ListBadgeGrantReq>)
	export function unRefListBadgeGrantReq(v:Ref<ListBadgeGrantReq>):ListBadgeGrantReq
	export function emptyApiAuditDrawerInfoBuilder():ApiAuditDrawerInfoBuilder
	export function emptyRefApiAuditDrawerInfoBuilder():Ref<ApiAuditDrawerInfoBuilder>
	export function refOfApiAuditDrawerInfoBuilder(x:ApiAuditDrawerInfoBuilder,v:Ref<ApiAuditDrawerInfoBuilder>)
	export function unRefApiAuditDrawerInfoBuilder(v:Ref<ApiAuditDrawerInfoBuilder>):ApiAuditDrawerInfoBuilder
	export function emptyCreateBadgeImageReqBodyBuilder():CreateBadgeImageReqBodyBuilder
	export function emptyRefCreateBadgeImageReqBodyBuilder():Ref<CreateBadgeImageReqBodyBuilder>
	export function refOfCreateBadgeImageReqBodyBuilder(x:CreateBadgeImageReqBodyBuilder,v:Ref<CreateBadgeImageReqBodyBuilder>)
	export function unRefCreateBadgeImageReqBodyBuilder(v:Ref<CreateBadgeImageReqBodyBuilder>):CreateBadgeImageReqBodyBuilder
	export function emptyPasswordBuilder():PasswordBuilder
	export function emptyRefPasswordBuilder():Ref<PasswordBuilder>
	export function refOfPasswordBuilder(x:PasswordBuilder,v:Ref<PasswordBuilder>)
	export function unRefPasswordBuilder(v:Ref<PasswordBuilder>):PasswordBuilder
	export function emptyCreateBadgeImageReqBuilder():CreateBadgeImageReqBuilder
	export function emptyRefCreateBadgeImageReqBuilder():Ref<CreateBadgeImageReqBuilder>
	export function refOfCreateBadgeImageReqBuilder(x:CreateBadgeImageReqBuilder,v:Ref<CreateBadgeImageReqBuilder>)
	export function unRefCreateBadgeImageReqBuilder(v:Ref<CreateBadgeImageReqBuilder>):CreateBadgeImageReqBuilder
	export function emptyGetBadgeResp():GetBadgeResp
	export function emptyRefGetBadgeResp():Ref<GetBadgeResp>
	export function refOfGetBadgeResp(x:GetBadgeResp,v:Ref<GetBadgeResp>)
	export function unRefGetBadgeResp(v:Ref<GetBadgeResp>):GetBadgeResp
	export function emptyListAdminDeptStatReq():ListAdminDeptStatReq
	export function emptyRefListAdminDeptStatReq():Ref<ListAdminDeptStatReq>
	export function refOfListAdminDeptStatReq(x:ListAdminDeptStatReq,v:Ref<ListAdminDeptStatReq>)
	export function unRefListAdminDeptStatReq(v:Ref<ListAdminDeptStatReq>):ListAdminDeptStatReq
	export function emptyListAuditInfoResp():ListAuditInfoResp
	export function emptyRefListAuditInfoResp():Ref<ListAuditInfoResp>
	export function refOfListAuditInfoResp(x:ListAuditInfoResp,v:Ref<ListAuditInfoResp>)
	export function unRefListAuditInfoResp(v:Ref<ListAuditInfoResp>):ListAuditInfoResp
	export function emptyRuleDetail():RuleDetail
	export function emptyRefRuleDetail():Ref<RuleDetail>
	export function refOfRuleDetail(x:RuleDetail,v:Ref<RuleDetail>)
	export function unRefRuleDetail(v:Ref<RuleDetail>):RuleDetail
	export function emptyAdminDeptStatBuilder():AdminDeptStatBuilder
	export function emptyRefAdminDeptStatBuilder():Ref<AdminDeptStatBuilder>
	export function refOfAdminDeptStatBuilder(x:AdminDeptStatBuilder,v:Ref<AdminDeptStatBuilder>)
	export function unRefAdminDeptStatBuilder(v:Ref<AdminDeptStatBuilder>):AdminDeptStatBuilder
	export function emptyCreateBadgeGrantRespData():CreateBadgeGrantRespData
	export function emptyRefCreateBadgeGrantRespData():Ref<CreateBadgeGrantRespData>
	export function refOfCreateBadgeGrantRespData(x:CreateBadgeGrantRespData,v:Ref<CreateBadgeGrantRespData>)
	export function unRefCreateBadgeGrantRespData(v:Ref<CreateBadgeGrantRespData>):CreateBadgeGrantRespData
	export function emptyListBadgeReqBuilder():ListBadgeReqBuilder
	export function emptyRefListBadgeReqBuilder():Ref<ListBadgeReqBuilder>
	export function refOfListBadgeReqBuilder(x:ListBadgeReqBuilder,v:Ref<ListBadgeReqBuilder>)
	export function unRefListBadgeReqBuilder(v:Ref<ListBadgeReqBuilder>):ListBadgeReqBuilder
	export function emptyUserBuilder():UserBuilder
	export function emptyRefUserBuilder():Ref<UserBuilder>
	export function refOfUserBuilder(x:UserBuilder,v:Ref<UserBuilder>)
	export function unRefUserBuilder(v:Ref<UserBuilder>):UserBuilder
	export function emptyAnnualReportMapFloat():AnnualReportMapFloat
	export function emptyRefAnnualReportMapFloat():Ref<AnnualReportMapFloat>
	export function refOfAnnualReportMapFloat(x:AnnualReportMapFloat,v:Ref<AnnualReportMapFloat>)
	export function unRefAnnualReportMapFloat(v:Ref<AnnualReportMapFloat>):AnnualReportMapFloat
	export function emptyAuditDetail():AuditDetail
	export function emptyRefAuditDetail():Ref<AuditDetail>
	export function refOfAuditDetail(x:AuditDetail,v:Ref<AuditDetail>)
	export function unRefAuditDetail(v:Ref<AuditDetail>):AuditDetail
	export function emptyAuditObjectDetailBuilder():AuditObjectDetailBuilder
	export function emptyRefAuditObjectDetailBuilder():Ref<AuditObjectDetailBuilder>
	export function refOfAuditObjectDetailBuilder(x:AuditObjectDetailBuilder,v:Ref<AuditObjectDetailBuilder>)
	export function unRefAuditObjectDetailBuilder(v:Ref<AuditObjectDetailBuilder>):AuditObjectDetailBuilder
	export function emptyAuditRecipientDetailBuilder():AuditRecipientDetailBuilder
	export function emptyRefAuditRecipientDetailBuilder():Ref<AuditRecipientDetailBuilder>
	export function refOfAuditRecipientDetailBuilder(x:AuditRecipientDetailBuilder,v:Ref<AuditRecipientDetailBuilder>)
	export function unRefAuditRecipientDetailBuilder(v:Ref<AuditRecipientDetailBuilder>):AuditRecipientDetailBuilder
	export function emptyGetBadgeGrantReqBuilder():GetBadgeGrantReqBuilder
	export function emptyRefGetBadgeGrantReqBuilder():Ref<GetBadgeGrantReqBuilder>
	export function refOfGetBadgeGrantReqBuilder(x:GetBadgeGrantReqBuilder,v:Ref<GetBadgeGrantReqBuilder>)
	export function unRefGetBadgeGrantReqBuilder(v:Ref<GetBadgeGrantReqBuilder>):GetBadgeGrantReqBuilder
	export function emptyListAuditInfoReqBuilder():ListAuditInfoReqBuilder
	export function emptyRefListAuditInfoReqBuilder():Ref<ListAuditInfoReqBuilder>
	export function refOfListAuditInfoReqBuilder(x:ListAuditInfoReqBuilder,v:Ref<ListAuditInfoReqBuilder>)
	export function unRefListAuditInfoReqBuilder(v:Ref<ListAuditInfoReqBuilder>):ListAuditInfoReqBuilder
	export function emptyListAuditInfoRespData():ListAuditInfoRespData
	export function emptyRefListAuditInfoRespData():Ref<ListAuditInfoRespData>
	export function refOfListAuditInfoRespData(x:ListAuditInfoRespData,v:Ref<ListAuditInfoRespData>)
	export function unRefListAuditInfoRespData(v:Ref<ListAuditInfoRespData>):ListAuditInfoRespData
	export function emptyAdminDeptStat():AdminDeptStat
	export function emptyRefAdminDeptStat():Ref<AdminDeptStat>
	export function refOfAdminDeptStat(x:AdminDeptStat,v:Ref<AdminDeptStat>)
	export function unRefAdminDeptStat(v:Ref<AdminDeptStat>):AdminDeptStat
	export function emptyApiAuditDrawerInfo():ApiAuditDrawerInfo
	export function emptyRefApiAuditDrawerInfo():Ref<ApiAuditDrawerInfo>
	export function refOfApiAuditDrawerInfo(x:ApiAuditDrawerInfo,v:Ref<ApiAuditDrawerInfo>)
	export function unRefApiAuditDrawerInfo(v:Ref<ApiAuditDrawerInfo>):ApiAuditDrawerInfo
	export function emptyCreateBadgeGrantReqBuilder():CreateBadgeGrantReqBuilder
	export function emptyRefCreateBadgeGrantReqBuilder():Ref<CreateBadgeGrantReqBuilder>
	export function refOfCreateBadgeGrantReqBuilder(x:CreateBadgeGrantReqBuilder,v:Ref<CreateBadgeGrantReqBuilder>)
	export function unRefCreateBadgeGrantReqBuilder(v:Ref<CreateBadgeGrantReqBuilder>):CreateBadgeGrantReqBuilder
	export function emptyCreateBadgeGrantResp():CreateBadgeGrantResp
	export function emptyRefCreateBadgeGrantResp():Ref<CreateBadgeGrantResp>
	export function refOfCreateBadgeGrantResp(x:CreateBadgeGrantResp,v:Ref<CreateBadgeGrantResp>)
	export function unRefCreateBadgeGrantResp(v:Ref<CreateBadgeGrantResp>):CreateBadgeGrantResp
	export function emptyFileListBuilder():FileListBuilder
	export function emptyRefFileListBuilder():Ref<FileListBuilder>
	export function refOfFileListBuilder(x:FileListBuilder,v:Ref<FileListBuilder>)
	export function unRefFileListBuilder(v:Ref<FileListBuilder>):FileListBuilder
	export function emptyListBadgeGrantResp():ListBadgeGrantResp
	export function emptyRefListBadgeGrantResp():Ref<ListBadgeGrantResp>
	export function refOfListBadgeGrantResp(x:ListBadgeGrantResp,v:Ref<ListBadgeGrantResp>)
	export function unRefListBadgeGrantResp(v:Ref<ListBadgeGrantResp>):ListBadgeGrantResp
	export function emptyResetPasswordReqBuilder():ResetPasswordReqBuilder
	export function emptyRefResetPasswordReqBuilder():Ref<ResetPasswordReqBuilder>
	export function refOfResetPasswordReqBuilder(x:ResetPasswordReqBuilder,v:Ref<ResetPasswordReqBuilder>)
	export function unRefResetPasswordReqBuilder(v:Ref<ResetPasswordReqBuilder>):ResetPasswordReqBuilder
	export function emptyUserReport2023Builder():UserReport2023Builder
	export function emptyRefUserReport2023Builder():Ref<UserReport2023Builder>
	export function refOfUserReport2023Builder(x:UserReport2023Builder,v:Ref<UserReport2023Builder>)
	export function unRefUserReport2023Builder(v:Ref<UserReport2023Builder>):UserReport2023Builder
	export function emptyListAdminUserStatRespData():ListAdminUserStatRespData
	export function emptyRefListAdminUserStatRespData():Ref<ListAdminUserStatRespData>
	export function refOfListAdminUserStatRespData(x:ListAdminUserStatRespData,v:Ref<ListAdminUserStatRespData>)
	export function unRefListAdminUserStatRespData(v:Ref<ListAdminUserStatRespData>):ListAdminUserStatRespData
	export function emptyUpdateBadgeGrantReq():UpdateBadgeGrantReq
	export function emptyRefUpdateBadgeGrantReq():Ref<UpdateBadgeGrantReq>
	export function refOfUpdateBadgeGrantReq(x:UpdateBadgeGrantReq,v:Ref<UpdateBadgeGrantReq>)
	export function unRefUpdateBadgeGrantReq(v:Ref<UpdateBadgeGrantReq>):UpdateBadgeGrantReq
	export function emptyUpdateBadgeResp():UpdateBadgeResp
	export function emptyRefUpdateBadgeResp():Ref<UpdateBadgeResp>
	export function refOfUpdateBadgeResp(x:UpdateBadgeResp,v:Ref<UpdateBadgeResp>)
	export function unRefUpdateBadgeResp(v:Ref<UpdateBadgeResp>):UpdateBadgeResp
	export function emptyAuditInfoBuilder():AuditInfoBuilder
	export function emptyRefAuditInfoBuilder():Ref<AuditInfoBuilder>
	export function refOfAuditInfoBuilder(x:AuditInfoBuilder,v:Ref<AuditInfoBuilder>)
	export function unRefAuditInfoBuilder(v:Ref<AuditInfoBuilder>):AuditInfoBuilder
	export function emptyListAdminUserStatReqBuilder():ListAdminUserStatReqBuilder
	export function emptyRefListAdminUserStatReqBuilder():Ref<ListAdminUserStatReqBuilder>
	export function refOfListAdminUserStatReqBuilder(x:ListAdminUserStatReqBuilder,v:Ref<ListAdminUserStatReqBuilder>)
	export function unRefListAdminUserStatReqBuilder(v:Ref<ListAdminUserStatReqBuilder>):ListAdminUserStatReqBuilder
	export function emptyAuditWebContext():AuditWebContext
	export function emptyRefAuditWebContext():Ref<AuditWebContext>
	export function refOfAuditWebContext(x:AuditWebContext,v:Ref<AuditWebContext>)
	export function unRefAuditWebContext(v:Ref<AuditWebContext>):AuditWebContext
	export function emptyListAuditInfoIterator():ListAuditInfoIterator
	export function emptyRefListAuditInfoIterator():Ref<ListAuditInfoIterator>
	export function refOfListAuditInfoIterator(x:ListAuditInfoIterator,v:Ref<ListAuditInfoIterator>)
	export function unRefListAuditInfoIterator(v:Ref<ListAuditInfoIterator>):ListAuditInfoIterator
	export function emptyAdministratorBuilder():AdministratorBuilder
	export function emptyRefAdministratorBuilder():Ref<AdministratorBuilder>
	export function refOfAdministratorBuilder(x:AdministratorBuilder,v:Ref<AdministratorBuilder>)
	export function unRefAdministratorBuilder(v:Ref<AdministratorBuilder>):AdministratorBuilder
	export function emptyAuditAndroidContextBuilder():AuditAndroidContextBuilder
	export function emptyRefAuditAndroidContextBuilder():Ref<AuditAndroidContextBuilder>
	export function refOfAuditAndroidContextBuilder(x:AuditAndroidContextBuilder,v:Ref<AuditAndroidContextBuilder>)
	export function unRefAuditAndroidContextBuilder(v:Ref<AuditAndroidContextBuilder>):AuditAndroidContextBuilder
	export function emptyDepartmentIdBuilder():DepartmentIdBuilder
	export function emptyRefDepartmentIdBuilder():Ref<DepartmentIdBuilder>
	export function refOfDepartmentIdBuilder(x:DepartmentIdBuilder,v:Ref<DepartmentIdBuilder>)
	export function unRefDepartmentIdBuilder(v:Ref<DepartmentIdBuilder>):DepartmentIdBuilder
	export function emptyUserReport2021Builder():UserReport2021Builder
	export function emptyRefUserReport2021Builder():Ref<UserReport2021Builder>
	export function refOfUserReport2021Builder(x:UserReport2021Builder,v:Ref<UserReport2021Builder>)
	export function unRefUserReport2021Builder(v:Ref<UserReport2021Builder>):UserReport2021Builder
	export function emptyAuditContextBuilder():AuditContextBuilder
	export function emptyRefAuditContextBuilder():Ref<AuditContextBuilder>
	export function refOfAuditContextBuilder(x:AuditContextBuilder,v:Ref<AuditContextBuilder>)
	export function unRefAuditContextBuilder(v:Ref<AuditContextBuilder>):AuditContextBuilder
	export function emptyAuditEventExtendBuilder():AuditEventExtendBuilder
	export function emptyRefAuditEventExtendBuilder():Ref<AuditEventExtendBuilder>
	export function refOfAuditEventExtendBuilder(x:AuditEventExtendBuilder,v:Ref<AuditEventExtendBuilder>)
	export function unRefAuditEventExtendBuilder(v:Ref<AuditEventExtendBuilder>):AuditEventExtendBuilder
	export function emptyAuditPcContextBuilder():AuditPcContextBuilder
	export function emptyRefAuditPcContextBuilder():Ref<AuditPcContextBuilder>
	export function refOfAuditPcContextBuilder(x:AuditPcContextBuilder,v:Ref<AuditPcContextBuilder>)
	export function unRefAuditPcContextBuilder(v:Ref<AuditPcContextBuilder>):AuditPcContextBuilder
	export function emptyGrant():Grant
	export function emptyRefGrant():Ref<Grant>
	export function refOfGrant(x:Grant,v:Ref<Grant>)
	export function unRefGrant(v:Ref<Grant>):Grant
	export function emptyUserReport2023():UserReport2023
	export function emptyRefUserReport2023():Ref<UserReport2023>
	export function refOfUserReport2023(x:UserReport2023,v:Ref<UserReport2023>)
	export function unRefUserReport2023(v:Ref<UserReport2023>):UserReport2023
	export function emptyAuditObjectEntityBuilder():AuditObjectEntityBuilder
	export function emptyRefAuditObjectEntityBuilder():Ref<AuditObjectEntityBuilder>
	export function refOfAuditObjectEntityBuilder(x:AuditObjectEntityBuilder,v:Ref<AuditObjectEntityBuilder>)
	export function unRefAuditObjectEntityBuilder(v:Ref<AuditObjectEntityBuilder>):AuditObjectEntityBuilder
	export function emptyCreateBadgeGrantReq():CreateBadgeGrantReq
	export function emptyRefCreateBadgeGrantReq():Ref<CreateBadgeGrantReq>
	export function refOfCreateBadgeGrantReq(x:CreateBadgeGrantReq,v:Ref<CreateBadgeGrantReq>)
	export function unRefCreateBadgeGrantReq(v:Ref<CreateBadgeGrantReq>):CreateBadgeGrantReq
	export function emptyDeleteBadgeGrantReq():DeleteBadgeGrantReq
	export function emptyRefDeleteBadgeGrantReq():Ref<DeleteBadgeGrantReq>
	export function refOfDeleteBadgeGrantReq(x:DeleteBadgeGrantReq,v:Ref<DeleteBadgeGrantReq>)
	export function unRefDeleteBadgeGrantReq(v:Ref<DeleteBadgeGrantReq>):DeleteBadgeGrantReq
	export function emptyI18n():I18n
	export function emptyRefI18n():Ref<I18n>
	export function refOfI18n(x:I18n,v:Ref<I18n>)
	export function unRefI18n(v:Ref<I18n>):I18n
	export function emptyListBadgeIterator():ListBadgeIterator
	export function emptyRefListBadgeIterator():Ref<ListBadgeIterator>
	export function refOfListBadgeIterator(x:ListBadgeIterator,v:Ref<ListBadgeIterator>)
	export function unRefListBadgeIterator(v:Ref<ListBadgeIterator>):ListBadgeIterator
	export function emptyUserReport2021():UserReport2021
	export function emptyRefUserReport2021():Ref<UserReport2021>
	export function refOfUserReport2021(x:UserReport2021,v:Ref<UserReport2021>)
	export function unRefUserReport2021(v:Ref<UserReport2021>):UserReport2021
	export function emptyAuditRecipientEntity():AuditRecipientEntity
	export function emptyRefAuditRecipientEntity():Ref<AuditRecipientEntity>
	export function refOfAuditRecipientEntity(x:AuditRecipientEntity,v:Ref<AuditRecipientEntity>)
	export function unRefAuditRecipientEntity(v:Ref<AuditRecipientEntity>):AuditRecipientEntity
	export function emptyCreateBadgeImagePathReqBodyBuilder():CreateBadgeImagePathReqBodyBuilder
	export function emptyRefCreateBadgeImagePathReqBodyBuilder():Ref<CreateBadgeImagePathReqBodyBuilder>
	export function refOfCreateBadgeImagePathReqBodyBuilder(x:CreateBadgeImagePathReqBodyBuilder,v:Ref<CreateBadgeImagePathReqBodyBuilder>)
	export function unRefCreateBadgeImagePathReqBodyBuilder(v:Ref<CreateBadgeImagePathReqBodyBuilder>):CreateBadgeImagePathReqBodyBuilder
	export function emptyListBadgeRespData():ListBadgeRespData
	export function emptyRefListBadgeRespData():Ref<ListBadgeRespData>
	export function refOfListBadgeRespData(x:ListBadgeRespData,v:Ref<ListBadgeRespData>)
	export function unRefListBadgeRespData(v:Ref<ListBadgeRespData>):ListBadgeRespData
	export function emptyUpdateBadgeGrantReqBuilder():UpdateBadgeGrantReqBuilder
	export function emptyRefUpdateBadgeGrantReqBuilder():Ref<UpdateBadgeGrantReqBuilder>
	export function refOfUpdateBadgeGrantReqBuilder(x:UpdateBadgeGrantReqBuilder,v:Ref<UpdateBadgeGrantReqBuilder>)
	export function unRefUpdateBadgeGrantReqBuilder(v:Ref<UpdateBadgeGrantReqBuilder>):UpdateBadgeGrantReqBuilder
}