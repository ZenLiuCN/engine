// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/verification/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Ref,Struct,bool,error} from 'go'
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface GetVerificationResp extends Struct<GetVerificationResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetVerificationRespData>
			success():bool
	}
	export interface GetVerificationRespData extends Struct<GetVerificationRespData>{

			verification:Ref<Verification>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newVerificationBuilder():Ref<VerificationBuilder>

	export interface V1 extends Struct<V1>{

			verification:Ref<{
			
				get(ctx:context.Context,...options:larkcore.RequestOptionFunc[]):Ref<GetVerificationResp>
			}>
	}
	export interface Verification extends Struct<Verification>{

			name:Ref<string>
			hasVerification:Ref<bool>
	}
	export interface VerificationBuilder extends Struct<VerificationBuilder>{

			name(name:string):Ref<VerificationBuilder>
			hasVerification(hasVerification:bool):Ref<VerificationBuilder>
			build():Ref<Verification>
	}
	export function emptyVerification():Verification
	export function emptyRefVerification():Ref<Verification>
	export function refOfVerification(x:Verification,v:Ref<Verification>)
	export function unRefVerification(v:Ref<Verification>):Verification
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyGetVerificationResp():GetVerificationResp
	export function emptyRefGetVerificationResp():Ref<GetVerificationResp>
	export function refOfGetVerificationResp(x:GetVerificationResp,v:Ref<GetVerificationResp>)
	export function unRefGetVerificationResp(v:Ref<GetVerificationResp>):GetVerificationResp
	export function emptyGetVerificationRespData():GetVerificationRespData
	export function emptyRefGetVerificationRespData():Ref<GetVerificationRespData>
	export function refOfGetVerificationRespData(x:GetVerificationRespData,v:Ref<GetVerificationRespData>)
	export function unRefGetVerificationRespData(v:Ref<GetVerificationRespData>):GetVerificationRespData
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
}