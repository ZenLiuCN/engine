// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/ehr/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {int,bool,error,float64,Ref,int64,Struct} from 'go'
	export interface Attachment extends Struct<Attachment>{

			id:Ref<string>
			mimeType:Ref<string>
			name:Ref<string>
			size:Ref<int64>
	}
	export interface AttachmentBuilder extends Struct<AttachmentBuilder>{

			id(id:string):Ref<AttachmentBuilder>
			mimeType(mimeType:string):Ref<AttachmentBuilder>
			name(name:string):Ref<AttachmentBuilder>
			size(size:int64):Ref<AttachmentBuilder>
			build():Ref<Attachment>
	}
	export interface ContractCompany extends Struct<ContractCompany>{

			id:Ref<int64>
			name:Ref<string>
	}
	export interface ContractCompanyBuilder extends Struct<ContractCompanyBuilder>{

			id(id:int64):Ref<ContractCompanyBuilder>
			name(name:string):Ref<ContractCompanyBuilder>
			build():Ref<ContractCompany>
	}
	export interface CustomFields extends Struct<CustomFields>{

			key:Ref<string>
			label:Ref<string>
			type:Ref<string>
			value:Ref<string>
	}
	export interface CustomFieldsBuilder extends Struct<CustomFieldsBuilder>{

			key(key:string):Ref<CustomFieldsBuilder>
			label(label:string):Ref<CustomFieldsBuilder>
			type(type_:string):Ref<CustomFieldsBuilder>
			value(value:string):Ref<CustomFieldsBuilder>
			build():Ref<CustomFields>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Education extends Struct<Education>{

			level:Ref<int>
			school:Ref<string>
			major:Ref<string>
			degree:Ref<int>
			start:Ref<string>
			end:Ref<string>
	}
	export interface EducationBuilder extends Struct<EducationBuilder>{

			level(level:int):Ref<EducationBuilder>
			school(school:string):Ref<EducationBuilder>
			major(major:string):Ref<EducationBuilder>
			degree(degree:int):Ref<EducationBuilder>
			start(start:string):Ref<EducationBuilder>
			end(end:string):Ref<EducationBuilder>
			build():Ref<Education>
	}
	export interface EmergencyContact extends Struct<EmergencyContact>{

			name:Ref<string>
			relationship:Ref<int>
			mobile:Ref<string>
	}
	export interface EmergencyContactBuilder extends Struct<EmergencyContactBuilder>{

			name(name:string):Ref<EmergencyContactBuilder>
			relationship(relationship:int):Ref<EmergencyContactBuilder>
			mobile(mobile:string):Ref<EmergencyContactBuilder>
			build():Ref<EmergencyContact>
	}
	export interface Employee extends Struct<Employee>{

			userId:Ref<string>
			systemFields:Ref<SystemFields>
			customFields:Ref<CustomFields>[]
	}
	export interface EmployeeBuilder extends Struct<EmployeeBuilder>{

			userId(userId:string):Ref<EmployeeBuilder>
			systemFields(systemFields:Ref<SystemFields>):Ref<EmployeeBuilder>
			customFields(customFields:Ref<CustomFields>[]):Ref<EmployeeBuilder>
			build():Ref<Employee>
	}
	export interface GetAttachmentReq extends Struct<GetAttachmentReq>{

	}
	export interface GetAttachmentReqBuilder extends Struct<GetAttachmentReqBuilder>{

			token(token:string):Ref<GetAttachmentReqBuilder>
			build():Ref<GetAttachmentReq>
	}
	export interface GetAttachmentResp extends Struct<GetAttachmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			file:io.Reader
			fileName:string
			success():bool
			writeFile(fileName:string)/*error*/
	}
	export interface Job extends Struct<Job>{

			id:Ref<int64>
			name:Ref<string>
	}
	export interface JobBuilder extends Struct<JobBuilder>{

			id(id:int64):Ref<JobBuilder>
			name(name:string):Ref<JobBuilder>
			build():Ref<Job>
	}
	export interface JobLevel extends Struct<JobLevel>{

			id:Ref<int64>
			name:Ref<string>
	}
	export interface JobLevelBuilder extends Struct<JobLevelBuilder>{

			id(id:int64):Ref<JobLevelBuilder>
			name(name:string):Ref<JobLevelBuilder>
			build():Ref<JobLevel>
	}
	export interface ListEmployeeIterator extends Struct<ListEmployeeIterator>{

			next():[bool,Ref<Employee>]
			nextPageToken():Ref<string>
	}
	export interface ListEmployeeReq extends Struct<ListEmployeeReq>{

			limit:int
	}
	export interface ListEmployeeReqBuilder extends Struct<ListEmployeeReqBuilder>{

			limit(limit:int):Ref<ListEmployeeReqBuilder>
			view(view:string):Ref<ListEmployeeReqBuilder>
			status(status:int[]):Ref<ListEmployeeReqBuilder>
			type(type_:int[]):Ref<ListEmployeeReqBuilder>
			startTime(startTime:string):Ref<ListEmployeeReqBuilder>
			endTime(endTime:string):Ref<ListEmployeeReqBuilder>
			userIdType(userIdType:string):Ref<ListEmployeeReqBuilder>
			userIds(userIds:string[]):Ref<ListEmployeeReqBuilder>
			pageToken(pageToken:string):Ref<ListEmployeeReqBuilder>
			pageSize(pageSize:int):Ref<ListEmployeeReqBuilder>
			build():Ref<ListEmployeeReq>
	}
	export interface ListEmployeeResp extends Struct<ListEmployeeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListEmployeeRespData>
			success():bool
	}
	export interface ListEmployeeRespData extends Struct<ListEmployeeRespData>{

			items:Ref<Employee>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface Manager extends Struct<Manager>{

			userId:Ref<string>
			name:Ref<string>
			enName:Ref<string>
	}
	export interface ManagerBuilder extends Struct<ManagerBuilder>{

			userId(userId:string):Ref<ManagerBuilder>
			name(name:string):Ref<ManagerBuilder>
			enName(enName:string):Ref<ManagerBuilder>
			build():Ref<Manager>
	}
	export interface NativeRegion extends Struct<NativeRegion>{

			isoCode:Ref<string>
			name:Ref<string>
	}
	export interface NativeRegionBuilder extends Struct<NativeRegionBuilder>{

			isoCode(isoCode:string):Ref<NativeRegionBuilder>
			name(name:string):Ref<NativeRegionBuilder>
			build():Ref<NativeRegion>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAttachmentBuilder():Ref<AttachmentBuilder>

	export function newContractCompanyBuilder():Ref<ContractCompanyBuilder>

	export function newCustomFieldsBuilder():Ref<CustomFieldsBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newEducationBuilder():Ref<EducationBuilder>

	export function newEmergencyContactBuilder():Ref<EmergencyContactBuilder>

	export function newEmployeeBuilder():Ref<EmployeeBuilder>

	export function newGetAttachmentReqBuilder():Ref<GetAttachmentReqBuilder>

	export function newJobBuilder():Ref<JobBuilder>

	export function newJobLevelBuilder():Ref<JobLevelBuilder>

	export function newListEmployeeReqBuilder():Ref<ListEmployeeReqBuilder>

	export function newManagerBuilder():Ref<ManagerBuilder>

	export function newNativeRegionBuilder():Ref<NativeRegionBuilder>

	export function newSystemFieldsBuilder():Ref<SystemFieldsBuilder>

	export function newWorkExperienceBuilder():Ref<WorkExperienceBuilder>

	export function newWorkLocationBuilder():Ref<WorkLocationBuilder>

	export interface SystemFields extends Struct<SystemFields>{

			name:Ref<string>
			enName:Ref<string>
			email:Ref<string>
			mobile:Ref<string>
			departmentId:Ref<string>
			manager:Ref<Manager>
			job:Ref<Job>
			jobLevel:Ref<JobLevel>
			workLocation:Ref<WorkLocation>
			gender:Ref<int>
			birthday:Ref<string>
			nativeRegion:Ref<NativeRegion>
			ethnicity:Ref<int>
			maritalStatus:Ref<int>
			politicalStatus:Ref<int>
			enteredWorkforceDate:Ref<string>
			idType:Ref<int>
			idNumber:Ref<string>
			hukouType:Ref<int>
			hukouLocation:Ref<string>
			bankAccountNumber:Ref<string>
			bankName:Ref<string>
			socialSecurityAccount:Ref<string>
			providentFundAccount:Ref<string>
			employeeNo:Ref<string>
			employeeType:Ref<int>
			status:Ref<int>
			hireDate:Ref<string>
			probationMonths:Ref<float64>
			conversionDate:Ref<string>
			application:Ref<int>
			applicationStatus:Ref<int>
			lastDay:Ref<string>
			departureType:Ref<int>
			departureReason:Ref<int>
			departureNotes:Ref<string>
			contractCompany:Ref<ContractCompany>
			contractType:Ref<int>
			contractStartDate:Ref<string>
			contractExpirationDate:Ref<string>
			contractSignTimes:Ref<int>
			personalEmail:Ref<string>
			familyAddress:Ref<string>
			primaryEmergencyContact:Ref<EmergencyContact>
			emergencyContact:Ref<EmergencyContact>[]
			highestLevelOfEdu:Ref<Education>
			education:Ref<Education>[]
			formerWorkExp:Ref<WorkExperience>
			workExp:Ref<WorkExperience>[]
			idPhotoPoSide:Ref<Attachment>[]
			idPhotoEmSide:Ref<Attachment>[]
			idPhoto:Ref<Attachment>[]
			diplomaPhoto:Ref<Attachment>[]
			graduationCert:Ref<Attachment>[]
			certOfMerit:Ref<Attachment>[]
			offboardingFile:Ref<Attachment>[]
			cancelOnboardingReason:Ref<int>
			cancelOnboardingNotes:Ref<string>
			employeeFormStatus:Ref<int>
			createTime:Ref<int64>
			updateTime:Ref<int64>
	}
	export interface SystemFieldsBuilder extends Struct<SystemFieldsBuilder>{

			name(name:string):Ref<SystemFieldsBuilder>
			enName(enName:string):Ref<SystemFieldsBuilder>
			email(email:string):Ref<SystemFieldsBuilder>
			mobile(mobile:string):Ref<SystemFieldsBuilder>
			departmentId(departmentId:string):Ref<SystemFieldsBuilder>
			manager(manager:Ref<Manager>):Ref<SystemFieldsBuilder>
			job(job:Ref<Job>):Ref<SystemFieldsBuilder>
			jobLevel(jobLevel:Ref<JobLevel>):Ref<SystemFieldsBuilder>
			workLocation(workLocation:Ref<WorkLocation>):Ref<SystemFieldsBuilder>
			gender(gender:int):Ref<SystemFieldsBuilder>
			birthday(birthday:string):Ref<SystemFieldsBuilder>
			nativeRegion(nativeRegion:Ref<NativeRegion>):Ref<SystemFieldsBuilder>
			ethnicity(ethnicity:int):Ref<SystemFieldsBuilder>
			maritalStatus(maritalStatus:int):Ref<SystemFieldsBuilder>
			politicalStatus(politicalStatus:int):Ref<SystemFieldsBuilder>
			enteredWorkforceDate(enteredWorkforceDate:string):Ref<SystemFieldsBuilder>
			idType(idType:int):Ref<SystemFieldsBuilder>
			idNumber(idNumber:string):Ref<SystemFieldsBuilder>
			hukouType(hukouType:int):Ref<SystemFieldsBuilder>
			hukouLocation(hukouLocation:string):Ref<SystemFieldsBuilder>
			bankAccountNumber(bankAccountNumber:string):Ref<SystemFieldsBuilder>
			bankName(bankName:string):Ref<SystemFieldsBuilder>
			socialSecurityAccount(socialSecurityAccount:string):Ref<SystemFieldsBuilder>
			providentFundAccount(providentFundAccount:string):Ref<SystemFieldsBuilder>
			employeeNo(employeeNo:string):Ref<SystemFieldsBuilder>
			employeeType(employeeType:int):Ref<SystemFieldsBuilder>
			status(status:int):Ref<SystemFieldsBuilder>
			hireDate(hireDate:string):Ref<SystemFieldsBuilder>
			probationMonths(probationMonths:float64):Ref<SystemFieldsBuilder>
			conversionDate(conversionDate:string):Ref<SystemFieldsBuilder>
			application(application:int):Ref<SystemFieldsBuilder>
			applicationStatus(applicationStatus:int):Ref<SystemFieldsBuilder>
			lastDay(lastDay:string):Ref<SystemFieldsBuilder>
			departureType(departureType:int):Ref<SystemFieldsBuilder>
			departureReason(departureReason:int):Ref<SystemFieldsBuilder>
			departureNotes(departureNotes:string):Ref<SystemFieldsBuilder>
			contractCompany(contractCompany:Ref<ContractCompany>):Ref<SystemFieldsBuilder>
			contractType(contractType:int):Ref<SystemFieldsBuilder>
			contractStartDate(contractStartDate:string):Ref<SystemFieldsBuilder>
			contractExpirationDate(contractExpirationDate:string):Ref<SystemFieldsBuilder>
			contractSignTimes(contractSignTimes:int):Ref<SystemFieldsBuilder>
			personalEmail(personalEmail:string):Ref<SystemFieldsBuilder>
			familyAddress(familyAddress:string):Ref<SystemFieldsBuilder>
			primaryEmergencyContact(primaryEmergencyContact:Ref<EmergencyContact>):Ref<SystemFieldsBuilder>
			emergencyContact(emergencyContact:Ref<EmergencyContact>[]):Ref<SystemFieldsBuilder>
			highestLevelOfEdu(highestLevelOfEdu:Ref<Education>):Ref<SystemFieldsBuilder>
			education(education:Ref<Education>[]):Ref<SystemFieldsBuilder>
			formerWorkExp(formerWorkExp:Ref<WorkExperience>):Ref<SystemFieldsBuilder>
			workExp(workExp:Ref<WorkExperience>[]):Ref<SystemFieldsBuilder>
			idPhotoPoSide(idPhotoPoSide:Ref<Attachment>[]):Ref<SystemFieldsBuilder>
			idPhotoEmSide(idPhotoEmSide:Ref<Attachment>[]):Ref<SystemFieldsBuilder>
			idPhoto(idPhoto:Ref<Attachment>[]):Ref<SystemFieldsBuilder>
			diplomaPhoto(diplomaPhoto:Ref<Attachment>[]):Ref<SystemFieldsBuilder>
			graduationCert(graduationCert:Ref<Attachment>[]):Ref<SystemFieldsBuilder>
			certOfMerit(certOfMerit:Ref<Attachment>[]):Ref<SystemFieldsBuilder>
			offboardingFile(offboardingFile:Ref<Attachment>[]):Ref<SystemFieldsBuilder>
			cancelOnboardingReason(cancelOnboardingReason:int):Ref<SystemFieldsBuilder>
			cancelOnboardingNotes(cancelOnboardingNotes:string):Ref<SystemFieldsBuilder>
			employeeFormStatus(employeeFormStatus:int):Ref<SystemFieldsBuilder>
			createTime(createTime:int64):Ref<SystemFieldsBuilder>
			updateTime(updateTime:int64):Ref<SystemFieldsBuilder>
			build():Ref<SystemFields>
	}
	//"open_id"
	export const UserIdTypeOpenId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V1 extends Struct<V1>{

			attachment:Ref<{
			
				get(ctx:context.Context,req:Ref<GetAttachmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetAttachmentResp>
			}>
			employee:Ref<{
			
				list(ctx:context.Context,req:Ref<ListEmployeeReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListEmployeeResp>
				listByIterator(ctx:context.Context,req:Ref<ListEmployeeReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListEmployeeIterator>
			}>
	}
	//"basic"
	export const ViewBasic:string
	//"full"
	export const ViewFull:string
	export interface WorkExperience extends Struct<WorkExperience>{

			company:Ref<string>
			department:Ref<string>
			job:Ref<string>
			start:Ref<string>
			end:Ref<string>
			description:Ref<string>
	}
	export interface WorkExperienceBuilder extends Struct<WorkExperienceBuilder>{

			company(company:string):Ref<WorkExperienceBuilder>
			department(department:string):Ref<WorkExperienceBuilder>
			job(job:string):Ref<WorkExperienceBuilder>
			start(start:string):Ref<WorkExperienceBuilder>
			end(end:string):Ref<WorkExperienceBuilder>
			description(description:string):Ref<WorkExperienceBuilder>
			build():Ref<WorkExperience>
	}
	export interface WorkLocation extends Struct<WorkLocation>{

			id:Ref<int64>
			name:Ref<string>
	}
	export interface WorkLocationBuilder extends Struct<WorkLocationBuilder>{

			id(id:int64):Ref<WorkLocationBuilder>
			name(name:string):Ref<WorkLocationBuilder>
			build():Ref<WorkLocation>
	}
	export function emptyWorkLocationBuilder():WorkLocationBuilder
	export function emptyRefWorkLocationBuilder():Ref<WorkLocationBuilder>
	export function refOfWorkLocationBuilder(x:WorkLocationBuilder,v:Ref<WorkLocationBuilder>)
	export function unRefWorkLocationBuilder(v:Ref<WorkLocationBuilder>):WorkLocationBuilder
	export function emptyContractCompanyBuilder():ContractCompanyBuilder
	export function emptyRefContractCompanyBuilder():Ref<ContractCompanyBuilder>
	export function refOfContractCompanyBuilder(x:ContractCompanyBuilder,v:Ref<ContractCompanyBuilder>)
	export function unRefContractCompanyBuilder(v:Ref<ContractCompanyBuilder>):ContractCompanyBuilder
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyDepartmentIdBuilder():DepartmentIdBuilder
	export function emptyRefDepartmentIdBuilder():Ref<DepartmentIdBuilder>
	export function refOfDepartmentIdBuilder(x:DepartmentIdBuilder,v:Ref<DepartmentIdBuilder>)
	export function unRefDepartmentIdBuilder(v:Ref<DepartmentIdBuilder>):DepartmentIdBuilder
	export function emptyEmergencyContactBuilder():EmergencyContactBuilder
	export function emptyRefEmergencyContactBuilder():Ref<EmergencyContactBuilder>
	export function refOfEmergencyContactBuilder(x:EmergencyContactBuilder,v:Ref<EmergencyContactBuilder>)
	export function unRefEmergencyContactBuilder(v:Ref<EmergencyContactBuilder>):EmergencyContactBuilder
	export function emptyGetAttachmentReqBuilder():GetAttachmentReqBuilder
	export function emptyRefGetAttachmentReqBuilder():Ref<GetAttachmentReqBuilder>
	export function refOfGetAttachmentReqBuilder(x:GetAttachmentReqBuilder,v:Ref<GetAttachmentReqBuilder>)
	export function unRefGetAttachmentReqBuilder(v:Ref<GetAttachmentReqBuilder>):GetAttachmentReqBuilder
	export function emptyJob():Job
	export function emptyRefJob():Ref<Job>
	export function refOfJob(x:Job,v:Ref<Job>)
	export function unRefJob(v:Ref<Job>):Job
	export function emptyJobLevelBuilder():JobLevelBuilder
	export function emptyRefJobLevelBuilder():Ref<JobLevelBuilder>
	export function refOfJobLevelBuilder(x:JobLevelBuilder,v:Ref<JobLevelBuilder>)
	export function unRefJobLevelBuilder(v:Ref<JobLevelBuilder>):JobLevelBuilder
	export function emptyAttachmentBuilder():AttachmentBuilder
	export function emptyRefAttachmentBuilder():Ref<AttachmentBuilder>
	export function refOfAttachmentBuilder(x:AttachmentBuilder,v:Ref<AttachmentBuilder>)
	export function unRefAttachmentBuilder(v:Ref<AttachmentBuilder>):AttachmentBuilder
	export function emptyWorkExperience():WorkExperience
	export function emptyRefWorkExperience():Ref<WorkExperience>
	export function refOfWorkExperience(x:WorkExperience,v:Ref<WorkExperience>)
	export function unRefWorkExperience(v:Ref<WorkExperience>):WorkExperience
	export function emptyListEmployeeRespData():ListEmployeeRespData
	export function emptyRefListEmployeeRespData():Ref<ListEmployeeRespData>
	export function refOfListEmployeeRespData(x:ListEmployeeRespData,v:Ref<ListEmployeeRespData>)
	export function unRefListEmployeeRespData(v:Ref<ListEmployeeRespData>):ListEmployeeRespData
	export function emptyGetAttachmentReq():GetAttachmentReq
	export function emptyRefGetAttachmentReq():Ref<GetAttachmentReq>
	export function refOfGetAttachmentReq(x:GetAttachmentReq,v:Ref<GetAttachmentReq>)
	export function unRefGetAttachmentReq(v:Ref<GetAttachmentReq>):GetAttachmentReq
	export function emptyManagerBuilder():ManagerBuilder
	export function emptyRefManagerBuilder():Ref<ManagerBuilder>
	export function refOfManagerBuilder(x:ManagerBuilder,v:Ref<ManagerBuilder>)
	export function unRefManagerBuilder(v:Ref<ManagerBuilder>):ManagerBuilder
	export function emptyNativeRegion():NativeRegion
	export function emptyRefNativeRegion():Ref<NativeRegion>
	export function refOfNativeRegion(x:NativeRegion,v:Ref<NativeRegion>)
	export function unRefNativeRegion(v:Ref<NativeRegion>):NativeRegion
	export function emptyNativeRegionBuilder():NativeRegionBuilder
	export function emptyRefNativeRegionBuilder():Ref<NativeRegionBuilder>
	export function refOfNativeRegionBuilder(x:NativeRegionBuilder,v:Ref<NativeRegionBuilder>)
	export function unRefNativeRegionBuilder(v:Ref<NativeRegionBuilder>):NativeRegionBuilder
	export function emptySystemFields():SystemFields
	export function emptyRefSystemFields():Ref<SystemFields>
	export function refOfSystemFields(x:SystemFields,v:Ref<SystemFields>)
	export function unRefSystemFields(v:Ref<SystemFields>):SystemFields
	export function emptyAttachment():Attachment
	export function emptyRefAttachment():Ref<Attachment>
	export function refOfAttachment(x:Attachment,v:Ref<Attachment>)
	export function unRefAttachment(v:Ref<Attachment>):Attachment
	export function emptyEmployee():Employee
	export function emptyRefEmployee():Ref<Employee>
	export function refOfEmployee(x:Employee,v:Ref<Employee>)
	export function unRefEmployee(v:Ref<Employee>):Employee
	export function emptyEmployeeBuilder():EmployeeBuilder
	export function emptyRefEmployeeBuilder():Ref<EmployeeBuilder>
	export function refOfEmployeeBuilder(x:EmployeeBuilder,v:Ref<EmployeeBuilder>)
	export function unRefEmployeeBuilder(v:Ref<EmployeeBuilder>):EmployeeBuilder
	export function emptyJobBuilder():JobBuilder
	export function emptyRefJobBuilder():Ref<JobBuilder>
	export function refOfJobBuilder(x:JobBuilder,v:Ref<JobBuilder>)
	export function unRefJobBuilder(v:Ref<JobBuilder>):JobBuilder
	export function emptyJobLevel():JobLevel
	export function emptyRefJobLevel():Ref<JobLevel>
	export function refOfJobLevel(x:JobLevel,v:Ref<JobLevel>)
	export function unRefJobLevel(v:Ref<JobLevel>):JobLevel
	export function emptyListEmployeeReqBuilder():ListEmployeeReqBuilder
	export function emptyRefListEmployeeReqBuilder():Ref<ListEmployeeReqBuilder>
	export function refOfListEmployeeReqBuilder(x:ListEmployeeReqBuilder,v:Ref<ListEmployeeReqBuilder>)
	export function unRefListEmployeeReqBuilder(v:Ref<ListEmployeeReqBuilder>):ListEmployeeReqBuilder
	export function emptyEmergencyContact():EmergencyContact
	export function emptyRefEmergencyContact():Ref<EmergencyContact>
	export function refOfEmergencyContact(x:EmergencyContact,v:Ref<EmergencyContact>)
	export function unRefEmergencyContact(v:Ref<EmergencyContact>):EmergencyContact
	export function emptyListEmployeeReq():ListEmployeeReq
	export function emptyRefListEmployeeReq():Ref<ListEmployeeReq>
	export function refOfListEmployeeReq(x:ListEmployeeReq,v:Ref<ListEmployeeReq>)
	export function unRefListEmployeeReq(v:Ref<ListEmployeeReq>):ListEmployeeReq
	export function emptyListEmployeeResp():ListEmployeeResp
	export function emptyRefListEmployeeResp():Ref<ListEmployeeResp>
	export function refOfListEmployeeResp(x:ListEmployeeResp,v:Ref<ListEmployeeResp>)
	export function unRefListEmployeeResp(v:Ref<ListEmployeeResp>):ListEmployeeResp
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyWorkExperienceBuilder():WorkExperienceBuilder
	export function emptyRefWorkExperienceBuilder():Ref<WorkExperienceBuilder>
	export function refOfWorkExperienceBuilder(x:WorkExperienceBuilder,v:Ref<WorkExperienceBuilder>)
	export function unRefWorkExperienceBuilder(v:Ref<WorkExperienceBuilder>):WorkExperienceBuilder
	export function emptyEducation():Education
	export function emptyRefEducation():Ref<Education>
	export function refOfEducation(x:Education,v:Ref<Education>)
	export function unRefEducation(v:Ref<Education>):Education
	export function emptyGetAttachmentResp():GetAttachmentResp
	export function emptyRefGetAttachmentResp():Ref<GetAttachmentResp>
	export function refOfGetAttachmentResp(x:GetAttachmentResp,v:Ref<GetAttachmentResp>)
	export function unRefGetAttachmentResp(v:Ref<GetAttachmentResp>):GetAttachmentResp
	export function emptyCustomFields():CustomFields
	export function emptyRefCustomFields():Ref<CustomFields>
	export function refOfCustomFields(x:CustomFields,v:Ref<CustomFields>)
	export function unRefCustomFields(v:Ref<CustomFields>):CustomFields
	export function emptyManager():Manager
	export function emptyRefManager():Ref<Manager>
	export function refOfManager(x:Manager,v:Ref<Manager>)
	export function unRefManager(v:Ref<Manager>):Manager
	export function emptySystemFieldsBuilder():SystemFieldsBuilder
	export function emptyRefSystemFieldsBuilder():Ref<SystemFieldsBuilder>
	export function refOfSystemFieldsBuilder(x:SystemFieldsBuilder,v:Ref<SystemFieldsBuilder>)
	export function unRefSystemFieldsBuilder(v:Ref<SystemFieldsBuilder>):SystemFieldsBuilder
	export function emptyContractCompany():ContractCompany
	export function emptyRefContractCompany():Ref<ContractCompany>
	export function refOfContractCompany(x:ContractCompany,v:Ref<ContractCompany>)
	export function unRefContractCompany(v:Ref<ContractCompany>):ContractCompany
	export function emptyEducationBuilder():EducationBuilder
	export function emptyRefEducationBuilder():Ref<EducationBuilder>
	export function refOfEducationBuilder(x:EducationBuilder,v:Ref<EducationBuilder>)
	export function unRefEducationBuilder(v:Ref<EducationBuilder>):EducationBuilder
	export function emptyListEmployeeIterator():ListEmployeeIterator
	export function emptyRefListEmployeeIterator():Ref<ListEmployeeIterator>
	export function refOfListEmployeeIterator(x:ListEmployeeIterator,v:Ref<ListEmployeeIterator>)
	export function unRefListEmployeeIterator(v:Ref<ListEmployeeIterator>):ListEmployeeIterator
	export function emptyWorkLocation():WorkLocation
	export function emptyRefWorkLocation():Ref<WorkLocation>
	export function refOfWorkLocation(x:WorkLocation,v:Ref<WorkLocation>)
	export function unRefWorkLocation(v:Ref<WorkLocation>):WorkLocation
	export function emptyCustomFieldsBuilder():CustomFieldsBuilder
	export function emptyRefCustomFieldsBuilder():Ref<CustomFieldsBuilder>
	export function refOfCustomFieldsBuilder(x:CustomFieldsBuilder,v:Ref<CustomFieldsBuilder>)
	export function unRefCustomFieldsBuilder(v:Ref<CustomFieldsBuilder>):CustomFieldsBuilder
}