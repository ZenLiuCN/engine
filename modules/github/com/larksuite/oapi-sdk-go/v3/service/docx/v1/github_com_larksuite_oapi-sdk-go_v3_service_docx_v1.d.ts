// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/docx/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Nothing,int,error,bool,float64,Ref,Struct,Alias} from 'go'
	export interface AddOns extends Struct<AddOns>{

			componentId:Ref<string>
			componentTypeId:Ref<string>
			record:Ref<string>
	}
	export interface AddOnsBuilder extends Struct<AddOnsBuilder>{

			componentId(componentId:string):Ref<AddOnsBuilder>
			componentTypeId(componentTypeId:string):Ref<AddOnsBuilder>
			record(record:string):Ref<AddOnsBuilder>
			build():Ref<AddOns>
	}
	export interface Agenda extends Alias<Nothing>{

	}
	export interface AgendaItem extends Alias<Nothing>{

	}
	export interface AgendaItemContent extends Alias<Nothing>{

	}
	export interface AgendaItemTitle extends Struct<AgendaItemTitle>{

			elements:Ref<AgendaTitleElement>[]
			align:Ref<int>
	}
	export interface AgendaItemTitleBuilder extends Struct<AgendaItemTitleBuilder>{

			elements(elements:Ref<AgendaTitleElement>[]):Ref<AgendaItemTitleBuilder>
			align(align:int):Ref<AgendaItemTitleBuilder>
			build():Ref<AgendaItemTitle>
	}
	export interface AgendaTitleElement extends Struct<AgendaTitleElement>{

			textRun:Ref<TextRun>
			mentionUser:Ref<MentionUser>
			mentionDoc:Ref<MentionDoc>
			reminder:Ref<Reminder>
			file:Ref<InlineFile>
			undefined:Ref<UndefinedElement>
			inlineBlock:Ref<InlineBlock>
			equation:Ref<Equation>
	}
	export interface AgendaTitleElementBuilder extends Struct<AgendaTitleElementBuilder>{

			textRun(textRun:Ref<TextRun>):Ref<AgendaTitleElementBuilder>
			mentionUser(mentionUser:Ref<MentionUser>):Ref<AgendaTitleElementBuilder>
			mentionDoc(mentionDoc:Ref<MentionDoc>):Ref<AgendaTitleElementBuilder>
			reminder(reminder:Ref<Reminder>):Ref<AgendaTitleElementBuilder>
			file(file:Ref<InlineFile>):Ref<AgendaTitleElementBuilder>
			undefined(undefined:Ref<UndefinedElement>):Ref<AgendaTitleElementBuilder>
			inlineBlock(inlineBlock:Ref<InlineBlock>):Ref<AgendaTitleElementBuilder>
			equation(equation:Ref<Equation>):Ref<AgendaTitleElementBuilder>
			build():Ref<AgendaTitleElement>
	}
	export interface BatchDeleteDocumentBlockChildrenPathReqBodyBuilder extends Struct<BatchDeleteDocumentBlockChildrenPathReqBodyBuilder>{

			startIndex(startIndex:int):Ref<BatchDeleteDocumentBlockChildrenPathReqBodyBuilder>
			endIndex(endIndex:int):Ref<BatchDeleteDocumentBlockChildrenPathReqBodyBuilder>
			build():Ref<BatchDeleteDocumentBlockChildrenReqBody>
	}
	export interface BatchDeleteDocumentBlockChildrenReq extends Struct<BatchDeleteDocumentBlockChildrenReq>{

			body:Ref<BatchDeleteDocumentBlockChildrenReqBody>
	}
	export interface BatchDeleteDocumentBlockChildrenReqBody extends Struct<BatchDeleteDocumentBlockChildrenReqBody>{

			startIndex:Ref<int>
			endIndex:Ref<int>
	}
	export interface BatchDeleteDocumentBlockChildrenReqBodyBuilder extends Struct<BatchDeleteDocumentBlockChildrenReqBodyBuilder>{

			startIndex(startIndex:int):Ref<BatchDeleteDocumentBlockChildrenReqBodyBuilder>
			endIndex(endIndex:int):Ref<BatchDeleteDocumentBlockChildrenReqBodyBuilder>
			build():Ref<BatchDeleteDocumentBlockChildrenReqBody>
	}
	export interface BatchDeleteDocumentBlockChildrenReqBuilder extends Struct<BatchDeleteDocumentBlockChildrenReqBuilder>{

			documentId(documentId:string):Ref<BatchDeleteDocumentBlockChildrenReqBuilder>
			blockId(blockId:string):Ref<BatchDeleteDocumentBlockChildrenReqBuilder>
			documentRevisionId(documentRevisionId:int):Ref<BatchDeleteDocumentBlockChildrenReqBuilder>
			clientToken(clientToken:string):Ref<BatchDeleteDocumentBlockChildrenReqBuilder>
			body(body:Ref<BatchDeleteDocumentBlockChildrenReqBody>):Ref<BatchDeleteDocumentBlockChildrenReqBuilder>
			build():Ref<BatchDeleteDocumentBlockChildrenReq>
	}
	export interface BatchDeleteDocumentBlockChildrenResp extends Struct<BatchDeleteDocumentBlockChildrenResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchDeleteDocumentBlockChildrenRespData>
			success():bool
	}
	export interface BatchDeleteDocumentBlockChildrenRespData extends Struct<BatchDeleteDocumentBlockChildrenRespData>{

			documentRevisionId:Ref<int>
			clientToken:Ref<string>
	}
	export interface BatchUpdateDocumentBlockPathReqBodyBuilder extends Struct<BatchUpdateDocumentBlockPathReqBodyBuilder>{

			requests(requests:Ref<UpdateBlockRequest>[]):Ref<BatchUpdateDocumentBlockPathReqBodyBuilder>
			build():Ref<BatchUpdateDocumentBlockReqBody>
	}
	export interface BatchUpdateDocumentBlockReq extends Struct<BatchUpdateDocumentBlockReq>{

			body:Ref<BatchUpdateDocumentBlockReqBody>
	}
	export interface BatchUpdateDocumentBlockReqBody extends Struct<BatchUpdateDocumentBlockReqBody>{

			requests:Ref<UpdateBlockRequest>[]
	}
	export interface BatchUpdateDocumentBlockReqBodyBuilder extends Struct<BatchUpdateDocumentBlockReqBodyBuilder>{

			requests(requests:Ref<UpdateBlockRequest>[]):Ref<BatchUpdateDocumentBlockReqBodyBuilder>
			build():Ref<BatchUpdateDocumentBlockReqBody>
	}
	export interface BatchUpdateDocumentBlockReqBuilder extends Struct<BatchUpdateDocumentBlockReqBuilder>{

			documentId(documentId:string):Ref<BatchUpdateDocumentBlockReqBuilder>
			documentRevisionId(documentRevisionId:int):Ref<BatchUpdateDocumentBlockReqBuilder>
			clientToken(clientToken:string):Ref<BatchUpdateDocumentBlockReqBuilder>
			userIdType(userIdType:string):Ref<BatchUpdateDocumentBlockReqBuilder>
			body(body:Ref<BatchUpdateDocumentBlockReqBody>):Ref<BatchUpdateDocumentBlockReqBuilder>
			build():Ref<BatchUpdateDocumentBlockReq>
	}
	export interface BatchUpdateDocumentBlockResp extends Struct<BatchUpdateDocumentBlockResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchUpdateDocumentBlockRespData>
			success():bool
	}
	export interface BatchUpdateDocumentBlockRespData extends Struct<BatchUpdateDocumentBlockRespData>{

			blocks:Ref<Block>[]
			documentRevisionId:Ref<int>
			clientToken:Ref<string>
	}
	export interface Bitable extends Struct<Bitable>{

			token:Ref<string>
			viewType:Ref<int>
	}
	export interface BitableBuilder extends Struct<BitableBuilder>{

			token(token:string):Ref<BitableBuilder>
			viewType(viewType:int):Ref<BitableBuilder>
			build():Ref<Bitable>
	}
	export interface Block extends Struct<Block>{

			blockId:Ref<string>
			parentId:Ref<string>
			children:string[]
			blockType:Ref<int>
			page:Ref<Text>
			text:Ref<Text>
			heading1:Ref<Text>
			heading2:Ref<Text>
			heading3:Ref<Text>
			heading4:Ref<Text>
			heading5:Ref<Text>
			heading6:Ref<Text>
			heading7:Ref<Text>
			heading8:Ref<Text>
			heading9:Ref<Text>
			bullet:Ref<Text>
			ordered:Ref<Text>
			code:Ref<Text>
			quote:Ref<Text>
			equation:Ref<Text>
			todo:Ref<Text>
			bitable:Ref<Bitable>
			callout:Ref<Callout>
			chatCard:Ref<ChatCard>
			diagram:Ref<Diagram>
			divider:Ref<Divider>
			file:Ref<File>
			grid:Ref<Grid>
			gridColumn:Ref<GridColumn>
			iframe:Ref<Iframe>
			image:Ref<Image>
			isv:Ref<Isv>
			addOns:Ref<AddOns>
			mindnote:Ref<Mindnote>
			sheet:Ref<Sheet>
			table:Ref<Table>
			tableCell:Ref<TableCell>
			view:Ref<View>
			undefined:Ref<Undefined>
			quoteContainer:Ref<QuoteContainer>
			task:Ref<Task>
			okr:Ref<Okr>
			okrObjective:Ref<OkrObjective>
			okrKeyResult:Ref<OkrKeyResult>
			okrProgress:Ref<OkrProgress>
			commentIds:string[]
			jiraIssue:Ref<JiraIssue>
			wikiCatalog:Ref<WikiCatalog>
			board:Ref<Board>
			agenda:Ref<Agenda>
			agendaItem:Ref<AgendaItem>
			agendaItemTitle:Ref<AgendaItemTitle>
			agendaItemContent:Ref<AgendaItemContent>
			linkPreview:Ref<LinkPreview>
	}
	export interface BlockBuilder extends Struct<BlockBuilder>{

			blockId(blockId:string):Ref<BlockBuilder>
			parentId(parentId:string):Ref<BlockBuilder>
			children(children:string[]):Ref<BlockBuilder>
			blockType(blockType:int):Ref<BlockBuilder>
			page(page:Ref<Text>):Ref<BlockBuilder>
			text(text:Ref<Text>):Ref<BlockBuilder>
			heading1(heading1:Ref<Text>):Ref<BlockBuilder>
			heading2(heading2:Ref<Text>):Ref<BlockBuilder>
			heading3(heading3:Ref<Text>):Ref<BlockBuilder>
			heading4(heading4:Ref<Text>):Ref<BlockBuilder>
			heading5(heading5:Ref<Text>):Ref<BlockBuilder>
			heading6(heading6:Ref<Text>):Ref<BlockBuilder>
			heading7(heading7:Ref<Text>):Ref<BlockBuilder>
			heading8(heading8:Ref<Text>):Ref<BlockBuilder>
			heading9(heading9:Ref<Text>):Ref<BlockBuilder>
			bullet(bullet:Ref<Text>):Ref<BlockBuilder>
			ordered(ordered:Ref<Text>):Ref<BlockBuilder>
			code(code:Ref<Text>):Ref<BlockBuilder>
			quote(quote:Ref<Text>):Ref<BlockBuilder>
			equation(equation:Ref<Text>):Ref<BlockBuilder>
			todo(todo:Ref<Text>):Ref<BlockBuilder>
			bitable(bitable:Ref<Bitable>):Ref<BlockBuilder>
			callout(callout:Ref<Callout>):Ref<BlockBuilder>
			chatCard(chatCard:Ref<ChatCard>):Ref<BlockBuilder>
			diagram(diagram:Ref<Diagram>):Ref<BlockBuilder>
			divider(divider:Ref<Divider>):Ref<BlockBuilder>
			file(file:Ref<File>):Ref<BlockBuilder>
			grid(grid:Ref<Grid>):Ref<BlockBuilder>
			gridColumn(gridColumn:Ref<GridColumn>):Ref<BlockBuilder>
			iframe(iframe:Ref<Iframe>):Ref<BlockBuilder>
			image(image:Ref<Image>):Ref<BlockBuilder>
			isv(isv:Ref<Isv>):Ref<BlockBuilder>
			addOns(addOns:Ref<AddOns>):Ref<BlockBuilder>
			mindnote(mindnote:Ref<Mindnote>):Ref<BlockBuilder>
			sheet(sheet:Ref<Sheet>):Ref<BlockBuilder>
			table(table:Ref<Table>):Ref<BlockBuilder>
			tableCell(tableCell:Ref<TableCell>):Ref<BlockBuilder>
			view(view:Ref<View>):Ref<BlockBuilder>
			undefined(undefined:Ref<Undefined>):Ref<BlockBuilder>
			quoteContainer(quoteContainer:Ref<QuoteContainer>):Ref<BlockBuilder>
			task(task:Ref<Task>):Ref<BlockBuilder>
			okr(okr:Ref<Okr>):Ref<BlockBuilder>
			okrObjective(okrObjective:Ref<OkrObjective>):Ref<BlockBuilder>
			okrKeyResult(okrKeyResult:Ref<OkrKeyResult>):Ref<BlockBuilder>
			okrProgress(okrProgress:Ref<OkrProgress>):Ref<BlockBuilder>
			commentIds(commentIds:string[]):Ref<BlockBuilder>
			jiraIssue(jiraIssue:Ref<JiraIssue>):Ref<BlockBuilder>
			wikiCatalog(wikiCatalog:Ref<WikiCatalog>):Ref<BlockBuilder>
			board(board:Ref<Board>):Ref<BlockBuilder>
			agenda(agenda:Ref<Agenda>):Ref<BlockBuilder>
			agendaItem(agendaItem:Ref<AgendaItem>):Ref<BlockBuilder>
			agendaItemTitle(agendaItemTitle:Ref<AgendaItemTitle>):Ref<BlockBuilder>
			agendaItemContent(agendaItemContent:Ref<AgendaItemContent>):Ref<BlockBuilder>
			linkPreview(linkPreview:Ref<LinkPreview>):Ref<BlockBuilder>
			build():Ref<Block>
	}
	export interface BlockIdRelation extends Struct<BlockIdRelation>{

			temporaryBlockId:Ref<string>
			blockId:Ref<string>
	}
	export interface BlockIdRelationBuilder extends Struct<BlockIdRelationBuilder>{

			temporaryBlockId(temporaryBlockId:string):Ref<BlockIdRelationBuilder>
			blockId(blockId:string):Ref<BlockIdRelationBuilder>
			build():Ref<BlockIdRelation>
	}
	export interface Board extends Struct<Board>{

			token:Ref<string>
			align:Ref<int>
			width:Ref<int>
			height:Ref<int>
	}
	export interface BoardBuilder extends Struct<BoardBuilder>{

			token(token:string):Ref<BoardBuilder>
			align(align:int):Ref<BoardBuilder>
			width(width:int):Ref<BoardBuilder>
			height(height:int):Ref<BoardBuilder>
			build():Ref<Board>
	}
	export interface Callout extends Struct<Callout>{

			backgroundColor:Ref<int>
			borderColor:Ref<int>
			textColor:Ref<int>
			emojiId:Ref<string>
	}
	export interface CalloutBuilder extends Struct<CalloutBuilder>{

			backgroundColor(backgroundColor:int):Ref<CalloutBuilder>
			borderColor(borderColor:int):Ref<CalloutBuilder>
			textColor(textColor:int):Ref<CalloutBuilder>
			emojiId(emojiId:string):Ref<CalloutBuilder>
			build():Ref<Callout>
	}
	export interface ChatCard extends Struct<ChatCard>{

			chatId:Ref<string>
			align:Ref<int>
	}
	export interface ChatCardBuilder extends Struct<ChatCardBuilder>{

			chatId(chatId:string):Ref<ChatCardBuilder>
			align(align:int):Ref<ChatCardBuilder>
			build():Ref<ChatCard>
	}
	export interface CreateDocumentBlockChildrenPathReqBodyBuilder extends Struct<CreateDocumentBlockChildrenPathReqBodyBuilder>{

			children(children:Ref<Block>[]):Ref<CreateDocumentBlockChildrenPathReqBodyBuilder>
			index(index:int):Ref<CreateDocumentBlockChildrenPathReqBodyBuilder>
			build():Ref<CreateDocumentBlockChildrenReqBody>
	}
	export interface CreateDocumentBlockChildrenReq extends Struct<CreateDocumentBlockChildrenReq>{

			body:Ref<CreateDocumentBlockChildrenReqBody>
	}
	export interface CreateDocumentBlockChildrenReqBody extends Struct<CreateDocumentBlockChildrenReqBody>{

			children:Ref<Block>[]
			index:Ref<int>
	}
	export interface CreateDocumentBlockChildrenReqBodyBuilder extends Struct<CreateDocumentBlockChildrenReqBodyBuilder>{

			children(children:Ref<Block>[]):Ref<CreateDocumentBlockChildrenReqBodyBuilder>
			index(index:int):Ref<CreateDocumentBlockChildrenReqBodyBuilder>
			build():Ref<CreateDocumentBlockChildrenReqBody>
	}
	export interface CreateDocumentBlockChildrenReqBuilder extends Struct<CreateDocumentBlockChildrenReqBuilder>{

			documentId(documentId:string):Ref<CreateDocumentBlockChildrenReqBuilder>
			blockId(blockId:string):Ref<CreateDocumentBlockChildrenReqBuilder>
			documentRevisionId(documentRevisionId:int):Ref<CreateDocumentBlockChildrenReqBuilder>
			clientToken(clientToken:string):Ref<CreateDocumentBlockChildrenReqBuilder>
			userIdType(userIdType:string):Ref<CreateDocumentBlockChildrenReqBuilder>
			body(body:Ref<CreateDocumentBlockChildrenReqBody>):Ref<CreateDocumentBlockChildrenReqBuilder>
			build():Ref<CreateDocumentBlockChildrenReq>
	}
	export interface CreateDocumentBlockChildrenResp extends Struct<CreateDocumentBlockChildrenResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateDocumentBlockChildrenRespData>
			success():bool
	}
	export interface CreateDocumentBlockChildrenRespData extends Struct<CreateDocumentBlockChildrenRespData>{

			children:Ref<Block>[]
			documentRevisionId:Ref<int>
			clientToken:Ref<string>
	}
	export interface CreateDocumentPathReqBodyBuilder extends Struct<CreateDocumentPathReqBodyBuilder>{

			folderToken(folderToken:string):Ref<CreateDocumentPathReqBodyBuilder>
			title(title:string):Ref<CreateDocumentPathReqBodyBuilder>
			build():Ref<CreateDocumentReqBody>
	}
	export interface CreateDocumentReq extends Struct<CreateDocumentReq>{

			body:Ref<CreateDocumentReqBody>
	}
	export interface CreateDocumentReqBody extends Struct<CreateDocumentReqBody>{

			folderToken:Ref<string>
			title:Ref<string>
	}
	export interface CreateDocumentReqBodyBuilder extends Struct<CreateDocumentReqBodyBuilder>{

			folderToken(folderToken:string):Ref<CreateDocumentReqBodyBuilder>
			title(title:string):Ref<CreateDocumentReqBodyBuilder>
			build():Ref<CreateDocumentReqBody>
	}
	export interface CreateDocumentReqBuilder extends Struct<CreateDocumentReqBuilder>{

			body(body:Ref<CreateDocumentReqBody>):Ref<CreateDocumentReqBuilder>
			build():Ref<CreateDocumentReq>
	}
	export interface CreateDocumentResp extends Struct<CreateDocumentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateDocumentRespData>
			success():bool
	}
	export interface CreateDocumentRespData extends Struct<CreateDocumentRespData>{

			document:Ref<Document>
	}
	export interface DeleteGridColumnRequest extends Struct<DeleteGridColumnRequest>{

			columnIndex:Ref<int>
	}
	export interface DeleteGridColumnRequestBuilder extends Struct<DeleteGridColumnRequestBuilder>{

			columnIndex(columnIndex:int):Ref<DeleteGridColumnRequestBuilder>
			build():Ref<DeleteGridColumnRequest>
	}
	export interface DeleteTableColumnsRequest extends Struct<DeleteTableColumnsRequest>{

			columnStartIndex:Ref<int>
			columnEndIndex:Ref<int>
	}
	export interface DeleteTableColumnsRequestBuilder extends Struct<DeleteTableColumnsRequestBuilder>{

			columnStartIndex(columnStartIndex:int):Ref<DeleteTableColumnsRequestBuilder>
			columnEndIndex(columnEndIndex:int):Ref<DeleteTableColumnsRequestBuilder>
			build():Ref<DeleteTableColumnsRequest>
	}
	export interface DeleteTableRowsRequest extends Struct<DeleteTableRowsRequest>{

			rowStartIndex:Ref<int>
			rowEndIndex:Ref<int>
	}
	export interface DeleteTableRowsRequestBuilder extends Struct<DeleteTableRowsRequestBuilder>{

			rowStartIndex(rowStartIndex:int):Ref<DeleteTableRowsRequestBuilder>
			rowEndIndex(rowEndIndex:int):Ref<DeleteTableRowsRequestBuilder>
			build():Ref<DeleteTableRowsRequest>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Diagram extends Struct<Diagram>{

			diagramType:Ref<int>
	}
	export interface DiagramBuilder extends Struct<DiagramBuilder>{

			diagramType(diagramType:int):Ref<DiagramBuilder>
			build():Ref<Diagram>
	}
	export interface Divider extends Alias<Nothing>{

	}
	export interface Document extends Struct<Document>{

			documentId:Ref<string>
			revisionId:Ref<int>
			title:Ref<string>
			displaySetting:Ref<DocumentDisplaySetting>
			cover:Ref<DocumentCover>
	}
	export interface DocumentAuthor extends Struct<DocumentAuthor>{

			userId:Ref<string>
	}
	export interface DocumentAuthorBuilder extends Struct<DocumentAuthorBuilder>{

			userId(userId:string):Ref<DocumentAuthorBuilder>
			build():Ref<DocumentAuthor>
	}
	export interface DocumentBuilder extends Struct<DocumentBuilder>{

			documentId(documentId:string):Ref<DocumentBuilder>
			revisionId(revisionId:int):Ref<DocumentBuilder>
			title(title:string):Ref<DocumentBuilder>
			displaySetting(displaySetting:Ref<DocumentDisplaySetting>):Ref<DocumentBuilder>
			cover(cover:Ref<DocumentCover>):Ref<DocumentBuilder>
			build():Ref<Document>
	}
	export interface DocumentCover extends Struct<DocumentCover>{

			token:Ref<string>
			offsetRatioX:Ref<float64>
			offsetRatioY:Ref<float64>
	}
	export interface DocumentCoverBuilder extends Struct<DocumentCoverBuilder>{

			token(token:string):Ref<DocumentCoverBuilder>
			offsetRatioX(offsetRatioX:float64):Ref<DocumentCoverBuilder>
			offsetRatioY(offsetRatioY:float64):Ref<DocumentCoverBuilder>
			build():Ref<DocumentCover>
	}
	export interface DocumentDisplaySetting extends Struct<DocumentDisplaySetting>{

			showAuthors:Ref<bool>
			showCreateTime:Ref<bool>
			showPv:Ref<bool>
			showUv:Ref<bool>
			showLikeCount:Ref<bool>
			showCommentCount:Ref<bool>
			showRelatedMatters:Ref<bool>
	}
	export interface DocumentDisplaySettingBuilder extends Struct<DocumentDisplaySettingBuilder>{

			showAuthors(showAuthors:bool):Ref<DocumentDisplaySettingBuilder>
			showCreateTime(showCreateTime:bool):Ref<DocumentDisplaySettingBuilder>
			showPv(showPv:bool):Ref<DocumentDisplaySettingBuilder>
			showUv(showUv:bool):Ref<DocumentDisplaySettingBuilder>
			showLikeCount(showLikeCount:bool):Ref<DocumentDisplaySettingBuilder>
			showCommentCount(showCommentCount:bool):Ref<DocumentDisplaySettingBuilder>
			showRelatedMatters(showRelatedMatters:bool):Ref<DocumentDisplaySettingBuilder>
			build():Ref<DocumentDisplaySetting>
	}
	export interface Equation extends Struct<Equation>{

			content:Ref<string>
			textElementStyle:Ref<TextElementStyle>
	}
	export interface EquationBuilder extends Struct<EquationBuilder>{

			content(content:string):Ref<EquationBuilder>
			textElementStyle(textElementStyle:Ref<TextElementStyle>):Ref<EquationBuilder>
			build():Ref<Equation>
	}
	export interface File extends Struct<File>{

			token:Ref<string>
			name:Ref<string>
			viewType:Ref<int>
	}
	export interface FileBuilder extends Struct<FileBuilder>{

			token(token:string):Ref<FileBuilder>
			name(name:string):Ref<FileBuilder>
			viewType(viewType:int):Ref<FileBuilder>
			build():Ref<File>
	}
	export interface GetDocumentBlockChildrenIterator extends Struct<GetDocumentBlockChildrenIterator>{

			next():[bool,Ref<Block>]
			nextPageToken():Ref<string>
	}
	export interface GetDocumentBlockChildrenReq extends Struct<GetDocumentBlockChildrenReq>{

			limit:int
	}
	export interface GetDocumentBlockChildrenReqBuilder extends Struct<GetDocumentBlockChildrenReqBuilder>{

			limit(limit:int):Ref<GetDocumentBlockChildrenReqBuilder>
			documentId(documentId:string):Ref<GetDocumentBlockChildrenReqBuilder>
			blockId(blockId:string):Ref<GetDocumentBlockChildrenReqBuilder>
			documentRevisionId(documentRevisionId:int):Ref<GetDocumentBlockChildrenReqBuilder>
			pageToken(pageToken:string):Ref<GetDocumentBlockChildrenReqBuilder>
			pageSize(pageSize:int):Ref<GetDocumentBlockChildrenReqBuilder>
			userIdType(userIdType:string):Ref<GetDocumentBlockChildrenReqBuilder>
			build():Ref<GetDocumentBlockChildrenReq>
	}
	export interface GetDocumentBlockChildrenResp extends Struct<GetDocumentBlockChildrenResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetDocumentBlockChildrenRespData>
			success():bool
	}
	export interface GetDocumentBlockChildrenRespData extends Struct<GetDocumentBlockChildrenRespData>{

			items:Ref<Block>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface GetDocumentBlockReq extends Struct<GetDocumentBlockReq>{

	}
	export interface GetDocumentBlockReqBuilder extends Struct<GetDocumentBlockReqBuilder>{

			documentId(documentId:string):Ref<GetDocumentBlockReqBuilder>
			blockId(blockId:string):Ref<GetDocumentBlockReqBuilder>
			documentRevisionId(documentRevisionId:int):Ref<GetDocumentBlockReqBuilder>
			userIdType(userIdType:string):Ref<GetDocumentBlockReqBuilder>
			build():Ref<GetDocumentBlockReq>
	}
	export interface GetDocumentBlockResp extends Struct<GetDocumentBlockResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetDocumentBlockRespData>
			success():bool
	}
	export interface GetDocumentBlockRespData extends Struct<GetDocumentBlockRespData>{

			block:Ref<Block>
	}
	export interface GetDocumentReq extends Struct<GetDocumentReq>{

	}
	export interface GetDocumentReqBuilder extends Struct<GetDocumentReqBuilder>{

			documentId(documentId:string):Ref<GetDocumentReqBuilder>
			build():Ref<GetDocumentReq>
	}
	export interface GetDocumentResp extends Struct<GetDocumentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetDocumentRespData>
			success():bool
	}
	export interface GetDocumentRespData extends Struct<GetDocumentRespData>{

			document:Ref<Document>
	}
	export interface Grid extends Struct<Grid>{

			columnSize:Ref<int>
	}
	export interface GridBuilder extends Struct<GridBuilder>{

			columnSize(columnSize:int):Ref<GridBuilder>
			build():Ref<Grid>
	}
	export interface GridColumn extends Struct<GridColumn>{

			widthRatio:Ref<int>
	}
	export interface GridColumnBuilder extends Struct<GridColumnBuilder>{

			widthRatio(widthRatio:int):Ref<GridColumnBuilder>
			build():Ref<GridColumn>
	}
	export interface Iframe extends Struct<Iframe>{

			component:Ref<IframeComponent>
	}
	export interface IframeBuilder extends Struct<IframeBuilder>{

			component(component:Ref<IframeComponent>):Ref<IframeBuilder>
			build():Ref<Iframe>
	}
	export interface IframeComponent extends Struct<IframeComponent>{

			iframeType:Ref<int>
			url:Ref<string>
	}
	export interface IframeComponentBuilder extends Struct<IframeComponentBuilder>{

			iframeType(iframeType:int):Ref<IframeComponentBuilder>
			url(url:string):Ref<IframeComponentBuilder>
			build():Ref<IframeComponent>
	}
	export interface Image extends Struct<Image>{

			width:Ref<int>
			height:Ref<int>
			token:Ref<string>
			align:Ref<int>
	}
	export interface ImageBuilder extends Struct<ImageBuilder>{

			width(width:int):Ref<ImageBuilder>
			height(height:int):Ref<ImageBuilder>
			token(token:string):Ref<ImageBuilder>
			align(align:int):Ref<ImageBuilder>
			build():Ref<Image>
	}
	export interface InlineBlock extends Struct<InlineBlock>{

			blockId:Ref<string>
			textElementStyle:Ref<TextElementStyle>
	}
	export interface InlineBlockBuilder extends Struct<InlineBlockBuilder>{

			blockId(blockId:string):Ref<InlineBlockBuilder>
			textElementStyle(textElementStyle:Ref<TextElementStyle>):Ref<InlineBlockBuilder>
			build():Ref<InlineBlock>
	}
	export interface InlineFile extends Struct<InlineFile>{

			fileToken:Ref<string>
			sourceBlockId:Ref<string>
			textElementStyle:Ref<TextElementStyle>
	}
	export interface InlineFileBuilder extends Struct<InlineFileBuilder>{

			fileToken(fileToken:string):Ref<InlineFileBuilder>
			sourceBlockId(sourceBlockId:string):Ref<InlineFileBuilder>
			textElementStyle(textElementStyle:Ref<TextElementStyle>):Ref<InlineFileBuilder>
			build():Ref<InlineFile>
	}
	export interface InsertGridColumnRequest extends Struct<InsertGridColumnRequest>{

			columnIndex:Ref<int>
	}
	export interface InsertGridColumnRequestBuilder extends Struct<InsertGridColumnRequestBuilder>{

			columnIndex(columnIndex:int):Ref<InsertGridColumnRequestBuilder>
			build():Ref<InsertGridColumnRequest>
	}
	export interface InsertTableColumnRequest extends Struct<InsertTableColumnRequest>{

			columnIndex:Ref<int>
	}
	export interface InsertTableColumnRequestBuilder extends Struct<InsertTableColumnRequestBuilder>{

			columnIndex(columnIndex:int):Ref<InsertTableColumnRequestBuilder>
			build():Ref<InsertTableColumnRequest>
	}
	export interface InsertTableRowRequest extends Struct<InsertTableRowRequest>{

			rowIndex:Ref<int>
	}
	export interface InsertTableRowRequestBuilder extends Struct<InsertTableRowRequestBuilder>{

			rowIndex(rowIndex:int):Ref<InsertTableRowRequestBuilder>
			build():Ref<InsertTableRowRequest>
	}
	export interface Isv extends Struct<Isv>{

			componentId:Ref<string>
			componentTypeId:Ref<string>
	}
	export interface IsvBuilder extends Struct<IsvBuilder>{

			componentId(componentId:string):Ref<IsvBuilder>
			componentTypeId(componentTypeId:string):Ref<IsvBuilder>
			build():Ref<Isv>
	}
	export interface JiraIssue extends Struct<JiraIssue>{

			id:Ref<string>
			key:Ref<string>
	}
	export interface JiraIssueBuilder extends Struct<JiraIssueBuilder>{

			id(id:string):Ref<JiraIssueBuilder>
			key(key:string):Ref<JiraIssueBuilder>
			build():Ref<JiraIssue>
	}
	//1
	export const LangEN:int
	//2
	export const LangJP:int
	//0
	export const LangZH:int
	export interface Link extends Struct<Link>{

			url:Ref<string>
	}
	export interface LinkBuilder extends Struct<LinkBuilder>{

			url(url:string):Ref<LinkBuilder>
			build():Ref<Link>
	}
	export interface LinkPreview extends Struct<LinkPreview>{

			url:Ref<string>
			urlType:Ref<string>
	}
	export interface LinkPreviewBuilder extends Struct<LinkPreviewBuilder>{

			url(url:string):Ref<LinkPreviewBuilder>
			urlType(urlType:string):Ref<LinkPreviewBuilder>
			build():Ref<LinkPreview>
	}
	export interface ListDocumentBlockIterator extends Struct<ListDocumentBlockIterator>{

			next():[bool,Ref<Block>]
			nextPageToken():Ref<string>
	}
	export interface ListDocumentBlockReq extends Struct<ListDocumentBlockReq>{

			limit:int
	}
	export interface ListDocumentBlockReqBuilder extends Struct<ListDocumentBlockReqBuilder>{

			limit(limit:int):Ref<ListDocumentBlockReqBuilder>
			documentId(documentId:string):Ref<ListDocumentBlockReqBuilder>
			pageSize(pageSize:int):Ref<ListDocumentBlockReqBuilder>
			pageToken(pageToken:string):Ref<ListDocumentBlockReqBuilder>
			documentRevisionId(documentRevisionId:int):Ref<ListDocumentBlockReqBuilder>
			userIdType(userIdType:string):Ref<ListDocumentBlockReqBuilder>
			build():Ref<ListDocumentBlockReq>
	}
	export interface ListDocumentBlockResp extends Struct<ListDocumentBlockResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListDocumentBlockRespData>
			success():bool
	}
	export interface ListDocumentBlockRespData extends Struct<ListDocumentBlockRespData>{

			items:Ref<Block>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface MentionDoc extends Struct<MentionDoc>{

			token:Ref<string>
			objType:Ref<int>
			url:Ref<string>
			title:Ref<string>
			textElementStyle:Ref<TextElementStyle>
	}
	export interface MentionDocBuilder extends Struct<MentionDocBuilder>{

			token(token:string):Ref<MentionDocBuilder>
			objType(objType:int):Ref<MentionDocBuilder>
			url(url:string):Ref<MentionDocBuilder>
			title(title:string):Ref<MentionDocBuilder>
			textElementStyle(textElementStyle:Ref<TextElementStyle>):Ref<MentionDocBuilder>
			build():Ref<MentionDoc>
	}
	export interface MentionUser extends Struct<MentionUser>{

			userId:Ref<string>
			textElementStyle:Ref<TextElementStyle>
	}
	export interface MentionUserBuilder extends Struct<MentionUserBuilder>{

			userId(userId:string):Ref<MentionUserBuilder>
			textElementStyle(textElementStyle:Ref<TextElementStyle>):Ref<MentionUserBuilder>
			build():Ref<MentionUser>
	}
	export interface MergeTableCellsRequest extends Struct<MergeTableCellsRequest>{

			rowStartIndex:Ref<int>
			rowEndIndex:Ref<int>
			columnStartIndex:Ref<int>
			columnEndIndex:Ref<int>
	}
	export interface MergeTableCellsRequestBuilder extends Struct<MergeTableCellsRequestBuilder>{

			rowStartIndex(rowStartIndex:int):Ref<MergeTableCellsRequestBuilder>
			rowEndIndex(rowEndIndex:int):Ref<MergeTableCellsRequestBuilder>
			columnStartIndex(columnStartIndex:int):Ref<MergeTableCellsRequestBuilder>
			columnEndIndex(columnEndIndex:int):Ref<MergeTableCellsRequestBuilder>
			build():Ref<MergeTableCellsRequest>
	}
	export interface Mindnote extends Struct<Mindnote>{

			token:Ref<string>
	}
	export interface MindnoteBuilder extends Struct<MindnoteBuilder>{

			token(token:string):Ref<MindnoteBuilder>
			build():Ref<Mindnote>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAddOnsBuilder():Ref<AddOnsBuilder>

	export function newAgendaItemTitleBuilder():Ref<AgendaItemTitleBuilder>

	export function newAgendaTitleElementBuilder():Ref<AgendaTitleElementBuilder>

	export function newBatchDeleteDocumentBlockChildrenPathReqBodyBuilder():Ref<BatchDeleteDocumentBlockChildrenPathReqBodyBuilder>

	export function newBatchDeleteDocumentBlockChildrenReqBodyBuilder():Ref<BatchDeleteDocumentBlockChildrenReqBodyBuilder>

	export function newBatchDeleteDocumentBlockChildrenReqBuilder():Ref<BatchDeleteDocumentBlockChildrenReqBuilder>

	export function newBatchUpdateDocumentBlockPathReqBodyBuilder():Ref<BatchUpdateDocumentBlockPathReqBodyBuilder>

	export function newBatchUpdateDocumentBlockReqBodyBuilder():Ref<BatchUpdateDocumentBlockReqBodyBuilder>

	export function newBatchUpdateDocumentBlockReqBuilder():Ref<BatchUpdateDocumentBlockReqBuilder>

	export function newBitableBuilder():Ref<BitableBuilder>

	export function newBlockBuilder():Ref<BlockBuilder>

	export function newBlockIdRelationBuilder():Ref<BlockIdRelationBuilder>

	export function newBoardBuilder():Ref<BoardBuilder>

	export function newCalloutBuilder():Ref<CalloutBuilder>

	export function newChatCardBuilder():Ref<ChatCardBuilder>

	export function newCreateDocumentBlockChildrenPathReqBodyBuilder():Ref<CreateDocumentBlockChildrenPathReqBodyBuilder>

	export function newCreateDocumentBlockChildrenReqBodyBuilder():Ref<CreateDocumentBlockChildrenReqBodyBuilder>

	export function newCreateDocumentBlockChildrenReqBuilder():Ref<CreateDocumentBlockChildrenReqBuilder>

	export function newCreateDocumentPathReqBodyBuilder():Ref<CreateDocumentPathReqBodyBuilder>

	export function newCreateDocumentReqBodyBuilder():Ref<CreateDocumentReqBodyBuilder>

	export function newCreateDocumentReqBuilder():Ref<CreateDocumentReqBuilder>

	export function newDeleteGridColumnRequestBuilder():Ref<DeleteGridColumnRequestBuilder>

	export function newDeleteTableColumnsRequestBuilder():Ref<DeleteTableColumnsRequestBuilder>

	export function newDeleteTableRowsRequestBuilder():Ref<DeleteTableRowsRequestBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDiagramBuilder():Ref<DiagramBuilder>

	export function newDocumentAuthorBuilder():Ref<DocumentAuthorBuilder>

	export function newDocumentBuilder():Ref<DocumentBuilder>

	export function newDocumentCoverBuilder():Ref<DocumentCoverBuilder>

	export function newDocumentDisplaySettingBuilder():Ref<DocumentDisplaySettingBuilder>

	export function newEquationBuilder():Ref<EquationBuilder>

	export function newFileBuilder():Ref<FileBuilder>

	export function newGetDocumentBlockChildrenReqBuilder():Ref<GetDocumentBlockChildrenReqBuilder>

	export function newGetDocumentBlockReqBuilder():Ref<GetDocumentBlockReqBuilder>

	export function newGetDocumentReqBuilder():Ref<GetDocumentReqBuilder>

	export function newGridBuilder():Ref<GridBuilder>

	export function newGridColumnBuilder():Ref<GridColumnBuilder>

	export function newIframeBuilder():Ref<IframeBuilder>

	export function newIframeComponentBuilder():Ref<IframeComponentBuilder>

	export function newImageBuilder():Ref<ImageBuilder>

	export function newInlineBlockBuilder():Ref<InlineBlockBuilder>

	export function newInlineFileBuilder():Ref<InlineFileBuilder>

	export function newInsertGridColumnRequestBuilder():Ref<InsertGridColumnRequestBuilder>

	export function newInsertTableColumnRequestBuilder():Ref<InsertTableColumnRequestBuilder>

	export function newInsertTableRowRequestBuilder():Ref<InsertTableRowRequestBuilder>

	export function newIsvBuilder():Ref<IsvBuilder>

	export function newJiraIssueBuilder():Ref<JiraIssueBuilder>

	export function newLinkBuilder():Ref<LinkBuilder>

	export function newLinkPreviewBuilder():Ref<LinkPreviewBuilder>

	export function newListDocumentBlockReqBuilder():Ref<ListDocumentBlockReqBuilder>

	export function newMentionDocBuilder():Ref<MentionDocBuilder>

	export function newMentionUserBuilder():Ref<MentionUserBuilder>

	export function newMergeTableCellsRequestBuilder():Ref<MergeTableCellsRequestBuilder>

	export function newMindnoteBuilder():Ref<MindnoteBuilder>

	export function newObjectiveIdWithKrIdBuilder():Ref<ObjectiveIdWithKrIdBuilder>

	export function newOkrBuilder():Ref<OkrBuilder>

	export function newOkrKeyResultBuilder():Ref<OkrKeyResultBuilder>

	export function newOkrObjectiveBuilder():Ref<OkrObjectiveBuilder>

	export function newOkrProgressRateBuilder():Ref<OkrProgressRateBuilder>

	export function newOkrVisibleSettingBuilder():Ref<OkrVisibleSettingBuilder>

	export function newPatchDocumentBlockReqBuilder():Ref<PatchDocumentBlockReqBuilder>

	export function newRawContentDocumentReqBuilder():Ref<RawContentDocumentReqBuilder>

	export function newReminderBuilder():Ref<ReminderBuilder>

	export function newReplaceFileRequestBuilder():Ref<ReplaceFileRequestBuilder>

	export function newReplaceImageRequestBuilder():Ref<ReplaceImageRequestBuilder>

	export function newSheetBuilder():Ref<SheetBuilder>

	export function newTableBuilder():Ref<TableBuilder>

	export function newTableMergeInfoBuilder():Ref<TableMergeInfoBuilder>

	export function newTablePropertyBuilder():Ref<TablePropertyBuilder>

	export function newTaskBuilder():Ref<TaskBuilder>

	export function newTextBuilder():Ref<TextBuilder>

	export function newTextElementBuilder():Ref<TextElementBuilder>

	export function newTextElementStyleBuilder():Ref<TextElementStyleBuilder>

	export function newTextRunBuilder():Ref<TextRunBuilder>

	export function newTextStyleBuilder():Ref<TextStyleBuilder>

	export function newUnmergeTableCellsRequestBuilder():Ref<UnmergeTableCellsRequestBuilder>

	export function newUpdateBlockRequestBuilder():Ref<UpdateBlockRequestBuilder>

	export function newUpdateCoverRequestBuilder():Ref<UpdateCoverRequestBuilder>

	export function newUpdateDocumentRequestBuilder():Ref<UpdateDocumentRequestBuilder>

	export function newUpdateGridColumnWidthRatioRequestBuilder():Ref<UpdateGridColumnWidthRatioRequestBuilder>

	export function newUpdateTablePropertyRequestBuilder():Ref<UpdateTablePropertyRequestBuilder>

	export function newUpdateTaskRequestBuilder():Ref<UpdateTaskRequestBuilder>

	export function newUpdateTextElementsRequestBuilder():Ref<UpdateTextElementsRequestBuilder>

	export function newUpdateTextRequestBuilder():Ref<UpdateTextRequestBuilder>

	export function newUpdateTextStyleRequestBuilder():Ref<UpdateTextStyleRequestBuilder>

	export function newViewBuilder():Ref<ViewBuilder>

	export function newWikiCatalogBuilder():Ref<WikiCatalogBuilder>

	export interface ObjectiveIdWithKrId extends Struct<ObjectiveIdWithKrId>{

			objectiveId:Ref<string>
			krIds:string[]
	}
	export interface ObjectiveIdWithKrIdBuilder extends Struct<ObjectiveIdWithKrIdBuilder>{

			objectiveId(objectiveId:string):Ref<ObjectiveIdWithKrIdBuilder>
			krIds(krIds:string[]):Ref<ObjectiveIdWithKrIdBuilder>
			build():Ref<ObjectiveIdWithKrId>
	}
	export interface Okr extends Struct<Okr>{

			okrId:Ref<string>
			objectives:Ref<ObjectiveIdWithKrId>[]
			periodDisplayStatus:Ref<string>
			periodNameZh:Ref<string>
			periodNameEn:Ref<string>
			userId:Ref<string>
			visibleSetting:Ref<OkrVisibleSetting>
	}
	export interface OkrBuilder extends Struct<OkrBuilder>{

			okrId(okrId:string):Ref<OkrBuilder>
			objectives(objectives:Ref<ObjectiveIdWithKrId>[]):Ref<OkrBuilder>
			periodDisplayStatus(periodDisplayStatus:string):Ref<OkrBuilder>
			periodNameZh(periodNameZh:string):Ref<OkrBuilder>
			periodNameEn(periodNameEn:string):Ref<OkrBuilder>
			userId(userId:string):Ref<OkrBuilder>
			visibleSetting(visibleSetting:Ref<OkrVisibleSetting>):Ref<OkrBuilder>
			build():Ref<Okr>
	}
	export interface OkrKeyResult extends Struct<OkrKeyResult>{

			krId:Ref<string>
			confidential:Ref<bool>
			position:Ref<int>
			score:Ref<int>
			visible:Ref<bool>
			weight:Ref<float64>
			progressRate:Ref<OkrProgressRate>
			content:Ref<Text>
	}
	export interface OkrKeyResultBuilder extends Struct<OkrKeyResultBuilder>{

			krId(krId:string):Ref<OkrKeyResultBuilder>
			confidential(confidential:bool):Ref<OkrKeyResultBuilder>
			position(position:int):Ref<OkrKeyResultBuilder>
			score(score:int):Ref<OkrKeyResultBuilder>
			visible(visible:bool):Ref<OkrKeyResultBuilder>
			weight(weight:float64):Ref<OkrKeyResultBuilder>
			progressRate(progressRate:Ref<OkrProgressRate>):Ref<OkrKeyResultBuilder>
			content(content:Ref<Text>):Ref<OkrKeyResultBuilder>
			build():Ref<OkrKeyResult>
	}
	export interface OkrObjective extends Struct<OkrObjective>{

			objectiveId:Ref<string>
			confidential:Ref<bool>
			position:Ref<int>
			score:Ref<int>
			visible:Ref<bool>
			weight:Ref<float64>
			progressRate:Ref<OkrProgressRate>
			content:Ref<Text>
	}
	export interface OkrObjectiveBuilder extends Struct<OkrObjectiveBuilder>{

			objectiveId(objectiveId:string):Ref<OkrObjectiveBuilder>
			confidential(confidential:bool):Ref<OkrObjectiveBuilder>
			position(position:int):Ref<OkrObjectiveBuilder>
			score(score:int):Ref<OkrObjectiveBuilder>
			visible(visible:bool):Ref<OkrObjectiveBuilder>
			weight(weight:float64):Ref<OkrObjectiveBuilder>
			progressRate(progressRate:Ref<OkrProgressRate>):Ref<OkrObjectiveBuilder>
			content(content:Ref<Text>):Ref<OkrObjectiveBuilder>
			build():Ref<OkrObjective>
	}
	export interface OkrProgress extends Alias<Nothing>{

	}
	export interface OkrProgressRate extends Struct<OkrProgressRate>{

			mode:Ref<string>
			current:Ref<float64>
			percent:Ref<float64>
			progressStatus:Ref<string>
			start:Ref<float64>
			statusType:Ref<string>
			target:Ref<float64>
	}
	export interface OkrProgressRateBuilder extends Struct<OkrProgressRateBuilder>{

			mode(mode:string):Ref<OkrProgressRateBuilder>
			current(current:float64):Ref<OkrProgressRateBuilder>
			percent(percent:float64):Ref<OkrProgressRateBuilder>
			progressStatus(progressStatus:string):Ref<OkrProgressRateBuilder>
			start(start:float64):Ref<OkrProgressRateBuilder>
			statusType(statusType:string):Ref<OkrProgressRateBuilder>
			target(target:float64):Ref<OkrProgressRateBuilder>
			build():Ref<OkrProgressRate>
	}
	export interface OkrVisibleSetting extends Struct<OkrVisibleSetting>{

			progressFillAreaVisible:Ref<bool>
			progressStatusVisible:Ref<bool>
			scoreVisible:Ref<bool>
	}
	export interface OkrVisibleSettingBuilder extends Struct<OkrVisibleSettingBuilder>{

			progressFillAreaVisible(progressFillAreaVisible:bool):Ref<OkrVisibleSettingBuilder>
			progressStatusVisible(progressStatusVisible:bool):Ref<OkrVisibleSettingBuilder>
			scoreVisible(scoreVisible:bool):Ref<OkrVisibleSettingBuilder>
			build():Ref<OkrVisibleSetting>
	}
	export interface PatchDocumentBlockReq extends Struct<PatchDocumentBlockReq>{

			updateBlockRequest:Ref<UpdateBlockRequest>
	}
	export interface PatchDocumentBlockReqBuilder extends Struct<PatchDocumentBlockReqBuilder>{

			documentId(documentId:string):Ref<PatchDocumentBlockReqBuilder>
			blockId(blockId:string):Ref<PatchDocumentBlockReqBuilder>
			documentRevisionId(documentRevisionId:int):Ref<PatchDocumentBlockReqBuilder>
			clientToken(clientToken:string):Ref<PatchDocumentBlockReqBuilder>
			userIdType(userIdType:string):Ref<PatchDocumentBlockReqBuilder>
			updateBlockRequest(updateBlockRequest:Ref<UpdateBlockRequest>):Ref<PatchDocumentBlockReqBuilder>
			build():Ref<PatchDocumentBlockReq>
	}
	export interface PatchDocumentBlockResp extends Struct<PatchDocumentBlockResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchDocumentBlockRespData>
			success():bool
	}
	export interface PatchDocumentBlockRespData extends Struct<PatchDocumentBlockRespData>{

			block:Ref<Block>
			documentRevisionId:Ref<int>
			clientToken:Ref<string>
	}
	export interface QuoteContainer extends Alias<Nothing>{

	}
	export interface RawContentDocumentReq extends Struct<RawContentDocumentReq>{

	}
	export interface RawContentDocumentReqBuilder extends Struct<RawContentDocumentReqBuilder>{

			documentId(documentId:string):Ref<RawContentDocumentReqBuilder>
			lang(lang:int):Ref<RawContentDocumentReqBuilder>
			build():Ref<RawContentDocumentReq>
	}
	export interface RawContentDocumentResp extends Struct<RawContentDocumentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<RawContentDocumentRespData>
			success():bool
	}
	export interface RawContentDocumentRespData extends Struct<RawContentDocumentRespData>{

			content:Ref<string>
	}
	export interface Reminder extends Struct<Reminder>{

			createUserId:Ref<string>
			isNotify:Ref<bool>
			isWholeDay:Ref<bool>
			expireTime:Ref<string>
			notifyTime:Ref<string>
			textElementStyle:Ref<TextElementStyle>
	}
	export interface ReminderBuilder extends Struct<ReminderBuilder>{

			createUserId(createUserId:string):Ref<ReminderBuilder>
			isNotify(isNotify:bool):Ref<ReminderBuilder>
			isWholeDay(isWholeDay:bool):Ref<ReminderBuilder>
			expireTime(expireTime:string):Ref<ReminderBuilder>
			notifyTime(notifyTime:string):Ref<ReminderBuilder>
			textElementStyle(textElementStyle:Ref<TextElementStyle>):Ref<ReminderBuilder>
			build():Ref<Reminder>
	}
	export interface ReplaceFileRequest extends Struct<ReplaceFileRequest>{

			token:Ref<string>
	}
	export interface ReplaceFileRequestBuilder extends Struct<ReplaceFileRequestBuilder>{

			token(token:string):Ref<ReplaceFileRequestBuilder>
			build():Ref<ReplaceFileRequest>
	}
	export interface ReplaceImageRequest extends Struct<ReplaceImageRequest>{

			token:Ref<string>
			width:Ref<int>
			height:Ref<int>
			align:Ref<int>
	}
	export interface ReplaceImageRequestBuilder extends Struct<ReplaceImageRequestBuilder>{

			token(token:string):Ref<ReplaceImageRequestBuilder>
			width(width:int):Ref<ReplaceImageRequestBuilder>
			height(height:int):Ref<ReplaceImageRequestBuilder>
			align(align:int):Ref<ReplaceImageRequestBuilder>
			build():Ref<ReplaceImageRequest>
	}
	export interface Sheet extends Struct<Sheet>{

			token:Ref<string>
			rowSize:Ref<int>
			columnSize:Ref<int>
	}
	export interface SheetBuilder extends Struct<SheetBuilder>{

			token(token:string):Ref<SheetBuilder>
			rowSize(rowSize:int):Ref<SheetBuilder>
			columnSize(columnSize:int):Ref<SheetBuilder>
			build():Ref<Sheet>
	}
	export interface Table extends Struct<Table>{

			cells:string[]
			property:Ref<TableProperty>
	}
	export interface TableBuilder extends Struct<TableBuilder>{

			cells(cells:string[]):Ref<TableBuilder>
			property(property:Ref<TableProperty>):Ref<TableBuilder>
			build():Ref<Table>
	}
	export interface TableCell extends Alias<Nothing>{

	}
	export interface TableMergeInfo extends Struct<TableMergeInfo>{

			rowSpan:Ref<int>
			colSpan:Ref<int>
	}
	export interface TableMergeInfoBuilder extends Struct<TableMergeInfoBuilder>{

			rowSpan(rowSpan:int):Ref<TableMergeInfoBuilder>
			colSpan(colSpan:int):Ref<TableMergeInfoBuilder>
			build():Ref<TableMergeInfo>
	}
	export interface TableProperty extends Struct<TableProperty>{

			rowSize:Ref<int>
			columnSize:Ref<int>
			columnWidth:int[]
			mergeInfo:Ref<TableMergeInfo>[]
			headerRow:Ref<bool>
			headerColumn:Ref<bool>
	}
	export interface TablePropertyBuilder extends Struct<TablePropertyBuilder>{

			rowSize(rowSize:int):Ref<TablePropertyBuilder>
			columnSize(columnSize:int):Ref<TablePropertyBuilder>
			columnWidth(columnWidth:int[]):Ref<TablePropertyBuilder>
			mergeInfo(mergeInfo:Ref<TableMergeInfo>[]):Ref<TablePropertyBuilder>
			headerRow(headerRow:bool):Ref<TablePropertyBuilder>
			headerColumn(headerColumn:bool):Ref<TablePropertyBuilder>
			build():Ref<TableProperty>
	}
	export interface Task extends Struct<Task>{

			taskId:Ref<string>
			folded:Ref<bool>
	}
	export interface TaskBuilder extends Struct<TaskBuilder>{

			taskId(taskId:string):Ref<TaskBuilder>
			folded(folded:bool):Ref<TaskBuilder>
			build():Ref<Task>
	}
	export interface Text extends Struct<Text>{

			style:Ref<TextStyle>
			elements:Ref<TextElement>[]
	}
	export interface TextBuilder extends Struct<TextBuilder>{

			style(style:Ref<TextStyle>):Ref<TextBuilder>
			elements(elements:Ref<TextElement>[]):Ref<TextBuilder>
			build():Ref<Text>
	}
	export interface TextElement extends Struct<TextElement>{

			textRun:Ref<TextRun>
			mentionUser:Ref<MentionUser>
			mentionDoc:Ref<MentionDoc>
			reminder:Ref<Reminder>
			file:Ref<InlineFile>
			undefined:Ref<UndefinedElement>
			inlineBlock:Ref<InlineBlock>
			equation:Ref<Equation>
	}
	export interface TextElementBuilder extends Struct<TextElementBuilder>{

			textRun(textRun:Ref<TextRun>):Ref<TextElementBuilder>
			mentionUser(mentionUser:Ref<MentionUser>):Ref<TextElementBuilder>
			mentionDoc(mentionDoc:Ref<MentionDoc>):Ref<TextElementBuilder>
			reminder(reminder:Ref<Reminder>):Ref<TextElementBuilder>
			file(file:Ref<InlineFile>):Ref<TextElementBuilder>
			undefined(undefined:Ref<UndefinedElement>):Ref<TextElementBuilder>
			inlineBlock(inlineBlock:Ref<InlineBlock>):Ref<TextElementBuilder>
			equation(equation:Ref<Equation>):Ref<TextElementBuilder>
			build():Ref<TextElement>
	}
	export interface TextElementStyle extends Struct<TextElementStyle>{

			bold:Ref<bool>
			italic:Ref<bool>
			strikethrough:Ref<bool>
			underline:Ref<bool>
			inlineCode:Ref<bool>
			backgroundColor:Ref<int>
			textColor:Ref<int>
			link:Ref<Link>
			commentIds:string[]
	}
	export interface TextElementStyleBuilder extends Struct<TextElementStyleBuilder>{

			bold(bold:bool):Ref<TextElementStyleBuilder>
			italic(italic:bool):Ref<TextElementStyleBuilder>
			strikethrough(strikethrough:bool):Ref<TextElementStyleBuilder>
			underline(underline:bool):Ref<TextElementStyleBuilder>
			inlineCode(inlineCode:bool):Ref<TextElementStyleBuilder>
			backgroundColor(backgroundColor:int):Ref<TextElementStyleBuilder>
			textColor(textColor:int):Ref<TextElementStyleBuilder>
			link(link:Ref<Link>):Ref<TextElementStyleBuilder>
			commentIds(commentIds:string[]):Ref<TextElementStyleBuilder>
			build():Ref<TextElementStyle>
	}
	export interface TextRun extends Struct<TextRun>{

			content:Ref<string>
			textElementStyle:Ref<TextElementStyle>
	}
	export interface TextRunBuilder extends Struct<TextRunBuilder>{

			content(content:string):Ref<TextRunBuilder>
			textElementStyle(textElementStyle:Ref<TextElementStyle>):Ref<TextRunBuilder>
			build():Ref<TextRun>
	}
	export interface TextStyle extends Struct<TextStyle>{

			align:Ref<int>
			done:Ref<bool>
			folded:Ref<bool>
			language:Ref<int>
			wrap:Ref<bool>
			backgroundColor:Ref<string>
			indentationLevel:Ref<string>
	}
	export interface TextStyleBuilder extends Struct<TextStyleBuilder>{

			align(align:int):Ref<TextStyleBuilder>
			done(done:bool):Ref<TextStyleBuilder>
			folded(folded:bool):Ref<TextStyleBuilder>
			language(language:int):Ref<TextStyleBuilder>
			wrap(wrap:bool):Ref<TextStyleBuilder>
			backgroundColor(backgroundColor:string):Ref<TextStyleBuilder>
			indentationLevel(indentationLevel:string):Ref<TextStyleBuilder>
			build():Ref<TextStyle>
	}
	export interface Undefined extends Alias<Nothing>{

	}
	export interface UndefinedElement extends Alias<Nothing>{

	}
	export interface UnmergeTableCellsRequest extends Struct<UnmergeTableCellsRequest>{

			rowIndex:Ref<int>
			columnIndex:Ref<int>
	}
	export interface UnmergeTableCellsRequestBuilder extends Struct<UnmergeTableCellsRequestBuilder>{

			rowIndex(rowIndex:int):Ref<UnmergeTableCellsRequestBuilder>
			columnIndex(columnIndex:int):Ref<UnmergeTableCellsRequestBuilder>
			build():Ref<UnmergeTableCellsRequest>
	}
	export interface UpdateBlockRequest extends Struct<UpdateBlockRequest>{

			updateTextElements:Ref<UpdateTextElementsRequest>
			updateTextStyle:Ref<UpdateTextStyleRequest>
			updateTableProperty:Ref<UpdateTablePropertyRequest>
			insertTableRow:Ref<InsertTableRowRequest>
			insertTableColumn:Ref<InsertTableColumnRequest>
			deleteTableRows:Ref<DeleteTableRowsRequest>
			deleteTableColumns:Ref<DeleteTableColumnsRequest>
			mergeTableCells:Ref<MergeTableCellsRequest>
			unmergeTableCells:Ref<UnmergeTableCellsRequest>
			insertGridColumn:Ref<InsertGridColumnRequest>
			deleteGridColumn:Ref<DeleteGridColumnRequest>
			updateGridColumnWidthRatio:Ref<UpdateGridColumnWidthRatioRequest>
			replaceImage:Ref<ReplaceImageRequest>
			replaceFile:Ref<ReplaceFileRequest>
			blockId:Ref<string>
			updateText:Ref<UpdateTextRequest>
			updateTask:Ref<UpdateTaskRequest>
	}
	export interface UpdateBlockRequestBuilder extends Struct<UpdateBlockRequestBuilder>{

			updateTextElements(updateTextElements:Ref<UpdateTextElementsRequest>):Ref<UpdateBlockRequestBuilder>
			updateTextStyle(updateTextStyle:Ref<UpdateTextStyleRequest>):Ref<UpdateBlockRequestBuilder>
			updateTableProperty(updateTableProperty:Ref<UpdateTablePropertyRequest>):Ref<UpdateBlockRequestBuilder>
			insertTableRow(insertTableRow:Ref<InsertTableRowRequest>):Ref<UpdateBlockRequestBuilder>
			insertTableColumn(insertTableColumn:Ref<InsertTableColumnRequest>):Ref<UpdateBlockRequestBuilder>
			deleteTableRows(deleteTableRows:Ref<DeleteTableRowsRequest>):Ref<UpdateBlockRequestBuilder>
			deleteTableColumns(deleteTableColumns:Ref<DeleteTableColumnsRequest>):Ref<UpdateBlockRequestBuilder>
			mergeTableCells(mergeTableCells:Ref<MergeTableCellsRequest>):Ref<UpdateBlockRequestBuilder>
			unmergeTableCells(unmergeTableCells:Ref<UnmergeTableCellsRequest>):Ref<UpdateBlockRequestBuilder>
			insertGridColumn(insertGridColumn:Ref<InsertGridColumnRequest>):Ref<UpdateBlockRequestBuilder>
			deleteGridColumn(deleteGridColumn:Ref<DeleteGridColumnRequest>):Ref<UpdateBlockRequestBuilder>
			updateGridColumnWidthRatio(updateGridColumnWidthRatio:Ref<UpdateGridColumnWidthRatioRequest>):Ref<UpdateBlockRequestBuilder>
			replaceImage(replaceImage:Ref<ReplaceImageRequest>):Ref<UpdateBlockRequestBuilder>
			replaceFile(replaceFile:Ref<ReplaceFileRequest>):Ref<UpdateBlockRequestBuilder>
			blockId(blockId:string):Ref<UpdateBlockRequestBuilder>
			updateText(updateText:Ref<UpdateTextRequest>):Ref<UpdateBlockRequestBuilder>
			updateTask(updateTask:Ref<UpdateTaskRequest>):Ref<UpdateBlockRequestBuilder>
			build():Ref<UpdateBlockRequest>
	}
	export interface UpdateCoverRequest extends Struct<UpdateCoverRequest>{

			cover:Ref<DocumentCover>
	}
	export interface UpdateCoverRequestBuilder extends Struct<UpdateCoverRequestBuilder>{

			cover(cover:Ref<DocumentCover>):Ref<UpdateCoverRequestBuilder>
			build():Ref<UpdateCoverRequest>
	}
	export interface UpdateDocumentRequest extends Struct<UpdateDocumentRequest>{

			updateDisplaySetting:Ref<DocumentDisplaySetting>
			updateCover:Ref<UpdateCoverRequest>
	}
	export interface UpdateDocumentRequestBuilder extends Struct<UpdateDocumentRequestBuilder>{

			updateDisplaySetting(updateDisplaySetting:Ref<DocumentDisplaySetting>):Ref<UpdateDocumentRequestBuilder>
			updateCover(updateCover:Ref<UpdateCoverRequest>):Ref<UpdateDocumentRequestBuilder>
			build():Ref<UpdateDocumentRequest>
	}
	export interface UpdateGridColumnWidthRatioRequest extends Struct<UpdateGridColumnWidthRatioRequest>{

			widthRatios:int[]
	}
	export interface UpdateGridColumnWidthRatioRequestBuilder extends Struct<UpdateGridColumnWidthRatioRequestBuilder>{

			widthRatios(widthRatios:int[]):Ref<UpdateGridColumnWidthRatioRequestBuilder>
			build():Ref<UpdateGridColumnWidthRatioRequest>
	}
	export interface UpdateTablePropertyRequest extends Struct<UpdateTablePropertyRequest>{

			columnWidth:Ref<int>
			columnIndex:Ref<int>
			headerRow:Ref<bool>
			headerColumn:Ref<bool>
	}
	export interface UpdateTablePropertyRequestBuilder extends Struct<UpdateTablePropertyRequestBuilder>{

			columnWidth(columnWidth:int):Ref<UpdateTablePropertyRequestBuilder>
			columnIndex(columnIndex:int):Ref<UpdateTablePropertyRequestBuilder>
			headerRow(headerRow:bool):Ref<UpdateTablePropertyRequestBuilder>
			headerColumn(headerColumn:bool):Ref<UpdateTablePropertyRequestBuilder>
			build():Ref<UpdateTablePropertyRequest>
	}
	export interface UpdateTaskRequest extends Struct<UpdateTaskRequest>{

			taskId:Ref<string>
			folded:Ref<bool>
	}
	export interface UpdateTaskRequestBuilder extends Struct<UpdateTaskRequestBuilder>{

			taskId(taskId:string):Ref<UpdateTaskRequestBuilder>
			folded(folded:bool):Ref<UpdateTaskRequestBuilder>
			build():Ref<UpdateTaskRequest>
	}
	export interface UpdateTextElementsRequest extends Struct<UpdateTextElementsRequest>{

			elements:Ref<TextElement>[]
	}
	export interface UpdateTextElementsRequestBuilder extends Struct<UpdateTextElementsRequestBuilder>{

			elements(elements:Ref<TextElement>[]):Ref<UpdateTextElementsRequestBuilder>
			build():Ref<UpdateTextElementsRequest>
	}
	export interface UpdateTextRequest extends Struct<UpdateTextRequest>{

			elements:Ref<TextElement>[]
			style:Ref<TextStyle>
			fields:int[]
	}
	export interface UpdateTextRequestBuilder extends Struct<UpdateTextRequestBuilder>{

			elements(elements:Ref<TextElement>[]):Ref<UpdateTextRequestBuilder>
			style(style:Ref<TextStyle>):Ref<UpdateTextRequestBuilder>
			fields(fields:int[]):Ref<UpdateTextRequestBuilder>
			build():Ref<UpdateTextRequest>
	}
	export interface UpdateTextStyleRequest extends Struct<UpdateTextStyleRequest>{

			style:Ref<TextStyle>
			fields:int[]
	}
	export interface UpdateTextStyleRequestBuilder extends Struct<UpdateTextStyleRequestBuilder>{

			style(style:Ref<TextStyle>):Ref<UpdateTextStyleRequestBuilder>
			fields(fields:int[]):Ref<UpdateTextStyleRequestBuilder>
			build():Ref<UpdateTextStyleRequest>
	}
	//"open_id"
	export const UserIdTypeCreateDocumentBlockChildrenOpenId:string
	//"union_id"
	export const UserIdTypeCreateDocumentBlockChildrenUnionId:string
	//"user_id"
	export const UserIdTypeCreateDocumentBlockChildrenUserId:string
	//"open_id"
	export const UserIdTypeGetDocumentBlockChildrenOpenId:string
	//"union_id"
	export const UserIdTypeGetDocumentBlockChildrenUnionId:string
	//"user_id"
	export const UserIdTypeGetDocumentBlockChildrenUserId:string
	//"open_id"
	export const UserIdTypeGetDocumentBlockOpenId:string
	//"union_id"
	export const UserIdTypeGetDocumentBlockUnionId:string
	//"user_id"
	export const UserIdTypeGetDocumentBlockUserId:string
	//"open_id"
	export const UserIdTypeListDocumentBlockOpenId:string
	//"union_id"
	export const UserIdTypeListDocumentBlockUnionId:string
	//"user_id"
	export const UserIdTypeListDocumentBlockUserId:string
	//"open_id"
	export const UserIdTypeOpenId:string
	//"open_id"
	export const UserIdTypePatchDocumentBlockOpenId:string
	//"union_id"
	export const UserIdTypePatchDocumentBlockUnionId:string
	//"user_id"
	export const UserIdTypePatchDocumentBlockUserId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V1 extends Struct<V1>{

			document:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateDocumentReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateDocumentResp>
				get(ctx:context.Context,req:Ref<GetDocumentReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetDocumentResp>
				rawContent(ctx:context.Context,req:Ref<RawContentDocumentReq>,...options:larkcore.RequestOptionFunc[]):Ref<RawContentDocumentResp>
			}>
			documentBlock:Ref<{
			
				batchUpdate(ctx:context.Context,req:Ref<BatchUpdateDocumentBlockReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchUpdateDocumentBlockResp>
				get(ctx:context.Context,req:Ref<GetDocumentBlockReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetDocumentBlockResp>
				list(ctx:context.Context,req:Ref<ListDocumentBlockReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDocumentBlockResp>
				listByIterator(ctx:context.Context,req:Ref<ListDocumentBlockReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDocumentBlockIterator>
				patch(ctx:context.Context,req:Ref<PatchDocumentBlockReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchDocumentBlockResp>
			}>
			documentBlockChildren:Ref<{
			
				batchDelete(ctx:context.Context,req:Ref<BatchDeleteDocumentBlockChildrenReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchDeleteDocumentBlockChildrenResp>
				create(ctx:context.Context,req:Ref<CreateDocumentBlockChildrenReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateDocumentBlockChildrenResp>
				get(ctx:context.Context,req:Ref<GetDocumentBlockChildrenReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetDocumentBlockChildrenResp>
				getByIterator(ctx:context.Context,req:Ref<GetDocumentBlockChildrenReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetDocumentBlockChildrenIterator>
			}>
	}
	export interface View extends Struct<View>{

			viewType:Ref<int>
	}
	export interface ViewBuilder extends Struct<ViewBuilder>{

			viewType(viewType:int):Ref<ViewBuilder>
			build():Ref<View>
	}
	export interface WikiCatalog extends Struct<WikiCatalog>{

			wikiToken:Ref<string>
	}
	export interface WikiCatalogBuilder extends Struct<WikiCatalogBuilder>{

			wikiToken(wikiToken:string):Ref<WikiCatalogBuilder>
			build():Ref<WikiCatalog>
	}
	export function emptyTextElementStyle():TextElementStyle
	export function emptyRefTextElementStyle():Ref<TextElementStyle>
	export function refOfTextElementStyle(x:TextElementStyle,v:Ref<TextElementStyle>)
	export function unRefTextElementStyle(v:Ref<TextElementStyle>):TextElementStyle
	export function emptyMindnote():Mindnote
	export function emptyRefMindnote():Ref<Mindnote>
	export function refOfMindnote(x:Mindnote,v:Ref<Mindnote>)
	export function unRefMindnote(v:Ref<Mindnote>):Mindnote
	export function emptyTable():Table
	export function emptyRefTable():Ref<Table>
	export function refOfTable(x:Table,v:Ref<Table>)
	export function unRefTable(v:Ref<Table>):Table
	export function emptyWikiCatalog():WikiCatalog
	export function emptyRefWikiCatalog():Ref<WikiCatalog>
	export function refOfWikiCatalog(x:WikiCatalog,v:Ref<WikiCatalog>)
	export function unRefWikiCatalog(v:Ref<WikiCatalog>):WikiCatalog
	export function emptyBlockIdRelation():BlockIdRelation
	export function emptyRefBlockIdRelation():Ref<BlockIdRelation>
	export function refOfBlockIdRelation(x:BlockIdRelation,v:Ref<BlockIdRelation>)
	export function unRefBlockIdRelation(v:Ref<BlockIdRelation>):BlockIdRelation
	export function emptyMentionDoc():MentionDoc
	export function emptyRefMentionDoc():Ref<MentionDoc>
	export function refOfMentionDoc(x:MentionDoc,v:Ref<MentionDoc>)
	export function unRefMentionDoc(v:Ref<MentionDoc>):MentionDoc
	export function emptyCreateDocumentBlockChildrenReqBody():CreateDocumentBlockChildrenReqBody
	export function emptyRefCreateDocumentBlockChildrenReqBody():Ref<CreateDocumentBlockChildrenReqBody>
	export function refOfCreateDocumentBlockChildrenReqBody(x:CreateDocumentBlockChildrenReqBody,v:Ref<CreateDocumentBlockChildrenReqBody>)
	export function unRefCreateDocumentBlockChildrenReqBody(v:Ref<CreateDocumentBlockChildrenReqBody>):CreateDocumentBlockChildrenReqBody
	export function emptyGetDocumentBlockRespData():GetDocumentBlockRespData
	export function emptyRefGetDocumentBlockRespData():Ref<GetDocumentBlockRespData>
	export function refOfGetDocumentBlockRespData(x:GetDocumentBlockRespData,v:Ref<GetDocumentBlockRespData>)
	export function unRefGetDocumentBlockRespData(v:Ref<GetDocumentBlockRespData>):GetDocumentBlockRespData
	export function emptyRawContentDocumentReq():RawContentDocumentReq
	export function emptyRefRawContentDocumentReq():Ref<RawContentDocumentReq>
	export function refOfRawContentDocumentReq(x:RawContentDocumentReq,v:Ref<RawContentDocumentReq>)
	export function unRefRawContentDocumentReq(v:Ref<RawContentDocumentReq>):RawContentDocumentReq
	export function emptyInlineFile():InlineFile
	export function emptyRefInlineFile():Ref<InlineFile>
	export function refOfInlineFile(x:InlineFile,v:Ref<InlineFile>)
	export function unRefInlineFile(v:Ref<InlineFile>):InlineFile
	export function emptyGetDocumentResp():GetDocumentResp
	export function emptyRefGetDocumentResp():Ref<GetDocumentResp>
	export function refOfGetDocumentResp(x:GetDocumentResp,v:Ref<GetDocumentResp>)
	export function unRefGetDocumentResp(v:Ref<GetDocumentResp>):GetDocumentResp
	export function emptyUpdateBlockRequest():UpdateBlockRequest
	export function emptyRefUpdateBlockRequest():Ref<UpdateBlockRequest>
	export function refOfUpdateBlockRequest(x:UpdateBlockRequest,v:Ref<UpdateBlockRequest>)
	export function unRefUpdateBlockRequest(v:Ref<UpdateBlockRequest>):UpdateBlockRequest
	export function emptyGetDocumentBlockResp():GetDocumentBlockResp
	export function emptyRefGetDocumentBlockResp():Ref<GetDocumentBlockResp>
	export function refOfGetDocumentBlockResp(x:GetDocumentBlockResp,v:Ref<GetDocumentBlockResp>)
	export function unRefGetDocumentBlockResp(v:Ref<GetDocumentBlockResp>):GetDocumentBlockResp
	export function emptyGetDocumentRespData():GetDocumentRespData
	export function emptyRefGetDocumentRespData():Ref<GetDocumentRespData>
	export function refOfGetDocumentRespData(x:GetDocumentRespData,v:Ref<GetDocumentRespData>)
	export function unRefGetDocumentRespData(v:Ref<GetDocumentRespData>):GetDocumentRespData
	export function emptyUpdateTextRequest():UpdateTextRequest
	export function emptyRefUpdateTextRequest():Ref<UpdateTextRequest>
	export function refOfUpdateTextRequest(x:UpdateTextRequest,v:Ref<UpdateTextRequest>)
	export function unRefUpdateTextRequest(v:Ref<UpdateTextRequest>):UpdateTextRequest
	export function emptyDocument():Document
	export function emptyRefDocument():Ref<Document>
	export function refOfDocument(x:Document,v:Ref<Document>)
	export function unRefDocument(v:Ref<Document>):Document
	export function emptyPatchDocumentBlockReq():PatchDocumentBlockReq
	export function emptyRefPatchDocumentBlockReq():Ref<PatchDocumentBlockReq>
	export function refOfPatchDocumentBlockReq(x:PatchDocumentBlockReq,v:Ref<PatchDocumentBlockReq>)
	export function unRefPatchDocumentBlockReq(v:Ref<PatchDocumentBlockReq>):PatchDocumentBlockReq
	export function emptyUpdateTaskRequest():UpdateTaskRequest
	export function emptyRefUpdateTaskRequest():Ref<UpdateTaskRequest>
	export function refOfUpdateTaskRequest(x:UpdateTaskRequest,v:Ref<UpdateTaskRequest>)
	export function unRefUpdateTaskRequest(v:Ref<UpdateTaskRequest>):UpdateTaskRequest
	export function emptyListDocumentBlockResp():ListDocumentBlockResp
	export function emptyRefListDocumentBlockResp():Ref<ListDocumentBlockResp>
	export function refOfListDocumentBlockResp(x:ListDocumentBlockResp,v:Ref<ListDocumentBlockResp>)
	export function unRefListDocumentBlockResp(v:Ref<ListDocumentBlockResp>):ListDocumentBlockResp
	export function emptyTableMergeInfo():TableMergeInfo
	export function emptyRefTableMergeInfo():Ref<TableMergeInfo>
	export function refOfTableMergeInfo(x:TableMergeInfo,v:Ref<TableMergeInfo>)
	export function unRefTableMergeInfo(v:Ref<TableMergeInfo>):TableMergeInfo
	export function emptyGetDocumentBlockChildrenResp():GetDocumentBlockChildrenResp
	export function emptyRefGetDocumentBlockChildrenResp():Ref<GetDocumentBlockChildrenResp>
	export function refOfGetDocumentBlockChildrenResp(x:GetDocumentBlockChildrenResp,v:Ref<GetDocumentBlockChildrenResp>)
	export function unRefGetDocumentBlockChildrenResp(v:Ref<GetDocumentBlockChildrenResp>):GetDocumentBlockChildrenResp
	export function emptyUpdateGridColumnWidthRatioRequest():UpdateGridColumnWidthRatioRequest
	export function emptyRefUpdateGridColumnWidthRatioRequest():Ref<UpdateGridColumnWidthRatioRequest>
	export function refOfUpdateGridColumnWidthRatioRequest(x:UpdateGridColumnWidthRatioRequest,v:Ref<UpdateGridColumnWidthRatioRequest>)
	export function unRefUpdateGridColumnWidthRatioRequest(v:Ref<UpdateGridColumnWidthRatioRequest>):UpdateGridColumnWidthRatioRequest
	export function emptyIframeComponent():IframeComponent
	export function emptyRefIframeComponent():Ref<IframeComponent>
	export function refOfIframeComponent(x:IframeComponent,v:Ref<IframeComponent>)
	export function unRefIframeComponent(v:Ref<IframeComponent>):IframeComponent
	export function emptyTextStyle():TextStyle
	export function emptyRefTextStyle():Ref<TextStyle>
	export function refOfTextStyle(x:TextStyle,v:Ref<TextStyle>)
	export function unRefTextStyle(v:Ref<TextStyle>):TextStyle
	export function emptyUnmergeTableCellsRequest():UnmergeTableCellsRequest
	export function emptyRefUnmergeTableCellsRequest():Ref<UnmergeTableCellsRequest>
	export function refOfUnmergeTableCellsRequest(x:UnmergeTableCellsRequest,v:Ref<UnmergeTableCellsRequest>)
	export function unRefUnmergeTableCellsRequest(v:Ref<UnmergeTableCellsRequest>):UnmergeTableCellsRequest
	export function emptyCreateDocumentReqBody():CreateDocumentReqBody
	export function emptyRefCreateDocumentReqBody():Ref<CreateDocumentReqBody>
	export function refOfCreateDocumentReqBody(x:CreateDocumentReqBody,v:Ref<CreateDocumentReqBody>)
	export function unRefCreateDocumentReqBody(v:Ref<CreateDocumentReqBody>):CreateDocumentReqBody
	export function emptyDocumentCover():DocumentCover
	export function emptyRefDocumentCover():Ref<DocumentCover>
	export function refOfDocumentCover(x:DocumentCover,v:Ref<DocumentCover>)
	export function unRefDocumentCover(v:Ref<DocumentCover>):DocumentCover
	export function emptyImage():Image
	export function emptyRefImage():Ref<Image>
	export function refOfImage(x:Image,v:Ref<Image>)
	export function unRefImage(v:Ref<Image>):Image
	export function emptyView():View
	export function emptyRefView():Ref<View>
	export function refOfView(x:View,v:Ref<View>)
	export function unRefView(v:Ref<View>):View
	export function emptyBatchUpdateDocumentBlockRespData():BatchUpdateDocumentBlockRespData
	export function emptyRefBatchUpdateDocumentBlockRespData():Ref<BatchUpdateDocumentBlockRespData>
	export function refOfBatchUpdateDocumentBlockRespData(x:BatchUpdateDocumentBlockRespData,v:Ref<BatchUpdateDocumentBlockRespData>)
	export function unRefBatchUpdateDocumentBlockRespData(v:Ref<BatchUpdateDocumentBlockRespData>):BatchUpdateDocumentBlockRespData
	export function emptyBatchDeleteDocumentBlockChildrenReq():BatchDeleteDocumentBlockChildrenReq
	export function emptyRefBatchDeleteDocumentBlockChildrenReq():Ref<BatchDeleteDocumentBlockChildrenReq>
	export function refOfBatchDeleteDocumentBlockChildrenReq(x:BatchDeleteDocumentBlockChildrenReq,v:Ref<BatchDeleteDocumentBlockChildrenReq>)
	export function unRefBatchDeleteDocumentBlockChildrenReq(v:Ref<BatchDeleteDocumentBlockChildrenReq>):BatchDeleteDocumentBlockChildrenReq
	export function emptyBitable():Bitable
	export function emptyRefBitable():Ref<Bitable>
	export function refOfBitable(x:Bitable,v:Ref<Bitable>)
	export function unRefBitable(v:Ref<Bitable>):Bitable
	export function emptyTextElement():TextElement
	export function emptyRefTextElement():Ref<TextElement>
	export function refOfTextElement(x:TextElement,v:Ref<TextElement>)
	export function unRefTextElement(v:Ref<TextElement>):TextElement
	export function emptyIsv():Isv
	export function emptyRefIsv():Ref<Isv>
	export function refOfIsv(x:Isv,v:Ref<Isv>)
	export function unRefIsv(v:Ref<Isv>):Isv
	export function emptyLinkPreview():LinkPreview
	export function emptyRefLinkPreview():Ref<LinkPreview>
	export function refOfLinkPreview(x:LinkPreview,v:Ref<LinkPreview>)
	export function unRefLinkPreview(v:Ref<LinkPreview>):LinkPreview
	export function emptyRawContentDocumentResp():RawContentDocumentResp
	export function emptyRefRawContentDocumentResp():Ref<RawContentDocumentResp>
	export function refOfRawContentDocumentResp(x:RawContentDocumentResp,v:Ref<RawContentDocumentResp>)
	export function unRefRawContentDocumentResp(v:Ref<RawContentDocumentResp>):RawContentDocumentResp
	export function emptyBatchDeleteDocumentBlockChildrenRespData():BatchDeleteDocumentBlockChildrenRespData
	export function emptyRefBatchDeleteDocumentBlockChildrenRespData():Ref<BatchDeleteDocumentBlockChildrenRespData>
	export function refOfBatchDeleteDocumentBlockChildrenRespData(x:BatchDeleteDocumentBlockChildrenRespData,v:Ref<BatchDeleteDocumentBlockChildrenRespData>)
	export function unRefBatchDeleteDocumentBlockChildrenRespData(v:Ref<BatchDeleteDocumentBlockChildrenRespData>):BatchDeleteDocumentBlockChildrenRespData
	export function emptySheet():Sheet
	export function emptyRefSheet():Ref<Sheet>
	export function refOfSheet(x:Sheet,v:Ref<Sheet>)
	export function unRefSheet(v:Ref<Sheet>):Sheet
	export function emptyInsertTableColumnRequest():InsertTableColumnRequest
	export function emptyRefInsertTableColumnRequest():Ref<InsertTableColumnRequest>
	export function refOfInsertTableColumnRequest(x:InsertTableColumnRequest,v:Ref<InsertTableColumnRequest>)
	export function unRefInsertTableColumnRequest(v:Ref<InsertTableColumnRequest>):InsertTableColumnRequest
	export function emptyBatchDeleteDocumentBlockChildrenResp():BatchDeleteDocumentBlockChildrenResp
	export function emptyRefBatchDeleteDocumentBlockChildrenResp():Ref<BatchDeleteDocumentBlockChildrenResp>
	export function refOfBatchDeleteDocumentBlockChildrenResp(x:BatchDeleteDocumentBlockChildrenResp,v:Ref<BatchDeleteDocumentBlockChildrenResp>)
	export function unRefBatchDeleteDocumentBlockChildrenResp(v:Ref<BatchDeleteDocumentBlockChildrenResp>):BatchDeleteDocumentBlockChildrenResp
	export function emptyTask():Task
	export function emptyRefTask():Ref<Task>
	export function refOfTask(x:Task,v:Ref<Task>)
	export function unRefTask(v:Ref<Task>):Task
	export function emptyListDocumentBlockRespData():ListDocumentBlockRespData
	export function emptyRefListDocumentBlockRespData():Ref<ListDocumentBlockRespData>
	export function refOfListDocumentBlockRespData(x:ListDocumentBlockRespData,v:Ref<ListDocumentBlockRespData>)
	export function unRefListDocumentBlockRespData(v:Ref<ListDocumentBlockRespData>):ListDocumentBlockRespData
	export function emptyPatchDocumentBlockResp():PatchDocumentBlockResp
	export function emptyRefPatchDocumentBlockResp():Ref<PatchDocumentBlockResp>
	export function refOfPatchDocumentBlockResp(x:PatchDocumentBlockResp,v:Ref<PatchDocumentBlockResp>)
	export function unRefPatchDocumentBlockResp(v:Ref<PatchDocumentBlockResp>):PatchDocumentBlockResp
	export function emptyDeleteTableColumnsRequest():DeleteTableColumnsRequest
	export function emptyRefDeleteTableColumnsRequest():Ref<DeleteTableColumnsRequest>
	export function refOfDeleteTableColumnsRequest(x:DeleteTableColumnsRequest,v:Ref<DeleteTableColumnsRequest>)
	export function unRefDeleteTableColumnsRequest(v:Ref<DeleteTableColumnsRequest>):DeleteTableColumnsRequest
	export function emptyBatchUpdateDocumentBlockReqBody():BatchUpdateDocumentBlockReqBody
	export function emptyRefBatchUpdateDocumentBlockReqBody():Ref<BatchUpdateDocumentBlockReqBody>
	export function refOfBatchUpdateDocumentBlockReqBody(x:BatchUpdateDocumentBlockReqBody,v:Ref<BatchUpdateDocumentBlockReqBody>)
	export function unRefBatchUpdateDocumentBlockReqBody(v:Ref<BatchUpdateDocumentBlockReqBody>):BatchUpdateDocumentBlockReqBody
	export function emptyCreateDocumentBlockChildrenReq():CreateDocumentBlockChildrenReq
	export function emptyRefCreateDocumentBlockChildrenReq():Ref<CreateDocumentBlockChildrenReq>
	export function refOfCreateDocumentBlockChildrenReq(x:CreateDocumentBlockChildrenReq,v:Ref<CreateDocumentBlockChildrenReq>)
	export function unRefCreateDocumentBlockChildrenReq(v:Ref<CreateDocumentBlockChildrenReq>):CreateDocumentBlockChildrenReq
	export function emptyGetDocumentBlockChildrenIterator():GetDocumentBlockChildrenIterator
	export function emptyRefGetDocumentBlockChildrenIterator():Ref<GetDocumentBlockChildrenIterator>
	export function refOfGetDocumentBlockChildrenIterator(x:GetDocumentBlockChildrenIterator,v:Ref<GetDocumentBlockChildrenIterator>)
	export function unRefGetDocumentBlockChildrenIterator(v:Ref<GetDocumentBlockChildrenIterator>):GetDocumentBlockChildrenIterator
	export function emptyOkrObjective():OkrObjective
	export function emptyRefOkrObjective():Ref<OkrObjective>
	export function refOfOkrObjective(x:OkrObjective,v:Ref<OkrObjective>)
	export function unRefOkrObjective(v:Ref<OkrObjective>):OkrObjective
	export function emptyUpdateDocumentRequest():UpdateDocumentRequest
	export function emptyRefUpdateDocumentRequest():Ref<UpdateDocumentRequest>
	export function refOfUpdateDocumentRequest(x:UpdateDocumentRequest,v:Ref<UpdateDocumentRequest>)
	export function unRefUpdateDocumentRequest(v:Ref<UpdateDocumentRequest>):UpdateDocumentRequest
	export function emptyInsertGridColumnRequest():InsertGridColumnRequest
	export function emptyRefInsertGridColumnRequest():Ref<InsertGridColumnRequest>
	export function refOfInsertGridColumnRequest(x:InsertGridColumnRequest,v:Ref<InsertGridColumnRequest>)
	export function unRefInsertGridColumnRequest(v:Ref<InsertGridColumnRequest>):InsertGridColumnRequest
	export function emptyOkrVisibleSetting():OkrVisibleSetting
	export function emptyRefOkrVisibleSetting():Ref<OkrVisibleSetting>
	export function refOfOkrVisibleSetting(x:OkrVisibleSetting,v:Ref<OkrVisibleSetting>)
	export function unRefOkrVisibleSetting(v:Ref<OkrVisibleSetting>):OkrVisibleSetting
	export function emptyUpdateTextStyleRequest():UpdateTextStyleRequest
	export function emptyRefUpdateTextStyleRequest():Ref<UpdateTextStyleRequest>
	export function refOfUpdateTextStyleRequest(x:UpdateTextStyleRequest,v:Ref<UpdateTextStyleRequest>)
	export function unRefUpdateTextStyleRequest(v:Ref<UpdateTextStyleRequest>):UpdateTextStyleRequest
	export function emptyGetDocumentBlockChildrenRespData():GetDocumentBlockChildrenRespData
	export function emptyRefGetDocumentBlockChildrenRespData():Ref<GetDocumentBlockChildrenRespData>
	export function refOfGetDocumentBlockChildrenRespData(x:GetDocumentBlockChildrenRespData,v:Ref<GetDocumentBlockChildrenRespData>)
	export function unRefGetDocumentBlockChildrenRespData(v:Ref<GetDocumentBlockChildrenRespData>):GetDocumentBlockChildrenRespData
	export function emptyGrid():Grid
	export function emptyRefGrid():Ref<Grid>
	export function refOfGrid(x:Grid,v:Ref<Grid>)
	export function unRefGrid(v:Ref<Grid>):Grid
	export function emptyCreateDocumentBlockChildrenRespData():CreateDocumentBlockChildrenRespData
	export function emptyRefCreateDocumentBlockChildrenRespData():Ref<CreateDocumentBlockChildrenRespData>
	export function refOfCreateDocumentBlockChildrenRespData(x:CreateDocumentBlockChildrenRespData,v:Ref<CreateDocumentBlockChildrenRespData>)
	export function unRefCreateDocumentBlockChildrenRespData(v:Ref<CreateDocumentBlockChildrenRespData>):CreateDocumentBlockChildrenRespData
	export function emptyGetDocumentBlockReq():GetDocumentBlockReq
	export function emptyRefGetDocumentBlockReq():Ref<GetDocumentBlockReq>
	export function refOfGetDocumentBlockReq(x:GetDocumentBlockReq,v:Ref<GetDocumentBlockReq>)
	export function unRefGetDocumentBlockReq(v:Ref<GetDocumentBlockReq>):GetDocumentBlockReq
	export function emptyBoard():Board
	export function emptyRefBoard():Ref<Board>
	export function refOfBoard(x:Board,v:Ref<Board>)
	export function unRefBoard(v:Ref<Board>):Board
	export function emptyCallout():Callout
	export function emptyRefCallout():Ref<Callout>
	export function refOfCallout(x:Callout,v:Ref<Callout>)
	export function unRefCallout(v:Ref<Callout>):Callout
	export function emptyAddOns():AddOns
	export function emptyRefAddOns():Ref<AddOns>
	export function refOfAddOns(x:AddOns,v:Ref<AddOns>)
	export function unRefAddOns(v:Ref<AddOns>):AddOns
	export function emptyEquation():Equation
	export function emptyRefEquation():Ref<Equation>
	export function refOfEquation(x:Equation,v:Ref<Equation>)
	export function unRefEquation(v:Ref<Equation>):Equation
	export function emptyLink():Link
	export function emptyRefLink():Ref<Link>
	export function refOfLink(x:Link,v:Ref<Link>)
	export function unRefLink(v:Ref<Link>):Link
	export function emptyAgendaItemTitle():AgendaItemTitle
	export function emptyRefAgendaItemTitle():Ref<AgendaItemTitle>
	export function refOfAgendaItemTitle(x:AgendaItemTitle,v:Ref<AgendaItemTitle>)
	export function unRefAgendaItemTitle(v:Ref<AgendaItemTitle>):AgendaItemTitle
	export function emptyCreateDocumentRespData():CreateDocumentRespData
	export function emptyRefCreateDocumentRespData():Ref<CreateDocumentRespData>
	export function refOfCreateDocumentRespData(x:CreateDocumentRespData,v:Ref<CreateDocumentRespData>)
	export function unRefCreateDocumentRespData(v:Ref<CreateDocumentRespData>):CreateDocumentRespData
	export function emptyInlineBlock():InlineBlock
	export function emptyRefInlineBlock():Ref<InlineBlock>
	export function refOfInlineBlock(x:InlineBlock,v:Ref<InlineBlock>)
	export function unRefInlineBlock(v:Ref<InlineBlock>):InlineBlock
	export function emptyInsertTableRowRequest():InsertTableRowRequest
	export function emptyRefInsertTableRowRequest():Ref<InsertTableRowRequest>
	export function refOfInsertTableRowRequest(x:InsertTableRowRequest,v:Ref<InsertTableRowRequest>)
	export function unRefInsertTableRowRequest(v:Ref<InsertTableRowRequest>):InsertTableRowRequest
	export function emptyDeleteGridColumnRequest():DeleteGridColumnRequest
	export function emptyRefDeleteGridColumnRequest():Ref<DeleteGridColumnRequest>
	export function refOfDeleteGridColumnRequest(x:DeleteGridColumnRequest,v:Ref<DeleteGridColumnRequest>)
	export function unRefDeleteGridColumnRequest(v:Ref<DeleteGridColumnRequest>):DeleteGridColumnRequest
	export function emptyCreateDocumentResp():CreateDocumentResp
	export function emptyRefCreateDocumentResp():Ref<CreateDocumentResp>
	export function refOfCreateDocumentResp(x:CreateDocumentResp,v:Ref<CreateDocumentResp>)
	export function unRefCreateDocumentResp(v:Ref<CreateDocumentResp>):CreateDocumentResp
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyBatchUpdateDocumentBlockReq():BatchUpdateDocumentBlockReq
	export function emptyRefBatchUpdateDocumentBlockReq():Ref<BatchUpdateDocumentBlockReq>
	export function refOfBatchUpdateDocumentBlockReq(x:BatchUpdateDocumentBlockReq,v:Ref<BatchUpdateDocumentBlockReq>)
	export function unRefBatchUpdateDocumentBlockReq(v:Ref<BatchUpdateDocumentBlockReq>):BatchUpdateDocumentBlockReq
	export function emptyGetDocumentBlockChildrenReq():GetDocumentBlockChildrenReq
	export function emptyRefGetDocumentBlockChildrenReq():Ref<GetDocumentBlockChildrenReq>
	export function refOfGetDocumentBlockChildrenReq(x:GetDocumentBlockChildrenReq,v:Ref<GetDocumentBlockChildrenReq>)
	export function unRefGetDocumentBlockChildrenReq(v:Ref<GetDocumentBlockChildrenReq>):GetDocumentBlockChildrenReq
	export function emptyReplaceImageRequest():ReplaceImageRequest
	export function emptyRefReplaceImageRequest():Ref<ReplaceImageRequest>
	export function refOfReplaceImageRequest(x:ReplaceImageRequest,v:Ref<ReplaceImageRequest>)
	export function unRefReplaceImageRequest(v:Ref<ReplaceImageRequest>):ReplaceImageRequest
	export function emptyCreateDocumentBlockChildrenResp():CreateDocumentBlockChildrenResp
	export function emptyRefCreateDocumentBlockChildrenResp():Ref<CreateDocumentBlockChildrenResp>
	export function refOfCreateDocumentBlockChildrenResp(x:CreateDocumentBlockChildrenResp,v:Ref<CreateDocumentBlockChildrenResp>)
	export function unRefCreateDocumentBlockChildrenResp(v:Ref<CreateDocumentBlockChildrenResp>):CreateDocumentBlockChildrenResp
	export function emptyRawContentDocumentRespData():RawContentDocumentRespData
	export function emptyRefRawContentDocumentRespData():Ref<RawContentDocumentRespData>
	export function refOfRawContentDocumentRespData(x:RawContentDocumentRespData,v:Ref<RawContentDocumentRespData>)
	export function unRefRawContentDocumentRespData(v:Ref<RawContentDocumentRespData>):RawContentDocumentRespData
	export function emptyOkrKeyResult():OkrKeyResult
	export function emptyRefOkrKeyResult():Ref<OkrKeyResult>
	export function refOfOkrKeyResult(x:OkrKeyResult,v:Ref<OkrKeyResult>)
	export function unRefOkrKeyResult(v:Ref<OkrKeyResult>):OkrKeyResult
	export function emptyBatchUpdateDocumentBlockResp():BatchUpdateDocumentBlockResp
	export function emptyRefBatchUpdateDocumentBlockResp():Ref<BatchUpdateDocumentBlockResp>
	export function refOfBatchUpdateDocumentBlockResp(x:BatchUpdateDocumentBlockResp,v:Ref<BatchUpdateDocumentBlockResp>)
	export function unRefBatchUpdateDocumentBlockResp(v:Ref<BatchUpdateDocumentBlockResp>):BatchUpdateDocumentBlockResp
	export function emptyDeleteTableRowsRequest():DeleteTableRowsRequest
	export function emptyRefDeleteTableRowsRequest():Ref<DeleteTableRowsRequest>
	export function refOfDeleteTableRowsRequest(x:DeleteTableRowsRequest,v:Ref<DeleteTableRowsRequest>)
	export function unRefDeleteTableRowsRequest(v:Ref<DeleteTableRowsRequest>):DeleteTableRowsRequest
	export function emptyMentionUser():MentionUser
	export function emptyRefMentionUser():Ref<MentionUser>
	export function refOfMentionUser(x:MentionUser,v:Ref<MentionUser>)
	export function unRefMentionUser(v:Ref<MentionUser>):MentionUser
	export function emptyBatchDeleteDocumentBlockChildrenReqBody():BatchDeleteDocumentBlockChildrenReqBody
	export function emptyRefBatchDeleteDocumentBlockChildrenReqBody():Ref<BatchDeleteDocumentBlockChildrenReqBody>
	export function refOfBatchDeleteDocumentBlockChildrenReqBody(x:BatchDeleteDocumentBlockChildrenReqBody,v:Ref<BatchDeleteDocumentBlockChildrenReqBody>)
	export function unRefBatchDeleteDocumentBlockChildrenReqBody(v:Ref<BatchDeleteDocumentBlockChildrenReqBody>):BatchDeleteDocumentBlockChildrenReqBody
	export function emptyUpdateTablePropertyRequest():UpdateTablePropertyRequest
	export function emptyRefUpdateTablePropertyRequest():Ref<UpdateTablePropertyRequest>
	export function refOfUpdateTablePropertyRequest(x:UpdateTablePropertyRequest,v:Ref<UpdateTablePropertyRequest>)
	export function unRefUpdateTablePropertyRequest(v:Ref<UpdateTablePropertyRequest>):UpdateTablePropertyRequest
	export function emptyChatCard():ChatCard
	export function emptyRefChatCard():Ref<ChatCard>
	export function refOfChatCard(x:ChatCard,v:Ref<ChatCard>)
	export function unRefChatCard(v:Ref<ChatCard>):ChatCard
	export function emptyBlock():Block
	export function emptyRefBlock():Ref<Block>
	export function refOfBlock(x:Block,v:Ref<Block>)
	export function unRefBlock(v:Ref<Block>):Block
	export function emptyIframe():Iframe
	export function emptyRefIframe():Ref<Iframe>
	export function refOfIframe(x:Iframe,v:Ref<Iframe>)
	export function unRefIframe(v:Ref<Iframe>):Iframe
	export function emptyListDocumentBlockReq():ListDocumentBlockReq
	export function emptyRefListDocumentBlockReq():Ref<ListDocumentBlockReq>
	export function refOfListDocumentBlockReq(x:ListDocumentBlockReq,v:Ref<ListDocumentBlockReq>)
	export function unRefListDocumentBlockReq(v:Ref<ListDocumentBlockReq>):ListDocumentBlockReq
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyObjectiveIdWithKrId():ObjectiveIdWithKrId
	export function emptyRefObjectiveIdWithKrId():Ref<ObjectiveIdWithKrId>
	export function refOfObjectiveIdWithKrId(x:ObjectiveIdWithKrId,v:Ref<ObjectiveIdWithKrId>)
	export function unRefObjectiveIdWithKrId(v:Ref<ObjectiveIdWithKrId>):ObjectiveIdWithKrId
	export function emptyText():Text
	export function emptyRefText():Ref<Text>
	export function refOfText(x:Text,v:Ref<Text>)
	export function unRefText(v:Ref<Text>):Text
	export function emptyUpdateCoverRequest():UpdateCoverRequest
	export function emptyRefUpdateCoverRequest():Ref<UpdateCoverRequest>
	export function refOfUpdateCoverRequest(x:UpdateCoverRequest,v:Ref<UpdateCoverRequest>)
	export function unRefUpdateCoverRequest(v:Ref<UpdateCoverRequest>):UpdateCoverRequest
	export function emptyGetDocumentReq():GetDocumentReq
	export function emptyRefGetDocumentReq():Ref<GetDocumentReq>
	export function refOfGetDocumentReq(x:GetDocumentReq,v:Ref<GetDocumentReq>)
	export function unRefGetDocumentReq(v:Ref<GetDocumentReq>):GetDocumentReq
	export function emptyOkr():Okr
	export function emptyRefOkr():Ref<Okr>
	export function refOfOkr(x:Okr,v:Ref<Okr>)
	export function unRefOkr(v:Ref<Okr>):Okr
	export function emptyDiagram():Diagram
	export function emptyRefDiagram():Ref<Diagram>
	export function refOfDiagram(x:Diagram,v:Ref<Diagram>)
	export function unRefDiagram(v:Ref<Diagram>):Diagram
	export function emptyListDocumentBlockIterator():ListDocumentBlockIterator
	export function emptyRefListDocumentBlockIterator():Ref<ListDocumentBlockIterator>
	export function refOfListDocumentBlockIterator(x:ListDocumentBlockIterator,v:Ref<ListDocumentBlockIterator>)
	export function unRefListDocumentBlockIterator(v:Ref<ListDocumentBlockIterator>):ListDocumentBlockIterator
	export function emptyTableProperty():TableProperty
	export function emptyRefTableProperty():Ref<TableProperty>
	export function refOfTableProperty(x:TableProperty,v:Ref<TableProperty>)
	export function unRefTableProperty(v:Ref<TableProperty>):TableProperty
	export function emptyUpdateTextElementsRequest():UpdateTextElementsRequest
	export function emptyRefUpdateTextElementsRequest():Ref<UpdateTextElementsRequest>
	export function refOfUpdateTextElementsRequest(x:UpdateTextElementsRequest,v:Ref<UpdateTextElementsRequest>)
	export function unRefUpdateTextElementsRequest(v:Ref<UpdateTextElementsRequest>):UpdateTextElementsRequest
	export function emptyCreateDocumentReq():CreateDocumentReq
	export function emptyRefCreateDocumentReq():Ref<CreateDocumentReq>
	export function refOfCreateDocumentReq(x:CreateDocumentReq,v:Ref<CreateDocumentReq>)
	export function unRefCreateDocumentReq(v:Ref<CreateDocumentReq>):CreateDocumentReq
	export function emptyJiraIssue():JiraIssue
	export function emptyRefJiraIssue():Ref<JiraIssue>
	export function refOfJiraIssue(x:JiraIssue,v:Ref<JiraIssue>)
	export function unRefJiraIssue(v:Ref<JiraIssue>):JiraIssue
	export function emptyMergeTableCellsRequest():MergeTableCellsRequest
	export function emptyRefMergeTableCellsRequest():Ref<MergeTableCellsRequest>
	export function refOfMergeTableCellsRequest(x:MergeTableCellsRequest,v:Ref<MergeTableCellsRequest>)
	export function unRefMergeTableCellsRequest(v:Ref<MergeTableCellsRequest>):MergeTableCellsRequest
	export function emptyReplaceFileRequest():ReplaceFileRequest
	export function emptyRefReplaceFileRequest():Ref<ReplaceFileRequest>
	export function refOfReplaceFileRequest(x:ReplaceFileRequest,v:Ref<ReplaceFileRequest>)
	export function unRefReplaceFileRequest(v:Ref<ReplaceFileRequest>):ReplaceFileRequest
	export function emptyOkrProgressRate():OkrProgressRate
	export function emptyRefOkrProgressRate():Ref<OkrProgressRate>
	export function refOfOkrProgressRate(x:OkrProgressRate,v:Ref<OkrProgressRate>)
	export function unRefOkrProgressRate(v:Ref<OkrProgressRate>):OkrProgressRate
	export function emptyTextRun():TextRun
	export function emptyRefTextRun():Ref<TextRun>
	export function refOfTextRun(x:TextRun,v:Ref<TextRun>)
	export function unRefTextRun(v:Ref<TextRun>):TextRun
	export function emptyAgendaTitleElement():AgendaTitleElement
	export function emptyRefAgendaTitleElement():Ref<AgendaTitleElement>
	export function refOfAgendaTitleElement(x:AgendaTitleElement,v:Ref<AgendaTitleElement>)
	export function unRefAgendaTitleElement(v:Ref<AgendaTitleElement>):AgendaTitleElement
	export function emptyDocumentDisplaySetting():DocumentDisplaySetting
	export function emptyRefDocumentDisplaySetting():Ref<DocumentDisplaySetting>
	export function refOfDocumentDisplaySetting(x:DocumentDisplaySetting,v:Ref<DocumentDisplaySetting>)
	export function unRefDocumentDisplaySetting(v:Ref<DocumentDisplaySetting>):DocumentDisplaySetting
	export function emptyGridColumn():GridColumn
	export function emptyRefGridColumn():Ref<GridColumn>
	export function refOfGridColumn(x:GridColumn,v:Ref<GridColumn>)
	export function unRefGridColumn(v:Ref<GridColumn>):GridColumn
	export function emptyPatchDocumentBlockRespData():PatchDocumentBlockRespData
	export function emptyRefPatchDocumentBlockRespData():Ref<PatchDocumentBlockRespData>
	export function refOfPatchDocumentBlockRespData(x:PatchDocumentBlockRespData,v:Ref<PatchDocumentBlockRespData>)
	export function unRefPatchDocumentBlockRespData(v:Ref<PatchDocumentBlockRespData>):PatchDocumentBlockRespData
	export function emptyDocumentAuthor():DocumentAuthor
	export function emptyRefDocumentAuthor():Ref<DocumentAuthor>
	export function refOfDocumentAuthor(x:DocumentAuthor,v:Ref<DocumentAuthor>)
	export function unRefDocumentAuthor(v:Ref<DocumentAuthor>):DocumentAuthor
	export function emptyFile():File
	export function emptyRefFile():Ref<File>
	export function refOfFile(x:File,v:Ref<File>)
	export function unRefFile(v:Ref<File>):File
	export function emptyReminder():Reminder
	export function emptyRefReminder():Ref<Reminder>
	export function refOfReminder(x:Reminder,v:Ref<Reminder>)
	export function unRefReminder(v:Ref<Reminder>):Reminder
}