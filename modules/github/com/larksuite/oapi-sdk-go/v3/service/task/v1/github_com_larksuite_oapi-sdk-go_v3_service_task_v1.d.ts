// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/task/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as larkevent from 'github.com/larksuite/oapi-sdk-go/v3/event'
	// @ts-ignore
	import type {error,Alias,Nothing,Ref,Struct,bool,int} from 'go'
	export interface Attachment extends Alias<Nothing>{

	}
	export interface Attatchment extends Struct<Attatchment>{

			guid:Ref<string>
	}
	export interface AttatchmentBuilder extends Struct<AttatchmentBuilder>{

			guid(guid:string):Ref<AttatchmentBuilder>
			build():Ref<Attatchment>
	}
	export interface BatchDeleteCollaboratorTaskReq extends Struct<BatchDeleteCollaboratorTaskReq>{

			collaborator:Ref<Collaborator>
	}
	export interface BatchDeleteCollaboratorTaskReqBuilder extends Struct<BatchDeleteCollaboratorTaskReqBuilder>{

			taskId(taskId:string):Ref<BatchDeleteCollaboratorTaskReqBuilder>
			userIdType(userIdType:string):Ref<BatchDeleteCollaboratorTaskReqBuilder>
			collaborator(collaborator:Ref<Collaborator>):Ref<BatchDeleteCollaboratorTaskReqBuilder>
			build():Ref<BatchDeleteCollaboratorTaskReq>
	}
	export interface BatchDeleteCollaboratorTaskResp extends Struct<BatchDeleteCollaboratorTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchDeleteCollaboratorTaskRespData>
			success():bool
	}
	export interface BatchDeleteCollaboratorTaskRespData extends Struct<BatchDeleteCollaboratorTaskRespData>{

			collaborators:string[]
	}
	export interface BatchDeleteFollowerTaskReq extends Struct<BatchDeleteFollowerTaskReq>{

			follower:Ref<Follower>
	}
	export interface BatchDeleteFollowerTaskReqBuilder extends Struct<BatchDeleteFollowerTaskReqBuilder>{

			taskId(taskId:string):Ref<BatchDeleteFollowerTaskReqBuilder>
			userIdType(userIdType:string):Ref<BatchDeleteFollowerTaskReqBuilder>
			follower(follower:Ref<Follower>):Ref<BatchDeleteFollowerTaskReqBuilder>
			build():Ref<BatchDeleteFollowerTaskReq>
	}
	export interface BatchDeleteFollowerTaskResp extends Struct<BatchDeleteFollowerTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchDeleteFollowerTaskRespData>
			success():bool
	}
	export interface BatchDeleteFollowerTaskRespData extends Struct<BatchDeleteFollowerTaskRespData>{

			followers:string[]
	}
	export interface Collaborator extends Struct<Collaborator>{

			id:Ref<string>
			idList:string[]
	}
	export interface CollaboratorBuilder extends Struct<CollaboratorBuilder>{

			id(id:string):Ref<CollaboratorBuilder>
			idList(idList:string[]):Ref<CollaboratorBuilder>
			build():Ref<Collaborator>
	}
	export interface Comment extends Struct<Comment>{

			content:Ref<string>
			parentId:Ref<string>
			id:Ref<string>
			createMilliTime:Ref<string>
			richContent:Ref<string>
			creatorId:Ref<string>
	}
	export interface CommentBuilder extends Struct<CommentBuilder>{

			content(content:string):Ref<CommentBuilder>
			parentId(parentId:string):Ref<CommentBuilder>
			id(id:string):Ref<CommentBuilder>
			createMilliTime(createMilliTime:string):Ref<CommentBuilder>
			richContent(richContent:string):Ref<CommentBuilder>
			creatorId(creatorId:string):Ref<CommentBuilder>
			build():Ref<Comment>
	}
	export interface CompleteTaskReq extends Struct<CompleteTaskReq>{

	}
	export interface CompleteTaskReqBuilder extends Struct<CompleteTaskReqBuilder>{

			taskId(taskId:string):Ref<CompleteTaskReqBuilder>
			build():Ref<CompleteTaskReq>
	}
	export interface CompleteTaskResp extends Struct<CompleteTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface CreateTaskCollaboratorReq extends Struct<CreateTaskCollaboratorReq>{

			collaborator:Ref<Collaborator>
	}
	export interface CreateTaskCollaboratorReqBuilder extends Struct<CreateTaskCollaboratorReqBuilder>{

			taskId(taskId:string):Ref<CreateTaskCollaboratorReqBuilder>
			userIdType(userIdType:string):Ref<CreateTaskCollaboratorReqBuilder>
			collaborator(collaborator:Ref<Collaborator>):Ref<CreateTaskCollaboratorReqBuilder>
			build():Ref<CreateTaskCollaboratorReq>
	}
	export interface CreateTaskCollaboratorResp extends Struct<CreateTaskCollaboratorResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateTaskCollaboratorRespData>
			success():bool
	}
	export interface CreateTaskCollaboratorRespData extends Struct<CreateTaskCollaboratorRespData>{

			collaborator:Ref<Collaborator>
	}
	export interface CreateTaskCommentReq extends Struct<CreateTaskCommentReq>{

			comment:Ref<Comment>
	}
	export interface CreateTaskCommentReqBuilder extends Struct<CreateTaskCommentReqBuilder>{

			taskId(taskId:string):Ref<CreateTaskCommentReqBuilder>
			userIdType(userIdType:string):Ref<CreateTaskCommentReqBuilder>
			comment(comment:Ref<Comment>):Ref<CreateTaskCommentReqBuilder>
			build():Ref<CreateTaskCommentReq>
	}
	export interface CreateTaskCommentResp extends Struct<CreateTaskCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateTaskCommentRespData>
			success():bool
	}
	export interface CreateTaskCommentRespData extends Struct<CreateTaskCommentRespData>{

			comment:Ref<Comment>
	}
	export interface CreateTaskFollowerReq extends Struct<CreateTaskFollowerReq>{

			follower:Ref<Follower>
	}
	export interface CreateTaskFollowerReqBuilder extends Struct<CreateTaskFollowerReqBuilder>{

			taskId(taskId:string):Ref<CreateTaskFollowerReqBuilder>
			userIdType(userIdType:string):Ref<CreateTaskFollowerReqBuilder>
			follower(follower:Ref<Follower>):Ref<CreateTaskFollowerReqBuilder>
			build():Ref<CreateTaskFollowerReq>
	}
	export interface CreateTaskFollowerResp extends Struct<CreateTaskFollowerResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateTaskFollowerRespData>
			success():bool
	}
	export interface CreateTaskFollowerRespData extends Struct<CreateTaskFollowerRespData>{

			follower:Ref<Follower>
	}
	export interface CreateTaskReminderReq extends Struct<CreateTaskReminderReq>{

			reminder:Ref<Reminder>
	}
	export interface CreateTaskReminderReqBuilder extends Struct<CreateTaskReminderReqBuilder>{

			taskId(taskId:string):Ref<CreateTaskReminderReqBuilder>
			reminder(reminder:Ref<Reminder>):Ref<CreateTaskReminderReqBuilder>
			build():Ref<CreateTaskReminderReq>
	}
	export interface CreateTaskReminderResp extends Struct<CreateTaskReminderResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateTaskReminderRespData>
			success():bool
	}
	export interface CreateTaskReminderRespData extends Struct<CreateTaskReminderRespData>{

			reminder:Ref<Reminder>
	}
	export interface CreateTaskReq extends Struct<CreateTaskReq>{

			task:Ref<Task>
	}
	export interface CreateTaskReqBuilder extends Struct<CreateTaskReqBuilder>{

			userIdType(userIdType:string):Ref<CreateTaskReqBuilder>
			task(task:Ref<Task>):Ref<CreateTaskReqBuilder>
			build():Ref<CreateTaskReq>
	}
	export interface CreateTaskResp extends Struct<CreateTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateTaskRespData>
			success():bool
	}
	export interface CreateTaskRespData extends Struct<CreateTaskRespData>{

			task:Ref<Task>
	}
	export interface DeleteTaskCollaboratorReq extends Struct<DeleteTaskCollaboratorReq>{

	}
	export interface DeleteTaskCollaboratorReqBuilder extends Struct<DeleteTaskCollaboratorReqBuilder>{

			taskId(taskId:string):Ref<DeleteTaskCollaboratorReqBuilder>
			collaboratorId(collaboratorId:string):Ref<DeleteTaskCollaboratorReqBuilder>
			userIdType(userIdType:string):Ref<DeleteTaskCollaboratorReqBuilder>
			build():Ref<DeleteTaskCollaboratorReq>
	}
	export interface DeleteTaskCollaboratorResp extends Struct<DeleteTaskCollaboratorResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteTaskCommentReq extends Struct<DeleteTaskCommentReq>{

	}
	export interface DeleteTaskCommentReqBuilder extends Struct<DeleteTaskCommentReqBuilder>{

			taskId(taskId:string):Ref<DeleteTaskCommentReqBuilder>
			commentId(commentId:string):Ref<DeleteTaskCommentReqBuilder>
			build():Ref<DeleteTaskCommentReq>
	}
	export interface DeleteTaskCommentResp extends Struct<DeleteTaskCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteTaskFollowerReq extends Struct<DeleteTaskFollowerReq>{

	}
	export interface DeleteTaskFollowerReqBuilder extends Struct<DeleteTaskFollowerReqBuilder>{

			taskId(taskId:string):Ref<DeleteTaskFollowerReqBuilder>
			followerId(followerId:string):Ref<DeleteTaskFollowerReqBuilder>
			userIdType(userIdType:string):Ref<DeleteTaskFollowerReqBuilder>
			build():Ref<DeleteTaskFollowerReq>
	}
	export interface DeleteTaskFollowerResp extends Struct<DeleteTaskFollowerResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteTaskReminderReq extends Struct<DeleteTaskReminderReq>{

	}
	export interface DeleteTaskReminderReqBuilder extends Struct<DeleteTaskReminderReqBuilder>{

			taskId(taskId:string):Ref<DeleteTaskReminderReqBuilder>
			reminderId(reminderId:string):Ref<DeleteTaskReminderReqBuilder>
			build():Ref<DeleteTaskReminderReq>
	}
	export interface DeleteTaskReminderResp extends Struct<DeleteTaskReminderResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteTaskReq extends Struct<DeleteTaskReq>{

	}
	export interface DeleteTaskReqBuilder extends Struct<DeleteTaskReqBuilder>{

			taskId(taskId:string):Ref<DeleteTaskReqBuilder>
			build():Ref<DeleteTaskReq>
	}
	export interface DeleteTaskResp extends Struct<DeleteTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Due extends Struct<Due>{

			time:Ref<string>
			timezone:Ref<string>
			isAllDay:Ref<bool>
	}
	export interface DueBuilder extends Struct<DueBuilder>{

			time(time:string):Ref<DueBuilder>
			timezone(timezone:string):Ref<DueBuilder>
			isAllDay(isAllDay:bool):Ref<DueBuilder>
			build():Ref<Due>
	}
	export interface Follower extends Struct<Follower>{

			id:Ref<string>
			idList:string[]
	}
	export interface FollowerBuilder extends Struct<FollowerBuilder>{

			id(id:string):Ref<FollowerBuilder>
			idList(idList:string[]):Ref<FollowerBuilder>
			build():Ref<Follower>
	}
	export interface GetTaskCommentReq extends Struct<GetTaskCommentReq>{

	}
	export interface GetTaskCommentReqBuilder extends Struct<GetTaskCommentReqBuilder>{

			taskId(taskId:string):Ref<GetTaskCommentReqBuilder>
			commentId(commentId:string):Ref<GetTaskCommentReqBuilder>
			userIdType(userIdType:string):Ref<GetTaskCommentReqBuilder>
			build():Ref<GetTaskCommentReq>
	}
	export interface GetTaskCommentResp extends Struct<GetTaskCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetTaskCommentRespData>
			success():bool
	}
	export interface GetTaskCommentRespData extends Struct<GetTaskCommentRespData>{

			comment:Ref<Comment>
	}
	export interface GetTaskReq extends Struct<GetTaskReq>{

	}
	export interface GetTaskReqBuilder extends Struct<GetTaskReqBuilder>{

			taskId(taskId:string):Ref<GetTaskReqBuilder>
			userIdType(userIdType:string):Ref<GetTaskReqBuilder>
			build():Ref<GetTaskReq>
	}
	export interface GetTaskResp extends Struct<GetTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetTaskRespData>
			success():bool
	}
	export interface GetTaskRespData extends Struct<GetTaskRespData>{

			task:Ref<Task>
	}
	export interface Href extends Struct<Href>{

			url:Ref<string>
			title:Ref<string>
	}
	export interface HrefBuilder extends Struct<HrefBuilder>{

			url(url:string):Ref<HrefBuilder>
			title(title:string):Ref<HrefBuilder>
			build():Ref<Href>
	}
	//0
	export const ListDirectionDown:int
	//1
	export const ListDirectionUp:int
	export interface ListTaskCollaboratorIterator extends Struct<ListTaskCollaboratorIterator>{

			next():[bool,Ref<Collaborator>]
			nextPageToken():Ref<string>
	}
	export interface ListTaskCollaboratorReq extends Struct<ListTaskCollaboratorReq>{

			limit:int
	}
	export interface ListTaskCollaboratorReqBuilder extends Struct<ListTaskCollaboratorReqBuilder>{

			limit(limit:int):Ref<ListTaskCollaboratorReqBuilder>
			taskId(taskId:string):Ref<ListTaskCollaboratorReqBuilder>
			pageSize(pageSize:int):Ref<ListTaskCollaboratorReqBuilder>
			pageToken(pageToken:string):Ref<ListTaskCollaboratorReqBuilder>
			userIdType(userIdType:string):Ref<ListTaskCollaboratorReqBuilder>
			build():Ref<ListTaskCollaboratorReq>
	}
	export interface ListTaskCollaboratorResp extends Struct<ListTaskCollaboratorResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListTaskCollaboratorRespData>
			success():bool
	}
	export interface ListTaskCollaboratorRespData extends Struct<ListTaskCollaboratorRespData>{

			items:Ref<Collaborator>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListTaskCommentIterator extends Struct<ListTaskCommentIterator>{

			next():[bool,Ref<Comment>]
			nextPageToken():Ref<string>
	}
	export interface ListTaskCommentReq extends Struct<ListTaskCommentReq>{

			limit:int
	}
	export interface ListTaskCommentReqBuilder extends Struct<ListTaskCommentReqBuilder>{

			limit(limit:int):Ref<ListTaskCommentReqBuilder>
			taskId(taskId:string):Ref<ListTaskCommentReqBuilder>
			pageSize(pageSize:int):Ref<ListTaskCommentReqBuilder>
			pageToken(pageToken:string):Ref<ListTaskCommentReqBuilder>
			listDirection(listDirection:int):Ref<ListTaskCommentReqBuilder>
			userIdType(userIdType:string):Ref<ListTaskCommentReqBuilder>
			build():Ref<ListTaskCommentReq>
	}
	export interface ListTaskCommentResp extends Struct<ListTaskCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListTaskCommentRespData>
			success():bool
	}
	export interface ListTaskCommentRespData extends Struct<ListTaskCommentRespData>{

			items:Ref<Comment>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListTaskFollowerIterator extends Struct<ListTaskFollowerIterator>{

			next():[bool,Ref<Follower>]
			nextPageToken():Ref<string>
	}
	export interface ListTaskFollowerReq extends Struct<ListTaskFollowerReq>{

			limit:int
	}
	export interface ListTaskFollowerReqBuilder extends Struct<ListTaskFollowerReqBuilder>{

			limit(limit:int):Ref<ListTaskFollowerReqBuilder>
			taskId(taskId:string):Ref<ListTaskFollowerReqBuilder>
			pageSize(pageSize:int):Ref<ListTaskFollowerReqBuilder>
			pageToken(pageToken:string):Ref<ListTaskFollowerReqBuilder>
			userIdType(userIdType:string):Ref<ListTaskFollowerReqBuilder>
			build():Ref<ListTaskFollowerReq>
	}
	export interface ListTaskFollowerResp extends Struct<ListTaskFollowerResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListTaskFollowerRespData>
			success():bool
	}
	export interface ListTaskFollowerRespData extends Struct<ListTaskFollowerRespData>{

			items:Ref<Follower>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListTaskIterator extends Struct<ListTaskIterator>{

			next():[bool,Ref<Task>]
			nextPageToken():Ref<string>
	}
	export interface ListTaskReminderIterator extends Struct<ListTaskReminderIterator>{

			next():[bool,Ref<Reminder>]
			nextPageToken():Ref<string>
	}
	export interface ListTaskReminderReq extends Struct<ListTaskReminderReq>{

			limit:int
	}
	export interface ListTaskReminderReqBuilder extends Struct<ListTaskReminderReqBuilder>{

			limit(limit:int):Ref<ListTaskReminderReqBuilder>
			taskId(taskId:string):Ref<ListTaskReminderReqBuilder>
			pageSize(pageSize:int):Ref<ListTaskReminderReqBuilder>
			pageToken(pageToken:string):Ref<ListTaskReminderReqBuilder>
			build():Ref<ListTaskReminderReq>
	}
	export interface ListTaskReminderResp extends Struct<ListTaskReminderResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListTaskReminderRespData>
			success():bool
	}
	export interface ListTaskReminderRespData extends Struct<ListTaskReminderRespData>{

			items:Ref<Reminder>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListTaskReq extends Struct<ListTaskReq>{

			limit:int
	}
	export interface ListTaskReqBuilder extends Struct<ListTaskReqBuilder>{

			limit(limit:int):Ref<ListTaskReqBuilder>
			pageSize(pageSize:int):Ref<ListTaskReqBuilder>
			pageToken(pageToken:string):Ref<ListTaskReqBuilder>
			startCreateTime(startCreateTime:string):Ref<ListTaskReqBuilder>
			endCreateTime(endCreateTime:string):Ref<ListTaskReqBuilder>
			taskCompleted(taskCompleted:bool):Ref<ListTaskReqBuilder>
			userIdType(userIdType:string):Ref<ListTaskReqBuilder>
			build():Ref<ListTaskReq>
	}
	export interface ListTaskResp extends Struct<ListTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListTaskRespData>
			success():bool
	}
	export interface ListTaskRespData extends Struct<ListTaskRespData>{

			items:Ref<Task>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAttatchmentBuilder():Ref<AttatchmentBuilder>

	export function newBatchDeleteCollaboratorTaskReqBuilder():Ref<BatchDeleteCollaboratorTaskReqBuilder>

	export function newBatchDeleteFollowerTaskReqBuilder():Ref<BatchDeleteFollowerTaskReqBuilder>

	export function newCollaboratorBuilder():Ref<CollaboratorBuilder>

	export function newCommentBuilder():Ref<CommentBuilder>

	export function newCompleteTaskReqBuilder():Ref<CompleteTaskReqBuilder>

	export function newCreateTaskCollaboratorReqBuilder():Ref<CreateTaskCollaboratorReqBuilder>

	export function newCreateTaskCommentReqBuilder():Ref<CreateTaskCommentReqBuilder>

	export function newCreateTaskFollowerReqBuilder():Ref<CreateTaskFollowerReqBuilder>

	export function newCreateTaskReminderReqBuilder():Ref<CreateTaskReminderReqBuilder>

	export function newCreateTaskReqBuilder():Ref<CreateTaskReqBuilder>

	export function newDeleteTaskCollaboratorReqBuilder():Ref<DeleteTaskCollaboratorReqBuilder>

	export function newDeleteTaskCommentReqBuilder():Ref<DeleteTaskCommentReqBuilder>

	export function newDeleteTaskFollowerReqBuilder():Ref<DeleteTaskFollowerReqBuilder>

	export function newDeleteTaskReminderReqBuilder():Ref<DeleteTaskReminderReqBuilder>

	export function newDeleteTaskReqBuilder():Ref<DeleteTaskReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDueBuilder():Ref<DueBuilder>

	export function newFollowerBuilder():Ref<FollowerBuilder>

	export function newGetTaskCommentReqBuilder():Ref<GetTaskCommentReqBuilder>

	export function newGetTaskReqBuilder():Ref<GetTaskReqBuilder>

	export function newHrefBuilder():Ref<HrefBuilder>

	export function newListTaskCollaboratorReqBuilder():Ref<ListTaskCollaboratorReqBuilder>

	export function newListTaskCommentReqBuilder():Ref<ListTaskCommentReqBuilder>

	export function newListTaskFollowerReqBuilder():Ref<ListTaskFollowerReqBuilder>

	export function newListTaskReminderReqBuilder():Ref<ListTaskReminderReqBuilder>

	export function newListTaskReqBuilder():Ref<ListTaskReqBuilder>

	export function newOriginBuilder():Ref<OriginBuilder>

	export function newP2TaskCommentUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2TaskCommentUpdatedV1>)=>void/*error*/):Ref<P2TaskCommentUpdatedV1Handler>

	export function newP2TaskUpdateTenantV1Handler(v1:(v2:context.Context,v1:Ref<P2TaskUpdateTenantV1>)=>void/*error*/):Ref<P2TaskUpdateTenantV1Handler>

	export function newP2TaskUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2TaskUpdatedV1>)=>void/*error*/):Ref<P2TaskUpdatedV1Handler>

	export function newPatchTaskPathReqBodyBuilder():Ref<PatchTaskPathReqBodyBuilder>

	export function newPatchTaskReqBodyBuilder():Ref<PatchTaskReqBodyBuilder>

	export function newPatchTaskReqBuilder():Ref<PatchTaskReqBuilder>

	export function newReminderBuilder():Ref<ReminderBuilder>

	export function newTaskBuilder():Ref<TaskBuilder>

	export function newUncompleteTaskReqBuilder():Ref<UncompleteTaskReqBuilder>

	export function newUpdateTaskCommentPathReqBodyBuilder():Ref<UpdateTaskCommentPathReqBodyBuilder>

	export function newUpdateTaskCommentReqBodyBuilder():Ref<UpdateTaskCommentReqBodyBuilder>

	export function newUpdateTaskCommentReqBuilder():Ref<UpdateTaskCommentReqBuilder>

	export function newUserIdBuilder():Ref<UserIdBuilder>

	export function newUserIdListBuilder():Ref<UserIdListBuilder>

	export interface Origin extends Struct<Origin>{

			platformI18nName:Ref<string>
			href:Ref<Href>
	}
	export interface OriginBuilder extends Struct<OriginBuilder>{

			platformI18nName(platformI18nName:string):Ref<OriginBuilder>
			href(href:Ref<Href>):Ref<OriginBuilder>
			build():Ref<Origin>
	}
	export interface P2TaskCommentUpdatedV1 extends Struct<P2TaskCommentUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2TaskCommentUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2TaskCommentUpdatedV1Data extends Struct<P2TaskCommentUpdatedV1Data>{

			taskId:Ref<string>
			commentId:Ref<string>
			parentId:Ref<string>
			objType:Ref<int>
	}
	export interface P2TaskCommentUpdatedV1Handler extends Struct<P2TaskCommentUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2TaskUpdateTenantV1 extends Struct<P2TaskUpdateTenantV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2TaskUpdateTenantV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2TaskUpdateTenantV1Data extends Struct<P2TaskUpdateTenantV1Data>{

			userIdList:Ref<UserIdList>
			taskId:Ref<string>
			objectType:Ref<string>
			eventType:Ref<string>
	}
	export interface P2TaskUpdateTenantV1Handler extends Struct<P2TaskUpdateTenantV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2TaskUpdatedV1 extends Struct<P2TaskUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2TaskUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2TaskUpdatedV1Data extends Struct<P2TaskUpdatedV1Data>{

			taskId:Ref<string>
			objType:Ref<int>
	}
	export interface P2TaskUpdatedV1Handler extends Struct<P2TaskUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface PatchTaskPathReqBodyBuilder extends Struct<PatchTaskPathReqBodyBuilder>{

			task(task:Ref<Task>):Ref<PatchTaskPathReqBodyBuilder>
			updateFields(updateFields:string[]):Ref<PatchTaskPathReqBodyBuilder>
			build():Ref<PatchTaskReqBody>
	}
	export interface PatchTaskReq extends Struct<PatchTaskReq>{

			body:Ref<PatchTaskReqBody>
	}
	export interface PatchTaskReqBody extends Struct<PatchTaskReqBody>{

			task:Ref<Task>
			updateFields:string[]
	}
	export interface PatchTaskReqBodyBuilder extends Struct<PatchTaskReqBodyBuilder>{

			task(task:Ref<Task>):Ref<PatchTaskReqBodyBuilder>
			updateFields(updateFields:string[]):Ref<PatchTaskReqBodyBuilder>
			build():Ref<PatchTaskReqBody>
	}
	export interface PatchTaskReqBuilder extends Struct<PatchTaskReqBuilder>{

			taskId(taskId:string):Ref<PatchTaskReqBuilder>
			userIdType(userIdType:string):Ref<PatchTaskReqBuilder>
			body(body:Ref<PatchTaskReqBody>):Ref<PatchTaskReqBuilder>
			build():Ref<PatchTaskReq>
	}
	export interface PatchTaskResp extends Struct<PatchTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchTaskRespData>
			success():bool
	}
	export interface PatchTaskRespData extends Struct<PatchTaskRespData>{

			task:Ref<Task>
	}
	export interface Reminder extends Struct<Reminder>{

			id:Ref<string>
			relativeFireMinute:Ref<int>
	}
	export interface ReminderBuilder extends Struct<ReminderBuilder>{

			id(id:string):Ref<ReminderBuilder>
			relativeFireMinute(relativeFireMinute:int):Ref<ReminderBuilder>
			build():Ref<Reminder>
	}
	export interface Section extends Alias<Nothing>{

	}
	export interface Task extends Struct<Task>{

			id:Ref<string>
			summary:Ref<string>
			description:Ref<string>
			completeTime:Ref<string>
			creatorId:Ref<string>
			extra:Ref<string>
			createTime:Ref<string>
			updateTime:Ref<string>
			due:Ref<Due>
			origin:Ref<Origin>
			canEdit:Ref<bool>
			custom:Ref<string>
			source:Ref<int>
			followers:Ref<Follower>[]
			collaborators:Ref<Collaborator>[]
			collaboratorIds:string[]
			followerIds:string[]
			repeatRule:Ref<string>
			richSummary:Ref<string>
			richDescription:Ref<string>
	}
	export interface TaskBuilder extends Struct<TaskBuilder>{

			id(id:string):Ref<TaskBuilder>
			summary(summary:string):Ref<TaskBuilder>
			description(description:string):Ref<TaskBuilder>
			completeTime(completeTime:string):Ref<TaskBuilder>
			creatorId(creatorId:string):Ref<TaskBuilder>
			extra(extra:string):Ref<TaskBuilder>
			createTime(createTime:string):Ref<TaskBuilder>
			updateTime(updateTime:string):Ref<TaskBuilder>
			due(due:Ref<Due>):Ref<TaskBuilder>
			origin(origin:Ref<Origin>):Ref<TaskBuilder>
			canEdit(canEdit:bool):Ref<TaskBuilder>
			custom(custom:string):Ref<TaskBuilder>
			source(source:int):Ref<TaskBuilder>
			followers(followers:Ref<Follower>[]):Ref<TaskBuilder>
			collaborators(collaborators:Ref<Collaborator>[]):Ref<TaskBuilder>
			collaboratorIds(collaboratorIds:string[]):Ref<TaskBuilder>
			followerIds(followerIds:string[]):Ref<TaskBuilder>
			repeatRule(repeatRule:string):Ref<TaskBuilder>
			richSummary(richSummary:string):Ref<TaskBuilder>
			richDescription(richDescription:string):Ref<TaskBuilder>
			build():Ref<Task>
	}
	export interface Tasklist extends Alias<Nothing>{

	}
	export interface UncompleteTaskReq extends Struct<UncompleteTaskReq>{

	}
	export interface UncompleteTaskReqBuilder extends Struct<UncompleteTaskReqBuilder>{

			taskId(taskId:string):Ref<UncompleteTaskReqBuilder>
			build():Ref<UncompleteTaskReq>
	}
	export interface UncompleteTaskResp extends Struct<UncompleteTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface UpdateTaskCommentPathReqBodyBuilder extends Struct<UpdateTaskCommentPathReqBodyBuilder>{

			content(content:string):Ref<UpdateTaskCommentPathReqBodyBuilder>
			richContent(richContent:string):Ref<UpdateTaskCommentPathReqBodyBuilder>
			build():Ref<UpdateTaskCommentReqBody>
	}
	export interface UpdateTaskCommentReq extends Struct<UpdateTaskCommentReq>{

			body:Ref<UpdateTaskCommentReqBody>
	}
	export interface UpdateTaskCommentReqBody extends Struct<UpdateTaskCommentReqBody>{

			content:Ref<string>
			richContent:Ref<string>
	}
	export interface UpdateTaskCommentReqBodyBuilder extends Struct<UpdateTaskCommentReqBodyBuilder>{

			content(content:string):Ref<UpdateTaskCommentReqBodyBuilder>
			richContent(richContent:string):Ref<UpdateTaskCommentReqBodyBuilder>
			build():Ref<UpdateTaskCommentReqBody>
	}
	export interface UpdateTaskCommentReqBuilder extends Struct<UpdateTaskCommentReqBuilder>{

			taskId(taskId:string):Ref<UpdateTaskCommentReqBuilder>
			commentId(commentId:string):Ref<UpdateTaskCommentReqBuilder>
			userIdType(userIdType:string):Ref<UpdateTaskCommentReqBuilder>
			body(body:Ref<UpdateTaskCommentReqBody>):Ref<UpdateTaskCommentReqBuilder>
			build():Ref<UpdateTaskCommentReq>
	}
	export interface UpdateTaskCommentResp extends Struct<UpdateTaskCommentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateTaskCommentRespData>
			success():bool
	}
	export interface UpdateTaskCommentRespData extends Struct<UpdateTaskCommentRespData>{

			comment:Ref<Comment>
	}
	export interface UserId extends Struct<UserId>{

			userId:Ref<string>
			openId:Ref<string>
			unionId:Ref<string>
	}
	export interface UserIdBuilder extends Struct<UserIdBuilder>{

			userId(userId:string):Ref<UserIdBuilder>
			openId(openId:string):Ref<UserIdBuilder>
			unionId(unionId:string):Ref<UserIdBuilder>
			build():Ref<UserId>
	}
	export interface UserIdList extends Struct<UserIdList>{

			userIdList:Ref<UserId>[]
	}
	export interface UserIdListBuilder extends Struct<UserIdListBuilder>{

			userIdList(userIdList:Ref<UserId>[]):Ref<UserIdListBuilder>
			build():Ref<UserIdList>
	}
	//"open_id"
	export const UserIdTypeBatchDeleteFollowerTaskOpenId:string
	//"union_id"
	export const UserIdTypeBatchDeleteFollowerTaskUnionId:string
	//"user_id"
	export const UserIdTypeBatchDeleteFollowerTaskUserId:string
	//"open_id"
	export const UserIdTypeCreateTaskCollaboratorOpenId:string
	//"union_id"
	export const UserIdTypeCreateTaskCollaboratorUnionId:string
	//"user_id"
	export const UserIdTypeCreateTaskCollaboratorUserId:string
	//"open_id"
	export const UserIdTypeCreateTaskCommentOpenId:string
	//"union_id"
	export const UserIdTypeCreateTaskCommentUnionId:string
	//"user_id"
	export const UserIdTypeCreateTaskCommentUserId:string
	//"open_id"
	export const UserIdTypeCreateTaskFollowerOpenId:string
	//"union_id"
	export const UserIdTypeCreateTaskFollowerUnionId:string
	//"user_id"
	export const UserIdTypeCreateTaskFollowerUserId:string
	//"open_id"
	export const UserIdTypeCreateTaskOpenId:string
	//"union_id"
	export const UserIdTypeCreateTaskUnionId:string
	//"user_id"
	export const UserIdTypeCreateTaskUserId:string
	//"open_id"
	export const UserIdTypeDeleteTaskCollaboratorOpenId:string
	//"union_id"
	export const UserIdTypeDeleteTaskCollaboratorUnionId:string
	//"user_id"
	export const UserIdTypeDeleteTaskCollaboratorUserId:string
	//"open_id"
	export const UserIdTypeDeleteTaskFollowerOpenId:string
	//"union_id"
	export const UserIdTypeDeleteTaskFollowerUnionId:string
	//"user_id"
	export const UserIdTypeDeleteTaskFollowerUserId:string
	//"open_id"
	export const UserIdTypeGetTaskCommentOpenId:string
	//"union_id"
	export const UserIdTypeGetTaskCommentUnionId:string
	//"user_id"
	export const UserIdTypeGetTaskCommentUserId:string
	//"open_id"
	export const UserIdTypeGetTaskOpenId:string
	//"union_id"
	export const UserIdTypeGetTaskUnionId:string
	//"user_id"
	export const UserIdTypeGetTaskUserId:string
	//"open_id"
	export const UserIdTypeListTaskCollaboratorOpenId:string
	//"union_id"
	export const UserIdTypeListTaskCollaboratorUnionId:string
	//"user_id"
	export const UserIdTypeListTaskCollaboratorUserId:string
	//"open_id"
	export const UserIdTypeListTaskCommentOpenId:string
	//"union_id"
	export const UserIdTypeListTaskCommentUnionId:string
	//"user_id"
	export const UserIdTypeListTaskCommentUserId:string
	//"open_id"
	export const UserIdTypeListTaskFollowerOpenId:string
	//"union_id"
	export const UserIdTypeListTaskFollowerUnionId:string
	//"user_id"
	export const UserIdTypeListTaskFollowerUserId:string
	//"open_id"
	export const UserIdTypeListTaskOpenId:string
	//"union_id"
	export const UserIdTypeListTaskUnionId:string
	//"user_id"
	export const UserIdTypeListTaskUserId:string
	//"open_id"
	export const UserIdTypeOpenId:string
	//"open_id"
	export const UserIdTypePatchTaskOpenId:string
	//"union_id"
	export const UserIdTypePatchTaskUnionId:string
	//"user_id"
	export const UserIdTypePatchTaskUserId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"open_id"
	export const UserIdTypeUpdateTaskCommentOpenId:string
	//"union_id"
	export const UserIdTypeUpdateTaskCommentUnionId:string
	//"user_id"
	export const UserIdTypeUpdateTaskCommentUserId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V1 extends Struct<V1>{

			task:Ref<{
			
				batchDeleteCollaborator(ctx:context.Context,req:Ref<BatchDeleteCollaboratorTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchDeleteCollaboratorTaskResp>
				batchDeleteFollower(ctx:context.Context,req:Ref<BatchDeleteFollowerTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchDeleteFollowerTaskResp>
				complete(ctx:context.Context,req:Ref<CompleteTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<CompleteTaskResp>
				create(ctx:context.Context,req:Ref<CreateTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateTaskResp>
				delete(ctx:context.Context,req:Ref<DeleteTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteTaskResp>
				get(ctx:context.Context,req:Ref<GetTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetTaskResp>
				list(ctx:context.Context,req:Ref<ListTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskResp>
				listByIterator(ctx:context.Context,req:Ref<ListTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskIterator>
				patch(ctx:context.Context,req:Ref<PatchTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchTaskResp>
				uncomplete(ctx:context.Context,req:Ref<UncompleteTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<UncompleteTaskResp>
			}>
			taskCollaborator:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateTaskCollaboratorReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateTaskCollaboratorResp>
				delete(ctx:context.Context,req:Ref<DeleteTaskCollaboratorReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteTaskCollaboratorResp>
				list(ctx:context.Context,req:Ref<ListTaskCollaboratorReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskCollaboratorResp>
				listByIterator(ctx:context.Context,req:Ref<ListTaskCollaboratorReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskCollaboratorIterator>
			}>
			taskComment:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateTaskCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateTaskCommentResp>
				delete(ctx:context.Context,req:Ref<DeleteTaskCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteTaskCommentResp>
				get(ctx:context.Context,req:Ref<GetTaskCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetTaskCommentResp>
				list(ctx:context.Context,req:Ref<ListTaskCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskCommentResp>
				listByIterator(ctx:context.Context,req:Ref<ListTaskCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskCommentIterator>
				update(ctx:context.Context,req:Ref<UpdateTaskCommentReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateTaskCommentResp>
			}>
			taskFollower:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateTaskFollowerReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateTaskFollowerResp>
				delete(ctx:context.Context,req:Ref<DeleteTaskFollowerReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteTaskFollowerResp>
				list(ctx:context.Context,req:Ref<ListTaskFollowerReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskFollowerResp>
				listByIterator(ctx:context.Context,req:Ref<ListTaskFollowerReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskFollowerIterator>
			}>
			taskReminder:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateTaskReminderReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateTaskReminderResp>
				delete(ctx:context.Context,req:Ref<DeleteTaskReminderReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteTaskReminderResp>
				list(ctx:context.Context,req:Ref<ListTaskReminderReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskReminderResp>
				listByIterator(ctx:context.Context,req:Ref<ListTaskReminderReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListTaskReminderIterator>
			}>
	}
	export function emptyHref():Href
	export function emptyRefHref():Ref<Href>
	export function refOfHref(x:Href,v:Ref<Href>)
	export function unRefHref(v:Ref<Href>):Href
	export function emptyListTaskReminderIterator():ListTaskReminderIterator
	export function emptyRefListTaskReminderIterator():Ref<ListTaskReminderIterator>
	export function refOfListTaskReminderIterator(x:ListTaskReminderIterator,v:Ref<ListTaskReminderIterator>)
	export function unRefListTaskReminderIterator(v:Ref<ListTaskReminderIterator>):ListTaskReminderIterator
	export function emptyOrigin():Origin
	export function emptyRefOrigin():Ref<Origin>
	export function refOfOrigin(x:Origin,v:Ref<Origin>)
	export function unRefOrigin(v:Ref<Origin>):Origin
	export function emptyPatchTaskResp():PatchTaskResp
	export function emptyRefPatchTaskResp():Ref<PatchTaskResp>
	export function refOfPatchTaskResp(x:PatchTaskResp,v:Ref<PatchTaskResp>)
	export function unRefPatchTaskResp(v:Ref<PatchTaskResp>):PatchTaskResp
	export function emptyCreateTaskResp():CreateTaskResp
	export function emptyRefCreateTaskResp():Ref<CreateTaskResp>
	export function refOfCreateTaskResp(x:CreateTaskResp,v:Ref<CreateTaskResp>)
	export function unRefCreateTaskResp(v:Ref<CreateTaskResp>):CreateTaskResp
	export function emptyGetTaskReq():GetTaskReq
	export function emptyRefGetTaskReq():Ref<GetTaskReq>
	export function refOfGetTaskReq(x:GetTaskReq,v:Ref<GetTaskReq>)
	export function unRefGetTaskReq(v:Ref<GetTaskReq>):GetTaskReq
	export function emptyGetTaskResp():GetTaskResp
	export function emptyRefGetTaskResp():Ref<GetTaskResp>
	export function refOfGetTaskResp(x:GetTaskResp,v:Ref<GetTaskResp>)
	export function unRefGetTaskResp(v:Ref<GetTaskResp>):GetTaskResp
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyDeleteTaskCollaboratorResp():DeleteTaskCollaboratorResp
	export function emptyRefDeleteTaskCollaboratorResp():Ref<DeleteTaskCollaboratorResp>
	export function refOfDeleteTaskCollaboratorResp(x:DeleteTaskCollaboratorResp,v:Ref<DeleteTaskCollaboratorResp>)
	export function unRefDeleteTaskCollaboratorResp(v:Ref<DeleteTaskCollaboratorResp>):DeleteTaskCollaboratorResp
	export function emptyReminder():Reminder
	export function emptyRefReminder():Ref<Reminder>
	export function refOfReminder(x:Reminder,v:Ref<Reminder>)
	export function unRefReminder(v:Ref<Reminder>):Reminder
	export function emptyUncompleteTaskResp():UncompleteTaskResp
	export function emptyRefUncompleteTaskResp():Ref<UncompleteTaskResp>
	export function refOfUncompleteTaskResp(x:UncompleteTaskResp,v:Ref<UncompleteTaskResp>)
	export function unRefUncompleteTaskResp(v:Ref<UncompleteTaskResp>):UncompleteTaskResp
	export function emptyListTaskCollaboratorResp():ListTaskCollaboratorResp
	export function emptyRefListTaskCollaboratorResp():Ref<ListTaskCollaboratorResp>
	export function refOfListTaskCollaboratorResp(x:ListTaskCollaboratorResp,v:Ref<ListTaskCollaboratorResp>)
	export function unRefListTaskCollaboratorResp(v:Ref<ListTaskCollaboratorResp>):ListTaskCollaboratorResp
	export function emptyListTaskReminderResp():ListTaskReminderResp
	export function emptyRefListTaskReminderResp():Ref<ListTaskReminderResp>
	export function refOfListTaskReminderResp(x:ListTaskReminderResp,v:Ref<ListTaskReminderResp>)
	export function unRefListTaskReminderResp(v:Ref<ListTaskReminderResp>):ListTaskReminderResp
	export function emptyListTaskFollowerReq():ListTaskFollowerReq
	export function emptyRefListTaskFollowerReq():Ref<ListTaskFollowerReq>
	export function refOfListTaskFollowerReq(x:ListTaskFollowerReq,v:Ref<ListTaskFollowerReq>)
	export function unRefListTaskFollowerReq(v:Ref<ListTaskFollowerReq>):ListTaskFollowerReq
	export function emptyUpdateTaskCommentReq():UpdateTaskCommentReq
	export function emptyRefUpdateTaskCommentReq():Ref<UpdateTaskCommentReq>
	export function refOfUpdateTaskCommentReq(x:UpdateTaskCommentReq,v:Ref<UpdateTaskCommentReq>)
	export function unRefUpdateTaskCommentReq(v:Ref<UpdateTaskCommentReq>):UpdateTaskCommentReq
	export function emptyAttatchment():Attatchment
	export function emptyRefAttatchment():Ref<Attatchment>
	export function refOfAttatchment(x:Attatchment,v:Ref<Attatchment>)
	export function unRefAttatchment(v:Ref<Attatchment>):Attatchment
	export function emptyDeleteTaskCommentReq():DeleteTaskCommentReq
	export function emptyRefDeleteTaskCommentReq():Ref<DeleteTaskCommentReq>
	export function refOfDeleteTaskCommentReq(x:DeleteTaskCommentReq,v:Ref<DeleteTaskCommentReq>)
	export function unRefDeleteTaskCommentReq(v:Ref<DeleteTaskCommentReq>):DeleteTaskCommentReq
	export function emptyDeleteTaskReminderResp():DeleteTaskReminderResp
	export function emptyRefDeleteTaskReminderResp():Ref<DeleteTaskReminderResp>
	export function refOfDeleteTaskReminderResp(x:DeleteTaskReminderResp,v:Ref<DeleteTaskReminderResp>)
	export function unRefDeleteTaskReminderResp(v:Ref<DeleteTaskReminderResp>):DeleteTaskReminderResp
	export function emptyDeleteTaskReminderReq():DeleteTaskReminderReq
	export function emptyRefDeleteTaskReminderReq():Ref<DeleteTaskReminderReq>
	export function refOfDeleteTaskReminderReq(x:DeleteTaskReminderReq,v:Ref<DeleteTaskReminderReq>)
	export function unRefDeleteTaskReminderReq(v:Ref<DeleteTaskReminderReq>):DeleteTaskReminderReq
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyCreateTaskCollaboratorReq():CreateTaskCollaboratorReq
	export function emptyRefCreateTaskCollaboratorReq():Ref<CreateTaskCollaboratorReq>
	export function refOfCreateTaskCollaboratorReq(x:CreateTaskCollaboratorReq,v:Ref<CreateTaskCollaboratorReq>)
	export function unRefCreateTaskCollaboratorReq(v:Ref<CreateTaskCollaboratorReq>):CreateTaskCollaboratorReq
	export function emptyCreateTaskFollowerRespData():CreateTaskFollowerRespData
	export function emptyRefCreateTaskFollowerRespData():Ref<CreateTaskFollowerRespData>
	export function refOfCreateTaskFollowerRespData(x:CreateTaskFollowerRespData,v:Ref<CreateTaskFollowerRespData>)
	export function unRefCreateTaskFollowerRespData(v:Ref<CreateTaskFollowerRespData>):CreateTaskFollowerRespData
	export function emptyDeleteTaskCommentResp():DeleteTaskCommentResp
	export function emptyRefDeleteTaskCommentResp():Ref<DeleteTaskCommentResp>
	export function refOfDeleteTaskCommentResp(x:DeleteTaskCommentResp,v:Ref<DeleteTaskCommentResp>)
	export function unRefDeleteTaskCommentResp(v:Ref<DeleteTaskCommentResp>):DeleteTaskCommentResp
	export function emptyBatchDeleteCollaboratorTaskReq():BatchDeleteCollaboratorTaskReq
	export function emptyRefBatchDeleteCollaboratorTaskReq():Ref<BatchDeleteCollaboratorTaskReq>
	export function refOfBatchDeleteCollaboratorTaskReq(x:BatchDeleteCollaboratorTaskReq,v:Ref<BatchDeleteCollaboratorTaskReq>)
	export function unRefBatchDeleteCollaboratorTaskReq(v:Ref<BatchDeleteCollaboratorTaskReq>):BatchDeleteCollaboratorTaskReq
	export function emptyCompleteTaskReq():CompleteTaskReq
	export function emptyRefCompleteTaskReq():Ref<CompleteTaskReq>
	export function refOfCompleteTaskReq(x:CompleteTaskReq,v:Ref<CompleteTaskReq>)
	export function unRefCompleteTaskReq(v:Ref<CompleteTaskReq>):CompleteTaskReq
	export function emptyCreateTaskReminderReq():CreateTaskReminderReq
	export function emptyRefCreateTaskReminderReq():Ref<CreateTaskReminderReq>
	export function refOfCreateTaskReminderReq(x:CreateTaskReminderReq,v:Ref<CreateTaskReminderReq>)
	export function unRefCreateTaskReminderReq(v:Ref<CreateTaskReminderReq>):CreateTaskReminderReq
	export function emptyListTaskCollaboratorRespData():ListTaskCollaboratorRespData
	export function emptyRefListTaskCollaboratorRespData():Ref<ListTaskCollaboratorRespData>
	export function refOfListTaskCollaboratorRespData(x:ListTaskCollaboratorRespData,v:Ref<ListTaskCollaboratorRespData>)
	export function unRefListTaskCollaboratorRespData(v:Ref<ListTaskCollaboratorRespData>):ListTaskCollaboratorRespData
	export function emptyListTaskReminderReq():ListTaskReminderReq
	export function emptyRefListTaskReminderReq():Ref<ListTaskReminderReq>
	export function refOfListTaskReminderReq(x:ListTaskReminderReq,v:Ref<ListTaskReminderReq>)
	export function unRefListTaskReminderReq(v:Ref<ListTaskReminderReq>):ListTaskReminderReq
	export function emptyBatchDeleteFollowerTaskRespData():BatchDeleteFollowerTaskRespData
	export function emptyRefBatchDeleteFollowerTaskRespData():Ref<BatchDeleteFollowerTaskRespData>
	export function refOfBatchDeleteFollowerTaskRespData(x:BatchDeleteFollowerTaskRespData,v:Ref<BatchDeleteFollowerTaskRespData>)
	export function unRefBatchDeleteFollowerTaskRespData(v:Ref<BatchDeleteFollowerTaskRespData>):BatchDeleteFollowerTaskRespData
	export function emptyGetTaskRespData():GetTaskRespData
	export function emptyRefGetTaskRespData():Ref<GetTaskRespData>
	export function refOfGetTaskRespData(x:GetTaskRespData,v:Ref<GetTaskRespData>)
	export function unRefGetTaskRespData(v:Ref<GetTaskRespData>):GetTaskRespData
	export function emptyListTaskCommentIterator():ListTaskCommentIterator
	export function emptyRefListTaskCommentIterator():Ref<ListTaskCommentIterator>
	export function refOfListTaskCommentIterator(x:ListTaskCommentIterator,v:Ref<ListTaskCommentIterator>)
	export function unRefListTaskCommentIterator(v:Ref<ListTaskCommentIterator>):ListTaskCommentIterator
	export function emptyP2TaskCommentUpdatedV1Data():P2TaskCommentUpdatedV1Data
	export function emptyRefP2TaskCommentUpdatedV1Data():Ref<P2TaskCommentUpdatedV1Data>
	export function refOfP2TaskCommentUpdatedV1Data(x:P2TaskCommentUpdatedV1Data,v:Ref<P2TaskCommentUpdatedV1Data>)
	export function unRefP2TaskCommentUpdatedV1Data(v:Ref<P2TaskCommentUpdatedV1Data>):P2TaskCommentUpdatedV1Data
	export function emptyListTaskFollowerIterator():ListTaskFollowerIterator
	export function emptyRefListTaskFollowerIterator():Ref<ListTaskFollowerIterator>
	export function refOfListTaskFollowerIterator(x:ListTaskFollowerIterator,v:Ref<ListTaskFollowerIterator>)
	export function unRefListTaskFollowerIterator(v:Ref<ListTaskFollowerIterator>):ListTaskFollowerIterator
	export function emptyP2TaskCommentUpdatedV1():P2TaskCommentUpdatedV1
	export function emptyRefP2TaskCommentUpdatedV1():Ref<P2TaskCommentUpdatedV1>
	export function refOfP2TaskCommentUpdatedV1(x:P2TaskCommentUpdatedV1,v:Ref<P2TaskCommentUpdatedV1>)
	export function unRefP2TaskCommentUpdatedV1(v:Ref<P2TaskCommentUpdatedV1>):P2TaskCommentUpdatedV1
	export function emptyPatchTaskReqBody():PatchTaskReqBody
	export function emptyRefPatchTaskReqBody():Ref<PatchTaskReqBody>
	export function refOfPatchTaskReqBody(x:PatchTaskReqBody,v:Ref<PatchTaskReqBody>)
	export function unRefPatchTaskReqBody(v:Ref<PatchTaskReqBody>):PatchTaskReqBody
	export function emptyCreateTaskReminderResp():CreateTaskReminderResp
	export function emptyRefCreateTaskReminderResp():Ref<CreateTaskReminderResp>
	export function refOfCreateTaskReminderResp(x:CreateTaskReminderResp,v:Ref<CreateTaskReminderResp>)
	export function unRefCreateTaskReminderResp(v:Ref<CreateTaskReminderResp>):CreateTaskReminderResp
	export function emptyUpdateTaskCommentResp():UpdateTaskCommentResp
	export function emptyRefUpdateTaskCommentResp():Ref<UpdateTaskCommentResp>
	export function refOfUpdateTaskCommentResp(x:UpdateTaskCommentResp,v:Ref<UpdateTaskCommentResp>)
	export function unRefUpdateTaskCommentResp(v:Ref<UpdateTaskCommentResp>):UpdateTaskCommentResp
	export function emptyCompleteTaskResp():CompleteTaskResp
	export function emptyRefCompleteTaskResp():Ref<CompleteTaskResp>
	export function refOfCompleteTaskResp(x:CompleteTaskResp,v:Ref<CompleteTaskResp>)
	export function unRefCompleteTaskResp(v:Ref<CompleteTaskResp>):CompleteTaskResp
	export function emptyGetTaskCommentRespData():GetTaskCommentRespData
	export function emptyRefGetTaskCommentRespData():Ref<GetTaskCommentRespData>
	export function refOfGetTaskCommentRespData(x:GetTaskCommentRespData,v:Ref<GetTaskCommentRespData>)
	export function unRefGetTaskCommentRespData(v:Ref<GetTaskCommentRespData>):GetTaskCommentRespData
	export function emptyCreateTaskFollowerResp():CreateTaskFollowerResp
	export function emptyRefCreateTaskFollowerResp():Ref<CreateTaskFollowerResp>
	export function refOfCreateTaskFollowerResp(x:CreateTaskFollowerResp,v:Ref<CreateTaskFollowerResp>)
	export function unRefCreateTaskFollowerResp(v:Ref<CreateTaskFollowerResp>):CreateTaskFollowerResp
	export function emptyDeleteTaskFollowerResp():DeleteTaskFollowerResp
	export function emptyRefDeleteTaskFollowerResp():Ref<DeleteTaskFollowerResp>
	export function refOfDeleteTaskFollowerResp(x:DeleteTaskFollowerResp,v:Ref<DeleteTaskFollowerResp>)
	export function unRefDeleteTaskFollowerResp(v:Ref<DeleteTaskFollowerResp>):DeleteTaskFollowerResp
	export function emptyListTaskIterator():ListTaskIterator
	export function emptyRefListTaskIterator():Ref<ListTaskIterator>
	export function refOfListTaskIterator(x:ListTaskIterator,v:Ref<ListTaskIterator>)
	export function unRefListTaskIterator(v:Ref<ListTaskIterator>):ListTaskIterator
	export function emptyBatchDeleteCollaboratorTaskResp():BatchDeleteCollaboratorTaskResp
	export function emptyRefBatchDeleteCollaboratorTaskResp():Ref<BatchDeleteCollaboratorTaskResp>
	export function refOfBatchDeleteCollaboratorTaskResp(x:BatchDeleteCollaboratorTaskResp,v:Ref<BatchDeleteCollaboratorTaskResp>)
	export function unRefBatchDeleteCollaboratorTaskResp(v:Ref<BatchDeleteCollaboratorTaskResp>):BatchDeleteCollaboratorTaskResp
	export function emptyListTaskCommentRespData():ListTaskCommentRespData
	export function emptyRefListTaskCommentRespData():Ref<ListTaskCommentRespData>
	export function refOfListTaskCommentRespData(x:ListTaskCommentRespData,v:Ref<ListTaskCommentRespData>)
	export function unRefListTaskCommentRespData(v:Ref<ListTaskCommentRespData>):ListTaskCommentRespData
	export function emptyCollaborator():Collaborator
	export function emptyRefCollaborator():Ref<Collaborator>
	export function refOfCollaborator(x:Collaborator,v:Ref<Collaborator>)
	export function unRefCollaborator(v:Ref<Collaborator>):Collaborator
	export function emptyCreateTaskReminderRespData():CreateTaskReminderRespData
	export function emptyRefCreateTaskReminderRespData():Ref<CreateTaskReminderRespData>
	export function refOfCreateTaskReminderRespData(x:CreateTaskReminderRespData,v:Ref<CreateTaskReminderRespData>)
	export function unRefCreateTaskReminderRespData(v:Ref<CreateTaskReminderRespData>):CreateTaskReminderRespData
	export function emptyUncompleteTaskReq():UncompleteTaskReq
	export function emptyRefUncompleteTaskReq():Ref<UncompleteTaskReq>
	export function refOfUncompleteTaskReq(x:UncompleteTaskReq,v:Ref<UncompleteTaskReq>)
	export function unRefUncompleteTaskReq(v:Ref<UncompleteTaskReq>):UncompleteTaskReq
	export function emptyDeleteTaskResp():DeleteTaskResp
	export function emptyRefDeleteTaskResp():Ref<DeleteTaskResp>
	export function refOfDeleteTaskResp(x:DeleteTaskResp,v:Ref<DeleteTaskResp>)
	export function unRefDeleteTaskResp(v:Ref<DeleteTaskResp>):DeleteTaskResp
	export function emptyFollower():Follower
	export function emptyRefFollower():Ref<Follower>
	export function refOfFollower(x:Follower,v:Ref<Follower>)
	export function unRefFollower(v:Ref<Follower>):Follower
	export function emptyComment():Comment
	export function emptyRefComment():Ref<Comment>
	export function refOfComment(x:Comment,v:Ref<Comment>)
	export function unRefComment(v:Ref<Comment>):Comment
	export function emptyDeleteTaskCollaboratorReq():DeleteTaskCollaboratorReq
	export function emptyRefDeleteTaskCollaboratorReq():Ref<DeleteTaskCollaboratorReq>
	export function refOfDeleteTaskCollaboratorReq(x:DeleteTaskCollaboratorReq,v:Ref<DeleteTaskCollaboratorReq>)
	export function unRefDeleteTaskCollaboratorReq(v:Ref<DeleteTaskCollaboratorReq>):DeleteTaskCollaboratorReq
	export function emptyListTaskRespData():ListTaskRespData
	export function emptyRefListTaskRespData():Ref<ListTaskRespData>
	export function refOfListTaskRespData(x:ListTaskRespData,v:Ref<ListTaskRespData>)
	export function unRefListTaskRespData(v:Ref<ListTaskRespData>):ListTaskRespData
	export function emptyListTaskReq():ListTaskReq
	export function emptyRefListTaskReq():Ref<ListTaskReq>
	export function refOfListTaskReq(x:ListTaskReq,v:Ref<ListTaskReq>)
	export function unRefListTaskReq(v:Ref<ListTaskReq>):ListTaskReq
	export function emptyP2TaskUpdateTenantV1Data():P2TaskUpdateTenantV1Data
	export function emptyRefP2TaskUpdateTenantV1Data():Ref<P2TaskUpdateTenantV1Data>
	export function refOfP2TaskUpdateTenantV1Data(x:P2TaskUpdateTenantV1Data,v:Ref<P2TaskUpdateTenantV1Data>)
	export function unRefP2TaskUpdateTenantV1Data(v:Ref<P2TaskUpdateTenantV1Data>):P2TaskUpdateTenantV1Data
	export function emptyCreateTaskCommentRespData():CreateTaskCommentRespData
	export function emptyRefCreateTaskCommentRespData():Ref<CreateTaskCommentRespData>
	export function refOfCreateTaskCommentRespData(x:CreateTaskCommentRespData,v:Ref<CreateTaskCommentRespData>)
	export function unRefCreateTaskCommentRespData(v:Ref<CreateTaskCommentRespData>):CreateTaskCommentRespData
	export function emptyListTaskCollaboratorIterator():ListTaskCollaboratorIterator
	export function emptyRefListTaskCollaboratorIterator():Ref<ListTaskCollaboratorIterator>
	export function refOfListTaskCollaboratorIterator(x:ListTaskCollaboratorIterator,v:Ref<ListTaskCollaboratorIterator>)
	export function unRefListTaskCollaboratorIterator(v:Ref<ListTaskCollaboratorIterator>):ListTaskCollaboratorIterator
	export function emptyListTaskCommentResp():ListTaskCommentResp
	export function emptyRefListTaskCommentResp():Ref<ListTaskCommentResp>
	export function refOfListTaskCommentResp(x:ListTaskCommentResp,v:Ref<ListTaskCommentResp>)
	export function unRefListTaskCommentResp(v:Ref<ListTaskCommentResp>):ListTaskCommentResp
	export function emptyDeleteTaskFollowerReq():DeleteTaskFollowerReq
	export function emptyRefDeleteTaskFollowerReq():Ref<DeleteTaskFollowerReq>
	export function refOfDeleteTaskFollowerReq(x:DeleteTaskFollowerReq,v:Ref<DeleteTaskFollowerReq>)
	export function unRefDeleteTaskFollowerReq(v:Ref<DeleteTaskFollowerReq>):DeleteTaskFollowerReq
	export function emptyGetTaskCommentReq():GetTaskCommentReq
	export function emptyRefGetTaskCommentReq():Ref<GetTaskCommentReq>
	export function refOfGetTaskCommentReq(x:GetTaskCommentReq,v:Ref<GetTaskCommentReq>)
	export function unRefGetTaskCommentReq(v:Ref<GetTaskCommentReq>):GetTaskCommentReq
	export function emptyBatchDeleteFollowerTaskResp():BatchDeleteFollowerTaskResp
	export function emptyRefBatchDeleteFollowerTaskResp():Ref<BatchDeleteFollowerTaskResp>
	export function refOfBatchDeleteFollowerTaskResp(x:BatchDeleteFollowerTaskResp,v:Ref<BatchDeleteFollowerTaskResp>)
	export function unRefBatchDeleteFollowerTaskResp(v:Ref<BatchDeleteFollowerTaskResp>):BatchDeleteFollowerTaskResp
	export function emptyCreateTaskCommentReq():CreateTaskCommentReq
	export function emptyRefCreateTaskCommentReq():Ref<CreateTaskCommentReq>
	export function refOfCreateTaskCommentReq(x:CreateTaskCommentReq,v:Ref<CreateTaskCommentReq>)
	export function unRefCreateTaskCommentReq(v:Ref<CreateTaskCommentReq>):CreateTaskCommentReq
	export function emptyDue():Due
	export function emptyRefDue():Ref<Due>
	export function refOfDue(x:Due,v:Ref<Due>)
	export function unRefDue(v:Ref<Due>):Due
	export function emptyBatchDeleteCollaboratorTaskRespData():BatchDeleteCollaboratorTaskRespData
	export function emptyRefBatchDeleteCollaboratorTaskRespData():Ref<BatchDeleteCollaboratorTaskRespData>
	export function refOfBatchDeleteCollaboratorTaskRespData(x:BatchDeleteCollaboratorTaskRespData,v:Ref<BatchDeleteCollaboratorTaskRespData>)
	export function unRefBatchDeleteCollaboratorTaskRespData(v:Ref<BatchDeleteCollaboratorTaskRespData>):BatchDeleteCollaboratorTaskRespData
	export function emptyPatchTaskRespData():PatchTaskRespData
	export function emptyRefPatchTaskRespData():Ref<PatchTaskRespData>
	export function refOfPatchTaskRespData(x:PatchTaskRespData,v:Ref<PatchTaskRespData>)
	export function unRefPatchTaskRespData(v:Ref<PatchTaskRespData>):PatchTaskRespData
	export function emptyUpdateTaskCommentReqBody():UpdateTaskCommentReqBody
	export function emptyRefUpdateTaskCommentReqBody():Ref<UpdateTaskCommentReqBody>
	export function refOfUpdateTaskCommentReqBody(x:UpdateTaskCommentReqBody,v:Ref<UpdateTaskCommentReqBody>)
	export function unRefUpdateTaskCommentReqBody(v:Ref<UpdateTaskCommentReqBody>):UpdateTaskCommentReqBody
	export function emptyP2TaskUpdateTenantV1():P2TaskUpdateTenantV1
	export function emptyRefP2TaskUpdateTenantV1():Ref<P2TaskUpdateTenantV1>
	export function refOfP2TaskUpdateTenantV1(x:P2TaskUpdateTenantV1,v:Ref<P2TaskUpdateTenantV1>)
	export function unRefP2TaskUpdateTenantV1(v:Ref<P2TaskUpdateTenantV1>):P2TaskUpdateTenantV1
	export function emptyPatchTaskReq():PatchTaskReq
	export function emptyRefPatchTaskReq():Ref<PatchTaskReq>
	export function refOfPatchTaskReq(x:PatchTaskReq,v:Ref<PatchTaskReq>)
	export function unRefPatchTaskReq(v:Ref<PatchTaskReq>):PatchTaskReq
	export function emptyBatchDeleteFollowerTaskReq():BatchDeleteFollowerTaskReq
	export function emptyRefBatchDeleteFollowerTaskReq():Ref<BatchDeleteFollowerTaskReq>
	export function refOfBatchDeleteFollowerTaskReq(x:BatchDeleteFollowerTaskReq,v:Ref<BatchDeleteFollowerTaskReq>)
	export function unRefBatchDeleteFollowerTaskReq(v:Ref<BatchDeleteFollowerTaskReq>):BatchDeleteFollowerTaskReq
	export function emptyCreateTaskCommentResp():CreateTaskCommentResp
	export function emptyRefCreateTaskCommentResp():Ref<CreateTaskCommentResp>
	export function refOfCreateTaskCommentResp(x:CreateTaskCommentResp,v:Ref<CreateTaskCommentResp>)
	export function unRefCreateTaskCommentResp(v:Ref<CreateTaskCommentResp>):CreateTaskCommentResp
	export function emptyTask():Task
	export function emptyRefTask():Ref<Task>
	export function refOfTask(x:Task,v:Ref<Task>)
	export function unRefTask(v:Ref<Task>):Task
	export function emptyUpdateTaskCommentRespData():UpdateTaskCommentRespData
	export function emptyRefUpdateTaskCommentRespData():Ref<UpdateTaskCommentRespData>
	export function refOfUpdateTaskCommentRespData(x:UpdateTaskCommentRespData,v:Ref<UpdateTaskCommentRespData>)
	export function unRefUpdateTaskCommentRespData(v:Ref<UpdateTaskCommentRespData>):UpdateTaskCommentRespData
	export function emptyListTaskFollowerRespData():ListTaskFollowerRespData
	export function emptyRefListTaskFollowerRespData():Ref<ListTaskFollowerRespData>
	export function refOfListTaskFollowerRespData(x:ListTaskFollowerRespData,v:Ref<ListTaskFollowerRespData>)
	export function unRefListTaskFollowerRespData(v:Ref<ListTaskFollowerRespData>):ListTaskFollowerRespData
	export function emptyListTaskReminderRespData():ListTaskReminderRespData
	export function emptyRefListTaskReminderRespData():Ref<ListTaskReminderRespData>
	export function refOfListTaskReminderRespData(x:ListTaskReminderRespData,v:Ref<ListTaskReminderRespData>)
	export function unRefListTaskReminderRespData(v:Ref<ListTaskReminderRespData>):ListTaskReminderRespData
	export function emptyP2TaskUpdatedV1Data():P2TaskUpdatedV1Data
	export function emptyRefP2TaskUpdatedV1Data():Ref<P2TaskUpdatedV1Data>
	export function refOfP2TaskUpdatedV1Data(x:P2TaskUpdatedV1Data,v:Ref<P2TaskUpdatedV1Data>)
	export function unRefP2TaskUpdatedV1Data(v:Ref<P2TaskUpdatedV1Data>):P2TaskUpdatedV1Data
	export function emptyListTaskCommentReq():ListTaskCommentReq
	export function emptyRefListTaskCommentReq():Ref<ListTaskCommentReq>
	export function refOfListTaskCommentReq(x:ListTaskCommentReq,v:Ref<ListTaskCommentReq>)
	export function unRefListTaskCommentReq(v:Ref<ListTaskCommentReq>):ListTaskCommentReq
	export function emptyListTaskFollowerResp():ListTaskFollowerResp
	export function emptyRefListTaskFollowerResp():Ref<ListTaskFollowerResp>
	export function refOfListTaskFollowerResp(x:ListTaskFollowerResp,v:Ref<ListTaskFollowerResp>)
	export function unRefListTaskFollowerResp(v:Ref<ListTaskFollowerResp>):ListTaskFollowerResp
	export function emptyCreateTaskFollowerReq():CreateTaskFollowerReq
	export function emptyRefCreateTaskFollowerReq():Ref<CreateTaskFollowerReq>
	export function refOfCreateTaskFollowerReq(x:CreateTaskFollowerReq,v:Ref<CreateTaskFollowerReq>)
	export function unRefCreateTaskFollowerReq(v:Ref<CreateTaskFollowerReq>):CreateTaskFollowerReq
	export function emptyDeleteTaskReq():DeleteTaskReq
	export function emptyRefDeleteTaskReq():Ref<DeleteTaskReq>
	export function refOfDeleteTaskReq(x:DeleteTaskReq,v:Ref<DeleteTaskReq>)
	export function unRefDeleteTaskReq(v:Ref<DeleteTaskReq>):DeleteTaskReq
	export function emptyListTaskCollaboratorReq():ListTaskCollaboratorReq
	export function emptyRefListTaskCollaboratorReq():Ref<ListTaskCollaboratorReq>
	export function refOfListTaskCollaboratorReq(x:ListTaskCollaboratorReq,v:Ref<ListTaskCollaboratorReq>)
	export function unRefListTaskCollaboratorReq(v:Ref<ListTaskCollaboratorReq>):ListTaskCollaboratorReq
	export function emptyCreateTaskCollaboratorRespData():CreateTaskCollaboratorRespData
	export function emptyRefCreateTaskCollaboratorRespData():Ref<CreateTaskCollaboratorRespData>
	export function refOfCreateTaskCollaboratorRespData(x:CreateTaskCollaboratorRespData,v:Ref<CreateTaskCollaboratorRespData>)
	export function unRefCreateTaskCollaboratorRespData(v:Ref<CreateTaskCollaboratorRespData>):CreateTaskCollaboratorRespData
	export function emptyCreateTaskRespData():CreateTaskRespData
	export function emptyRefCreateTaskRespData():Ref<CreateTaskRespData>
	export function refOfCreateTaskRespData(x:CreateTaskRespData,v:Ref<CreateTaskRespData>)
	export function unRefCreateTaskRespData(v:Ref<CreateTaskRespData>):CreateTaskRespData
	export function emptyP2TaskUpdatedV1():P2TaskUpdatedV1
	export function emptyRefP2TaskUpdatedV1():Ref<P2TaskUpdatedV1>
	export function refOfP2TaskUpdatedV1(x:P2TaskUpdatedV1,v:Ref<P2TaskUpdatedV1>)
	export function unRefP2TaskUpdatedV1(v:Ref<P2TaskUpdatedV1>):P2TaskUpdatedV1
	export function emptyUserIdList():UserIdList
	export function emptyRefUserIdList():Ref<UserIdList>
	export function refOfUserIdList(x:UserIdList,v:Ref<UserIdList>)
	export function unRefUserIdList(v:Ref<UserIdList>):UserIdList
	export function emptyGetTaskCommentResp():GetTaskCommentResp
	export function emptyRefGetTaskCommentResp():Ref<GetTaskCommentResp>
	export function refOfGetTaskCommentResp(x:GetTaskCommentResp,v:Ref<GetTaskCommentResp>)
	export function unRefGetTaskCommentResp(v:Ref<GetTaskCommentResp>):GetTaskCommentResp
	export function emptyListTaskResp():ListTaskResp
	export function emptyRefListTaskResp():Ref<ListTaskResp>
	export function refOfListTaskResp(x:ListTaskResp,v:Ref<ListTaskResp>)
	export function unRefListTaskResp(v:Ref<ListTaskResp>):ListTaskResp
	export function emptyCreateTaskReq():CreateTaskReq
	export function emptyRefCreateTaskReq():Ref<CreateTaskReq>
	export function refOfCreateTaskReq(x:CreateTaskReq,v:Ref<CreateTaskReq>)
	export function unRefCreateTaskReq(v:Ref<CreateTaskReq>):CreateTaskReq
	export function emptyUserId():UserId
	export function emptyRefUserId():Ref<UserId>
	export function refOfUserId(x:UserId,v:Ref<UserId>)
	export function unRefUserId(v:Ref<UserId>):UserId
	export function emptyCreateTaskCollaboratorResp():CreateTaskCollaboratorResp
	export function emptyRefCreateTaskCollaboratorResp():Ref<CreateTaskCollaboratorResp>
	export function refOfCreateTaskCollaboratorResp(x:CreateTaskCollaboratorResp,v:Ref<CreateTaskCollaboratorResp>)
	export function unRefCreateTaskCollaboratorResp(v:Ref<CreateTaskCollaboratorResp>):CreateTaskCollaboratorResp
}