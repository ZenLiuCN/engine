// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/meeting_room/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as larkevent from 'github.com/larksuite/oapi-sdk-go/v3/event'
	// @ts-ignore
	import type {Ref,Struct,int,error} from 'go'
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface EventTime extends Struct<EventTime>{

			timeStamp:Ref<int>
	}
	export interface EventTimeBuilder extends Struct<EventTimeBuilder>{

			timeStamp(timeStamp:int):Ref<EventTimeBuilder>
			build():Ref<EventTime>
	}
	export interface MeetingRoom extends Struct<MeetingRoom>{

			roomId:Ref<int>
	}
	export interface MeetingRoomBuilder extends Struct<MeetingRoomBuilder>{

			roomId(roomId:int):Ref<MeetingRoomBuilder>
			build():Ref<MeetingRoom>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newEventTimeBuilder():Ref<EventTimeBuilder>

	export function newMeetingRoomBuilder():Ref<MeetingRoomBuilder>

	export function newP1ThirdPartyMeetingRoomChangedV1Handler(v1:(v2:context.Context,v1:Ref<P1ThirdPartyMeetingRoomChangedV1>)=>void/*error*/):Ref<P1ThirdPartyMeetingRoomChangedV1Handler>

	export function newP2MeetingRoomCreatedV1Handler(v1:(v2:context.Context,v1:Ref<P2MeetingRoomCreatedV1>)=>void/*error*/):Ref<P2MeetingRoomCreatedV1Handler>

	export function newP2MeetingRoomDeletedV1Handler(v1:(v2:context.Context,v1:Ref<P2MeetingRoomDeletedV1>)=>void/*error*/):Ref<P2MeetingRoomDeletedV1Handler>

	export function newP2MeetingRoomStatusChangedV1Handler(v1:(v2:context.Context,v1:Ref<P2MeetingRoomStatusChangedV1>)=>void/*error*/):Ref<P2MeetingRoomStatusChangedV1Handler>

	export function newP2MeetingRoomUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2MeetingRoomUpdatedV1>)=>void/*error*/):Ref<P2MeetingRoomUpdatedV1Handler>

	export function newUserInfoBuilder():Ref<UserInfoBuilder>

	export interface P1EventTimeV1 extends Struct<P1EventTimeV1>{

			timeStamp:string
	}
	export interface P1MeetingRoomV1 extends Struct<P1MeetingRoomV1>{

			openId:string
	}
	export interface P1OrganizerV1 extends Struct<P1OrganizerV1>{

			openId:string
			userId:string
	}
	export interface P1ThirdPartyMeetingRoomChangedV1 extends Struct<P1ThirdPartyMeetingRoomChangedV1>,larkevent.EventHandlerModel{

			eventReq:Ref<larkevent.EventReq>
			eventBase:Ref<larkevent.EventBase>
			event:Ref<P1ThirdPartyMeetingRoomChangedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1ThirdPartyMeetingRoomChangedV1Data extends Struct<P1ThirdPartyMeetingRoomChangedV1Data>{

			appID:string
			tenantKey:string
			type:string
			eventTime:string
			uid:string
			originalTime:int
			start:Ref<P1EventTimeV1>
			end:Ref<P1EventTimeV1>
			meetingRoom:Ref<P1MeetingRoomV1>[]
			organizer:Ref<P1OrganizerV1>
	}
	export interface P1ThirdPartyMeetingRoomChangedV1Handler extends Struct<P1ThirdPartyMeetingRoomChangedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2MeetingRoomCreatedV1 extends larkevent.EventHandlerModel,Struct<P2MeetingRoomCreatedV1>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2MeetingRoomCreatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2MeetingRoomCreatedV1Data extends Struct<P2MeetingRoomCreatedV1Data>{

			roomName:Ref<string>
			roomId:Ref<string>
	}
	export interface P2MeetingRoomCreatedV1Handler extends larkevent.EventHandler,Struct<P2MeetingRoomCreatedV1Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2MeetingRoomDeletedV1 extends Struct<P2MeetingRoomDeletedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2MeetingRoomDeletedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2MeetingRoomDeletedV1Data extends Struct<P2MeetingRoomDeletedV1Data>{

			roomName:Ref<string>
			roomId:Ref<string>
	}
	export interface P2MeetingRoomDeletedV1Handler extends Struct<P2MeetingRoomDeletedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2MeetingRoomStatusChangedV1 extends Struct<P2MeetingRoomStatusChangedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2MeetingRoomStatusChangedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2MeetingRoomStatusChangedV1Data extends Struct<P2MeetingRoomStatusChangedV1Data>{

			roomName:Ref<string>
			roomId:Ref<string>
	}
	export interface P2MeetingRoomStatusChangedV1Handler extends Struct<P2MeetingRoomStatusChangedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2MeetingRoomUpdatedV1 extends Struct<P2MeetingRoomUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2MeetingRoomUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2MeetingRoomUpdatedV1Data extends Struct<P2MeetingRoomUpdatedV1Data>{

			roomName:Ref<string>
			roomId:Ref<string>
	}
	export interface P2MeetingRoomUpdatedV1Handler extends Struct<P2MeetingRoomUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface UserInfo extends Struct<UserInfo>{

			openId:Ref<string>
			userId:Ref<string>
	}
	export interface UserInfoBuilder extends Struct<UserInfoBuilder>{

			openId(openId:string):Ref<UserInfoBuilder>
			userId(userId:string):Ref<UserInfoBuilder>
			build():Ref<UserInfo>
	}
	export interface V1 extends Struct<V1>{

	}
	export function emptyP2MeetingRoomCreatedV1():P2MeetingRoomCreatedV1
	export function emptyRefP2MeetingRoomCreatedV1():Ref<P2MeetingRoomCreatedV1>
	export function refOfP2MeetingRoomCreatedV1(x:P2MeetingRoomCreatedV1,v:Ref<P2MeetingRoomCreatedV1>)
	export function unRefP2MeetingRoomCreatedV1(v:Ref<P2MeetingRoomCreatedV1>):P2MeetingRoomCreatedV1
	export function emptyP1ThirdPartyMeetingRoomChangedV1Data():P1ThirdPartyMeetingRoomChangedV1Data
	export function emptyRefP1ThirdPartyMeetingRoomChangedV1Data():Ref<P1ThirdPartyMeetingRoomChangedV1Data>
	export function refOfP1ThirdPartyMeetingRoomChangedV1Data(x:P1ThirdPartyMeetingRoomChangedV1Data,v:Ref<P1ThirdPartyMeetingRoomChangedV1Data>)
	export function unRefP1ThirdPartyMeetingRoomChangedV1Data(v:Ref<P1ThirdPartyMeetingRoomChangedV1Data>):P1ThirdPartyMeetingRoomChangedV1Data
	export function emptyP2MeetingRoomDeletedV1():P2MeetingRoomDeletedV1
	export function emptyRefP2MeetingRoomDeletedV1():Ref<P2MeetingRoomDeletedV1>
	export function refOfP2MeetingRoomDeletedV1(x:P2MeetingRoomDeletedV1,v:Ref<P2MeetingRoomDeletedV1>)
	export function unRefP2MeetingRoomDeletedV1(v:Ref<P2MeetingRoomDeletedV1>):P2MeetingRoomDeletedV1
	export function emptyP2MeetingRoomStatusChangedV1():P2MeetingRoomStatusChangedV1
	export function emptyRefP2MeetingRoomStatusChangedV1():Ref<P2MeetingRoomStatusChangedV1>
	export function refOfP2MeetingRoomStatusChangedV1(x:P2MeetingRoomStatusChangedV1,v:Ref<P2MeetingRoomStatusChangedV1>)
	export function unRefP2MeetingRoomStatusChangedV1(v:Ref<P2MeetingRoomStatusChangedV1>):P2MeetingRoomStatusChangedV1
	export function emptyP2MeetingRoomUpdatedV1Data():P2MeetingRoomUpdatedV1Data
	export function emptyRefP2MeetingRoomUpdatedV1Data():Ref<P2MeetingRoomUpdatedV1Data>
	export function refOfP2MeetingRoomUpdatedV1Data(x:P2MeetingRoomUpdatedV1Data,v:Ref<P2MeetingRoomUpdatedV1Data>)
	export function unRefP2MeetingRoomUpdatedV1Data(v:Ref<P2MeetingRoomUpdatedV1Data>):P2MeetingRoomUpdatedV1Data
	export function emptyEventTime():EventTime
	export function emptyRefEventTime():Ref<EventTime>
	export function refOfEventTime(x:EventTime,v:Ref<EventTime>)
	export function unRefEventTime(v:Ref<EventTime>):EventTime
	export function emptyP1MeetingRoomV1():P1MeetingRoomV1
	export function emptyRefP1MeetingRoomV1():Ref<P1MeetingRoomV1>
	export function refOfP1MeetingRoomV1(x:P1MeetingRoomV1,v:Ref<P1MeetingRoomV1>)
	export function unRefP1MeetingRoomV1(v:Ref<P1MeetingRoomV1>):P1MeetingRoomV1
	export function emptyP2MeetingRoomDeletedV1Data():P2MeetingRoomDeletedV1Data
	export function emptyRefP2MeetingRoomDeletedV1Data():Ref<P2MeetingRoomDeletedV1Data>
	export function refOfP2MeetingRoomDeletedV1Data(x:P2MeetingRoomDeletedV1Data,v:Ref<P2MeetingRoomDeletedV1Data>)
	export function unRefP2MeetingRoomDeletedV1Data(v:Ref<P2MeetingRoomDeletedV1Data>):P2MeetingRoomDeletedV1Data
	export function emptyP2MeetingRoomStatusChangedV1Data():P2MeetingRoomStatusChangedV1Data
	export function emptyRefP2MeetingRoomStatusChangedV1Data():Ref<P2MeetingRoomStatusChangedV1Data>
	export function refOfP2MeetingRoomStatusChangedV1Data(x:P2MeetingRoomStatusChangedV1Data,v:Ref<P2MeetingRoomStatusChangedV1Data>)
	export function unRefP2MeetingRoomStatusChangedV1Data(v:Ref<P2MeetingRoomStatusChangedV1Data>):P2MeetingRoomStatusChangedV1Data
	export function emptyP2MeetingRoomUpdatedV1():P2MeetingRoomUpdatedV1
	export function emptyRefP2MeetingRoomUpdatedV1():Ref<P2MeetingRoomUpdatedV1>
	export function refOfP2MeetingRoomUpdatedV1(x:P2MeetingRoomUpdatedV1,v:Ref<P2MeetingRoomUpdatedV1>)
	export function unRefP2MeetingRoomUpdatedV1(v:Ref<P2MeetingRoomUpdatedV1>):P2MeetingRoomUpdatedV1
	export function emptyMeetingRoom():MeetingRoom
	export function emptyRefMeetingRoom():Ref<MeetingRoom>
	export function refOfMeetingRoom(x:MeetingRoom,v:Ref<MeetingRoom>)
	export function unRefMeetingRoom(v:Ref<MeetingRoom>):MeetingRoom
	export function emptyP1OrganizerV1():P1OrganizerV1
	export function emptyRefP1OrganizerV1():Ref<P1OrganizerV1>
	export function refOfP1OrganizerV1(x:P1OrganizerV1,v:Ref<P1OrganizerV1>)
	export function unRefP1OrganizerV1(v:Ref<P1OrganizerV1>):P1OrganizerV1
	export function emptyUserInfo():UserInfo
	export function emptyRefUserInfo():Ref<UserInfo>
	export function refOfUserInfo(x:UserInfo,v:Ref<UserInfo>)
	export function unRefUserInfo(v:Ref<UserInfo>):UserInfo
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyP1EventTimeV1():P1EventTimeV1
	export function emptyRefP1EventTimeV1():Ref<P1EventTimeV1>
	export function refOfP1EventTimeV1(x:P1EventTimeV1,v:Ref<P1EventTimeV1>)
	export function unRefP1EventTimeV1(v:Ref<P1EventTimeV1>):P1EventTimeV1
	export function emptyP1ThirdPartyMeetingRoomChangedV1():P1ThirdPartyMeetingRoomChangedV1
	export function emptyRefP1ThirdPartyMeetingRoomChangedV1():Ref<P1ThirdPartyMeetingRoomChangedV1>
	export function refOfP1ThirdPartyMeetingRoomChangedV1(x:P1ThirdPartyMeetingRoomChangedV1,v:Ref<P1ThirdPartyMeetingRoomChangedV1>)
	export function unRefP1ThirdPartyMeetingRoomChangedV1(v:Ref<P1ThirdPartyMeetingRoomChangedV1>):P1ThirdPartyMeetingRoomChangedV1
	export function emptyP2MeetingRoomCreatedV1Data():P2MeetingRoomCreatedV1Data
	export function emptyRefP2MeetingRoomCreatedV1Data():Ref<P2MeetingRoomCreatedV1Data>
	export function refOfP2MeetingRoomCreatedV1Data(x:P2MeetingRoomCreatedV1Data,v:Ref<P2MeetingRoomCreatedV1Data>)
	export function unRefP2MeetingRoomCreatedV1Data(v:Ref<P2MeetingRoomCreatedV1Data>):P2MeetingRoomCreatedV1Data
}