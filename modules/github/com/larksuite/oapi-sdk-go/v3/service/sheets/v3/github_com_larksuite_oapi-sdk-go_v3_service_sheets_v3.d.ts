// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/sheets/v3'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {error,Ref,int,Struct,bool,float64} from 'go'
	export interface AddSheet extends Struct<AddSheet>{

			title:Ref<string>
			index:Ref<int>
	}
	export interface AddSheetBuilder extends Struct<AddSheetBuilder>{

			title(title:string):Ref<AddSheetBuilder>
			index(index:int):Ref<AddSheetBuilder>
			build():Ref<AddSheet>
	}
	export interface AlignmentStyle extends Struct<AlignmentStyle>{

			horizontalAlignment:Ref<string>
			verticalAlignment:Ref<string>
	}
	export interface AlignmentStyleBuilder extends Struct<AlignmentStyleBuilder>{

			horizontalAlignment(horizontalAlignment:string):Ref<AlignmentStyleBuilder>
			verticalAlignment(verticalAlignment:string):Ref<AlignmentStyleBuilder>
			build():Ref<AlignmentStyle>
	}
	export interface AppendDimension extends Struct<AppendDimension>{

			majorDimension:Ref<string>
			length:Ref<int>
			inheritFromBefore:Ref<bool>
	}
	export interface AppendDimensionBuilder extends Struct<AppendDimensionBuilder>{

			majorDimension(majorDimension:string):Ref<AppendDimensionBuilder>
			length(length:int):Ref<AppendDimensionBuilder>
			inheritFromBefore(inheritFromBefore:bool):Ref<AppendDimensionBuilder>
			build():Ref<AppendDimension>
	}
	export interface BitableProperties extends Struct<BitableProperties>{

			bitableToken:Ref<string>
			tableId:Ref<string>
	}
	export interface BitablePropertiesBuilder extends Struct<BitablePropertiesBuilder>{

			bitableToken(bitableToken:string):Ref<BitablePropertiesBuilder>
			tableId(tableId:string):Ref<BitablePropertiesBuilder>
			build():Ref<BitableProperties>
	}
	export interface BoolRuleValue extends Struct<BoolRuleValue>{

			type:Ref<string>
			number:Ref<string>
			text:Ref<string>
			timePeriod:Ref<string>
	}
	export interface BoolRuleValueBuilder extends Struct<BoolRuleValueBuilder>{

			type(type_:string):Ref<BoolRuleValueBuilder>
			number(number:string):Ref<BoolRuleValueBuilder>
			text(text:string):Ref<BoolRuleValueBuilder>
			timePeriod(timePeriod:string):Ref<BoolRuleValueBuilder>
			build():Ref<BoolRuleValue>
	}
	export interface BooleanRuleCondition extends Struct<BooleanRuleCondition>{

			type:Ref<string>
			booleanConditionalValues:Ref<BoolRuleValue>[]
	}
	export interface BooleanRuleConditionBuilder extends Struct<BooleanRuleConditionBuilder>{

			type(type_:string):Ref<BooleanRuleConditionBuilder>
			booleanConditionalValues(booleanConditionalValues:Ref<BoolRuleValue>[]):Ref<BooleanRuleConditionBuilder>
			build():Ref<BooleanRuleCondition>
	}
	export interface BorderStyle extends Struct<BorderStyle>{

			top:Ref<TopBorderStyle>
			left:Ref<LeftBorderStyle>
			right:Ref<RightBorderStyle>
			bottom:Ref<BottomBorderStyle>
	}
	export interface BorderStyleBuilder extends Struct<BorderStyleBuilder>{

			top(top:Ref<TopBorderStyle>):Ref<BorderStyleBuilder>
			left(left:Ref<LeftBorderStyle>):Ref<BorderStyleBuilder>
			right(right:Ref<RightBorderStyle>):Ref<BorderStyleBuilder>
			bottom(bottom:Ref<BottomBorderStyle>):Ref<BorderStyleBuilder>
			build():Ref<BorderStyle>
	}
	export interface BottomBorderStyle extends Struct<BottomBorderStyle>{

			style:Ref<string>
			color:Ref<string>
	}
	export interface BottomBorderStyleBuilder extends Struct<BottomBorderStyleBuilder>{

			style(style:string):Ref<BottomBorderStyleBuilder>
			color(color:string):Ref<BottomBorderStyleBuilder>
			build():Ref<BottomBorderStyle>
	}
	export interface CellFontStyle extends Struct<CellFontStyle>{

			bold:Ref<bool>
			italic:Ref<bool>
			strikethrough:Ref<bool>
			underline:Ref<bool>
			foregroundColor:Ref<string>
			backgroundColor:Ref<string>
	}
	export interface CellFontStyleBuilder extends Struct<CellFontStyleBuilder>{

			bold(bold:bool):Ref<CellFontStyleBuilder>
			italic(italic:bool):Ref<CellFontStyleBuilder>
			strikethrough(strikethrough:bool):Ref<CellFontStyleBuilder>
			underline(underline:bool):Ref<CellFontStyleBuilder>
			foregroundColor(foregroundColor:string):Ref<CellFontStyleBuilder>
			backgroundColor(backgroundColor:string):Ref<CellFontStyleBuilder>
			build():Ref<CellFontStyle>
	}
	export interface CellStyle extends Struct<CellStyle>{

			fontStyle:Ref<CellFontStyle>
			borderStyle:Ref<BorderStyle>
			alignmentStyle:Ref<AlignmentStyle>
			wrapStrategy:Ref<string>
			format:Ref<string>
	}
	export interface CellStyleBuilder extends Struct<CellStyleBuilder>{

			fontStyle(fontStyle:Ref<CellFontStyle>):Ref<CellStyleBuilder>
			borderStyle(borderStyle:Ref<BorderStyle>):Ref<CellStyleBuilder>
			alignmentStyle(alignmentStyle:Ref<AlignmentStyle>):Ref<CellStyleBuilder>
			wrapStrategy(wrapStrategy:string):Ref<CellStyleBuilder>
			format(format:string):Ref<CellStyleBuilder>
			build():Ref<CellStyle>
	}
	export interface CellValue extends Struct<CellValue>{

			type:Ref<string>
			text:Ref<Text>
			mentionUser:Ref<MentionUser>
			mentionDocument:Ref<MentionDocument>
			value:Ref<ValueElement>
			dateTime:Ref<DateTime>
			file:Ref<File>
			image:Ref<Image>
			link:Ref<Link>
			reminder:Ref<Reminder>
			formula:Ref<Formula>
	}
	export interface CellValueBuilder extends Struct<CellValueBuilder>{

			type(type_:string):Ref<CellValueBuilder>
			text(text:Ref<Text>):Ref<CellValueBuilder>
			mentionUser(mentionUser:Ref<MentionUser>):Ref<CellValueBuilder>
			mentionDocument(mentionDocument:Ref<MentionDocument>):Ref<CellValueBuilder>
			value(value:Ref<ValueElement>):Ref<CellValueBuilder>
			dateTime(dateTime:Ref<DateTime>):Ref<CellValueBuilder>
			file(file:Ref<File>):Ref<CellValueBuilder>
			image(image:Ref<Image>):Ref<CellValueBuilder>
			link(link:Ref<Link>):Ref<CellValueBuilder>
			reminder(reminder:Ref<Reminder>):Ref<CellValueBuilder>
			formula(formula:Ref<Formula>):Ref<CellValueBuilder>
			build():Ref<CellValue>
	}
	export interface Checkbox extends Struct<Checkbox>{

			dataValidationId:Ref<int>
			dataValiditonValue:Ref<string>
	}
	export interface CheckboxBuilder extends Struct<CheckboxBuilder>{

			dataValidationId(dataValidationId:int):Ref<CheckboxBuilder>
			dataValiditonValue(dataValiditonValue:string):Ref<CheckboxBuilder>
			build():Ref<Checkbox>
	}
	export interface ClearDataValidation extends Struct<ClearDataValidation>{

			ranges:string[]
	}
	export interface ClearDataValidationBuilder extends Struct<ClearDataValidationBuilder>{

			ranges(ranges:string[]):Ref<ClearDataValidationBuilder>
			build():Ref<ClearDataValidation>
	}
	export interface ClearStyleMultiRange extends Struct<ClearStyleMultiRange>{

			ranges:string[]
	}
	export interface ClearStyleMultiRangeBuilder extends Struct<ClearStyleMultiRangeBuilder>{

			ranges(ranges:string[]):Ref<ClearStyleMultiRangeBuilder>
			build():Ref<ClearStyleMultiRange>
	}
	export interface ClearStyleRanges extends Struct<ClearStyleRanges>{

			ranges:string[]
	}
	export interface ClearStyleRangesBuilder extends Struct<ClearStyleRangesBuilder>{

			ranges(ranges:string[]):Ref<ClearStyleRangesBuilder>
			build():Ref<ClearStyleRanges>
	}
	export interface Condition extends Struct<Condition>{

			filterType:Ref<string>
			compareType:Ref<string>
			expected:string[]
	}
	export interface ConditionBuilder extends Struct<ConditionBuilder>{

			filterType(filterType:string):Ref<ConditionBuilder>
			compareType(compareType:string):Ref<ConditionBuilder>
			expected(expected:string[]):Ref<ConditionBuilder>
			build():Ref<Condition>
	}
	export interface ConditionalFormat extends Struct<ConditionalFormat>{

			conditionalFormatId:Ref<string>
			conditionalFormatRule:Ref<ConditionalFormatRule>
			index:Ref<int>
			ranges:Ref<ConditionalFormatRange>
	}
	export interface ConditionalFormatBuilder extends Struct<ConditionalFormatBuilder>{

			conditionalFormatId(conditionalFormatId:string):Ref<ConditionalFormatBuilder>
			conditionalFormatRule(conditionalFormatRule:Ref<ConditionalFormatRule>):Ref<ConditionalFormatBuilder>
			index(index:int):Ref<ConditionalFormatBuilder>
			ranges(ranges:Ref<ConditionalFormatRange>):Ref<ConditionalFormatBuilder>
			build():Ref<ConditionalFormat>
	}
	export interface ConditionalFormatRange extends Struct<ConditionalFormatRange>{

			sheetId:Ref<string>
			startRowIndex:Ref<int>
			endRowIndex:Ref<int>
			startColumnIndex:Ref<int>
			endColumnIndex:Ref<int>
	}
	export interface ConditionalFormatRangeBuilder extends Struct<ConditionalFormatRangeBuilder>{

			sheetId(sheetId:string):Ref<ConditionalFormatRangeBuilder>
			startRowIndex(startRowIndex:int):Ref<ConditionalFormatRangeBuilder>
			endRowIndex(endRowIndex:int):Ref<ConditionalFormatRangeBuilder>
			startColumnIndex(startColumnIndex:int):Ref<ConditionalFormatRangeBuilder>
			endColumnIndex(endColumnIndex:int):Ref<ConditionalFormatRangeBuilder>
			build():Ref<ConditionalFormatRange>
	}
	export interface ConditionalFormatRule extends Struct<ConditionalFormatRule>{

			booleanRule:Ref<BooleanRuleCondition>
			type:Ref<string>
	}
	export interface ConditionalFormatRuleBuilder extends Struct<ConditionalFormatRuleBuilder>{

			booleanRule(booleanRule:Ref<BooleanRuleCondition>):Ref<ConditionalFormatRuleBuilder>
			type(type_:string):Ref<ConditionalFormatRuleBuilder>
			build():Ref<ConditionalFormatRule>
	}
	export interface ConditionalFormatStyle extends Struct<ConditionalFormatStyle>{

			backgroundColor:Ref<string>
			foregroundColor:Ref<string>
			underline:Ref<bool>
			bold:Ref<bool>
			italic:Ref<bool>
			strikethrough:Ref<bool>
	}
	export interface ConditionalFormatStyleBuilder extends Struct<ConditionalFormatStyleBuilder>{

			backgroundColor(backgroundColor:string):Ref<ConditionalFormatStyleBuilder>
			foregroundColor(foregroundColor:string):Ref<ConditionalFormatStyleBuilder>
			underline(underline:bool):Ref<ConditionalFormatStyleBuilder>
			bold(bold:bool):Ref<ConditionalFormatStyleBuilder>
			italic(italic:bool):Ref<ConditionalFormatStyleBuilder>
			strikethrough(strikethrough:bool):Ref<ConditionalFormatStyleBuilder>
			build():Ref<ConditionalFormatStyle>
	}
	export interface CreateDataValidation extends Struct<CreateDataValidation>{

			range:Ref<string>
			rule:Ref<DataValidation>
	}
	export interface CreateDataValidationBuilder extends Struct<CreateDataValidationBuilder>{

			range(range_:string):Ref<CreateDataValidationBuilder>
			rule(rule:Ref<DataValidation>):Ref<CreateDataValidationBuilder>
			build():Ref<CreateDataValidation>
	}
	export interface CreateSheetFilter extends Struct<CreateSheetFilter>{

			range:Ref<string>
			col:Ref<string>
			condition:Ref<Condition>
	}
	export interface CreateSheetFilterBuilder extends Struct<CreateSheetFilterBuilder>{

			range(range_:string):Ref<CreateSheetFilterBuilder>
			col(col:string):Ref<CreateSheetFilterBuilder>
			condition(condition:Ref<Condition>):Ref<CreateSheetFilterBuilder>
			build():Ref<CreateSheetFilter>
	}
	export interface CreateSpreadsheetReq extends Struct<CreateSpreadsheetReq>{

			spreadsheet:Ref<Spreadsheet>
	}
	export interface CreateSpreadsheetReqBuilder extends Struct<CreateSpreadsheetReqBuilder>{

			spreadsheet(spreadsheet:Ref<Spreadsheet>):Ref<CreateSpreadsheetReqBuilder>
			build():Ref<CreateSpreadsheetReq>
	}
	export interface CreateSpreadsheetResp extends Struct<CreateSpreadsheetResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateSpreadsheetRespData>
			success():bool
	}
	export interface CreateSpreadsheetRespData extends Struct<CreateSpreadsheetRespData>{

			spreadsheet:Ref<Spreadsheet>
	}
	export interface CreateSpreadsheetSheetFilterReq extends Struct<CreateSpreadsheetSheetFilterReq>{

			createSheetFilter:Ref<CreateSheetFilter>
	}
	export interface CreateSpreadsheetSheetFilterReqBuilder extends Struct<CreateSpreadsheetSheetFilterReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<CreateSpreadsheetSheetFilterReqBuilder>
			sheetId(sheetId:string):Ref<CreateSpreadsheetSheetFilterReqBuilder>
			createSheetFilter(createSheetFilter:Ref<CreateSheetFilter>):Ref<CreateSpreadsheetSheetFilterReqBuilder>
			build():Ref<CreateSpreadsheetSheetFilterReq>
	}
	export interface CreateSpreadsheetSheetFilterResp extends Struct<CreateSpreadsheetSheetFilterResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface CreateSpreadsheetSheetFilterViewConditionReq extends Struct<CreateSpreadsheetSheetFilterViewConditionReq>{

			filterViewCondition:Ref<FilterViewCondition>
	}
	export interface CreateSpreadsheetSheetFilterViewConditionReqBuilder extends Struct<CreateSpreadsheetSheetFilterViewConditionReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<CreateSpreadsheetSheetFilterViewConditionReqBuilder>
			sheetId(sheetId:string):Ref<CreateSpreadsheetSheetFilterViewConditionReqBuilder>
			filterViewId(filterViewId:string):Ref<CreateSpreadsheetSheetFilterViewConditionReqBuilder>
			filterViewCondition(filterViewCondition:Ref<FilterViewCondition>):Ref<CreateSpreadsheetSheetFilterViewConditionReqBuilder>
			build():Ref<CreateSpreadsheetSheetFilterViewConditionReq>
	}
	export interface CreateSpreadsheetSheetFilterViewConditionResp extends Struct<CreateSpreadsheetSheetFilterViewConditionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateSpreadsheetSheetFilterViewConditionRespData>
			success():bool
	}
	export interface CreateSpreadsheetSheetFilterViewConditionRespData extends Struct<CreateSpreadsheetSheetFilterViewConditionRespData>{

			condition:Ref<FilterViewCondition>
	}
	export interface CreateSpreadsheetSheetFilterViewReq extends Struct<CreateSpreadsheetSheetFilterViewReq>{

			filterView:Ref<FilterView>
	}
	export interface CreateSpreadsheetSheetFilterViewReqBuilder extends Struct<CreateSpreadsheetSheetFilterViewReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<CreateSpreadsheetSheetFilterViewReqBuilder>
			sheetId(sheetId:string):Ref<CreateSpreadsheetSheetFilterViewReqBuilder>
			filterView(filterView:Ref<FilterView>):Ref<CreateSpreadsheetSheetFilterViewReqBuilder>
			build():Ref<CreateSpreadsheetSheetFilterViewReq>
	}
	export interface CreateSpreadsheetSheetFilterViewResp extends Struct<CreateSpreadsheetSheetFilterViewResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateSpreadsheetSheetFilterViewRespData>
			success():bool
	}
	export interface CreateSpreadsheetSheetFilterViewRespData extends Struct<CreateSpreadsheetSheetFilterViewRespData>{

			filterView:Ref<FilterView>
	}
	export interface CreateSpreadsheetSheetFloatImageReq extends Struct<CreateSpreadsheetSheetFloatImageReq>{

			floatImage:Ref<FloatImage>
	}
	export interface CreateSpreadsheetSheetFloatImageReqBuilder extends Struct<CreateSpreadsheetSheetFloatImageReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<CreateSpreadsheetSheetFloatImageReqBuilder>
			sheetId(sheetId:string):Ref<CreateSpreadsheetSheetFloatImageReqBuilder>
			floatImage(floatImage:Ref<FloatImage>):Ref<CreateSpreadsheetSheetFloatImageReqBuilder>
			build():Ref<CreateSpreadsheetSheetFloatImageReq>
	}
	export interface CreateSpreadsheetSheetFloatImageResp extends Struct<CreateSpreadsheetSheetFloatImageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateSpreadsheetSheetFloatImageRespData>
			success():bool
	}
	export interface CreateSpreadsheetSheetFloatImageRespData extends Struct<CreateSpreadsheetSheetFloatImageRespData>{

			floatImage:Ref<FloatImage>
	}
	export interface DataValidation extends Struct<DataValidation>{

			dataValidationId:Ref<int>
			dataValidationRule:Ref<DataValidationRule>
			strict:Ref<string>
			helpText:Ref<string>
	}
	export interface DataValidationBuilder extends Struct<DataValidationBuilder>{

			dataValidationId(dataValidationId:int):Ref<DataValidationBuilder>
			dataValidationRule(dataValidationRule:Ref<DataValidationRule>):Ref<DataValidationBuilder>
			strict(strict:string):Ref<DataValidationBuilder>
			helpText(helpText:string):Ref<DataValidationBuilder>
			build():Ref<DataValidation>
	}
	export interface DataValidationRule extends Struct<DataValidationRule>{

			type:Ref<string>
			singleOption:Ref<SingleOption>
			multipleOption:Ref<MultipleOption>
	}
	export interface DataValidationRuleBuilder extends Struct<DataValidationRuleBuilder>{

			type(type_:string):Ref<DataValidationRuleBuilder>
			singleOption(singleOption:Ref<SingleOption>):Ref<DataValidationRuleBuilder>
			multipleOption(multipleOption:Ref<MultipleOption>):Ref<DataValidationRuleBuilder>
			build():Ref<DataValidationRule>
	}
	export interface DataValidationValue extends Struct<DataValidationValue>{

			optionValue:Ref<string>
			optionColor:Ref<string>
	}
	export interface DataValidationValueBuilder extends Struct<DataValidationValueBuilder>{

			optionValue(optionValue:string):Ref<DataValidationValueBuilder>
			optionColor(optionColor:string):Ref<DataValidationValueBuilder>
			build():Ref<DataValidationValue>
	}
	export interface DateTime extends Struct<DateTime>{

			dateTime:Ref<string>
	}
	export interface DateTimeBuilder extends Struct<DateTimeBuilder>{

			dateTime(dateTime:string):Ref<DateTimeBuilder>
			build():Ref<DateTime>
	}
	export interface DeleteSpreadsheetSheetFilterReq extends Struct<DeleteSpreadsheetSheetFilterReq>{

	}
	export interface DeleteSpreadsheetSheetFilterReqBuilder extends Struct<DeleteSpreadsheetSheetFilterReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<DeleteSpreadsheetSheetFilterReqBuilder>
			sheetId(sheetId:string):Ref<DeleteSpreadsheetSheetFilterReqBuilder>
			build():Ref<DeleteSpreadsheetSheetFilterReq>
	}
	export interface DeleteSpreadsheetSheetFilterResp extends Struct<DeleteSpreadsheetSheetFilterResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteSpreadsheetSheetFilterViewConditionReq extends Struct<DeleteSpreadsheetSheetFilterViewConditionReq>{

	}
	export interface DeleteSpreadsheetSheetFilterViewConditionReqBuilder extends Struct<DeleteSpreadsheetSheetFilterViewConditionReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<DeleteSpreadsheetSheetFilterViewConditionReqBuilder>
			sheetId(sheetId:string):Ref<DeleteSpreadsheetSheetFilterViewConditionReqBuilder>
			filterViewId(filterViewId:string):Ref<DeleteSpreadsheetSheetFilterViewConditionReqBuilder>
			conditionId(conditionId:string):Ref<DeleteSpreadsheetSheetFilterViewConditionReqBuilder>
			build():Ref<DeleteSpreadsheetSheetFilterViewConditionReq>
	}
	export interface DeleteSpreadsheetSheetFilterViewConditionResp extends Struct<DeleteSpreadsheetSheetFilterViewConditionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteSpreadsheetSheetFilterViewReq extends Struct<DeleteSpreadsheetSheetFilterViewReq>{

	}
	export interface DeleteSpreadsheetSheetFilterViewReqBuilder extends Struct<DeleteSpreadsheetSheetFilterViewReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<DeleteSpreadsheetSheetFilterViewReqBuilder>
			sheetId(sheetId:string):Ref<DeleteSpreadsheetSheetFilterViewReqBuilder>
			filterViewId(filterViewId:string):Ref<DeleteSpreadsheetSheetFilterViewReqBuilder>
			build():Ref<DeleteSpreadsheetSheetFilterViewReq>
	}
	export interface DeleteSpreadsheetSheetFilterViewResp extends Struct<DeleteSpreadsheetSheetFilterViewResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteSpreadsheetSheetFloatImageReq extends Struct<DeleteSpreadsheetSheetFloatImageReq>{

	}
	export interface DeleteSpreadsheetSheetFloatImageReqBuilder extends Struct<DeleteSpreadsheetSheetFloatImageReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<DeleteSpreadsheetSheetFloatImageReqBuilder>
			sheetId(sheetId:string):Ref<DeleteSpreadsheetSheetFloatImageReqBuilder>
			floatImageId(floatImageId:string):Ref<DeleteSpreadsheetSheetFloatImageReqBuilder>
			build():Ref<DeleteSpreadsheetSheetFloatImageReq>
	}
	export interface DeleteSpreadsheetSheetFloatImageResp extends Struct<DeleteSpreadsheetSheetFloatImageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Dimension extends Struct<Dimension>{

			majorDimension:Ref<string>
			startIndex:Ref<int>
			endIndex:Ref<int>
	}
	export interface DimensionBuilder extends Struct<DimensionBuilder>{

			majorDimension(majorDimension:string):Ref<DimensionBuilder>
			startIndex(startIndex:int):Ref<DimensionBuilder>
			endIndex(endIndex:int):Ref<DimensionBuilder>
			build():Ref<Dimension>
	}
	export interface DimensionProperties extends Struct<DimensionProperties>{

			hidden:Ref<bool>
			pixelSize:Ref<int>
	}
	export interface DimensionPropertiesBuilder extends Struct<DimensionPropertiesBuilder>{

			hidden(hidden:bool):Ref<DimensionPropertiesBuilder>
			pixelSize(pixelSize:int):Ref<DimensionPropertiesBuilder>
			build():Ref<DimensionProperties>
	}
	export interface File extends Struct<File>{

			fileToken:Ref<string>
			name:Ref<string>
			segmentStyle:Ref<SegmentStyle>
	}
	export interface FileBuilder extends Struct<FileBuilder>{

			fileToken(fileToken:string):Ref<FileBuilder>
			name(name:string):Ref<FileBuilder>
			segmentStyle(segmentStyle:Ref<SegmentStyle>):Ref<FileBuilder>
			build():Ref<File>
	}
	export interface FilterInfo extends Struct<FilterInfo>{

			col:Ref<string>
			conditions:Ref<Condition>[]
	}
	export interface FilterInfoBuilder extends Struct<FilterInfoBuilder>{

			col(col:string):Ref<FilterInfoBuilder>
			conditions(conditions:Ref<Condition>[]):Ref<FilterInfoBuilder>
			build():Ref<FilterInfo>
	}
	export interface FilterView extends Struct<FilterView>{

			filterViewId:Ref<string>
			filterViewName:Ref<string>
			range:Ref<string>
	}
	export interface FilterViewBuilder extends Struct<FilterViewBuilder>{

			filterViewId(filterViewId:string):Ref<FilterViewBuilder>
			filterViewName(filterViewName:string):Ref<FilterViewBuilder>
			range(range_:string):Ref<FilterViewBuilder>
			build():Ref<FilterView>
	}
	export interface FilterViewCondition extends Struct<FilterViewCondition>{

			conditionId:Ref<string>
			filterType:Ref<string>
			compareType:Ref<string>
			expected:string[]
	}
	export interface FilterViewConditionBuilder extends Struct<FilterViewConditionBuilder>{

			conditionId(conditionId:string):Ref<FilterViewConditionBuilder>
			filterType(filterType:string):Ref<FilterViewConditionBuilder>
			compareType(compareType:string):Ref<FilterViewConditionBuilder>
			expected(expected:string[]):Ref<FilterViewConditionBuilder>
			build():Ref<FilterViewCondition>
	}
	export interface Find extends Struct<Find>{

			findCondition:Ref<FindCondition>
			find:Ref<string>
	}
	export interface FindBuilder extends Struct<FindBuilder>{

			findCondition(findCondition:Ref<FindCondition>):Ref<FindBuilder>
			find(find:string):Ref<FindBuilder>
			build():Ref<Find>
	}
	export interface FindCondition extends Struct<FindCondition>{

			range:Ref<string>
			matchCase:Ref<bool>
			matchEntireCell:Ref<bool>
			searchByRegex:Ref<bool>
			includeFormulas:Ref<bool>
	}
	export interface FindConditionBuilder extends Struct<FindConditionBuilder>{

			range(range_:string):Ref<FindConditionBuilder>
			matchCase(matchCase:bool):Ref<FindConditionBuilder>
			matchEntireCell(matchEntireCell:bool):Ref<FindConditionBuilder>
			searchByRegex(searchByRegex:bool):Ref<FindConditionBuilder>
			includeFormulas(includeFormulas:bool):Ref<FindConditionBuilder>
			build():Ref<FindCondition>
	}
	export interface FindReplaceResult extends Struct<FindReplaceResult>{

			matchedCells:string[]
			matchedFormulaCells:string[]
			rowsCount:Ref<int>
	}
	export interface FindReplaceResultBuilder extends Struct<FindReplaceResultBuilder>{

			matchedCells(matchedCells:string[]):Ref<FindReplaceResultBuilder>
			matchedFormulaCells(matchedFormulaCells:string[]):Ref<FindReplaceResultBuilder>
			rowsCount(rowsCount:int):Ref<FindReplaceResultBuilder>
			build():Ref<FindReplaceResult>
	}
	export interface FindSpreadsheetSheetReq extends Struct<FindSpreadsheetSheetReq>{

			find:Ref<Find>
	}
	export interface FindSpreadsheetSheetReqBuilder extends Struct<FindSpreadsheetSheetReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<FindSpreadsheetSheetReqBuilder>
			sheetId(sheetId:string):Ref<FindSpreadsheetSheetReqBuilder>
			find(find:Ref<Find>):Ref<FindSpreadsheetSheetReqBuilder>
			build():Ref<FindSpreadsheetSheetReq>
	}
	export interface FindSpreadsheetSheetResp extends Struct<FindSpreadsheetSheetResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<FindSpreadsheetSheetRespData>
			success():bool
	}
	export interface FindSpreadsheetSheetRespData extends Struct<FindSpreadsheetSheetRespData>{

			findResult:Ref<FindReplaceResult>
	}
	export interface FloatImage extends Struct<FloatImage>{

			floatImageId:Ref<string>
			floatImageToken:Ref<string>
			range:Ref<string>
			width:Ref<float64>
			height:Ref<float64>
			offsetX:Ref<float64>
			offsetY:Ref<float64>
	}
	export interface FloatImageBuilder extends Struct<FloatImageBuilder>{

			floatImageId(floatImageId:string):Ref<FloatImageBuilder>
			floatImageToken(floatImageToken:string):Ref<FloatImageBuilder>
			range(range_:string):Ref<FloatImageBuilder>
			width(width:float64):Ref<FloatImageBuilder>
			height(height:float64):Ref<FloatImageBuilder>
			offsetX(offsetX:float64):Ref<FloatImageBuilder>
			offsetY(offsetY:float64):Ref<FloatImageBuilder>
			build():Ref<FloatImage>
	}
	export interface Formula extends Struct<Formula>{

			formula:Ref<string>
			formulaValue:Ref<string>
			affectedRange:Ref<string>
	}
	export interface FormulaBuilder extends Struct<FormulaBuilder>{

			formula(formula:string):Ref<FormulaBuilder>
			formulaValue(formulaValue:string):Ref<FormulaBuilder>
			affectedRange(affectedRange:string):Ref<FormulaBuilder>
			build():Ref<Formula>
	}
	export interface GetSpreadsheet extends Struct<GetSpreadsheet>{

			title:Ref<string>
			ownerId:Ref<string>
			token:Ref<string>
			url:Ref<string>
	}
	export interface GetSpreadsheetBuilder extends Struct<GetSpreadsheetBuilder>{

			title(title:string):Ref<GetSpreadsheetBuilder>
			ownerId(ownerId:string):Ref<GetSpreadsheetBuilder>
			token(token:string):Ref<GetSpreadsheetBuilder>
			url(url:string):Ref<GetSpreadsheetBuilder>
			build():Ref<GetSpreadsheet>
	}
	export interface GetSpreadsheetReq extends Struct<GetSpreadsheetReq>{

	}
	export interface GetSpreadsheetReqBuilder extends Struct<GetSpreadsheetReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<GetSpreadsheetReqBuilder>
			userIdType(userIdType:string):Ref<GetSpreadsheetReqBuilder>
			build():Ref<GetSpreadsheetReq>
	}
	export interface GetSpreadsheetResp extends Struct<GetSpreadsheetResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSpreadsheetRespData>
			success():bool
	}
	export interface GetSpreadsheetRespData extends Struct<GetSpreadsheetRespData>{

			spreadsheet:Ref<GetSpreadsheet>
	}
	export interface GetSpreadsheetSheetFilterReq extends Struct<GetSpreadsheetSheetFilterReq>{

	}
	export interface GetSpreadsheetSheetFilterReqBuilder extends Struct<GetSpreadsheetSheetFilterReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<GetSpreadsheetSheetFilterReqBuilder>
			sheetId(sheetId:string):Ref<GetSpreadsheetSheetFilterReqBuilder>
			build():Ref<GetSpreadsheetSheetFilterReq>
	}
	export interface GetSpreadsheetSheetFilterResp extends Struct<GetSpreadsheetSheetFilterResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSpreadsheetSheetFilterRespData>
			success():bool
	}
	export interface GetSpreadsheetSheetFilterRespData extends Struct<GetSpreadsheetSheetFilterRespData>{

			sheetFilterInfo:Ref<SheetFilterInfo>
	}
	export interface GetSpreadsheetSheetFilterViewConditionReq extends Struct<GetSpreadsheetSheetFilterViewConditionReq>{

	}
	export interface GetSpreadsheetSheetFilterViewConditionReqBuilder extends Struct<GetSpreadsheetSheetFilterViewConditionReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<GetSpreadsheetSheetFilterViewConditionReqBuilder>
			sheetId(sheetId:string):Ref<GetSpreadsheetSheetFilterViewConditionReqBuilder>
			filterViewId(filterViewId:string):Ref<GetSpreadsheetSheetFilterViewConditionReqBuilder>
			conditionId(conditionId:string):Ref<GetSpreadsheetSheetFilterViewConditionReqBuilder>
			build():Ref<GetSpreadsheetSheetFilterViewConditionReq>
	}
	export interface GetSpreadsheetSheetFilterViewConditionResp extends Struct<GetSpreadsheetSheetFilterViewConditionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSpreadsheetSheetFilterViewConditionRespData>
			success():bool
	}
	export interface GetSpreadsheetSheetFilterViewConditionRespData extends Struct<GetSpreadsheetSheetFilterViewConditionRespData>{

			condition:Ref<FilterViewCondition>
	}
	export interface GetSpreadsheetSheetFilterViewReq extends Struct<GetSpreadsheetSheetFilterViewReq>{

	}
	export interface GetSpreadsheetSheetFilterViewReqBuilder extends Struct<GetSpreadsheetSheetFilterViewReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<GetSpreadsheetSheetFilterViewReqBuilder>
			sheetId(sheetId:string):Ref<GetSpreadsheetSheetFilterViewReqBuilder>
			filterViewId(filterViewId:string):Ref<GetSpreadsheetSheetFilterViewReqBuilder>
			build():Ref<GetSpreadsheetSheetFilterViewReq>
	}
	export interface GetSpreadsheetSheetFilterViewResp extends Struct<GetSpreadsheetSheetFilterViewResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSpreadsheetSheetFilterViewRespData>
			success():bool
	}
	export interface GetSpreadsheetSheetFilterViewRespData extends Struct<GetSpreadsheetSheetFilterViewRespData>{

			filterView:Ref<FilterView>
	}
	export interface GetSpreadsheetSheetFloatImageReq extends Struct<GetSpreadsheetSheetFloatImageReq>{

	}
	export interface GetSpreadsheetSheetFloatImageReqBuilder extends Struct<GetSpreadsheetSheetFloatImageReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<GetSpreadsheetSheetFloatImageReqBuilder>
			sheetId(sheetId:string):Ref<GetSpreadsheetSheetFloatImageReqBuilder>
			floatImageId(floatImageId:string):Ref<GetSpreadsheetSheetFloatImageReqBuilder>
			build():Ref<GetSpreadsheetSheetFloatImageReq>
	}
	export interface GetSpreadsheetSheetFloatImageResp extends Struct<GetSpreadsheetSheetFloatImageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSpreadsheetSheetFloatImageRespData>
			success():bool
	}
	export interface GetSpreadsheetSheetFloatImageRespData extends Struct<GetSpreadsheetSheetFloatImageRespData>{

			floatImage:Ref<FloatImage>
	}
	export interface GetSpreadsheetSheetReq extends Struct<GetSpreadsheetSheetReq>{

	}
	export interface GetSpreadsheetSheetReqBuilder extends Struct<GetSpreadsheetSheetReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<GetSpreadsheetSheetReqBuilder>
			sheetId(sheetId:string):Ref<GetSpreadsheetSheetReqBuilder>
			build():Ref<GetSpreadsheetSheetReq>
	}
	export interface GetSpreadsheetSheetResp extends Struct<GetSpreadsheetSheetResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSpreadsheetSheetRespData>
			success():bool
	}
	export interface GetSpreadsheetSheetRespData extends Struct<GetSpreadsheetSheetRespData>{

			sheet:Ref<Sheet>
	}
	export interface GridProperties extends Struct<GridProperties>{

			frozenRowCount:Ref<int>
			frozenColumnCount:Ref<int>
			rowCount:Ref<int>
			columnCount:Ref<int>
	}
	export interface GridPropertiesBuilder extends Struct<GridPropertiesBuilder>{

			frozenRowCount(frozenRowCount:int):Ref<GridPropertiesBuilder>
			frozenColumnCount(frozenColumnCount:int):Ref<GridPropertiesBuilder>
			rowCount(rowCount:int):Ref<GridPropertiesBuilder>
			columnCount(columnCount:int):Ref<GridPropertiesBuilder>
			build():Ref<GridProperties>
	}
	export interface Image extends Struct<Image>{

			imageToken:Ref<string>
	}
	export interface ImageBuilder extends Struct<ImageBuilder>{

			imageToken(imageToken:string):Ref<ImageBuilder>
			build():Ref<Image>
	}
	export interface InsertDimension extends Struct<InsertDimension>{

			dimensionRange:Ref<Dimension>
			inheritFrom:Ref<string>
	}
	export interface InsertDimensionBuilder extends Struct<InsertDimensionBuilder>{

			dimensionRange(dimensionRange:Ref<Dimension>):Ref<InsertDimensionBuilder>
			inheritFrom(inheritFrom:string):Ref<InsertDimensionBuilder>
			build():Ref<InsertDimension>
	}
	export interface LeftBorderStyle extends Struct<LeftBorderStyle>{

			style:Ref<string>
			color:Ref<string>
	}
	export interface LeftBorderStyleBuilder extends Struct<LeftBorderStyleBuilder>{

			style(style:string):Ref<LeftBorderStyleBuilder>
			color(color:string):Ref<LeftBorderStyleBuilder>
			build():Ref<LeftBorderStyle>
	}
	export interface Link extends Struct<Link>{

			text:Ref<string>
			link:Ref<string>
			segmentStyles:Ref<SegmentStyle>[]
	}
	export interface LinkBuilder extends Struct<LinkBuilder>{

			text(text:string):Ref<LinkBuilder>
			link(link:string):Ref<LinkBuilder>
			segmentStyles(segmentStyles:Ref<SegmentStyle>[]):Ref<LinkBuilder>
			build():Ref<Link>
	}
	export interface MentionDocument extends Struct<MentionDocument>{

			title:Ref<string>
			objectType:Ref<string>
			token:Ref<string>
			segmentStyle:Ref<SegmentStyle>
	}
	export interface MentionDocumentBuilder extends Struct<MentionDocumentBuilder>{

			title(title:string):Ref<MentionDocumentBuilder>
			objectType(objectType:string):Ref<MentionDocumentBuilder>
			token(token:string):Ref<MentionDocumentBuilder>
			segmentStyle(segmentStyle:Ref<SegmentStyle>):Ref<MentionDocumentBuilder>
			build():Ref<MentionDocument>
	}
	export interface MentionUser extends Struct<MentionUser>{

			name:Ref<string>
			userId:Ref<string>
			notify:Ref<bool>
			segmentStyle:Ref<SegmentStyle>
	}
	export interface MentionUserBuilder extends Struct<MentionUserBuilder>{

			name(name:string):Ref<MentionUserBuilder>
			userId(userId:string):Ref<MentionUserBuilder>
			notify(notify:bool):Ref<MentionUserBuilder>
			segmentStyle(segmentStyle:Ref<SegmentStyle>):Ref<MentionUserBuilder>
			build():Ref<MentionUser>
	}
	export interface MergeCell extends Struct<MergeCell>{

			range:Ref<MergeRange>
			mergeType:Ref<string>
	}
	export interface MergeCellBuilder extends Struct<MergeCellBuilder>{

			range(range_:Ref<MergeRange>):Ref<MergeCellBuilder>
			mergeType(mergeType:string):Ref<MergeCellBuilder>
			build():Ref<MergeCell>
	}
	export interface MergeRange extends Struct<MergeRange>{

			startRowIndex:Ref<int>
			endRowIndex:Ref<int>
			startColumnIndex:Ref<int>
			endColumnIndex:Ref<int>
	}
	export interface MergeRangeBuilder extends Struct<MergeRangeBuilder>{

			startRowIndex(startRowIndex:int):Ref<MergeRangeBuilder>
			endRowIndex(endRowIndex:int):Ref<MergeRangeBuilder>
			startColumnIndex(startColumnIndex:int):Ref<MergeRangeBuilder>
			endColumnIndex(endColumnIndex:int):Ref<MergeRangeBuilder>
			build():Ref<MergeRange>
	}
	export interface MoveDimension extends Struct<MoveDimension>{

			source:Ref<Dimension>
			destinationIndex:Ref<int>
	}
	export interface MoveDimensionBuilder extends Struct<MoveDimensionBuilder>{

			source(source:Ref<Dimension>):Ref<MoveDimensionBuilder>
			destinationIndex(destinationIndex:int):Ref<MoveDimensionBuilder>
			build():Ref<MoveDimension>
	}
	export interface MoveDimensionSpreadsheetSheetReq extends Struct<MoveDimensionSpreadsheetSheetReq>{

			moveDimension:Ref<MoveDimension>
	}
	export interface MoveDimensionSpreadsheetSheetReqBuilder extends Struct<MoveDimensionSpreadsheetSheetReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<MoveDimensionSpreadsheetSheetReqBuilder>
			sheetId(sheetId:string):Ref<MoveDimensionSpreadsheetSheetReqBuilder>
			moveDimension(moveDimension:Ref<MoveDimension>):Ref<MoveDimensionSpreadsheetSheetReqBuilder>
			build():Ref<MoveDimensionSpreadsheetSheetReq>
	}
	export interface MoveDimensionSpreadsheetSheetResp extends Struct<MoveDimensionSpreadsheetSheetResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface MultiRange extends Struct<MultiRange>{

			ranges:string[]
	}
	export interface MultiRangeBuilder extends Struct<MultiRangeBuilder>{

			ranges(ranges:string[]):Ref<MultiRangeBuilder>
			build():Ref<MultiRange>
	}
	export interface MultipleOption extends Struct<MultipleOption>{

			type:Ref<string>
			range:Ref<string>
			dataValidationValues:Ref<DataValidationValue>[]
			properties:Ref<OptionProperties>
	}
	export interface MultipleOptionBuilder extends Struct<MultipleOptionBuilder>{

			type(type_:string):Ref<MultipleOptionBuilder>
			range(range_:string):Ref<MultipleOptionBuilder>
			dataValidationValues(dataValidationValues:Ref<DataValidationValue>[]):Ref<MultipleOptionBuilder>
			properties(properties:Ref<OptionProperties>):Ref<MultipleOptionBuilder>
			build():Ref<MultipleOption>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V3>

	export function newAddSheetBuilder():Ref<AddSheetBuilder>

	export function newAlignmentStyleBuilder():Ref<AlignmentStyleBuilder>

	export function newAppendDimensionBuilder():Ref<AppendDimensionBuilder>

	export function newBitablePropertiesBuilder():Ref<BitablePropertiesBuilder>

	export function newBoolRuleValueBuilder():Ref<BoolRuleValueBuilder>

	export function newBooleanRuleConditionBuilder():Ref<BooleanRuleConditionBuilder>

	export function newBorderStyleBuilder():Ref<BorderStyleBuilder>

	export function newBottomBorderStyleBuilder():Ref<BottomBorderStyleBuilder>

	export function newCellFontStyleBuilder():Ref<CellFontStyleBuilder>

	export function newCellStyleBuilder():Ref<CellStyleBuilder>

	export function newCellValueBuilder():Ref<CellValueBuilder>

	export function newCheckboxBuilder():Ref<CheckboxBuilder>

	export function newClearDataValidationBuilder():Ref<ClearDataValidationBuilder>

	export function newClearStyleMultiRangeBuilder():Ref<ClearStyleMultiRangeBuilder>

	export function newClearStyleRangesBuilder():Ref<ClearStyleRangesBuilder>

	export function newConditionBuilder():Ref<ConditionBuilder>

	export function newConditionalFormatBuilder():Ref<ConditionalFormatBuilder>

	export function newConditionalFormatRangeBuilder():Ref<ConditionalFormatRangeBuilder>

	export function newConditionalFormatRuleBuilder():Ref<ConditionalFormatRuleBuilder>

	export function newConditionalFormatStyleBuilder():Ref<ConditionalFormatStyleBuilder>

	export function newCreateDataValidationBuilder():Ref<CreateDataValidationBuilder>

	export function newCreateSheetFilterBuilder():Ref<CreateSheetFilterBuilder>

	export function newCreateSpreadsheetReqBuilder():Ref<CreateSpreadsheetReqBuilder>

	export function newCreateSpreadsheetSheetFilterReqBuilder():Ref<CreateSpreadsheetSheetFilterReqBuilder>

	export function newCreateSpreadsheetSheetFilterViewConditionReqBuilder():Ref<CreateSpreadsheetSheetFilterViewConditionReqBuilder>

	export function newCreateSpreadsheetSheetFilterViewReqBuilder():Ref<CreateSpreadsheetSheetFilterViewReqBuilder>

	export function newCreateSpreadsheetSheetFloatImageReqBuilder():Ref<CreateSpreadsheetSheetFloatImageReqBuilder>

	export function newDataValidationBuilder():Ref<DataValidationBuilder>

	export function newDataValidationRuleBuilder():Ref<DataValidationRuleBuilder>

	export function newDataValidationValueBuilder():Ref<DataValidationValueBuilder>

	export function newDateTimeBuilder():Ref<DateTimeBuilder>

	export function newDeleteSpreadsheetSheetFilterReqBuilder():Ref<DeleteSpreadsheetSheetFilterReqBuilder>

	export function newDeleteSpreadsheetSheetFilterViewConditionReqBuilder():Ref<DeleteSpreadsheetSheetFilterViewConditionReqBuilder>

	export function newDeleteSpreadsheetSheetFilterViewReqBuilder():Ref<DeleteSpreadsheetSheetFilterViewReqBuilder>

	export function newDeleteSpreadsheetSheetFloatImageReqBuilder():Ref<DeleteSpreadsheetSheetFloatImageReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDimensionBuilder():Ref<DimensionBuilder>

	export function newDimensionPropertiesBuilder():Ref<DimensionPropertiesBuilder>

	export function newFileBuilder():Ref<FileBuilder>

	export function newFilterInfoBuilder():Ref<FilterInfoBuilder>

	export function newFilterViewBuilder():Ref<FilterViewBuilder>

	export function newFilterViewConditionBuilder():Ref<FilterViewConditionBuilder>

	export function newFindBuilder():Ref<FindBuilder>

	export function newFindConditionBuilder():Ref<FindConditionBuilder>

	export function newFindReplaceResultBuilder():Ref<FindReplaceResultBuilder>

	export function newFindSpreadsheetSheetReqBuilder():Ref<FindSpreadsheetSheetReqBuilder>

	export function newFloatImageBuilder():Ref<FloatImageBuilder>

	export function newFormulaBuilder():Ref<FormulaBuilder>

	export function newGetSpreadsheetBuilder():Ref<GetSpreadsheetBuilder>

	export function newGetSpreadsheetReqBuilder():Ref<GetSpreadsheetReqBuilder>

	export function newGetSpreadsheetSheetFilterReqBuilder():Ref<GetSpreadsheetSheetFilterReqBuilder>

	export function newGetSpreadsheetSheetFilterViewConditionReqBuilder():Ref<GetSpreadsheetSheetFilterViewConditionReqBuilder>

	export function newGetSpreadsheetSheetFilterViewReqBuilder():Ref<GetSpreadsheetSheetFilterViewReqBuilder>

	export function newGetSpreadsheetSheetFloatImageReqBuilder():Ref<GetSpreadsheetSheetFloatImageReqBuilder>

	export function newGetSpreadsheetSheetReqBuilder():Ref<GetSpreadsheetSheetReqBuilder>

	export function newGridPropertiesBuilder():Ref<GridPropertiesBuilder>

	export function newImageBuilder():Ref<ImageBuilder>

	export function newInsertDimensionBuilder():Ref<InsertDimensionBuilder>

	export function newLeftBorderStyleBuilder():Ref<LeftBorderStyleBuilder>

	export function newLinkBuilder():Ref<LinkBuilder>

	export function newMentionDocumentBuilder():Ref<MentionDocumentBuilder>

	export function newMentionUserBuilder():Ref<MentionUserBuilder>

	export function newMergeCellBuilder():Ref<MergeCellBuilder>

	export function newMergeRangeBuilder():Ref<MergeRangeBuilder>

	export function newMoveDimensionBuilder():Ref<MoveDimensionBuilder>

	export function newMoveDimensionSpreadsheetSheetReqBuilder():Ref<MoveDimensionSpreadsheetSheetReqBuilder>

	export function newMultiRangeBuilder():Ref<MultiRangeBuilder>

	export function newMultipleOptionBuilder():Ref<MultipleOptionBuilder>

	export function newOptionPropertiesBuilder():Ref<OptionPropertiesBuilder>

	export function newPatchConditionalFormatBuilder():Ref<PatchConditionalFormatBuilder>

	export function newPatchDataValidationBuilder():Ref<PatchDataValidationBuilder>

	export function newPatchProtectedRangeBuilder():Ref<PatchProtectedRangeBuilder>

	export function newPatchProtectedRangeEditorsBuilder():Ref<PatchProtectedRangeEditorsBuilder>

	export function newPatchSpreadsheetReqBuilder():Ref<PatchSpreadsheetReqBuilder>

	export function newPatchSpreadsheetSheetFilterViewReqBuilder():Ref<PatchSpreadsheetSheetFilterViewReqBuilder>

	export function newPatchSpreadsheetSheetFloatImageReqBuilder():Ref<PatchSpreadsheetSheetFloatImageReqBuilder>

	export function newPlainTextValueRangeBuilder():Ref<PlainTextValueRangeBuilder>

	export function newProtectedColumnsBuilder():Ref<ProtectedColumnsBuilder>

	export function newProtectedRangeBuilder():Ref<ProtectedRangeBuilder>

	export function newProtectedRangeEditorsBuilder():Ref<ProtectedRangeEditorsBuilder>

	export function newProtectedRowsBuilder():Ref<ProtectedRowsBuilder>

	export function newProtectedSheetBuilder():Ref<ProtectedSheetBuilder>

	export function newQuerySpreadsheetSheetFilterViewConditionReqBuilder():Ref<QuerySpreadsheetSheetFilterViewConditionReqBuilder>

	export function newQuerySpreadsheetSheetFilterViewReqBuilder():Ref<QuerySpreadsheetSheetFilterViewReqBuilder>

	export function newQuerySpreadsheetSheetFloatImageReqBuilder():Ref<QuerySpreadsheetSheetFloatImageReqBuilder>

	export function newQuerySpreadsheetSheetReqBuilder():Ref<QuerySpreadsheetSheetReqBuilder>

	export function newReminderBuilder():Ref<ReminderBuilder>

	export function newReplaceBuilder():Ref<ReplaceBuilder>

	export function newReplaceSpreadsheetSheetReqBuilder():Ref<ReplaceSpreadsheetSheetReqBuilder>

	export function newRichTextValueRangeBuilder():Ref<RichTextValueRangeBuilder>

	export function newRichValueBuilder():Ref<RichValueBuilder>

	export function newRightBorderStyleBuilder():Ref<RightBorderStyleBuilder>

	export function newSegmentStyleBuilder():Ref<SegmentStyleBuilder>

	export function newSegmentStyleStyleBuilder():Ref<SegmentStyleStyleBuilder>

	export function newSheetBuilder():Ref<SheetBuilder>

	export function newSheetFilterInfoBuilder():Ref<SheetFilterInfoBuilder>

	export function newSheetPropertiesBuilder():Ref<SheetPropertiesBuilder>

	export function newSingleOptionBuilder():Ref<SingleOptionBuilder>

	export function newSpreadsheetBuilder():Ref<SpreadsheetBuilder>

	export function newStyleBuilder():Ref<StyleBuilder>

	export function newStyleRangesBuilder():Ref<StyleRangesBuilder>

	export function newTextBuilder():Ref<TextBuilder>

	export function newTopBorderStyleBuilder():Ref<TopBorderStyleBuilder>

	export function newUpdateDimensionPropertiesBuilder():Ref<UpdateDimensionPropertiesBuilder>

	export function newUpdateGridPropertiesBuilder():Ref<UpdateGridPropertiesBuilder>

	export function newUpdateSheetFilterBuilder():Ref<UpdateSheetFilterBuilder>

	export function newUpdateSpreadsheetPropertiesBuilder():Ref<UpdateSpreadsheetPropertiesBuilder>

	export function newUpdateSpreadsheetSheetFilterReqBuilder():Ref<UpdateSpreadsheetSheetFilterReqBuilder>

	export function newUpdateSpreadsheetSheetFilterViewConditionReqBuilder():Ref<UpdateSpreadsheetSheetFilterViewConditionReqBuilder>

	export function newValueBuilder():Ref<ValueBuilder>

	export function newValueElementBuilder():Ref<ValueElementBuilder>

	export function newValueElementSingleOptionBuilder():Ref<ValueElementSingleOptionBuilder>

	export interface OptionProperties extends Struct<OptionProperties>{

			showDropdownIcon:Ref<bool>
	}
	export interface OptionPropertiesBuilder extends Struct<OptionPropertiesBuilder>{

			showDropdownIcon(showDropdownIcon:bool):Ref<OptionPropertiesBuilder>
			build():Ref<OptionProperties>
	}
	export interface PatchConditionalFormat extends Struct<PatchConditionalFormat>{

			ranges:Ref<ConditionalFormatRange>[]
			conditionalFormatRule:Ref<ConditionalFormatRule>
			index:Ref<int>
	}
	export interface PatchConditionalFormatBuilder extends Struct<PatchConditionalFormatBuilder>{

			ranges(ranges:Ref<ConditionalFormatRange>[]):Ref<PatchConditionalFormatBuilder>
			conditionalFormatRule(conditionalFormatRule:Ref<ConditionalFormatRule>):Ref<PatchConditionalFormatBuilder>
			index(index:int):Ref<PatchConditionalFormatBuilder>
			build():Ref<PatchConditionalFormat>
	}
	export interface PatchDataValidation extends Struct<PatchDataValidation>{

			dataValidationRule:Ref<DataValidationRule>
			strict:Ref<bool>
			helpText:Ref<string>
	}
	export interface PatchDataValidationBuilder extends Struct<PatchDataValidationBuilder>{

			dataValidationRule(dataValidationRule:Ref<DataValidationRule>):Ref<PatchDataValidationBuilder>
			strict(strict:bool):Ref<PatchDataValidationBuilder>
			helpText(helpText:string):Ref<PatchDataValidationBuilder>
			build():Ref<PatchDataValidation>
	}
	export interface PatchProtectedRange extends Struct<PatchProtectedRange>{

			description:Ref<string>
			protectedRows:Ref<ProtectedRows>
			protectedColumns:Ref<ProtectedColumns>
	}
	export interface PatchProtectedRangeBuilder extends Struct<PatchProtectedRangeBuilder>{

			description(description:string):Ref<PatchProtectedRangeBuilder>
			protectedRows(protectedRows:Ref<ProtectedRows>):Ref<PatchProtectedRangeBuilder>
			protectedColumns(protectedColumns:Ref<ProtectedColumns>):Ref<PatchProtectedRangeBuilder>
			build():Ref<PatchProtectedRange>
	}
	export interface PatchProtectedRangeEditors extends Struct<PatchProtectedRangeEditors>{

			type:Ref<string>
			addEditors:Ref<ProtectedRangeEditors>
			removeEditors:Ref<ProtectedRangeEditors>
	}
	export interface PatchProtectedRangeEditorsBuilder extends Struct<PatchProtectedRangeEditorsBuilder>{

			type(type_:string):Ref<PatchProtectedRangeEditorsBuilder>
			addEditors(addEditors:Ref<ProtectedRangeEditors>):Ref<PatchProtectedRangeEditorsBuilder>
			removeEditors(removeEditors:Ref<ProtectedRangeEditors>):Ref<PatchProtectedRangeEditorsBuilder>
			build():Ref<PatchProtectedRangeEditors>
	}
	export interface PatchSpreadsheetReq extends Struct<PatchSpreadsheetReq>{

			updateSpreadsheetProperties:Ref<UpdateSpreadsheetProperties>
	}
	export interface PatchSpreadsheetReqBuilder extends Struct<PatchSpreadsheetReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<PatchSpreadsheetReqBuilder>
			updateSpreadsheetProperties(updateSpreadsheetProperties:Ref<UpdateSpreadsheetProperties>):Ref<PatchSpreadsheetReqBuilder>
			build():Ref<PatchSpreadsheetReq>
	}
	export interface PatchSpreadsheetResp extends Struct<PatchSpreadsheetResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface PatchSpreadsheetSheetFilterViewReq extends Struct<PatchSpreadsheetSheetFilterViewReq>{

			filterView:Ref<FilterView>
	}
	export interface PatchSpreadsheetSheetFilterViewReqBuilder extends Struct<PatchSpreadsheetSheetFilterViewReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<PatchSpreadsheetSheetFilterViewReqBuilder>
			sheetId(sheetId:string):Ref<PatchSpreadsheetSheetFilterViewReqBuilder>
			filterViewId(filterViewId:string):Ref<PatchSpreadsheetSheetFilterViewReqBuilder>
			filterView(filterView:Ref<FilterView>):Ref<PatchSpreadsheetSheetFilterViewReqBuilder>
			build():Ref<PatchSpreadsheetSheetFilterViewReq>
	}
	export interface PatchSpreadsheetSheetFilterViewResp extends Struct<PatchSpreadsheetSheetFilterViewResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchSpreadsheetSheetFilterViewRespData>
			success():bool
	}
	export interface PatchSpreadsheetSheetFilterViewRespData extends Struct<PatchSpreadsheetSheetFilterViewRespData>{

			filterView:Ref<FilterView>
	}
	export interface PatchSpreadsheetSheetFloatImageReq extends Struct<PatchSpreadsheetSheetFloatImageReq>{

			floatImage:Ref<FloatImage>
	}
	export interface PatchSpreadsheetSheetFloatImageReqBuilder extends Struct<PatchSpreadsheetSheetFloatImageReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<PatchSpreadsheetSheetFloatImageReqBuilder>
			sheetId(sheetId:string):Ref<PatchSpreadsheetSheetFloatImageReqBuilder>
			floatImageId(floatImageId:string):Ref<PatchSpreadsheetSheetFloatImageReqBuilder>
			floatImage(floatImage:Ref<FloatImage>):Ref<PatchSpreadsheetSheetFloatImageReqBuilder>
			build():Ref<PatchSpreadsheetSheetFloatImageReq>
	}
	export interface PatchSpreadsheetSheetFloatImageResp extends Struct<PatchSpreadsheetSheetFloatImageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchSpreadsheetSheetFloatImageRespData>
			success():bool
	}
	export interface PatchSpreadsheetSheetFloatImageRespData extends Struct<PatchSpreadsheetSheetFloatImageRespData>{

			floatImage:Ref<FloatImage>
	}
	export interface PlainTextValueRange extends Struct<PlainTextValueRange>{

			range:Ref<string>
			values:string[][]
	}
	export interface PlainTextValueRangeBuilder extends Struct<PlainTextValueRangeBuilder>{

			range(range_:string):Ref<PlainTextValueRangeBuilder>
			values(values:string[][]):Ref<PlainTextValueRangeBuilder>
			build():Ref<PlainTextValueRange>
	}
	export interface ProtectedColumns extends Struct<ProtectedColumns>{

			sheetId:Ref<string>
			startIndex:Ref<int>
			endIndex:Ref<int>
	}
	export interface ProtectedColumnsBuilder extends Struct<ProtectedColumnsBuilder>{

			sheetId(sheetId:string):Ref<ProtectedColumnsBuilder>
			startIndex(startIndex:int):Ref<ProtectedColumnsBuilder>
			endIndex(endIndex:int):Ref<ProtectedColumnsBuilder>
			build():Ref<ProtectedColumns>
	}
	export interface ProtectedRange extends Struct<ProtectedRange>{

			protectedId:Ref<string>
			description:Ref<string>
			protectedDimension:Ref<string>
			protectedRows:Ref<ProtectedRows>
			protectedColumns:Ref<ProtectedColumns>
			protectedSheet:Ref<ProtectedSheet>
			editors:Ref<ProtectedRangeEditors>
	}
	export interface ProtectedRangeBuilder extends Struct<ProtectedRangeBuilder>{

			protectedId(protectedId:string):Ref<ProtectedRangeBuilder>
			description(description:string):Ref<ProtectedRangeBuilder>
			protectedDimension(protectedDimension:string):Ref<ProtectedRangeBuilder>
			protectedRows(protectedRows:Ref<ProtectedRows>):Ref<ProtectedRangeBuilder>
			protectedColumns(protectedColumns:Ref<ProtectedColumns>):Ref<ProtectedRangeBuilder>
			protectedSheet(protectedSheet:Ref<ProtectedSheet>):Ref<ProtectedRangeBuilder>
			editors(editors:Ref<ProtectedRangeEditors>):Ref<ProtectedRangeBuilder>
			build():Ref<ProtectedRange>
	}
	export interface ProtectedRangeEditors extends Struct<ProtectedRangeEditors>{

			users:string[]
			departments:string[]
			chats:string[]
	}
	export interface ProtectedRangeEditorsBuilder extends Struct<ProtectedRangeEditorsBuilder>{

			users(users:string[]):Ref<ProtectedRangeEditorsBuilder>
			departments(departments:string[]):Ref<ProtectedRangeEditorsBuilder>
			chats(chats:string[]):Ref<ProtectedRangeEditorsBuilder>
			build():Ref<ProtectedRangeEditors>
	}
	export interface ProtectedRows extends Struct<ProtectedRows>{

			sheetId:Ref<string>
			startIndex:Ref<int>
			endIndex:Ref<int>
	}
	export interface ProtectedRowsBuilder extends Struct<ProtectedRowsBuilder>{

			sheetId(sheetId:string):Ref<ProtectedRowsBuilder>
			startIndex(startIndex:int):Ref<ProtectedRowsBuilder>
			endIndex(endIndex:int):Ref<ProtectedRowsBuilder>
			build():Ref<ProtectedRows>
	}
	export interface ProtectedSheet extends Struct<ProtectedSheet>{

			sheetId:Ref<string>
	}
	export interface ProtectedSheetBuilder extends Struct<ProtectedSheetBuilder>{

			sheetId(sheetId:string):Ref<ProtectedSheetBuilder>
			build():Ref<ProtectedSheet>
	}
	export interface QuerySpreadsheetSheetFilterViewConditionReq extends Struct<QuerySpreadsheetSheetFilterViewConditionReq>{

	}
	export interface QuerySpreadsheetSheetFilterViewConditionReqBuilder extends Struct<QuerySpreadsheetSheetFilterViewConditionReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<QuerySpreadsheetSheetFilterViewConditionReqBuilder>
			sheetId(sheetId:string):Ref<QuerySpreadsheetSheetFilterViewConditionReqBuilder>
			filterViewId(filterViewId:string):Ref<QuerySpreadsheetSheetFilterViewConditionReqBuilder>
			build():Ref<QuerySpreadsheetSheetFilterViewConditionReq>
	}
	export interface QuerySpreadsheetSheetFilterViewConditionResp extends Struct<QuerySpreadsheetSheetFilterViewConditionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QuerySpreadsheetSheetFilterViewConditionRespData>
			success():bool
	}
	export interface QuerySpreadsheetSheetFilterViewConditionRespData extends Struct<QuerySpreadsheetSheetFilterViewConditionRespData>{

			items:Ref<FilterViewCondition>[]
	}
	export interface QuerySpreadsheetSheetFilterViewReq extends Struct<QuerySpreadsheetSheetFilterViewReq>{

	}
	export interface QuerySpreadsheetSheetFilterViewReqBuilder extends Struct<QuerySpreadsheetSheetFilterViewReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<QuerySpreadsheetSheetFilterViewReqBuilder>
			sheetId(sheetId:string):Ref<QuerySpreadsheetSheetFilterViewReqBuilder>
			build():Ref<QuerySpreadsheetSheetFilterViewReq>
	}
	export interface QuerySpreadsheetSheetFilterViewResp extends Struct<QuerySpreadsheetSheetFilterViewResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QuerySpreadsheetSheetFilterViewRespData>
			success():bool
	}
	export interface QuerySpreadsheetSheetFilterViewRespData extends Struct<QuerySpreadsheetSheetFilterViewRespData>{

			items:Ref<FilterView>[]
	}
	export interface QuerySpreadsheetSheetFloatImageReq extends Struct<QuerySpreadsheetSheetFloatImageReq>{

	}
	export interface QuerySpreadsheetSheetFloatImageReqBuilder extends Struct<QuerySpreadsheetSheetFloatImageReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<QuerySpreadsheetSheetFloatImageReqBuilder>
			sheetId(sheetId:string):Ref<QuerySpreadsheetSheetFloatImageReqBuilder>
			build():Ref<QuerySpreadsheetSheetFloatImageReq>
	}
	export interface QuerySpreadsheetSheetFloatImageResp extends Struct<QuerySpreadsheetSheetFloatImageResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QuerySpreadsheetSheetFloatImageRespData>
			success():bool
	}
	export interface QuerySpreadsheetSheetFloatImageRespData extends Struct<QuerySpreadsheetSheetFloatImageRespData>{

			items:Ref<FloatImage>[]
	}
	export interface QuerySpreadsheetSheetReq extends Struct<QuerySpreadsheetSheetReq>{

	}
	export interface QuerySpreadsheetSheetReqBuilder extends Struct<QuerySpreadsheetSheetReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<QuerySpreadsheetSheetReqBuilder>
			build():Ref<QuerySpreadsheetSheetReq>
	}
	export interface QuerySpreadsheetSheetResp extends Struct<QuerySpreadsheetSheetResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QuerySpreadsheetSheetRespData>
			success():bool
	}
	export interface QuerySpreadsheetSheetRespData extends Struct<QuerySpreadsheetSheetRespData>{

			sheets:Ref<Sheet>[]
	}
	export interface Reminder extends Struct<Reminder>{

			notifyDateTime:Ref<string>
			notifyUserId:string[]
			notifyText:Ref<string>
			notifyStrategy:Ref<string>
	}
	export interface ReminderBuilder extends Struct<ReminderBuilder>{

			notifyDateTime(notifyDateTime:string):Ref<ReminderBuilder>
			notifyUserId(notifyUserId:string[]):Ref<ReminderBuilder>
			notifyText(notifyText:string):Ref<ReminderBuilder>
			notifyStrategy(notifyStrategy:string):Ref<ReminderBuilder>
			build():Ref<Reminder>
	}
	export interface Replace extends Struct<Replace>{

			findCondition:Ref<FindCondition>
			find:Ref<string>
			replacement:Ref<string>
	}
	export interface ReplaceBuilder extends Struct<ReplaceBuilder>{

			findCondition(findCondition:Ref<FindCondition>):Ref<ReplaceBuilder>
			find(find:string):Ref<ReplaceBuilder>
			replacement(replacement:string):Ref<ReplaceBuilder>
			build():Ref<Replace>
	}
	export interface ReplaceSpreadsheetSheetReq extends Struct<ReplaceSpreadsheetSheetReq>{

			replace:Ref<Replace>
	}
	export interface ReplaceSpreadsheetSheetReqBuilder extends Struct<ReplaceSpreadsheetSheetReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<ReplaceSpreadsheetSheetReqBuilder>
			sheetId(sheetId:string):Ref<ReplaceSpreadsheetSheetReqBuilder>
			replace(replace:Ref<Replace>):Ref<ReplaceSpreadsheetSheetReqBuilder>
			build():Ref<ReplaceSpreadsheetSheetReq>
	}
	export interface ReplaceSpreadsheetSheetResp extends Struct<ReplaceSpreadsheetSheetResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ReplaceSpreadsheetSheetRespData>
			success():bool
	}
	export interface ReplaceSpreadsheetSheetRespData extends Struct<ReplaceSpreadsheetSheetRespData>{

			replaceResult:Ref<FindReplaceResult>
	}
	export interface RichTextValueRange extends Struct<RichTextValueRange>{

			range:Ref<string>
			values:Ref<CellValue>[][][]
	}
	export interface RichTextValueRangeBuilder extends Struct<RichTextValueRangeBuilder>{

			range(range_:string):Ref<RichTextValueRangeBuilder>
			values(values:Ref<CellValue>[][][]):Ref<RichTextValueRangeBuilder>
			build():Ref<RichTextValueRange>
	}
	export interface RichValue extends Struct<RichValue>{

			values:Ref<CellValue>[][][]
	}
	export interface RichValueBuilder extends Struct<RichValueBuilder>{

			values(values:Ref<CellValue>[][][]):Ref<RichValueBuilder>
			build():Ref<RichValue>
	}
	export interface RightBorderStyle extends Struct<RightBorderStyle>{

			style:Ref<string>
			color:Ref<string>
	}
	export interface RightBorderStyleBuilder extends Struct<RightBorderStyleBuilder>{

			style(style:string):Ref<RightBorderStyleBuilder>
			color(color:string):Ref<RightBorderStyleBuilder>
			build():Ref<RightBorderStyle>
	}
	export interface SegmentStyle extends Struct<SegmentStyle>{

			affectedText:Ref<string>
			style:Ref<SegmentStyleStyle>
	}
	export interface SegmentStyleBuilder extends Struct<SegmentStyleBuilder>{

			affectedText(affectedText:string):Ref<SegmentStyleBuilder>
			style(style:Ref<SegmentStyleStyle>):Ref<SegmentStyleBuilder>
			build():Ref<SegmentStyle>
	}
	export interface SegmentStyleStyle extends Struct<SegmentStyleStyle>{

			bold:Ref<bool>
			italic:Ref<bool>
			strikeThrough:Ref<bool>
			underline:Ref<bool>
			foreColor:Ref<string>
			fontSize:Ref<int>
	}
	export interface SegmentStyleStyleBuilder extends Struct<SegmentStyleStyleBuilder>{

			bold(bold:bool):Ref<SegmentStyleStyleBuilder>
			italic(italic:bool):Ref<SegmentStyleStyleBuilder>
			strikeThrough(strikeThrough:bool):Ref<SegmentStyleStyleBuilder>
			underline(underline:bool):Ref<SegmentStyleStyleBuilder>
			foreColor(foreColor:string):Ref<SegmentStyleStyleBuilder>
			fontSize(fontSize:int):Ref<SegmentStyleStyleBuilder>
			build():Ref<SegmentStyleStyle>
	}
	export interface Sheet extends Struct<Sheet>{

			sheetId:Ref<string>
			title:Ref<string>
			index:Ref<int>
			hidden:Ref<bool>
			gridProperties:Ref<GridProperties>
			resourceType:Ref<string>
			merges:Ref<MergeRange>[]
	}
	export interface SheetBuilder extends Struct<SheetBuilder>{

			sheetId(sheetId:string):Ref<SheetBuilder>
			title(title:string):Ref<SheetBuilder>
			index(index:int):Ref<SheetBuilder>
			hidden(hidden:bool):Ref<SheetBuilder>
			gridProperties(gridProperties:Ref<GridProperties>):Ref<SheetBuilder>
			resourceType(resourceType:string):Ref<SheetBuilder>
			merges(merges:Ref<MergeRange>[]):Ref<SheetBuilder>
			build():Ref<Sheet>
	}
	export interface SheetFilterInfo extends Struct<SheetFilterInfo>{

			range:Ref<string>
			filteredOutRows:int[]
			filterInfos:Ref<FilterInfo>[]
	}
	export interface SheetFilterInfoBuilder extends Struct<SheetFilterInfoBuilder>{

			range(range_:string):Ref<SheetFilterInfoBuilder>
			filteredOutRows(filteredOutRows:int[]):Ref<SheetFilterInfoBuilder>
			filterInfos(filterInfos:Ref<FilterInfo>[]):Ref<SheetFilterInfoBuilder>
			build():Ref<SheetFilterInfo>
	}
	export interface SheetProperties extends Struct<SheetProperties>{

			rowCount:Ref<int>
			columnCount:Ref<int>
			frozenRowCount:Ref<int>
			frozenColumnCount:Ref<int>
	}
	export interface SheetPropertiesBuilder extends Struct<SheetPropertiesBuilder>{

			rowCount(rowCount:int):Ref<SheetPropertiesBuilder>
			columnCount(columnCount:int):Ref<SheetPropertiesBuilder>
			frozenRowCount(frozenRowCount:int):Ref<SheetPropertiesBuilder>
			frozenColumnCount(frozenColumnCount:int):Ref<SheetPropertiesBuilder>
			build():Ref<SheetProperties>
	}
	export interface SingleOption extends Struct<SingleOption>{

			type:Ref<string>
			range:Ref<string>
			dataValidationValues:Ref<DataValidationValue>[]
			properties:Ref<OptionProperties>
	}
	export interface SingleOptionBuilder extends Struct<SingleOptionBuilder>{

			type(type_:string):Ref<SingleOptionBuilder>
			range(range_:string):Ref<SingleOptionBuilder>
			dataValidationValues(dataValidationValues:Ref<DataValidationValue>[]):Ref<SingleOptionBuilder>
			properties(properties:Ref<OptionProperties>):Ref<SingleOptionBuilder>
			build():Ref<SingleOption>
	}
	export interface Spreadsheet extends Struct<Spreadsheet>{

			title:Ref<string>
			folderToken:Ref<string>
			url:Ref<string>
			spreadsheetToken:Ref<string>
	}
	export interface SpreadsheetBuilder extends Struct<SpreadsheetBuilder>{

			title(title:string):Ref<SpreadsheetBuilder>
			folderToken(folderToken:string):Ref<SpreadsheetBuilder>
			url(url:string):Ref<SpreadsheetBuilder>
			spreadsheetToken(spreadsheetToken:string):Ref<SpreadsheetBuilder>
			build():Ref<Spreadsheet>
	}
	export interface Style extends Struct<Style>{

			range:Ref<string>
			styles:Ref<CellStyle>[][]
	}
	export interface StyleBuilder extends Struct<StyleBuilder>{

			range(range_:string):Ref<StyleBuilder>
			styles(styles:Ref<CellStyle>[][]):Ref<StyleBuilder>
			build():Ref<Style>
	}
	export interface StyleRanges extends Struct<StyleRanges>{

			styleRanges:Ref<Style>[]
	}
	export interface StyleRangesBuilder extends Struct<StyleRangesBuilder>{

			styleRanges(styleRanges:Ref<Style>[]):Ref<StyleRangesBuilder>
			build():Ref<StyleRanges>
	}
	export interface Text extends Struct<Text>{

			text:Ref<string>
			segmentStyle:Ref<SegmentStyle>
	}
	export interface TextBuilder extends Struct<TextBuilder>{

			text(text:string):Ref<TextBuilder>
			segmentStyle(segmentStyle:Ref<SegmentStyle>):Ref<TextBuilder>
			build():Ref<Text>
	}
	export interface TopBorderStyle extends Struct<TopBorderStyle>{

			style:Ref<string>
			color:Ref<string>
	}
	export interface TopBorderStyleBuilder extends Struct<TopBorderStyleBuilder>{

			style(style:string):Ref<TopBorderStyleBuilder>
			color(color:string):Ref<TopBorderStyleBuilder>
			build():Ref<TopBorderStyle>
	}
	export interface UpdateDimensionProperties extends Struct<UpdateDimensionProperties>{

			dimensionRange:Ref<Dimension>
			properties:Ref<DimensionProperties>
	}
	export interface UpdateDimensionPropertiesBuilder extends Struct<UpdateDimensionPropertiesBuilder>{

			dimensionRange(dimensionRange:Ref<Dimension>):Ref<UpdateDimensionPropertiesBuilder>
			properties(properties:Ref<DimensionProperties>):Ref<UpdateDimensionPropertiesBuilder>
			build():Ref<UpdateDimensionProperties>
	}
	export interface UpdateGridProperties extends Struct<UpdateGridProperties>{

			frozenRowCount:Ref<int>
			frozenColumnCount:Ref<int>
	}
	export interface UpdateGridPropertiesBuilder extends Struct<UpdateGridPropertiesBuilder>{

			frozenRowCount(frozenRowCount:int):Ref<UpdateGridPropertiesBuilder>
			frozenColumnCount(frozenColumnCount:int):Ref<UpdateGridPropertiesBuilder>
			build():Ref<UpdateGridProperties>
	}
	export interface UpdateSheetFilter extends Struct<UpdateSheetFilter>{

			col:Ref<string>
			condition:Ref<Condition>
	}
	export interface UpdateSheetFilterBuilder extends Struct<UpdateSheetFilterBuilder>{

			col(col:string):Ref<UpdateSheetFilterBuilder>
			condition(condition:Ref<Condition>):Ref<UpdateSheetFilterBuilder>
			build():Ref<UpdateSheetFilter>
	}
	export interface UpdateSpreadsheetProperties extends Struct<UpdateSpreadsheetProperties>{

			title:Ref<string>
	}
	export interface UpdateSpreadsheetPropertiesBuilder extends Struct<UpdateSpreadsheetPropertiesBuilder>{

			title(title:string):Ref<UpdateSpreadsheetPropertiesBuilder>
			build():Ref<UpdateSpreadsheetProperties>
	}
	export interface UpdateSpreadsheetSheetFilterReq extends Struct<UpdateSpreadsheetSheetFilterReq>{

			updateSheetFilter:Ref<UpdateSheetFilter>
	}
	export interface UpdateSpreadsheetSheetFilterReqBuilder extends Struct<UpdateSpreadsheetSheetFilterReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<UpdateSpreadsheetSheetFilterReqBuilder>
			sheetId(sheetId:string):Ref<UpdateSpreadsheetSheetFilterReqBuilder>
			updateSheetFilter(updateSheetFilter:Ref<UpdateSheetFilter>):Ref<UpdateSpreadsheetSheetFilterReqBuilder>
			build():Ref<UpdateSpreadsheetSheetFilterReq>
	}
	export interface UpdateSpreadsheetSheetFilterResp extends Struct<UpdateSpreadsheetSheetFilterResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface UpdateSpreadsheetSheetFilterViewConditionReq extends Struct<UpdateSpreadsheetSheetFilterViewConditionReq>{

			filterViewCondition:Ref<FilterViewCondition>
	}
	export interface UpdateSpreadsheetSheetFilterViewConditionReqBuilder extends Struct<UpdateSpreadsheetSheetFilterViewConditionReqBuilder>{

			spreadsheetToken(spreadsheetToken:string):Ref<UpdateSpreadsheetSheetFilterViewConditionReqBuilder>
			sheetId(sheetId:string):Ref<UpdateSpreadsheetSheetFilterViewConditionReqBuilder>
			filterViewId(filterViewId:string):Ref<UpdateSpreadsheetSheetFilterViewConditionReqBuilder>
			conditionId(conditionId:string):Ref<UpdateSpreadsheetSheetFilterViewConditionReqBuilder>
			filterViewCondition(filterViewCondition:Ref<FilterViewCondition>):Ref<UpdateSpreadsheetSheetFilterViewConditionReqBuilder>
			build():Ref<UpdateSpreadsheetSheetFilterViewConditionReq>
	}
	export interface UpdateSpreadsheetSheetFilterViewConditionResp extends Struct<UpdateSpreadsheetSheetFilterViewConditionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateSpreadsheetSheetFilterViewConditionRespData>
			success():bool
	}
	export interface UpdateSpreadsheetSheetFilterViewConditionRespData extends Struct<UpdateSpreadsheetSheetFilterViewConditionRespData>{

			condition:Ref<FilterViewCondition>
	}
	//"open_id"
	export const UserIdTypeOpenId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V3 extends Struct<V3>{

			spreadsheet:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateSpreadsheetReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateSpreadsheetResp>
				get(ctx:context.Context,req:Ref<GetSpreadsheetReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSpreadsheetResp>
				patch(ctx:context.Context,req:Ref<PatchSpreadsheetReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchSpreadsheetResp>
			}>
			spreadsheetSheet:Ref<{
			
				find(ctx:context.Context,req:Ref<FindSpreadsheetSheetReq>,...options:larkcore.RequestOptionFunc[]):Ref<FindSpreadsheetSheetResp>
				get(ctx:context.Context,req:Ref<GetSpreadsheetSheetReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSpreadsheetSheetResp>
				moveDimension(ctx:context.Context,req:Ref<MoveDimensionSpreadsheetSheetReq>,...options:larkcore.RequestOptionFunc[]):Ref<MoveDimensionSpreadsheetSheetResp>
				query(ctx:context.Context,req:Ref<QuerySpreadsheetSheetReq>,...options:larkcore.RequestOptionFunc[]):Ref<QuerySpreadsheetSheetResp>
				replace(ctx:context.Context,req:Ref<ReplaceSpreadsheetSheetReq>,...options:larkcore.RequestOptionFunc[]):Ref<ReplaceSpreadsheetSheetResp>
			}>
			spreadsheetSheetFilter:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateSpreadsheetSheetFilterReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateSpreadsheetSheetFilterResp>
				delete(ctx:context.Context,req:Ref<DeleteSpreadsheetSheetFilterReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteSpreadsheetSheetFilterResp>
				get(ctx:context.Context,req:Ref<GetSpreadsheetSheetFilterReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSpreadsheetSheetFilterResp>
				update(ctx:context.Context,req:Ref<UpdateSpreadsheetSheetFilterReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateSpreadsheetSheetFilterResp>
			}>
			spreadsheetSheetFilterView:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateSpreadsheetSheetFilterViewReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateSpreadsheetSheetFilterViewResp>
				delete(ctx:context.Context,req:Ref<DeleteSpreadsheetSheetFilterViewReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteSpreadsheetSheetFilterViewResp>
				get(ctx:context.Context,req:Ref<GetSpreadsheetSheetFilterViewReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSpreadsheetSheetFilterViewResp>
				patch(ctx:context.Context,req:Ref<PatchSpreadsheetSheetFilterViewReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchSpreadsheetSheetFilterViewResp>
				query(ctx:context.Context,req:Ref<QuerySpreadsheetSheetFilterViewReq>,...options:larkcore.RequestOptionFunc[]):Ref<QuerySpreadsheetSheetFilterViewResp>
			}>
			spreadsheetSheetFilterViewCondition:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateSpreadsheetSheetFilterViewConditionReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateSpreadsheetSheetFilterViewConditionResp>
				delete(ctx:context.Context,req:Ref<DeleteSpreadsheetSheetFilterViewConditionReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteSpreadsheetSheetFilterViewConditionResp>
				get(ctx:context.Context,req:Ref<GetSpreadsheetSheetFilterViewConditionReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSpreadsheetSheetFilterViewConditionResp>
				query(ctx:context.Context,req:Ref<QuerySpreadsheetSheetFilterViewConditionReq>,...options:larkcore.RequestOptionFunc[]):Ref<QuerySpreadsheetSheetFilterViewConditionResp>
				update(ctx:context.Context,req:Ref<UpdateSpreadsheetSheetFilterViewConditionReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateSpreadsheetSheetFilterViewConditionResp>
			}>
			spreadsheetSheetFloatImage:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateSpreadsheetSheetFloatImageReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateSpreadsheetSheetFloatImageResp>
				delete(ctx:context.Context,req:Ref<DeleteSpreadsheetSheetFloatImageReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteSpreadsheetSheetFloatImageResp>
				get(ctx:context.Context,req:Ref<GetSpreadsheetSheetFloatImageReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSpreadsheetSheetFloatImageResp>
				patch(ctx:context.Context,req:Ref<PatchSpreadsheetSheetFloatImageReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchSpreadsheetSheetFloatImageResp>
				query(ctx:context.Context,req:Ref<QuerySpreadsheetSheetFloatImageReq>,...options:larkcore.RequestOptionFunc[]):Ref<QuerySpreadsheetSheetFloatImageResp>
			}>
	}
	export interface Value extends Struct<Value>{

			range:Ref<string>
			values:Ref<CellValue>[][][]
	}
	export interface ValueBuilder extends Struct<ValueBuilder>{

			range(range_:string):Ref<ValueBuilder>
			values(values:Ref<CellValue>[][][]):Ref<ValueBuilder>
			build():Ref<Value>
	}
	export interface ValueElement extends Struct<ValueElement>{

			value:Ref<string>
	}
	export interface ValueElementBuilder extends Struct<ValueElementBuilder>{

			value(value:string):Ref<ValueElementBuilder>
			build():Ref<ValueElement>
	}
	export interface ValueElementSingleOption extends Struct<ValueElementSingleOption>{

			dataValidationId:Ref<int>
			dataValiditonValue:Ref<string>
	}
	export interface ValueElementSingleOptionBuilder extends Struct<ValueElementSingleOptionBuilder>{

			dataValidationId(dataValidationId:int):Ref<ValueElementSingleOptionBuilder>
			dataValiditonValue(dataValiditonValue:string):Ref<ValueElementSingleOptionBuilder>
			build():Ref<ValueElementSingleOption>
	}
	export function emptyBooleanRuleCondition():BooleanRuleCondition
	export function emptyRefBooleanRuleCondition():Ref<BooleanRuleCondition>
	export function refOfBooleanRuleCondition(x:BooleanRuleCondition,v:Ref<BooleanRuleCondition>)
	export function unRefBooleanRuleCondition(v:Ref<BooleanRuleCondition>):BooleanRuleCondition
	export function emptyQuerySpreadsheetSheetFilterViewReq():QuerySpreadsheetSheetFilterViewReq
	export function emptyRefQuerySpreadsheetSheetFilterViewReq():Ref<QuerySpreadsheetSheetFilterViewReq>
	export function refOfQuerySpreadsheetSheetFilterViewReq(x:QuerySpreadsheetSheetFilterViewReq,v:Ref<QuerySpreadsheetSheetFilterViewReq>)
	export function unRefQuerySpreadsheetSheetFilterViewReq(v:Ref<QuerySpreadsheetSheetFilterViewReq>):QuerySpreadsheetSheetFilterViewReq
	export function emptyConditionalFormat():ConditionalFormat
	export function emptyRefConditionalFormat():Ref<ConditionalFormat>
	export function refOfConditionalFormat(x:ConditionalFormat,v:Ref<ConditionalFormat>)
	export function unRefConditionalFormat(v:Ref<ConditionalFormat>):ConditionalFormat
	export function emptyCreateSpreadsheetResp():CreateSpreadsheetResp
	export function emptyRefCreateSpreadsheetResp():Ref<CreateSpreadsheetResp>
	export function refOfCreateSpreadsheetResp(x:CreateSpreadsheetResp,v:Ref<CreateSpreadsheetResp>)
	export function unRefCreateSpreadsheetResp(v:Ref<CreateSpreadsheetResp>):CreateSpreadsheetResp
	export function emptyStyle():Style
	export function emptyRefStyle():Ref<Style>
	export function refOfStyle(x:Style,v:Ref<Style>)
	export function unRefStyle(v:Ref<Style>):Style
	export function emptyValueElementSingleOption():ValueElementSingleOption
	export function emptyRefValueElementSingleOption():Ref<ValueElementSingleOption>
	export function refOfValueElementSingleOption(x:ValueElementSingleOption,v:Ref<ValueElementSingleOption>)
	export function unRefValueElementSingleOption(v:Ref<ValueElementSingleOption>):ValueElementSingleOption
	export function emptyDeleteSpreadsheetSheetFloatImageReq():DeleteSpreadsheetSheetFloatImageReq
	export function emptyRefDeleteSpreadsheetSheetFloatImageReq():Ref<DeleteSpreadsheetSheetFloatImageReq>
	export function refOfDeleteSpreadsheetSheetFloatImageReq(x:DeleteSpreadsheetSheetFloatImageReq,v:Ref<DeleteSpreadsheetSheetFloatImageReq>)
	export function unRefDeleteSpreadsheetSheetFloatImageReq(v:Ref<DeleteSpreadsheetSheetFloatImageReq>):DeleteSpreadsheetSheetFloatImageReq
	export function emptyPatchSpreadsheetReq():PatchSpreadsheetReq
	export function emptyRefPatchSpreadsheetReq():Ref<PatchSpreadsheetReq>
	export function refOfPatchSpreadsheetReq(x:PatchSpreadsheetReq,v:Ref<PatchSpreadsheetReq>)
	export function unRefPatchSpreadsheetReq(v:Ref<PatchSpreadsheetReq>):PatchSpreadsheetReq
	export function emptyPatchSpreadsheetResp():PatchSpreadsheetResp
	export function emptyRefPatchSpreadsheetResp():Ref<PatchSpreadsheetResp>
	export function refOfPatchSpreadsheetResp(x:PatchSpreadsheetResp,v:Ref<PatchSpreadsheetResp>)
	export function unRefPatchSpreadsheetResp(v:Ref<PatchSpreadsheetResp>):PatchSpreadsheetResp
	export function emptyCreateSpreadsheetRespData():CreateSpreadsheetRespData
	export function emptyRefCreateSpreadsheetRespData():Ref<CreateSpreadsheetRespData>
	export function refOfCreateSpreadsheetRespData(x:CreateSpreadsheetRespData,v:Ref<CreateSpreadsheetRespData>)
	export function unRefCreateSpreadsheetRespData(v:Ref<CreateSpreadsheetRespData>):CreateSpreadsheetRespData
	export function emptyCreateSpreadsheetSheetFilterReq():CreateSpreadsheetSheetFilterReq
	export function emptyRefCreateSpreadsheetSheetFilterReq():Ref<CreateSpreadsheetSheetFilterReq>
	export function refOfCreateSpreadsheetSheetFilterReq(x:CreateSpreadsheetSheetFilterReq,v:Ref<CreateSpreadsheetSheetFilterReq>)
	export function unRefCreateSpreadsheetSheetFilterReq(v:Ref<CreateSpreadsheetSheetFilterReq>):CreateSpreadsheetSheetFilterReq
	export function emptyPatchSpreadsheetSheetFloatImageRespData():PatchSpreadsheetSheetFloatImageRespData
	export function emptyRefPatchSpreadsheetSheetFloatImageRespData():Ref<PatchSpreadsheetSheetFloatImageRespData>
	export function refOfPatchSpreadsheetSheetFloatImageRespData(x:PatchSpreadsheetSheetFloatImageRespData,v:Ref<PatchSpreadsheetSheetFloatImageRespData>)
	export function unRefPatchSpreadsheetSheetFloatImageRespData(v:Ref<PatchSpreadsheetSheetFloatImageRespData>):PatchSpreadsheetSheetFloatImageRespData
	export function emptyDeleteSpreadsheetSheetFilterViewResp():DeleteSpreadsheetSheetFilterViewResp
	export function emptyRefDeleteSpreadsheetSheetFilterViewResp():Ref<DeleteSpreadsheetSheetFilterViewResp>
	export function refOfDeleteSpreadsheetSheetFilterViewResp(x:DeleteSpreadsheetSheetFilterViewResp,v:Ref<DeleteSpreadsheetSheetFilterViewResp>)
	export function unRefDeleteSpreadsheetSheetFilterViewResp(v:Ref<DeleteSpreadsheetSheetFilterViewResp>):DeleteSpreadsheetSheetFilterViewResp
	export function emptyGetSpreadsheetSheetFloatImageResp():GetSpreadsheetSheetFloatImageResp
	export function emptyRefGetSpreadsheetSheetFloatImageResp():Ref<GetSpreadsheetSheetFloatImageResp>
	export function refOfGetSpreadsheetSheetFloatImageResp(x:GetSpreadsheetSheetFloatImageResp,v:Ref<GetSpreadsheetSheetFloatImageResp>)
	export function unRefGetSpreadsheetSheetFloatImageResp(v:Ref<GetSpreadsheetSheetFloatImageResp>):GetSpreadsheetSheetFloatImageResp
	export function emptyReplace():Replace
	export function emptyRefReplace():Ref<Replace>
	export function refOfReplace(x:Replace,v:Ref<Replace>)
	export function unRefReplace(v:Ref<Replace>):Replace
	export function emptyValue():Value
	export function emptyRefValue():Ref<Value>
	export function refOfValue(x:Value,v:Ref<Value>)
	export function unRefValue(v:Ref<Value>):Value
	export function emptyBitableProperties():BitableProperties
	export function emptyRefBitableProperties():Ref<BitableProperties>
	export function refOfBitableProperties(x:BitableProperties,v:Ref<BitableProperties>)
	export function unRefBitableProperties(v:Ref<BitableProperties>):BitableProperties
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptySheet():Sheet
	export function emptyRefSheet():Ref<Sheet>
	export function refOfSheet(x:Sheet,v:Ref<Sheet>)
	export function unRefSheet(v:Ref<Sheet>):Sheet
	export function emptyGetSpreadsheetSheetResp():GetSpreadsheetSheetResp
	export function emptyRefGetSpreadsheetSheetResp():Ref<GetSpreadsheetSheetResp>
	export function refOfGetSpreadsheetSheetResp(x:GetSpreadsheetSheetResp,v:Ref<GetSpreadsheetSheetResp>)
	export function unRefGetSpreadsheetSheetResp(v:Ref<GetSpreadsheetSheetResp>):GetSpreadsheetSheetResp
	export function emptyQuerySpreadsheetSheetFloatImageReq():QuerySpreadsheetSheetFloatImageReq
	export function emptyRefQuerySpreadsheetSheetFloatImageReq():Ref<QuerySpreadsheetSheetFloatImageReq>
	export function refOfQuerySpreadsheetSheetFloatImageReq(x:QuerySpreadsheetSheetFloatImageReq,v:Ref<QuerySpreadsheetSheetFloatImageReq>)
	export function unRefQuerySpreadsheetSheetFloatImageReq(v:Ref<QuerySpreadsheetSheetFloatImageReq>):QuerySpreadsheetSheetFloatImageReq
	export function emptyBottomBorderStyle():BottomBorderStyle
	export function emptyRefBottomBorderStyle():Ref<BottomBorderStyle>
	export function refOfBottomBorderStyle(x:BottomBorderStyle,v:Ref<BottomBorderStyle>)
	export function unRefBottomBorderStyle(v:Ref<BottomBorderStyle>):BottomBorderStyle
	export function emptyClearDataValidation():ClearDataValidation
	export function emptyRefClearDataValidation():Ref<ClearDataValidation>
	export function refOfClearDataValidation(x:ClearDataValidation,v:Ref<ClearDataValidation>)
	export function unRefClearDataValidation(v:Ref<ClearDataValidation>):ClearDataValidation
	export function emptyFile():File
	export function emptyRefFile():Ref<File>
	export function refOfFile(x:File,v:Ref<File>)
	export function unRefFile(v:Ref<File>):File
	export function emptyGridProperties():GridProperties
	export function emptyRefGridProperties():Ref<GridProperties>
	export function refOfGridProperties(x:GridProperties,v:Ref<GridProperties>)
	export function unRefGridProperties(v:Ref<GridProperties>):GridProperties
	export function emptyQuerySpreadsheetSheetResp():QuerySpreadsheetSheetResp
	export function emptyRefQuerySpreadsheetSheetResp():Ref<QuerySpreadsheetSheetResp>
	export function refOfQuerySpreadsheetSheetResp(x:QuerySpreadsheetSheetResp,v:Ref<QuerySpreadsheetSheetResp>)
	export function unRefQuerySpreadsheetSheetResp(v:Ref<QuerySpreadsheetSheetResp>):QuerySpreadsheetSheetResp
	export function emptyCreateSpreadsheetSheetFloatImageReq():CreateSpreadsheetSheetFloatImageReq
	export function emptyRefCreateSpreadsheetSheetFloatImageReq():Ref<CreateSpreadsheetSheetFloatImageReq>
	export function refOfCreateSpreadsheetSheetFloatImageReq(x:CreateSpreadsheetSheetFloatImageReq,v:Ref<CreateSpreadsheetSheetFloatImageReq>)
	export function unRefCreateSpreadsheetSheetFloatImageReq(v:Ref<CreateSpreadsheetSheetFloatImageReq>):CreateSpreadsheetSheetFloatImageReq
	export function emptyImage():Image
	export function emptyRefImage():Ref<Image>
	export function refOfImage(x:Image,v:Ref<Image>)
	export function unRefImage(v:Ref<Image>):Image
	export function emptyQuerySpreadsheetSheetFilterViewResp():QuerySpreadsheetSheetFilterViewResp
	export function emptyRefQuerySpreadsheetSheetFilterViewResp():Ref<QuerySpreadsheetSheetFilterViewResp>
	export function refOfQuerySpreadsheetSheetFilterViewResp(x:QuerySpreadsheetSheetFilterViewResp,v:Ref<QuerySpreadsheetSheetFilterViewResp>)
	export function unRefQuerySpreadsheetSheetFilterViewResp(v:Ref<QuerySpreadsheetSheetFilterViewResp>):QuerySpreadsheetSheetFilterViewResp
	export function emptyUpdateSheetFilter():UpdateSheetFilter
	export function emptyRefUpdateSheetFilter():Ref<UpdateSheetFilter>
	export function refOfUpdateSheetFilter(x:UpdateSheetFilter,v:Ref<UpdateSheetFilter>)
	export function unRefUpdateSheetFilter(v:Ref<UpdateSheetFilter>):UpdateSheetFilter
	export function emptyMergeCell():MergeCell
	export function emptyRefMergeCell():Ref<MergeCell>
	export function refOfMergeCell(x:MergeCell,v:Ref<MergeCell>)
	export function unRefMergeCell(v:Ref<MergeCell>):MergeCell
	export function emptyFindCondition():FindCondition
	export function emptyRefFindCondition():Ref<FindCondition>
	export function refOfFindCondition(x:FindCondition,v:Ref<FindCondition>)
	export function unRefFindCondition(v:Ref<FindCondition>):FindCondition
	export function emptyRichTextValueRange():RichTextValueRange
	export function emptyRefRichTextValueRange():Ref<RichTextValueRange>
	export function refOfRichTextValueRange(x:RichTextValueRange,v:Ref<RichTextValueRange>)
	export function unRefRichTextValueRange(v:Ref<RichTextValueRange>):RichTextValueRange
	export function emptyBorderStyle():BorderStyle
	export function emptyRefBorderStyle():Ref<BorderStyle>
	export function refOfBorderStyle(x:BorderStyle,v:Ref<BorderStyle>)
	export function unRefBorderStyle(v:Ref<BorderStyle>):BorderStyle
	export function emptyCreateSpreadsheetReq():CreateSpreadsheetReq
	export function emptyRefCreateSpreadsheetReq():Ref<CreateSpreadsheetReq>
	export function refOfCreateSpreadsheetReq(x:CreateSpreadsheetReq,v:Ref<CreateSpreadsheetReq>)
	export function unRefCreateSpreadsheetReq(v:Ref<CreateSpreadsheetReq>):CreateSpreadsheetReq
	export function emptyQuerySpreadsheetSheetFloatImageRespData():QuerySpreadsheetSheetFloatImageRespData
	export function emptyRefQuerySpreadsheetSheetFloatImageRespData():Ref<QuerySpreadsheetSheetFloatImageRespData>
	export function refOfQuerySpreadsheetSheetFloatImageRespData(x:QuerySpreadsheetSheetFloatImageRespData,v:Ref<QuerySpreadsheetSheetFloatImageRespData>)
	export function unRefQuerySpreadsheetSheetFloatImageRespData(v:Ref<QuerySpreadsheetSheetFloatImageRespData>):QuerySpreadsheetSheetFloatImageRespData
	export function emptyValueElement():ValueElement
	export function emptyRefValueElement():Ref<ValueElement>
	export function refOfValueElement(x:ValueElement,v:Ref<ValueElement>)
	export function unRefValueElement(v:Ref<ValueElement>):ValueElement
	export function emptyCreateDataValidation():CreateDataValidation
	export function emptyRefCreateDataValidation():Ref<CreateDataValidation>
	export function refOfCreateDataValidation(x:CreateDataValidation,v:Ref<CreateDataValidation>)
	export function unRefCreateDataValidation(v:Ref<CreateDataValidation>):CreateDataValidation
	export function emptyCreateSheetFilter():CreateSheetFilter
	export function emptyRefCreateSheetFilter():Ref<CreateSheetFilter>
	export function refOfCreateSheetFilter(x:CreateSheetFilter,v:Ref<CreateSheetFilter>)
	export function unRefCreateSheetFilter(v:Ref<CreateSheetFilter>):CreateSheetFilter
	export function emptyText():Text
	export function emptyRefText():Ref<Text>
	export function refOfText(x:Text,v:Ref<Text>)
	export function unRefText(v:Ref<Text>):Text
	export function emptyCellStyle():CellStyle
	export function emptyRefCellStyle():Ref<CellStyle>
	export function refOfCellStyle(x:CellStyle,v:Ref<CellStyle>)
	export function unRefCellStyle(v:Ref<CellStyle>):CellStyle
	export function emptyDeleteSpreadsheetSheetFilterViewConditionReq():DeleteSpreadsheetSheetFilterViewConditionReq
	export function emptyRefDeleteSpreadsheetSheetFilterViewConditionReq():Ref<DeleteSpreadsheetSheetFilterViewConditionReq>
	export function refOfDeleteSpreadsheetSheetFilterViewConditionReq(x:DeleteSpreadsheetSheetFilterViewConditionReq,v:Ref<DeleteSpreadsheetSheetFilterViewConditionReq>)
	export function unRefDeleteSpreadsheetSheetFilterViewConditionReq(v:Ref<DeleteSpreadsheetSheetFilterViewConditionReq>):DeleteSpreadsheetSheetFilterViewConditionReq
	export function emptyMoveDimensionSpreadsheetSheetResp():MoveDimensionSpreadsheetSheetResp
	export function emptyRefMoveDimensionSpreadsheetSheetResp():Ref<MoveDimensionSpreadsheetSheetResp>
	export function refOfMoveDimensionSpreadsheetSheetResp(x:MoveDimensionSpreadsheetSheetResp,v:Ref<MoveDimensionSpreadsheetSheetResp>)
	export function unRefMoveDimensionSpreadsheetSheetResp(v:Ref<MoveDimensionSpreadsheetSheetResp>):MoveDimensionSpreadsheetSheetResp
	export function emptyMergeRange():MergeRange
	export function emptyRefMergeRange():Ref<MergeRange>
	export function refOfMergeRange(x:MergeRange,v:Ref<MergeRange>)
	export function unRefMergeRange(v:Ref<MergeRange>):MergeRange
	export function emptyReplaceSpreadsheetSheetReq():ReplaceSpreadsheetSheetReq
	export function emptyRefReplaceSpreadsheetSheetReq():Ref<ReplaceSpreadsheetSheetReq>
	export function refOfReplaceSpreadsheetSheetReq(x:ReplaceSpreadsheetSheetReq,v:Ref<ReplaceSpreadsheetSheetReq>)
	export function unRefReplaceSpreadsheetSheetReq(v:Ref<ReplaceSpreadsheetSheetReq>):ReplaceSpreadsheetSheetReq
	export function emptyRightBorderStyle():RightBorderStyle
	export function emptyRefRightBorderStyle():Ref<RightBorderStyle>
	export function refOfRightBorderStyle(x:RightBorderStyle,v:Ref<RightBorderStyle>)
	export function unRefRightBorderStyle(v:Ref<RightBorderStyle>):RightBorderStyle
	export function emptyCreateSpreadsheetSheetFloatImageResp():CreateSpreadsheetSheetFloatImageResp
	export function emptyRefCreateSpreadsheetSheetFloatImageResp():Ref<CreateSpreadsheetSheetFloatImageResp>
	export function refOfCreateSpreadsheetSheetFloatImageResp(x:CreateSpreadsheetSheetFloatImageResp,v:Ref<CreateSpreadsheetSheetFloatImageResp>)
	export function unRefCreateSpreadsheetSheetFloatImageResp(v:Ref<CreateSpreadsheetSheetFloatImageResp>):CreateSpreadsheetSheetFloatImageResp
	export function emptyDimensionProperties():DimensionProperties
	export function emptyRefDimensionProperties():Ref<DimensionProperties>
	export function refOfDimensionProperties(x:DimensionProperties,v:Ref<DimensionProperties>)
	export function unRefDimensionProperties(v:Ref<DimensionProperties>):DimensionProperties
	export function emptyGetSpreadsheetSheetFloatImageReq():GetSpreadsheetSheetFloatImageReq
	export function emptyRefGetSpreadsheetSheetFloatImageReq():Ref<GetSpreadsheetSheetFloatImageReq>
	export function refOfGetSpreadsheetSheetFloatImageReq(x:GetSpreadsheetSheetFloatImageReq,v:Ref<GetSpreadsheetSheetFloatImageReq>)
	export function unRefGetSpreadsheetSheetFloatImageReq(v:Ref<GetSpreadsheetSheetFloatImageReq>):GetSpreadsheetSheetFloatImageReq
	export function emptyMoveDimension():MoveDimension
	export function emptyRefMoveDimension():Ref<MoveDimension>
	export function refOfMoveDimension(x:MoveDimension,v:Ref<MoveDimension>)
	export function unRefMoveDimension(v:Ref<MoveDimension>):MoveDimension
	export function emptyMoveDimensionSpreadsheetSheetReq():MoveDimensionSpreadsheetSheetReq
	export function emptyRefMoveDimensionSpreadsheetSheetReq():Ref<MoveDimensionSpreadsheetSheetReq>
	export function refOfMoveDimensionSpreadsheetSheetReq(x:MoveDimensionSpreadsheetSheetReq,v:Ref<MoveDimensionSpreadsheetSheetReq>)
	export function unRefMoveDimensionSpreadsheetSheetReq(v:Ref<MoveDimensionSpreadsheetSheetReq>):MoveDimensionSpreadsheetSheetReq
	export function emptyQuerySpreadsheetSheetFilterViewConditionResp():QuerySpreadsheetSheetFilterViewConditionResp
	export function emptyRefQuerySpreadsheetSheetFilterViewConditionResp():Ref<QuerySpreadsheetSheetFilterViewConditionResp>
	export function refOfQuerySpreadsheetSheetFilterViewConditionResp(x:QuerySpreadsheetSheetFilterViewConditionResp,v:Ref<QuerySpreadsheetSheetFilterViewConditionResp>)
	export function unRefQuerySpreadsheetSheetFilterViewConditionResp(v:Ref<QuerySpreadsheetSheetFilterViewConditionResp>):QuerySpreadsheetSheetFilterViewConditionResp
	export function emptyGetSpreadsheetSheetReq():GetSpreadsheetSheetReq
	export function emptyRefGetSpreadsheetSheetReq():Ref<GetSpreadsheetSheetReq>
	export function refOfGetSpreadsheetSheetReq(x:GetSpreadsheetSheetReq,v:Ref<GetSpreadsheetSheetReq>)
	export function unRefGetSpreadsheetSheetReq(v:Ref<GetSpreadsheetSheetReq>):GetSpreadsheetSheetReq
	export function emptyProtectedSheet():ProtectedSheet
	export function emptyRefProtectedSheet():Ref<ProtectedSheet>
	export function refOfProtectedSheet(x:ProtectedSheet,v:Ref<ProtectedSheet>)
	export function unRefProtectedSheet(v:Ref<ProtectedSheet>):ProtectedSheet
	export function emptySegmentStyle():SegmentStyle
	export function emptyRefSegmentStyle():Ref<SegmentStyle>
	export function refOfSegmentStyle(x:SegmentStyle,v:Ref<SegmentStyle>)
	export function unRefSegmentStyle(v:Ref<SegmentStyle>):SegmentStyle
	export function emptyGetSpreadsheetSheetFloatImageRespData():GetSpreadsheetSheetFloatImageRespData
	export function emptyRefGetSpreadsheetSheetFloatImageRespData():Ref<GetSpreadsheetSheetFloatImageRespData>
	export function refOfGetSpreadsheetSheetFloatImageRespData(x:GetSpreadsheetSheetFloatImageRespData,v:Ref<GetSpreadsheetSheetFloatImageRespData>)
	export function unRefGetSpreadsheetSheetFloatImageRespData(v:Ref<GetSpreadsheetSheetFloatImageRespData>):GetSpreadsheetSheetFloatImageRespData
	export function emptyProtectedRange():ProtectedRange
	export function emptyRefProtectedRange():Ref<ProtectedRange>
	export function refOfProtectedRange(x:ProtectedRange,v:Ref<ProtectedRange>)
	export function unRefProtectedRange(v:Ref<ProtectedRange>):ProtectedRange
	export function emptySheetProperties():SheetProperties
	export function emptyRefSheetProperties():Ref<SheetProperties>
	export function refOfSheetProperties(x:SheetProperties,v:Ref<SheetProperties>)
	export function unRefSheetProperties(v:Ref<SheetProperties>):SheetProperties
	export function emptyDeleteSpreadsheetSheetFilterReq():DeleteSpreadsheetSheetFilterReq
	export function emptyRefDeleteSpreadsheetSheetFilterReq():Ref<DeleteSpreadsheetSheetFilterReq>
	export function refOfDeleteSpreadsheetSheetFilterReq(x:DeleteSpreadsheetSheetFilterReq,v:Ref<DeleteSpreadsheetSheetFilterReq>)
	export function unRefDeleteSpreadsheetSheetFilterReq(v:Ref<DeleteSpreadsheetSheetFilterReq>):DeleteSpreadsheetSheetFilterReq
	export function emptyGetSpreadsheetSheetRespData():GetSpreadsheetSheetRespData
	export function emptyRefGetSpreadsheetSheetRespData():Ref<GetSpreadsheetSheetRespData>
	export function refOfGetSpreadsheetSheetRespData(x:GetSpreadsheetSheetRespData,v:Ref<GetSpreadsheetSheetRespData>)
	export function unRefGetSpreadsheetSheetRespData(v:Ref<GetSpreadsheetSheetRespData>):GetSpreadsheetSheetRespData
	export function emptyGetSpreadsheetSheetFilterViewConditionReq():GetSpreadsheetSheetFilterViewConditionReq
	export function emptyRefGetSpreadsheetSheetFilterViewConditionReq():Ref<GetSpreadsheetSheetFilterViewConditionReq>
	export function refOfGetSpreadsheetSheetFilterViewConditionReq(x:GetSpreadsheetSheetFilterViewConditionReq,v:Ref<GetSpreadsheetSheetFilterViewConditionReq>)
	export function unRefGetSpreadsheetSheetFilterViewConditionReq(v:Ref<GetSpreadsheetSheetFilterViewConditionReq>):GetSpreadsheetSheetFilterViewConditionReq
	export function emptyRichValue():RichValue
	export function emptyRefRichValue():Ref<RichValue>
	export function refOfRichValue(x:RichValue,v:Ref<RichValue>)
	export function unRefRichValue(v:Ref<RichValue>):RichValue
	export function emptyCreateSpreadsheetSheetFilterViewRespData():CreateSpreadsheetSheetFilterViewRespData
	export function emptyRefCreateSpreadsheetSheetFilterViewRespData():Ref<CreateSpreadsheetSheetFilterViewRespData>
	export function refOfCreateSpreadsheetSheetFilterViewRespData(x:CreateSpreadsheetSheetFilterViewRespData,v:Ref<CreateSpreadsheetSheetFilterViewRespData>)
	export function unRefCreateSpreadsheetSheetFilterViewRespData(v:Ref<CreateSpreadsheetSheetFilterViewRespData>):CreateSpreadsheetSheetFilterViewRespData
	export function emptyUpdateDimensionProperties():UpdateDimensionProperties
	export function emptyRefUpdateDimensionProperties():Ref<UpdateDimensionProperties>
	export function refOfUpdateDimensionProperties(x:UpdateDimensionProperties,v:Ref<UpdateDimensionProperties>)
	export function unRefUpdateDimensionProperties(v:Ref<UpdateDimensionProperties>):UpdateDimensionProperties
	export function emptyFindSpreadsheetSheetResp():FindSpreadsheetSheetResp
	export function emptyRefFindSpreadsheetSheetResp():Ref<FindSpreadsheetSheetResp>
	export function refOfFindSpreadsheetSheetResp(x:FindSpreadsheetSheetResp,v:Ref<FindSpreadsheetSheetResp>)
	export function unRefFindSpreadsheetSheetResp(v:Ref<FindSpreadsheetSheetResp>):FindSpreadsheetSheetResp
	export function emptyPatchDataValidation():PatchDataValidation
	export function emptyRefPatchDataValidation():Ref<PatchDataValidation>
	export function refOfPatchDataValidation(x:PatchDataValidation,v:Ref<PatchDataValidation>)
	export function unRefPatchDataValidation(v:Ref<PatchDataValidation>):PatchDataValidation
	export function emptyGetSpreadsheetSheetFilterRespData():GetSpreadsheetSheetFilterRespData
	export function emptyRefGetSpreadsheetSheetFilterRespData():Ref<GetSpreadsheetSheetFilterRespData>
	export function refOfGetSpreadsheetSheetFilterRespData(x:GetSpreadsheetSheetFilterRespData,v:Ref<GetSpreadsheetSheetFilterRespData>)
	export function unRefGetSpreadsheetSheetFilterRespData(v:Ref<GetSpreadsheetSheetFilterRespData>):GetSpreadsheetSheetFilterRespData
	export function emptyQuerySpreadsheetSheetFilterViewRespData():QuerySpreadsheetSheetFilterViewRespData
	export function emptyRefQuerySpreadsheetSheetFilterViewRespData():Ref<QuerySpreadsheetSheetFilterViewRespData>
	export function refOfQuerySpreadsheetSheetFilterViewRespData(x:QuerySpreadsheetSheetFilterViewRespData,v:Ref<QuerySpreadsheetSheetFilterViewRespData>)
	export function unRefQuerySpreadsheetSheetFilterViewRespData(v:Ref<QuerySpreadsheetSheetFilterViewRespData>):QuerySpreadsheetSheetFilterViewRespData
	export function emptyDateTime():DateTime
	export function emptyRefDateTime():Ref<DateTime>
	export function refOfDateTime(x:DateTime,v:Ref<DateTime>)
	export function unRefDateTime(v:Ref<DateTime>):DateTime
	export function emptyPatchSpreadsheetSheetFilterViewReq():PatchSpreadsheetSheetFilterViewReq
	export function emptyRefPatchSpreadsheetSheetFilterViewReq():Ref<PatchSpreadsheetSheetFilterViewReq>
	export function refOfPatchSpreadsheetSheetFilterViewReq(x:PatchSpreadsheetSheetFilterViewReq,v:Ref<PatchSpreadsheetSheetFilterViewReq>)
	export function unRefPatchSpreadsheetSheetFilterViewReq(v:Ref<PatchSpreadsheetSheetFilterViewReq>):PatchSpreadsheetSheetFilterViewReq
	export function emptyUpdateSpreadsheetProperties():UpdateSpreadsheetProperties
	export function emptyRefUpdateSpreadsheetProperties():Ref<UpdateSpreadsheetProperties>
	export function refOfUpdateSpreadsheetProperties(x:UpdateSpreadsheetProperties,v:Ref<UpdateSpreadsheetProperties>)
	export function unRefUpdateSpreadsheetProperties(v:Ref<UpdateSpreadsheetProperties>):UpdateSpreadsheetProperties
	export function emptyDataValidation():DataValidation
	export function emptyRefDataValidation():Ref<DataValidation>
	export function refOfDataValidation(x:DataValidation,v:Ref<DataValidation>)
	export function unRefDataValidation(v:Ref<DataValidation>):DataValidation
	export function emptyFilterViewCondition():FilterViewCondition
	export function emptyRefFilterViewCondition():Ref<FilterViewCondition>
	export function refOfFilterViewCondition(x:FilterViewCondition,v:Ref<FilterViewCondition>)
	export function unRefFilterViewCondition(v:Ref<FilterViewCondition>):FilterViewCondition
	export function emptyDeleteSpreadsheetSheetFloatImageResp():DeleteSpreadsheetSheetFloatImageResp
	export function emptyRefDeleteSpreadsheetSheetFloatImageResp():Ref<DeleteSpreadsheetSheetFloatImageResp>
	export function refOfDeleteSpreadsheetSheetFloatImageResp(x:DeleteSpreadsheetSheetFloatImageResp,v:Ref<DeleteSpreadsheetSheetFloatImageResp>)
	export function unRefDeleteSpreadsheetSheetFloatImageResp(v:Ref<DeleteSpreadsheetSheetFloatImageResp>):DeleteSpreadsheetSheetFloatImageResp
	export function emptySpreadsheet():Spreadsheet
	export function emptyRefSpreadsheet():Ref<Spreadsheet>
	export function refOfSpreadsheet(x:Spreadsheet,v:Ref<Spreadsheet>)
	export function unRefSpreadsheet(v:Ref<Spreadsheet>):Spreadsheet
	export function emptyOptionProperties():OptionProperties
	export function emptyRefOptionProperties():Ref<OptionProperties>
	export function refOfOptionProperties(x:OptionProperties,v:Ref<OptionProperties>)
	export function unRefOptionProperties(v:Ref<OptionProperties>):OptionProperties
	export function emptyClearStyleRanges():ClearStyleRanges
	export function emptyRefClearStyleRanges():Ref<ClearStyleRanges>
	export function refOfClearStyleRanges(x:ClearStyleRanges,v:Ref<ClearStyleRanges>)
	export function unRefClearStyleRanges(v:Ref<ClearStyleRanges>):ClearStyleRanges
	export function emptyCreateSpreadsheetSheetFilterViewConditionReq():CreateSpreadsheetSheetFilterViewConditionReq
	export function emptyRefCreateSpreadsheetSheetFilterViewConditionReq():Ref<CreateSpreadsheetSheetFilterViewConditionReq>
	export function refOfCreateSpreadsheetSheetFilterViewConditionReq(x:CreateSpreadsheetSheetFilterViewConditionReq,v:Ref<CreateSpreadsheetSheetFilterViewConditionReq>)
	export function unRefCreateSpreadsheetSheetFilterViewConditionReq(v:Ref<CreateSpreadsheetSheetFilterViewConditionReq>):CreateSpreadsheetSheetFilterViewConditionReq
	export function emptyFindSpreadsheetSheetReq():FindSpreadsheetSheetReq
	export function emptyRefFindSpreadsheetSheetReq():Ref<FindSpreadsheetSheetReq>
	export function refOfFindSpreadsheetSheetReq(x:FindSpreadsheetSheetReq,v:Ref<FindSpreadsheetSheetReq>)
	export function unRefFindSpreadsheetSheetReq(v:Ref<FindSpreadsheetSheetReq>):FindSpreadsheetSheetReq
	export function emptyPatchSpreadsheetSheetFilterViewResp():PatchSpreadsheetSheetFilterViewResp
	export function emptyRefPatchSpreadsheetSheetFilterViewResp():Ref<PatchSpreadsheetSheetFilterViewResp>
	export function refOfPatchSpreadsheetSheetFilterViewResp(x:PatchSpreadsheetSheetFilterViewResp,v:Ref<PatchSpreadsheetSheetFilterViewResp>)
	export function unRefPatchSpreadsheetSheetFilterViewResp(v:Ref<PatchSpreadsheetSheetFilterViewResp>):PatchSpreadsheetSheetFilterViewResp
	export function emptyPatchSpreadsheetSheetFloatImageReq():PatchSpreadsheetSheetFloatImageReq
	export function emptyRefPatchSpreadsheetSheetFloatImageReq():Ref<PatchSpreadsheetSheetFloatImageReq>
	export function refOfPatchSpreadsheetSheetFloatImageReq(x:PatchSpreadsheetSheetFloatImageReq,v:Ref<PatchSpreadsheetSheetFloatImageReq>)
	export function unRefPatchSpreadsheetSheetFloatImageReq(v:Ref<PatchSpreadsheetSheetFloatImageReq>):PatchSpreadsheetSheetFloatImageReq
	export function emptyQuerySpreadsheetSheetFilterViewConditionRespData():QuerySpreadsheetSheetFilterViewConditionRespData
	export function emptyRefQuerySpreadsheetSheetFilterViewConditionRespData():Ref<QuerySpreadsheetSheetFilterViewConditionRespData>
	export function refOfQuerySpreadsheetSheetFilterViewConditionRespData(x:QuerySpreadsheetSheetFilterViewConditionRespData,v:Ref<QuerySpreadsheetSheetFilterViewConditionRespData>)
	export function unRefQuerySpreadsheetSheetFilterViewConditionRespData(v:Ref<QuerySpreadsheetSheetFilterViewConditionRespData>):QuerySpreadsheetSheetFilterViewConditionRespData
	export function emptyUpdateSpreadsheetSheetFilterResp():UpdateSpreadsheetSheetFilterResp
	export function emptyRefUpdateSpreadsheetSheetFilterResp():Ref<UpdateSpreadsheetSheetFilterResp>
	export function refOfUpdateSpreadsheetSheetFilterResp(x:UpdateSpreadsheetSheetFilterResp,v:Ref<UpdateSpreadsheetSheetFilterResp>)
	export function unRefUpdateSpreadsheetSheetFilterResp(v:Ref<UpdateSpreadsheetSheetFilterResp>):UpdateSpreadsheetSheetFilterResp
	export function emptyAddSheet():AddSheet
	export function emptyRefAddSheet():Ref<AddSheet>
	export function refOfAddSheet(x:AddSheet,v:Ref<AddSheet>)
	export function unRefAddSheet(v:Ref<AddSheet>):AddSheet
	export function emptyConditionalFormatStyle():ConditionalFormatStyle
	export function emptyRefConditionalFormatStyle():Ref<ConditionalFormatStyle>
	export function refOfConditionalFormatStyle(x:ConditionalFormatStyle,v:Ref<ConditionalFormatStyle>)
	export function unRefConditionalFormatStyle(v:Ref<ConditionalFormatStyle>):ConditionalFormatStyle
	export function emptyMentionUser():MentionUser
	export function emptyRefMentionUser():Ref<MentionUser>
	export function refOfMentionUser(x:MentionUser,v:Ref<MentionUser>)
	export function unRefMentionUser(v:Ref<MentionUser>):MentionUser
	export function emptyFilterView():FilterView
	export function emptyRefFilterView():Ref<FilterView>
	export function refOfFilterView(x:FilterView,v:Ref<FilterView>)
	export function unRefFilterView(v:Ref<FilterView>):FilterView
	export function emptyFindReplaceResult():FindReplaceResult
	export function emptyRefFindReplaceResult():Ref<FindReplaceResult>
	export function refOfFindReplaceResult(x:FindReplaceResult,v:Ref<FindReplaceResult>)
	export function unRefFindReplaceResult(v:Ref<FindReplaceResult>):FindReplaceResult
	export function emptyMultiRange():MultiRange
	export function emptyRefMultiRange():Ref<MultiRange>
	export function refOfMultiRange(x:MultiRange,v:Ref<MultiRange>)
	export function unRefMultiRange(v:Ref<MultiRange>):MultiRange
	export function emptyTopBorderStyle():TopBorderStyle
	export function emptyRefTopBorderStyle():Ref<TopBorderStyle>
	export function refOfTopBorderStyle(x:TopBorderStyle,v:Ref<TopBorderStyle>)
	export function unRefTopBorderStyle(v:Ref<TopBorderStyle>):TopBorderStyle
	export function emptyUpdateGridProperties():UpdateGridProperties
	export function emptyRefUpdateGridProperties():Ref<UpdateGridProperties>
	export function refOfUpdateGridProperties(x:UpdateGridProperties,v:Ref<UpdateGridProperties>)
	export function unRefUpdateGridProperties(v:Ref<UpdateGridProperties>):UpdateGridProperties
	export function emptyDeleteSpreadsheetSheetFilterViewReq():DeleteSpreadsheetSheetFilterViewReq
	export function emptyRefDeleteSpreadsheetSheetFilterViewReq():Ref<DeleteSpreadsheetSheetFilterViewReq>
	export function refOfDeleteSpreadsheetSheetFilterViewReq(x:DeleteSpreadsheetSheetFilterViewReq,v:Ref<DeleteSpreadsheetSheetFilterViewReq>)
	export function unRefDeleteSpreadsheetSheetFilterViewReq(v:Ref<DeleteSpreadsheetSheetFilterViewReq>):DeleteSpreadsheetSheetFilterViewReq
	export function emptyPatchConditionalFormat():PatchConditionalFormat
	export function emptyRefPatchConditionalFormat():Ref<PatchConditionalFormat>
	export function refOfPatchConditionalFormat(x:PatchConditionalFormat,v:Ref<PatchConditionalFormat>)
	export function unRefPatchConditionalFormat(v:Ref<PatchConditionalFormat>):PatchConditionalFormat
	export function emptyCreateSpreadsheetSheetFilterViewConditionRespData():CreateSpreadsheetSheetFilterViewConditionRespData
	export function emptyRefCreateSpreadsheetSheetFilterViewConditionRespData():Ref<CreateSpreadsheetSheetFilterViewConditionRespData>
	export function refOfCreateSpreadsheetSheetFilterViewConditionRespData(x:CreateSpreadsheetSheetFilterViewConditionRespData,v:Ref<CreateSpreadsheetSheetFilterViewConditionRespData>)
	export function unRefCreateSpreadsheetSheetFilterViewConditionRespData(v:Ref<CreateSpreadsheetSheetFilterViewConditionRespData>):CreateSpreadsheetSheetFilterViewConditionRespData
	export function emptyPatchProtectedRangeEditors():PatchProtectedRangeEditors
	export function emptyRefPatchProtectedRangeEditors():Ref<PatchProtectedRangeEditors>
	export function refOfPatchProtectedRangeEditors(x:PatchProtectedRangeEditors,v:Ref<PatchProtectedRangeEditors>)
	export function unRefPatchProtectedRangeEditors(v:Ref<PatchProtectedRangeEditors>):PatchProtectedRangeEditors
	export function emptyReplaceSpreadsheetSheetResp():ReplaceSpreadsheetSheetResp
	export function emptyRefReplaceSpreadsheetSheetResp():Ref<ReplaceSpreadsheetSheetResp>
	export function refOfReplaceSpreadsheetSheetResp(x:ReplaceSpreadsheetSheetResp,v:Ref<ReplaceSpreadsheetSheetResp>)
	export function unRefReplaceSpreadsheetSheetResp(v:Ref<ReplaceSpreadsheetSheetResp>):ReplaceSpreadsheetSheetResp
	export function emptyFindSpreadsheetSheetRespData():FindSpreadsheetSheetRespData
	export function emptyRefFindSpreadsheetSheetRespData():Ref<FindSpreadsheetSheetRespData>
	export function refOfFindSpreadsheetSheetRespData(x:FindSpreadsheetSheetRespData,v:Ref<FindSpreadsheetSheetRespData>)
	export function unRefFindSpreadsheetSheetRespData(v:Ref<FindSpreadsheetSheetRespData>):FindSpreadsheetSheetRespData
	export function emptySegmentStyleStyle():SegmentStyleStyle
	export function emptyRefSegmentStyleStyle():Ref<SegmentStyleStyle>
	export function refOfSegmentStyleStyle(x:SegmentStyleStyle,v:Ref<SegmentStyleStyle>)
	export function unRefSegmentStyleStyle(v:Ref<SegmentStyleStyle>):SegmentStyleStyle
	export function emptySheetFilterInfo():SheetFilterInfo
	export function emptyRefSheetFilterInfo():Ref<SheetFilterInfo>
	export function refOfSheetFilterInfo(x:SheetFilterInfo,v:Ref<SheetFilterInfo>)
	export function unRefSheetFilterInfo(v:Ref<SheetFilterInfo>):SheetFilterInfo
	export function emptyCreateSpreadsheetSheetFilterResp():CreateSpreadsheetSheetFilterResp
	export function emptyRefCreateSpreadsheetSheetFilterResp():Ref<CreateSpreadsheetSheetFilterResp>
	export function refOfCreateSpreadsheetSheetFilterResp(x:CreateSpreadsheetSheetFilterResp,v:Ref<CreateSpreadsheetSheetFilterResp>)
	export function unRefCreateSpreadsheetSheetFilterResp(v:Ref<CreateSpreadsheetSheetFilterResp>):CreateSpreadsheetSheetFilterResp
	export function emptyCreateSpreadsheetSheetFloatImageRespData():CreateSpreadsheetSheetFloatImageRespData
	export function emptyRefCreateSpreadsheetSheetFloatImageRespData():Ref<CreateSpreadsheetSheetFloatImageRespData>
	export function refOfCreateSpreadsheetSheetFloatImageRespData(x:CreateSpreadsheetSheetFloatImageRespData,v:Ref<CreateSpreadsheetSheetFloatImageRespData>)
	export function unRefCreateSpreadsheetSheetFloatImageRespData(v:Ref<CreateSpreadsheetSheetFloatImageRespData>):CreateSpreadsheetSheetFloatImageRespData
	export function emptyDimension():Dimension
	export function emptyRefDimension():Ref<Dimension>
	export function refOfDimension(x:Dimension,v:Ref<Dimension>)
	export function unRefDimension(v:Ref<Dimension>):Dimension
	export function emptyGetSpreadsheetSheetFilterViewResp():GetSpreadsheetSheetFilterViewResp
	export function emptyRefGetSpreadsheetSheetFilterViewResp():Ref<GetSpreadsheetSheetFilterViewResp>
	export function refOfGetSpreadsheetSheetFilterViewResp(x:GetSpreadsheetSheetFilterViewResp,v:Ref<GetSpreadsheetSheetFilterViewResp>)
	export function unRefGetSpreadsheetSheetFilterViewResp(v:Ref<GetSpreadsheetSheetFilterViewResp>):GetSpreadsheetSheetFilterViewResp
	export function emptyMentionDocument():MentionDocument
	export function emptyRefMentionDocument():Ref<MentionDocument>
	export function refOfMentionDocument(x:MentionDocument,v:Ref<MentionDocument>)
	export function unRefMentionDocument(v:Ref<MentionDocument>):MentionDocument
	export function emptyBoolRuleValue():BoolRuleValue
	export function emptyRefBoolRuleValue():Ref<BoolRuleValue>
	export function refOfBoolRuleValue(x:BoolRuleValue,v:Ref<BoolRuleValue>)
	export function unRefBoolRuleValue(v:Ref<BoolRuleValue>):BoolRuleValue
	export function emptyDeleteSpreadsheetSheetFilterViewConditionResp():DeleteSpreadsheetSheetFilterViewConditionResp
	export function emptyRefDeleteSpreadsheetSheetFilterViewConditionResp():Ref<DeleteSpreadsheetSheetFilterViewConditionResp>
	export function refOfDeleteSpreadsheetSheetFilterViewConditionResp(x:DeleteSpreadsheetSheetFilterViewConditionResp,v:Ref<DeleteSpreadsheetSheetFilterViewConditionResp>)
	export function unRefDeleteSpreadsheetSheetFilterViewConditionResp(v:Ref<DeleteSpreadsheetSheetFilterViewConditionResp>):DeleteSpreadsheetSheetFilterViewConditionResp
	export function emptyGetSpreadsheet():GetSpreadsheet
	export function emptyRefGetSpreadsheet():Ref<GetSpreadsheet>
	export function refOfGetSpreadsheet(x:GetSpreadsheet,v:Ref<GetSpreadsheet>)
	export function unRefGetSpreadsheet(v:Ref<GetSpreadsheet>):GetSpreadsheet
	export function emptyReplaceSpreadsheetSheetRespData():ReplaceSpreadsheetSheetRespData
	export function emptyRefReplaceSpreadsheetSheetRespData():Ref<ReplaceSpreadsheetSheetRespData>
	export function refOfReplaceSpreadsheetSheetRespData(x:ReplaceSpreadsheetSheetRespData,v:Ref<ReplaceSpreadsheetSheetRespData>)
	export function unRefReplaceSpreadsheetSheetRespData(v:Ref<ReplaceSpreadsheetSheetRespData>):ReplaceSpreadsheetSheetRespData
	export function emptyUpdateSpreadsheetSheetFilterReq():UpdateSpreadsheetSheetFilterReq
	export function emptyRefUpdateSpreadsheetSheetFilterReq():Ref<UpdateSpreadsheetSheetFilterReq>
	export function refOfUpdateSpreadsheetSheetFilterReq(x:UpdateSpreadsheetSheetFilterReq,v:Ref<UpdateSpreadsheetSheetFilterReq>)
	export function unRefUpdateSpreadsheetSheetFilterReq(v:Ref<UpdateSpreadsheetSheetFilterReq>):UpdateSpreadsheetSheetFilterReq
	export function emptyGetSpreadsheetSheetFilterReq():GetSpreadsheetSheetFilterReq
	export function emptyRefGetSpreadsheetSheetFilterReq():Ref<GetSpreadsheetSheetFilterReq>
	export function refOfGetSpreadsheetSheetFilterReq(x:GetSpreadsheetSheetFilterReq,v:Ref<GetSpreadsheetSheetFilterReq>)
	export function unRefGetSpreadsheetSheetFilterReq(v:Ref<GetSpreadsheetSheetFilterReq>):GetSpreadsheetSheetFilterReq
	export function emptyCreateSpreadsheetSheetFilterViewReq():CreateSpreadsheetSheetFilterViewReq
	export function emptyRefCreateSpreadsheetSheetFilterViewReq():Ref<CreateSpreadsheetSheetFilterViewReq>
	export function refOfCreateSpreadsheetSheetFilterViewReq(x:CreateSpreadsheetSheetFilterViewReq,v:Ref<CreateSpreadsheetSheetFilterViewReq>)
	export function unRefCreateSpreadsheetSheetFilterViewReq(v:Ref<CreateSpreadsheetSheetFilterViewReq>):CreateSpreadsheetSheetFilterViewReq
	export function emptyDataValidationRule():DataValidationRule
	export function emptyRefDataValidationRule():Ref<DataValidationRule>
	export function refOfDataValidationRule(x:DataValidationRule,v:Ref<DataValidationRule>)
	export function unRefDataValidationRule(v:Ref<DataValidationRule>):DataValidationRule
	export function emptyProtectedColumns():ProtectedColumns
	export function emptyRefProtectedColumns():Ref<ProtectedColumns>
	export function refOfProtectedColumns(x:ProtectedColumns,v:Ref<ProtectedColumns>)
	export function unRefProtectedColumns(v:Ref<ProtectedColumns>):ProtectedColumns
	export function emptyFormula():Formula
	export function emptyRefFormula():Ref<Formula>
	export function refOfFormula(x:Formula,v:Ref<Formula>)
	export function unRefFormula(v:Ref<Formula>):Formula
	export function emptyCheckbox():Checkbox
	export function emptyRefCheckbox():Ref<Checkbox>
	export function refOfCheckbox(x:Checkbox,v:Ref<Checkbox>)
	export function unRefCheckbox(v:Ref<Checkbox>):Checkbox
	export function emptyGetSpreadsheetResp():GetSpreadsheetResp
	export function emptyRefGetSpreadsheetResp():Ref<GetSpreadsheetResp>
	export function refOfGetSpreadsheetResp(x:GetSpreadsheetResp,v:Ref<GetSpreadsheetResp>)
	export function unRefGetSpreadsheetResp(v:Ref<GetSpreadsheetResp>):GetSpreadsheetResp
	export function emptyGetSpreadsheetSheetFilterResp():GetSpreadsheetSheetFilterResp
	export function emptyRefGetSpreadsheetSheetFilterResp():Ref<GetSpreadsheetSheetFilterResp>
	export function refOfGetSpreadsheetSheetFilterResp(x:GetSpreadsheetSheetFilterResp,v:Ref<GetSpreadsheetSheetFilterResp>)
	export function unRefGetSpreadsheetSheetFilterResp(v:Ref<GetSpreadsheetSheetFilterResp>):GetSpreadsheetSheetFilterResp
	export function emptyGetSpreadsheetSheetFilterViewRespData():GetSpreadsheetSheetFilterViewRespData
	export function emptyRefGetSpreadsheetSheetFilterViewRespData():Ref<GetSpreadsheetSheetFilterViewRespData>
	export function refOfGetSpreadsheetSheetFilterViewRespData(x:GetSpreadsheetSheetFilterViewRespData,v:Ref<GetSpreadsheetSheetFilterViewRespData>)
	export function unRefGetSpreadsheetSheetFilterViewRespData(v:Ref<GetSpreadsheetSheetFilterViewRespData>):GetSpreadsheetSheetFilterViewRespData
	export function emptyMultipleOption():MultipleOption
	export function emptyRefMultipleOption():Ref<MultipleOption>
	export function refOfMultipleOption(x:MultipleOption,v:Ref<MultipleOption>)
	export function unRefMultipleOption(v:Ref<MultipleOption>):MultipleOption
	export function emptyQuerySpreadsheetSheetRespData():QuerySpreadsheetSheetRespData
	export function emptyRefQuerySpreadsheetSheetRespData():Ref<QuerySpreadsheetSheetRespData>
	export function refOfQuerySpreadsheetSheetRespData(x:QuerySpreadsheetSheetRespData,v:Ref<QuerySpreadsheetSheetRespData>)
	export function unRefQuerySpreadsheetSheetRespData(v:Ref<QuerySpreadsheetSheetRespData>):QuerySpreadsheetSheetRespData
	export function emptyCreateSpreadsheetSheetFilterViewResp():CreateSpreadsheetSheetFilterViewResp
	export function emptyRefCreateSpreadsheetSheetFilterViewResp():Ref<CreateSpreadsheetSheetFilterViewResp>
	export function refOfCreateSpreadsheetSheetFilterViewResp(x:CreateSpreadsheetSheetFilterViewResp,v:Ref<CreateSpreadsheetSheetFilterViewResp>)
	export function unRefCreateSpreadsheetSheetFilterViewResp(v:Ref<CreateSpreadsheetSheetFilterViewResp>):CreateSpreadsheetSheetFilterViewResp
	export function emptyGetSpreadsheetSheetFilterViewConditionResp():GetSpreadsheetSheetFilterViewConditionResp
	export function emptyRefGetSpreadsheetSheetFilterViewConditionResp():Ref<GetSpreadsheetSheetFilterViewConditionResp>
	export function refOfGetSpreadsheetSheetFilterViewConditionResp(x:GetSpreadsheetSheetFilterViewConditionResp,v:Ref<GetSpreadsheetSheetFilterViewConditionResp>)
	export function unRefGetSpreadsheetSheetFilterViewConditionResp(v:Ref<GetSpreadsheetSheetFilterViewConditionResp>):GetSpreadsheetSheetFilterViewConditionResp
	export function emptyFilterInfo():FilterInfo
	export function emptyRefFilterInfo():Ref<FilterInfo>
	export function refOfFilterInfo(x:FilterInfo,v:Ref<FilterInfo>)
	export function unRefFilterInfo(v:Ref<FilterInfo>):FilterInfo
	export function emptyQuerySpreadsheetSheetReq():QuerySpreadsheetSheetReq
	export function emptyRefQuerySpreadsheetSheetReq():Ref<QuerySpreadsheetSheetReq>
	export function refOfQuerySpreadsheetSheetReq(x:QuerySpreadsheetSheetReq,v:Ref<QuerySpreadsheetSheetReq>)
	export function unRefQuerySpreadsheetSheetReq(v:Ref<QuerySpreadsheetSheetReq>):QuerySpreadsheetSheetReq
	export function emptyAppendDimension():AppendDimension
	export function emptyRefAppendDimension():Ref<AppendDimension>
	export function refOfAppendDimension(x:AppendDimension,v:Ref<AppendDimension>)
	export function unRefAppendDimension(v:Ref<AppendDimension>):AppendDimension
	export function emptyCellFontStyle():CellFontStyle
	export function emptyRefCellFontStyle():Ref<CellFontStyle>
	export function refOfCellFontStyle(x:CellFontStyle,v:Ref<CellFontStyle>)
	export function unRefCellFontStyle(v:Ref<CellFontStyle>):CellFontStyle
	export function emptyLink():Link
	export function emptyRefLink():Ref<Link>
	export function refOfLink(x:Link,v:Ref<Link>)
	export function unRefLink(v:Ref<Link>):Link
	export function emptyFloatImage():FloatImage
	export function emptyRefFloatImage():Ref<FloatImage>
	export function refOfFloatImage(x:FloatImage,v:Ref<FloatImage>)
	export function unRefFloatImage(v:Ref<FloatImage>):FloatImage
	export function emptyPatchSpreadsheetSheetFloatImageResp():PatchSpreadsheetSheetFloatImageResp
	export function emptyRefPatchSpreadsheetSheetFloatImageResp():Ref<PatchSpreadsheetSheetFloatImageResp>
	export function refOfPatchSpreadsheetSheetFloatImageResp(x:PatchSpreadsheetSheetFloatImageResp,v:Ref<PatchSpreadsheetSheetFloatImageResp>)
	export function unRefPatchSpreadsheetSheetFloatImageResp(v:Ref<PatchSpreadsheetSheetFloatImageResp>):PatchSpreadsheetSheetFloatImageResp
	export function emptyDataValidationValue():DataValidationValue
	export function emptyRefDataValidationValue():Ref<DataValidationValue>
	export function refOfDataValidationValue(x:DataValidationValue,v:Ref<DataValidationValue>)
	export function unRefDataValidationValue(v:Ref<DataValidationValue>):DataValidationValue
	export function emptyGetSpreadsheetReq():GetSpreadsheetReq
	export function emptyRefGetSpreadsheetReq():Ref<GetSpreadsheetReq>
	export function refOfGetSpreadsheetReq(x:GetSpreadsheetReq,v:Ref<GetSpreadsheetReq>)
	export function unRefGetSpreadsheetReq(v:Ref<GetSpreadsheetReq>):GetSpreadsheetReq
	export function emptyFind():Find
	export function emptyRefFind():Ref<Find>
	export function refOfFind(x:Find,v:Ref<Find>)
	export function unRefFind(v:Ref<Find>):Find
	export function emptyGetSpreadsheetSheetFilterViewConditionRespData():GetSpreadsheetSheetFilterViewConditionRespData
	export function emptyRefGetSpreadsheetSheetFilterViewConditionRespData():Ref<GetSpreadsheetSheetFilterViewConditionRespData>
	export function refOfGetSpreadsheetSheetFilterViewConditionRespData(x:GetSpreadsheetSheetFilterViewConditionRespData,v:Ref<GetSpreadsheetSheetFilterViewConditionRespData>)
	export function unRefGetSpreadsheetSheetFilterViewConditionRespData(v:Ref<GetSpreadsheetSheetFilterViewConditionRespData>):GetSpreadsheetSheetFilterViewConditionRespData
	export function emptyQuerySpreadsheetSheetFilterViewConditionReq():QuerySpreadsheetSheetFilterViewConditionReq
	export function emptyRefQuerySpreadsheetSheetFilterViewConditionReq():Ref<QuerySpreadsheetSheetFilterViewConditionReq>
	export function refOfQuerySpreadsheetSheetFilterViewConditionReq(x:QuerySpreadsheetSheetFilterViewConditionReq,v:Ref<QuerySpreadsheetSheetFilterViewConditionReq>)
	export function unRefQuerySpreadsheetSheetFilterViewConditionReq(v:Ref<QuerySpreadsheetSheetFilterViewConditionReq>):QuerySpreadsheetSheetFilterViewConditionReq
	export function emptyReminder():Reminder
	export function emptyRefReminder():Ref<Reminder>
	export function refOfReminder(x:Reminder,v:Ref<Reminder>)
	export function unRefReminder(v:Ref<Reminder>):Reminder
	export function emptyUpdateSpreadsheetSheetFilterViewConditionRespData():UpdateSpreadsheetSheetFilterViewConditionRespData
	export function emptyRefUpdateSpreadsheetSheetFilterViewConditionRespData():Ref<UpdateSpreadsheetSheetFilterViewConditionRespData>
	export function refOfUpdateSpreadsheetSheetFilterViewConditionRespData(x:UpdateSpreadsheetSheetFilterViewConditionRespData,v:Ref<UpdateSpreadsheetSheetFilterViewConditionRespData>)
	export function unRefUpdateSpreadsheetSheetFilterViewConditionRespData(v:Ref<UpdateSpreadsheetSheetFilterViewConditionRespData>):UpdateSpreadsheetSheetFilterViewConditionRespData
	export function emptyDeleteSpreadsheetSheetFilterResp():DeleteSpreadsheetSheetFilterResp
	export function emptyRefDeleteSpreadsheetSheetFilterResp():Ref<DeleteSpreadsheetSheetFilterResp>
	export function refOfDeleteSpreadsheetSheetFilterResp(x:DeleteSpreadsheetSheetFilterResp,v:Ref<DeleteSpreadsheetSheetFilterResp>)
	export function unRefDeleteSpreadsheetSheetFilterResp(v:Ref<DeleteSpreadsheetSheetFilterResp>):DeleteSpreadsheetSheetFilterResp
	export function emptyPatchSpreadsheetSheetFilterViewRespData():PatchSpreadsheetSheetFilterViewRespData
	export function emptyRefPatchSpreadsheetSheetFilterViewRespData():Ref<PatchSpreadsheetSheetFilterViewRespData>
	export function refOfPatchSpreadsheetSheetFilterViewRespData(x:PatchSpreadsheetSheetFilterViewRespData,v:Ref<PatchSpreadsheetSheetFilterViewRespData>)
	export function unRefPatchSpreadsheetSheetFilterViewRespData(v:Ref<PatchSpreadsheetSheetFilterViewRespData>):PatchSpreadsheetSheetFilterViewRespData
	export function emptyPlainTextValueRange():PlainTextValueRange
	export function emptyRefPlainTextValueRange():Ref<PlainTextValueRange>
	export function refOfPlainTextValueRange(x:PlainTextValueRange,v:Ref<PlainTextValueRange>)
	export function unRefPlainTextValueRange(v:Ref<PlainTextValueRange>):PlainTextValueRange
	export function emptyCondition():Condition
	export function emptyRefCondition():Ref<Condition>
	export function refOfCondition(x:Condition,v:Ref<Condition>)
	export function unRefCondition(v:Ref<Condition>):Condition
	export function emptyCreateSpreadsheetSheetFilterViewConditionResp():CreateSpreadsheetSheetFilterViewConditionResp
	export function emptyRefCreateSpreadsheetSheetFilterViewConditionResp():Ref<CreateSpreadsheetSheetFilterViewConditionResp>
	export function refOfCreateSpreadsheetSheetFilterViewConditionResp(x:CreateSpreadsheetSheetFilterViewConditionResp,v:Ref<CreateSpreadsheetSheetFilterViewConditionResp>)
	export function unRefCreateSpreadsheetSheetFilterViewConditionResp(v:Ref<CreateSpreadsheetSheetFilterViewConditionResp>):CreateSpreadsheetSheetFilterViewConditionResp
	export function emptyInsertDimension():InsertDimension
	export function emptyRefInsertDimension():Ref<InsertDimension>
	export function refOfInsertDimension(x:InsertDimension,v:Ref<InsertDimension>)
	export function unRefInsertDimension(v:Ref<InsertDimension>):InsertDimension
	export function emptyStyleRanges():StyleRanges
	export function emptyRefStyleRanges():Ref<StyleRanges>
	export function refOfStyleRanges(x:StyleRanges,v:Ref<StyleRanges>)
	export function unRefStyleRanges(v:Ref<StyleRanges>):StyleRanges
	export function emptyAlignmentStyle():AlignmentStyle
	export function emptyRefAlignmentStyle():Ref<AlignmentStyle>
	export function refOfAlignmentStyle(x:AlignmentStyle,v:Ref<AlignmentStyle>)
	export function unRefAlignmentStyle(v:Ref<AlignmentStyle>):AlignmentStyle
	export function emptyProtectedRangeEditors():ProtectedRangeEditors
	export function emptyRefProtectedRangeEditors():Ref<ProtectedRangeEditors>
	export function refOfProtectedRangeEditors(x:ProtectedRangeEditors,v:Ref<ProtectedRangeEditors>)
	export function unRefProtectedRangeEditors(v:Ref<ProtectedRangeEditors>):ProtectedRangeEditors
	export function emptyUpdateSpreadsheetSheetFilterViewConditionReq():UpdateSpreadsheetSheetFilterViewConditionReq
	export function emptyRefUpdateSpreadsheetSheetFilterViewConditionReq():Ref<UpdateSpreadsheetSheetFilterViewConditionReq>
	export function refOfUpdateSpreadsheetSheetFilterViewConditionReq(x:UpdateSpreadsheetSheetFilterViewConditionReq,v:Ref<UpdateSpreadsheetSheetFilterViewConditionReq>)
	export function unRefUpdateSpreadsheetSheetFilterViewConditionReq(v:Ref<UpdateSpreadsheetSheetFilterViewConditionReq>):UpdateSpreadsheetSheetFilterViewConditionReq
	export function emptyCellValue():CellValue
	export function emptyRefCellValue():Ref<CellValue>
	export function refOfCellValue(x:CellValue,v:Ref<CellValue>)
	export function unRefCellValue(v:Ref<CellValue>):CellValue
	export function emptyGetSpreadsheetRespData():GetSpreadsheetRespData
	export function emptyRefGetSpreadsheetRespData():Ref<GetSpreadsheetRespData>
	export function refOfGetSpreadsheetRespData(x:GetSpreadsheetRespData,v:Ref<GetSpreadsheetRespData>)
	export function unRefGetSpreadsheetRespData(v:Ref<GetSpreadsheetRespData>):GetSpreadsheetRespData
	export function emptyLeftBorderStyle():LeftBorderStyle
	export function emptyRefLeftBorderStyle():Ref<LeftBorderStyle>
	export function refOfLeftBorderStyle(x:LeftBorderStyle,v:Ref<LeftBorderStyle>)
	export function unRefLeftBorderStyle(v:Ref<LeftBorderStyle>):LeftBorderStyle
	export function emptyPatchProtectedRange():PatchProtectedRange
	export function emptyRefPatchProtectedRange():Ref<PatchProtectedRange>
	export function refOfPatchProtectedRange(x:PatchProtectedRange,v:Ref<PatchProtectedRange>)
	export function unRefPatchProtectedRange(v:Ref<PatchProtectedRange>):PatchProtectedRange
	export function emptyV3():V3
	export function emptyRefV3():Ref<V3>
	export function refOfV3(x:V3,v:Ref<V3>)
	export function unRefV3(v:Ref<V3>):V3
	export function emptyUpdateSpreadsheetSheetFilterViewConditionResp():UpdateSpreadsheetSheetFilterViewConditionResp
	export function emptyRefUpdateSpreadsheetSheetFilterViewConditionResp():Ref<UpdateSpreadsheetSheetFilterViewConditionResp>
	export function refOfUpdateSpreadsheetSheetFilterViewConditionResp(x:UpdateSpreadsheetSheetFilterViewConditionResp,v:Ref<UpdateSpreadsheetSheetFilterViewConditionResp>)
	export function unRefUpdateSpreadsheetSheetFilterViewConditionResp(v:Ref<UpdateSpreadsheetSheetFilterViewConditionResp>):UpdateSpreadsheetSheetFilterViewConditionResp
	export function emptyClearStyleMultiRange():ClearStyleMultiRange
	export function emptyRefClearStyleMultiRange():Ref<ClearStyleMultiRange>
	export function refOfClearStyleMultiRange(x:ClearStyleMultiRange,v:Ref<ClearStyleMultiRange>)
	export function unRefClearStyleMultiRange(v:Ref<ClearStyleMultiRange>):ClearStyleMultiRange
	export function emptyConditionalFormatRule():ConditionalFormatRule
	export function emptyRefConditionalFormatRule():Ref<ConditionalFormatRule>
	export function refOfConditionalFormatRule(x:ConditionalFormatRule,v:Ref<ConditionalFormatRule>)
	export function unRefConditionalFormatRule(v:Ref<ConditionalFormatRule>):ConditionalFormatRule
	export function emptyProtectedRows():ProtectedRows
	export function emptyRefProtectedRows():Ref<ProtectedRows>
	export function refOfProtectedRows(x:ProtectedRows,v:Ref<ProtectedRows>)
	export function unRefProtectedRows(v:Ref<ProtectedRows>):ProtectedRows
	export function emptyQuerySpreadsheetSheetFloatImageResp():QuerySpreadsheetSheetFloatImageResp
	export function emptyRefQuerySpreadsheetSheetFloatImageResp():Ref<QuerySpreadsheetSheetFloatImageResp>
	export function refOfQuerySpreadsheetSheetFloatImageResp(x:QuerySpreadsheetSheetFloatImageResp,v:Ref<QuerySpreadsheetSheetFloatImageResp>)
	export function unRefQuerySpreadsheetSheetFloatImageResp(v:Ref<QuerySpreadsheetSheetFloatImageResp>):QuerySpreadsheetSheetFloatImageResp
	export function emptyConditionalFormatRange():ConditionalFormatRange
	export function emptyRefConditionalFormatRange():Ref<ConditionalFormatRange>
	export function refOfConditionalFormatRange(x:ConditionalFormatRange,v:Ref<ConditionalFormatRange>)
	export function unRefConditionalFormatRange(v:Ref<ConditionalFormatRange>):ConditionalFormatRange
	export function emptyGetSpreadsheetSheetFilterViewReq():GetSpreadsheetSheetFilterViewReq
	export function emptyRefGetSpreadsheetSheetFilterViewReq():Ref<GetSpreadsheetSheetFilterViewReq>
	export function refOfGetSpreadsheetSheetFilterViewReq(x:GetSpreadsheetSheetFilterViewReq,v:Ref<GetSpreadsheetSheetFilterViewReq>)
	export function unRefGetSpreadsheetSheetFilterViewReq(v:Ref<GetSpreadsheetSheetFilterViewReq>):GetSpreadsheetSheetFilterViewReq
	export function emptySingleOption():SingleOption
	export function emptyRefSingleOption():Ref<SingleOption>
	export function refOfSingleOption(x:SingleOption,v:Ref<SingleOption>)
	export function unRefSingleOption(v:Ref<SingleOption>):SingleOption
}