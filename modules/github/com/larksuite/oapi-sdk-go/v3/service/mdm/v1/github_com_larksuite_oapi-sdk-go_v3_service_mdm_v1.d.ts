// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/mdm/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Ref,int,Struct,bool,float64,error} from 'go'
	export interface Appendix extends Struct<Appendix>{

			fileId:Ref<string>
			fileName:Ref<string>
			fileType:Ref<string>
			fileSize:Ref<int>
			downloadUrl:Ref<string>
	}
	export interface AppendixBuilder extends Struct<AppendixBuilder>{

			fileId(fileId:string):Ref<AppendixBuilder>
			fileName(fileName:string):Ref<AppendixBuilder>
			fileType(fileType:string):Ref<AppendixBuilder>
			fileSize(fileSize:int):Ref<AppendixBuilder>
			downloadUrl(downloadUrl:string):Ref<AppendixBuilder>
			build():Ref<Appendix>
	}
	export interface BindUserAuthDataRelationReq extends Struct<BindUserAuthDataRelationReq>{

			userAuthDataRelation:Ref<UserAuthDataRelation>
	}
	export interface BindUserAuthDataRelationReqBuilder extends Struct<BindUserAuthDataRelationReqBuilder>{

			userIdType(userIdType:string):Ref<BindUserAuthDataRelationReqBuilder>
			userAuthDataRelation(userAuthDataRelation:Ref<UserAuthDataRelation>):Ref<BindUserAuthDataRelationReqBuilder>
			build():Ref<BindUserAuthDataRelationReq>
	}
	export interface BindUserAuthDataRelationResp extends Struct<BindUserAuthDataRelationResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface Company extends Struct<Company>{

			companyCode:Ref<string>
			companyName:Ref<string>
			companyUid:Ref<string>
			legalEntityCode:Ref<string>
			coAreaCode:Ref<string>
			currencyCode:Ref<string>
			countryCode:Ref<string>
			companyNameEn:Ref<string>
	}
	export interface CompanyAsset extends Struct<CompanyAsset>{

			assetUid:Ref<string>
			assetSubNo:Ref<string>
			assetType:Ref<string>
			assetTypeName:Ref<string>
			assetName:Ref<string>
			quantity:Ref<int>
			unit:Ref<string>
			companyUid:Ref<string>
			assetTypeNameEn:Ref<string>
			assetNo:Ref<string>
	}
	export interface CompanyAssetBuilder extends Struct<CompanyAssetBuilder>{

			assetUid(assetUid:string):Ref<CompanyAssetBuilder>
			assetSubNo(assetSubNo:string):Ref<CompanyAssetBuilder>
			assetType(assetType:string):Ref<CompanyAssetBuilder>
			assetTypeName(assetTypeName:string):Ref<CompanyAssetBuilder>
			assetName(assetName:string):Ref<CompanyAssetBuilder>
			quantity(quantity:int):Ref<CompanyAssetBuilder>
			unit(unit:string):Ref<CompanyAssetBuilder>
			companyUid(companyUid:string):Ref<CompanyAssetBuilder>
			assetTypeNameEn(assetTypeNameEn:string):Ref<CompanyAssetBuilder>
			assetNo(assetNo:string):Ref<CompanyAssetBuilder>
			build():Ref<CompanyAsset>
	}
	export interface CompanyBuilder extends Struct<CompanyBuilder>{

			companyCode(companyCode:string):Ref<CompanyBuilder>
			companyName(companyName:string):Ref<CompanyBuilder>
			companyUid(companyUid:string):Ref<CompanyBuilder>
			legalEntityCode(legalEntityCode:string):Ref<CompanyBuilder>
			coAreaCode(coAreaCode:string):Ref<CompanyBuilder>
			currencyCode(currencyCode:string):Ref<CompanyBuilder>
			countryCode(countryCode:string):Ref<CompanyBuilder>
			companyNameEn(companyNameEn:string):Ref<CompanyBuilder>
			build():Ref<Company>
	}
	export interface CompanyCompanyBankAccount extends Struct<CompanyCompanyBankAccount>{

			companyBankAccountUid:Ref<string>
			companyUid:Ref<string>
			account:Ref<string>
			iban:Ref<string>
			accountName:Ref<string>
			currencyCode:Ref<string>
			localRoutingCode:Ref<string>
			glAccountCode:Ref<string>
			clearingAccountCode:Ref<string>
			swift:Ref<string>
			accountAttriDesc:Ref<string>
			i18nAccountAttriDesc:Ref<I18nStruct>[]
	}
	export interface CompanyCompanyBankAccountBuilder extends Struct<CompanyCompanyBankAccountBuilder>{

			companyBankAccountUid(companyBankAccountUid:string):Ref<CompanyCompanyBankAccountBuilder>
			companyUid(companyUid:string):Ref<CompanyCompanyBankAccountBuilder>
			account(account:string):Ref<CompanyCompanyBankAccountBuilder>
			iban(iban:string):Ref<CompanyCompanyBankAccountBuilder>
			accountName(accountName:string):Ref<CompanyCompanyBankAccountBuilder>
			currencyCode(currencyCode:string):Ref<CompanyCompanyBankAccountBuilder>
			localRoutingCode(localRoutingCode:string):Ref<CompanyCompanyBankAccountBuilder>
			glAccountCode(glAccountCode:string):Ref<CompanyCompanyBankAccountBuilder>
			clearingAccountCode(clearingAccountCode:string):Ref<CompanyCompanyBankAccountBuilder>
			swift(swift:string):Ref<CompanyCompanyBankAccountBuilder>
			accountAttriDesc(accountAttriDesc:string):Ref<CompanyCompanyBankAccountBuilder>
			i18nAccountAttriDesc(i18nAccountAttriDesc:Ref<I18nStruct>[]):Ref<CompanyCompanyBankAccountBuilder>
			build():Ref<CompanyCompanyBankAccount>
	}
	export interface Config extends Struct<Config>{

			fieldCode:Ref<string>
			fieldName:Ref<string>
			module:Ref<int>
			fieldDescribe:Ref<string>
			sys:Ref<int>
			fieldType:Ref<int>
			required:Ref<int>
			status:Ref<int>
			fieldVersion:Ref<int>
	}
	export interface ConfigBuilder extends Struct<ConfigBuilder>{

			fieldCode(fieldCode:string):Ref<ConfigBuilder>
			fieldName(fieldName:string):Ref<ConfigBuilder>
			module(module:int):Ref<ConfigBuilder>
			fieldDescribe(fieldDescribe:string):Ref<ConfigBuilder>
			sys(sys:int):Ref<ConfigBuilder>
			fieldType(fieldType:int):Ref<ConfigBuilder>
			required(required:int):Ref<ConfigBuilder>
			status(status:int):Ref<ConfigBuilder>
			fieldVersion(fieldVersion:int):Ref<ConfigBuilder>
			build():Ref<Config>
	}
	export interface CostCenter extends Struct<CostCenter>{

			costCenterUid:Ref<string>
			costCenterCode:Ref<string>
			i18nCostCenterName:Ref<I18nStruct>[]
			responsibleUserUnionId:Ref<string>
			coAreaCode:Ref<string>
			profitCenterCode:Ref<string>
			businessArea:Ref<string>
			feeType:Ref<string>
			validTo:Ref<string>
			costCenterName:Ref<string>
			companyCodeList:string[]
	}
	export interface CostCenterBuilder extends Struct<CostCenterBuilder>{

			costCenterUid(costCenterUid:string):Ref<CostCenterBuilder>
			costCenterCode(costCenterCode:string):Ref<CostCenterBuilder>
			i18nCostCenterName(i18nCostCenterName:Ref<I18nStruct>[]):Ref<CostCenterBuilder>
			responsibleUserUnionId(responsibleUserUnionId:string):Ref<CostCenterBuilder>
			coAreaCode(coAreaCode:string):Ref<CostCenterBuilder>
			profitCenterCode(profitCenterCode:string):Ref<CostCenterBuilder>
			businessArea(businessArea:string):Ref<CostCenterBuilder>
			feeType(feeType:string):Ref<CostCenterBuilder>
			validTo(validTo:string):Ref<CostCenterBuilder>
			costCenterName(costCenterName:string):Ref<CostCenterBuilder>
			companyCodeList(companyCodeList:string[]):Ref<CostCenterBuilder>
			build():Ref<CostCenter>
	}
	export interface DepartmentCostCenterRelationship extends Struct<DepartmentCostCenterRelationship>{

			departmentCostCenterRelationshipUid:Ref<string>
			companyCode:Ref<string>
			openDepartmentId:Ref<string>
			costCenterCode:Ref<string>
			departmentId:Ref<string>
	}
	export interface DepartmentCostCenterRelationshipBuilder extends Struct<DepartmentCostCenterRelationshipBuilder>{

			departmentCostCenterRelationshipUid(departmentCostCenterRelationshipUid:string):Ref<DepartmentCostCenterRelationshipBuilder>
			companyCode(companyCode:string):Ref<DepartmentCostCenterRelationshipBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentCostCenterRelationshipBuilder>
			costCenterCode(costCenterCode:string):Ref<DepartmentCostCenterRelationshipBuilder>
			departmentId(departmentId:string):Ref<DepartmentCostCenterRelationshipBuilder>
			build():Ref<DepartmentCostCenterRelationship>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface ExtendField extends Struct<ExtendField>{

			fieldType:Ref<int>
			fieldValue:Ref<string>
			options:string[]
			num:Ref<float64>
			date:Ref<string>
			rangeDate:string[]
			fieldCode:Ref<string>
			appendix:Ref<Appendix>[]
	}
	export interface ExtendFieldBuilder extends Struct<ExtendFieldBuilder>{

			fieldType(fieldType:int):Ref<ExtendFieldBuilder>
			fieldValue(fieldValue:string):Ref<ExtendFieldBuilder>
			options(options:string[]):Ref<ExtendFieldBuilder>
			num(num:float64):Ref<ExtendFieldBuilder>
			date(date:string):Ref<ExtendFieldBuilder>
			rangeDate(rangeDate:string[]):Ref<ExtendFieldBuilder>
			fieldCode(fieldCode:string):Ref<ExtendFieldBuilder>
			appendix(appendix:Ref<Appendix>[]):Ref<ExtendFieldBuilder>
			build():Ref<ExtendField>
	}
	export interface FixedExchangeRate extends Struct<FixedExchangeRate>{

			sourceCurrency:Ref<string>
			targetCurrency:Ref<string>
			effectiveDate:Ref<string>
			exchangeRate:Ref<string>
			status:Ref<int>
	}
	export interface FixedExchangeRateBuilder extends Struct<FixedExchangeRateBuilder>{

			sourceCurrency(sourceCurrency:string):Ref<FixedExchangeRateBuilder>
			targetCurrency(targetCurrency:string):Ref<FixedExchangeRateBuilder>
			effectiveDate(effectiveDate:string):Ref<FixedExchangeRateBuilder>
			exchangeRate(exchangeRate:string):Ref<FixedExchangeRateBuilder>
			status(status:int):Ref<FixedExchangeRateBuilder>
			build():Ref<FixedExchangeRate>
	}
	export interface GlAccount extends Struct<GlAccount>{

			glAccountUid:Ref<string>
			glAccount:Ref<string>
			glAccountName:Ref<string>
			i18nGlAccountName:Ref<I18nStruct>[]
			type:Ref<string>
			validTo:Ref<string>
	}
	export interface GlAccountBuilder extends Struct<GlAccountBuilder>{

			glAccountUid(glAccountUid:string):Ref<GlAccountBuilder>
			glAccount(glAccount:string):Ref<GlAccountBuilder>
			glAccountName(glAccountName:string):Ref<GlAccountBuilder>
			i18nGlAccountName(i18nGlAccountName:Ref<I18nStruct>[]):Ref<GlAccountBuilder>
			type(type_:string):Ref<GlAccountBuilder>
			validTo(validTo:string):Ref<GlAccountBuilder>
			build():Ref<GlAccount>
	}
	export interface GlAccountCompanyRelationship extends Struct<GlAccountCompanyRelationship>{

			glAccountCode:Ref<string>
			companyCode:Ref<string>
			glAccountCompanyRelationshipUid:Ref<string>
			validTo:Ref<string>
	}
	export interface GlAccountCompanyRelationshipBuilder extends Struct<GlAccountCompanyRelationshipBuilder>{

			glAccountCode(glAccountCode:string):Ref<GlAccountCompanyRelationshipBuilder>
			companyCode(companyCode:string):Ref<GlAccountCompanyRelationshipBuilder>
			glAccountCompanyRelationshipUid(glAccountCompanyRelationshipUid:string):Ref<GlAccountCompanyRelationshipBuilder>
			validTo(validTo:string):Ref<GlAccountCompanyRelationshipBuilder>
			build():Ref<GlAccountCompanyRelationship>
	}
	export interface I18nStruct extends Struct<I18nStruct>{

			langLocale:Ref<string>
			value:Ref<string>
			validTo:Ref<string>
	}
	export interface I18nStructBuilder extends Struct<I18nStructBuilder>{

			langLocale(langLocale:string):Ref<I18nStructBuilder>
			value(value:string):Ref<I18nStructBuilder>
			validTo(validTo:string):Ref<I18nStructBuilder>
			build():Ref<I18nStruct>
	}
	export interface InternalOrder extends Struct<InternalOrder>{

			internalOrderUid:Ref<string>
			internalOrderCode:Ref<string>
			internalOrderName:Ref<string>
			type:Ref<string>
			responsibleUserUnionId:Ref<string>
			companyCode:Ref<string>
			coAreaCode:Ref<string>
	}
	export interface InternalOrderBuilder extends Struct<InternalOrderBuilder>{

			internalOrderUid(internalOrderUid:string):Ref<InternalOrderBuilder>
			internalOrderCode(internalOrderCode:string):Ref<InternalOrderBuilder>
			internalOrderName(internalOrderName:string):Ref<InternalOrderBuilder>
			type(type_:string):Ref<InternalOrderBuilder>
			responsibleUserUnionId(responsibleUserUnionId:string):Ref<InternalOrderBuilder>
			companyCode(companyCode:string):Ref<InternalOrderBuilder>
			coAreaCode(coAreaCode:string):Ref<InternalOrderBuilder>
			build():Ref<InternalOrder>
	}
	export interface LegalEntity extends Struct<LegalEntity>{

			id:Ref<string>
			legalEntity:Ref<string>
			legalEntityText:Ref<string>
			shortText:Ref<string>
			certificationType:Ref<string>
			certificationId:Ref<string>
			legalPerson:Ref<string>
			country:Ref<string>
			province:Ref<string>
			city:Ref<string>
			address:Ref<string>
			taxpayerType:Ref<string>
			telephone:Ref<string>
			bankId:Ref<string>
			bankName:Ref<string>
			bankAccount:Ref<string>
			status:Ref<int>
			legalEntityBanks:Ref<LegalEntityBank>[]
			extendInfo:Ref<ExtendField>[]
			appendix:Ref<Appendix>[]
	}
	export interface LegalEntityBank extends Struct<LegalEntityBank>{

			id:Ref<string>
			companyCode:Ref<string>
			bankId:Ref<string>
			bankCode:Ref<string>
			bankName:Ref<string>
			bankAcronym:Ref<string>
			country:Ref<string>
			accountName:Ref<string>
			bankAccount:Ref<string>
			swiftCode:Ref<string>
			bankControlCode:Ref<string>
			extendInfo:Ref<ExtendField>[]
			ibanAccount:Ref<string>
			currency:Ref<string>
			glAccount:Ref<string>
			clearingAccount:Ref<string>
			accountAttributeDesc:Ref<string>
	}
	export interface LegalEntityBankBuilder extends Struct<LegalEntityBankBuilder>{

			id(id:string):Ref<LegalEntityBankBuilder>
			companyCode(companyCode:string):Ref<LegalEntityBankBuilder>
			bankId(bankId:string):Ref<LegalEntityBankBuilder>
			bankCode(bankCode:string):Ref<LegalEntityBankBuilder>
			bankName(bankName:string):Ref<LegalEntityBankBuilder>
			bankAcronym(bankAcronym:string):Ref<LegalEntityBankBuilder>
			country(country:string):Ref<LegalEntityBankBuilder>
			accountName(accountName:string):Ref<LegalEntityBankBuilder>
			bankAccount(bankAccount:string):Ref<LegalEntityBankBuilder>
			swiftCode(swiftCode:string):Ref<LegalEntityBankBuilder>
			bankControlCode(bankControlCode:string):Ref<LegalEntityBankBuilder>
			extendInfo(extendInfo:Ref<ExtendField>[]):Ref<LegalEntityBankBuilder>
			ibanAccount(ibanAccount:string):Ref<LegalEntityBankBuilder>
			currency(currency:string):Ref<LegalEntityBankBuilder>
			glAccount(glAccount:string):Ref<LegalEntityBankBuilder>
			clearingAccount(clearingAccount:string):Ref<LegalEntityBankBuilder>
			accountAttributeDesc(accountAttributeDesc:string):Ref<LegalEntityBankBuilder>
			build():Ref<LegalEntityBank>
	}
	export interface LegalEntityBuilder extends Struct<LegalEntityBuilder>{

			id(id:string):Ref<LegalEntityBuilder>
			legalEntity(legalEntity:string):Ref<LegalEntityBuilder>
			legalEntityText(legalEntityText:string):Ref<LegalEntityBuilder>
			shortText(shortText:string):Ref<LegalEntityBuilder>
			certificationType(certificationType:string):Ref<LegalEntityBuilder>
			certificationId(certificationId:string):Ref<LegalEntityBuilder>
			legalPerson(legalPerson:string):Ref<LegalEntityBuilder>
			country(country:string):Ref<LegalEntityBuilder>
			province(province:string):Ref<LegalEntityBuilder>
			city(city:string):Ref<LegalEntityBuilder>
			address(address:string):Ref<LegalEntityBuilder>
			taxpayerType(taxpayerType:string):Ref<LegalEntityBuilder>
			telephone(telephone:string):Ref<LegalEntityBuilder>
			bankId(bankId:string):Ref<LegalEntityBuilder>
			bankName(bankName:string):Ref<LegalEntityBuilder>
			bankAccount(bankAccount:string):Ref<LegalEntityBuilder>
			status(status:int):Ref<LegalEntityBuilder>
			legalEntityBanks(legalEntityBanks:Ref<LegalEntityBank>[]):Ref<LegalEntityBuilder>
			extendInfo(extendInfo:Ref<ExtendField>[]):Ref<LegalEntityBuilder>
			appendix(appendix:Ref<Appendix>[]):Ref<LegalEntityBuilder>
			build():Ref<LegalEntity>
	}
	export interface MultiLanguage extends Struct<MultiLanguage>{

			language:Ref<string>
			value:Ref<string>
	}
	export interface MultiLanguageBuilder extends Struct<MultiLanguageBuilder>{

			language(language:string):Ref<MultiLanguageBuilder>
			value(value:string):Ref<MultiLanguageBuilder>
			build():Ref<MultiLanguage>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAppendixBuilder():Ref<AppendixBuilder>

	export function newBindUserAuthDataRelationReqBuilder():Ref<BindUserAuthDataRelationReqBuilder>

	export function newCompanyAssetBuilder():Ref<CompanyAssetBuilder>

	export function newCompanyBuilder():Ref<CompanyBuilder>

	export function newCompanyCompanyBankAccountBuilder():Ref<CompanyCompanyBankAccountBuilder>

	export function newConfigBuilder():Ref<ConfigBuilder>

	export function newCostCenterBuilder():Ref<CostCenterBuilder>

	export function newDepartmentCostCenterRelationshipBuilder():Ref<DepartmentCostCenterRelationshipBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newExtendFieldBuilder():Ref<ExtendFieldBuilder>

	export function newFixedExchangeRateBuilder():Ref<FixedExchangeRateBuilder>

	export function newGlAccountBuilder():Ref<GlAccountBuilder>

	export function newGlAccountCompanyRelationshipBuilder():Ref<GlAccountCompanyRelationshipBuilder>

	export function newI18nStructBuilder():Ref<I18nStructBuilder>

	export function newInternalOrderBuilder():Ref<InternalOrderBuilder>

	export function newLegalEntityBankBuilder():Ref<LegalEntityBankBuilder>

	export function newLegalEntityBuilder():Ref<LegalEntityBuilder>

	export function newMultiLanguageBuilder():Ref<MultiLanguageBuilder>

	export function newOpenApiUpdateVendorBuilder():Ref<OpenApiUpdateVendorBuilder>

	export function newProjectBuilder():Ref<ProjectBuilder>

	export function newProjectCompanyDeptMappingBuilder():Ref<ProjectCompanyDeptMappingBuilder>

	export function newUnbindUserAuthDataRelationReqBuilder():Ref<UnbindUserAuthDataRelationReqBuilder>

	export function newUserAuthDataRelationBuilder():Ref<UserAuthDataRelationBuilder>

	export function newVendorAccountBuilder():Ref<VendorAccountBuilder>

	export function newVendorAddressBuilder():Ref<VendorAddressBuilder>

	export function newVendorBuilder():Ref<VendorBuilder>

	export function newVendorCompanyViewBuilder():Ref<VendorCompanyViewBuilder>

	export function newVendorContactBuilder():Ref<VendorContactBuilder>

	export interface OpenApiUpdateVendor extends Struct<OpenApiUpdateVendor>{

			id:Ref<string>
	}
	export interface OpenApiUpdateVendorBuilder extends Struct<OpenApiUpdateVendorBuilder>{

			id(id:string):Ref<OpenApiUpdateVendorBuilder>
			build():Ref<OpenApiUpdateVendor>
	}
	export interface Project extends Struct<Project>{

			projectUid:Ref<string>
			code:Ref<string>
			name:Ref<string>
			type:Ref<string>
			responsibleUserUnionId:Ref<string>
			startDay:Ref<string>
			endDay:Ref<string>
			parentCode:Ref<string>
			level:Ref<int>
			levelInfo:Ref<string>
			status:Ref<int>
			extendInfo:Ref<ExtendField>[]
			isAllCompany:Ref<bool>
			projectCompanyDeptMappings:Ref<ProjectCompanyDeptMapping>[]
			multiLanguageName:Ref<MultiLanguage>[]
	}
	export interface ProjectBuilder extends Struct<ProjectBuilder>{

			projectUid(projectUid:string):Ref<ProjectBuilder>
			code(code:string):Ref<ProjectBuilder>
			name(name:string):Ref<ProjectBuilder>
			type(type_:string):Ref<ProjectBuilder>
			responsibleUserUnionId(responsibleUserUnionId:string):Ref<ProjectBuilder>
			startDay(startDay:string):Ref<ProjectBuilder>
			endDay(endDay:string):Ref<ProjectBuilder>
			parentCode(parentCode:string):Ref<ProjectBuilder>
			level(level:int):Ref<ProjectBuilder>
			levelInfo(levelInfo:string):Ref<ProjectBuilder>
			status(status:int):Ref<ProjectBuilder>
			extendInfo(extendInfo:Ref<ExtendField>[]):Ref<ProjectBuilder>
			isAllCompany(isAllCompany:bool):Ref<ProjectBuilder>
			projectCompanyDeptMappings(projectCompanyDeptMappings:Ref<ProjectCompanyDeptMapping>[]):Ref<ProjectBuilder>
			multiLanguageName(multiLanguageName:Ref<MultiLanguage>[]):Ref<ProjectBuilder>
			build():Ref<Project>
	}
	export interface ProjectCompanyDeptMapping extends Struct<ProjectCompanyDeptMapping>{

			projectUnionId:Ref<string>
			companyUnionId:Ref<string>
			isAllDepartment:Ref<bool>
			departmentUnionId:Ref<string>
	}
	export interface ProjectCompanyDeptMappingBuilder extends Struct<ProjectCompanyDeptMappingBuilder>{

			projectUnionId(projectUnionId:string):Ref<ProjectCompanyDeptMappingBuilder>
			companyUnionId(companyUnionId:string):Ref<ProjectCompanyDeptMappingBuilder>
			isAllDepartment(isAllDepartment:bool):Ref<ProjectCompanyDeptMappingBuilder>
			departmentUnionId(departmentUnionId:string):Ref<ProjectCompanyDeptMappingBuilder>
			build():Ref<ProjectCompanyDeptMapping>
	}
	export interface UnbindUserAuthDataRelationReq extends Struct<UnbindUserAuthDataRelationReq>{

			userAuthDataRelation:Ref<UserAuthDataRelation>
	}
	export interface UnbindUserAuthDataRelationReqBuilder extends Struct<UnbindUserAuthDataRelationReqBuilder>{

			userIdType(userIdType:string):Ref<UnbindUserAuthDataRelationReqBuilder>
			userAuthDataRelation(userAuthDataRelation:Ref<UserAuthDataRelation>):Ref<UnbindUserAuthDataRelationReqBuilder>
			build():Ref<UnbindUserAuthDataRelationReq>
	}
	export interface UnbindUserAuthDataRelationResp extends Struct<UnbindUserAuthDataRelationResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface UserAuthDataRelation extends Struct<UserAuthDataRelation>{

			rootDimensionType:Ref<string>
			subDimensionTypes:string[]
			authorizedUserIds:string[]
			uamsAppId:Ref<string>
	}
	export interface UserAuthDataRelationBuilder extends Struct<UserAuthDataRelationBuilder>{

			rootDimensionType(rootDimensionType:string):Ref<UserAuthDataRelationBuilder>
			subDimensionTypes(subDimensionTypes:string[]):Ref<UserAuthDataRelationBuilder>
			authorizedUserIds(authorizedUserIds:string[]):Ref<UserAuthDataRelationBuilder>
			uamsAppId(uamsAppId:string):Ref<UserAuthDataRelationBuilder>
			build():Ref<UserAuthDataRelation>
	}
	//"open_id"
	export const UserIdTypeOpenId:string
	//"open_id"
	export const UserIdTypeUnbindUserAuthDataRelationOpenId:string
	//"union_id"
	export const UserIdTypeUnbindUserAuthDataRelationUnionId:string
	//"user_id"
	export const UserIdTypeUnbindUserAuthDataRelationUserId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V1 extends Struct<V1>{

			userAuthDataRelation:Ref<{
			
				bind(ctx:context.Context,req:Ref<BindUserAuthDataRelationReq>,...options:larkcore.RequestOptionFunc[]):Ref<BindUserAuthDataRelationResp>
				unbind(ctx:context.Context,req:Ref<UnbindUserAuthDataRelationReq>,...options:larkcore.RequestOptionFunc[]):Ref<UnbindUserAuthDataRelationResp>
			}>
	}
	export interface Vendor extends Struct<Vendor>{

			id:Ref<string>
			adCountry:Ref<string>
			adProvince:Ref<string>
			adCity:Ref<string>
			address:Ref<string>
			adPostcode:Ref<string>
			legalPerson:Ref<string>
			certificationType:Ref<string>
			certificationId:Ref<string>
			contactPerson:Ref<string>
			contactTelephone:Ref<string>
			contactMobilePhone:Ref<string>
			fax:Ref<string>
			eMail:Ref<string>
			status:Ref<int>
			vendor:Ref<string>
			vendorText:Ref<string>
			shortText:Ref<string>
			vendorType:Ref<string>
			vendorCategory:Ref<string>
			vendorNature:Ref<string>
			linkedEmployee:Ref<string>
			linkedCustomer:Ref<string>
			associatedWithLegalEntity:Ref<bool>
			extendInfo:Ref<ExtendField>[]
			vendorAccounts:Ref<VendorAccount>[]
			vendorAddresses:Ref<VendorAddress>[]
			vendorCompanyViews:Ref<VendorCompanyView>[]
			vendorContacts:Ref<VendorContact>[]
			glAccount:Ref<string>
			downPaymentTerm:Ref<string>
			paymentTerm:Ref<string>
			vendorSiteCode:Ref<string>
			appendix:Ref<Appendix>[]
			isRisked:Ref<bool>
			ownerDepts:string[]
	}
	export interface VendorAccount extends Struct<VendorAccount>{

			id:Ref<string>
			account:Ref<string>
			iban:Ref<string>
			accountName:Ref<string>
			bankId:Ref<string>
			bankCode:Ref<string>
			swiftCode:Ref<string>
			vendorSiteCode:Ref<string>
			bankName:Ref<string>
			bankAcronym:Ref<string>
			country:Ref<string>
			bankControlCode:Ref<string>
			extendInfo:Ref<ExtendField>[]
	}
	export interface VendorAccountBuilder extends Struct<VendorAccountBuilder>{

			id(id:string):Ref<VendorAccountBuilder>
			account(account:string):Ref<VendorAccountBuilder>
			iban(iban:string):Ref<VendorAccountBuilder>
			accountName(accountName:string):Ref<VendorAccountBuilder>
			bankId(bankId:string):Ref<VendorAccountBuilder>
			bankCode(bankCode:string):Ref<VendorAccountBuilder>
			swiftCode(swiftCode:string):Ref<VendorAccountBuilder>
			vendorSiteCode(vendorSiteCode:string):Ref<VendorAccountBuilder>
			bankName(bankName:string):Ref<VendorAccountBuilder>
			bankAcronym(bankAcronym:string):Ref<VendorAccountBuilder>
			country(country:string):Ref<VendorAccountBuilder>
			bankControlCode(bankControlCode:string):Ref<VendorAccountBuilder>
			extendInfo(extendInfo:Ref<ExtendField>[]):Ref<VendorAccountBuilder>
			build():Ref<VendorAccount>
	}
	export interface VendorAddress extends Struct<VendorAddress>{

			id:Ref<string>
			country:Ref<string>
			province:Ref<string>
			city:Ref<string>
			county:Ref<string>
			address:Ref<string>
			extendInfo:Ref<ExtendField>[]
	}
	export interface VendorAddressBuilder extends Struct<VendorAddressBuilder>{

			id(id:string):Ref<VendorAddressBuilder>
			country(country:string):Ref<VendorAddressBuilder>
			province(province:string):Ref<VendorAddressBuilder>
			city(city:string):Ref<VendorAddressBuilder>
			county(county:string):Ref<VendorAddressBuilder>
			address(address:string):Ref<VendorAddressBuilder>
			extendInfo(extendInfo:Ref<ExtendField>[]):Ref<VendorAddressBuilder>
			build():Ref<VendorAddress>
	}
	export interface VendorBuilder extends Struct<VendorBuilder>{

			id(id:string):Ref<VendorBuilder>
			adCountry(adCountry:string):Ref<VendorBuilder>
			adProvince(adProvince:string):Ref<VendorBuilder>
			adCity(adCity:string):Ref<VendorBuilder>
			address(address:string):Ref<VendorBuilder>
			adPostcode(adPostcode:string):Ref<VendorBuilder>
			legalPerson(legalPerson:string):Ref<VendorBuilder>
			certificationType(certificationType:string):Ref<VendorBuilder>
			certificationId(certificationId:string):Ref<VendorBuilder>
			contactPerson(contactPerson:string):Ref<VendorBuilder>
			contactTelephone(contactTelephone:string):Ref<VendorBuilder>
			contactMobilePhone(contactMobilePhone:string):Ref<VendorBuilder>
			fax(fax:string):Ref<VendorBuilder>
			eMail(eMail:string):Ref<VendorBuilder>
			status(status:int):Ref<VendorBuilder>
			vendor(vendor:string):Ref<VendorBuilder>
			vendorText(vendorText:string):Ref<VendorBuilder>
			shortText(shortText:string):Ref<VendorBuilder>
			vendorType(vendorType:string):Ref<VendorBuilder>
			vendorCategory(vendorCategory:string):Ref<VendorBuilder>
			vendorNature(vendorNature:string):Ref<VendorBuilder>
			linkedEmployee(linkedEmployee:string):Ref<VendorBuilder>
			linkedCustomer(linkedCustomer:string):Ref<VendorBuilder>
			associatedWithLegalEntity(associatedWithLegalEntity:bool):Ref<VendorBuilder>
			extendInfo(extendInfo:Ref<ExtendField>[]):Ref<VendorBuilder>
			vendorAccounts(vendorAccounts:Ref<VendorAccount>[]):Ref<VendorBuilder>
			vendorAddresses(vendorAddresses:Ref<VendorAddress>[]):Ref<VendorBuilder>
			vendorCompanyViews(vendorCompanyViews:Ref<VendorCompanyView>[]):Ref<VendorBuilder>
			vendorContacts(vendorContacts:Ref<VendorContact>[]):Ref<VendorBuilder>
			glAccount(glAccount:string):Ref<VendorBuilder>
			downPaymentTerm(downPaymentTerm:string):Ref<VendorBuilder>
			paymentTerm(paymentTerm:string):Ref<VendorBuilder>
			vendorSiteCode(vendorSiteCode:string):Ref<VendorBuilder>
			appendix(appendix:Ref<Appendix>[]):Ref<VendorBuilder>
			isRisked(isRisked:bool):Ref<VendorBuilder>
			ownerDepts(ownerDepts:string[]):Ref<VendorBuilder>
			build():Ref<Vendor>
	}
	export interface VendorCompanyView extends Struct<VendorCompanyView>{

			id:Ref<string>
			companyCode:Ref<string>
			glAccount:Ref<string>
			vendorSiteCode:Ref<string>
			paymentTerm:Ref<string>
			downPaymentTerm:Ref<string>
			extendInfo:Ref<ExtendField>[]
	}
	export interface VendorCompanyViewBuilder extends Struct<VendorCompanyViewBuilder>{

			id(id:string):Ref<VendorCompanyViewBuilder>
			companyCode(companyCode:string):Ref<VendorCompanyViewBuilder>
			glAccount(glAccount:string):Ref<VendorCompanyViewBuilder>
			vendorSiteCode(vendorSiteCode:string):Ref<VendorCompanyViewBuilder>
			paymentTerm(paymentTerm:string):Ref<VendorCompanyViewBuilder>
			downPaymentTerm(downPaymentTerm:string):Ref<VendorCompanyViewBuilder>
			extendInfo(extendInfo:Ref<ExtendField>[]):Ref<VendorCompanyViewBuilder>
			build():Ref<VendorCompanyView>
	}
	export interface VendorContact extends Struct<VendorContact>{

			id:Ref<string>
			name:Ref<string>
			position:Ref<string>
			email:Ref<string>
			phone:Ref<string>
			remark:Ref<string>
			extendInfo:Ref<ExtendField>[]
	}
	export interface VendorContactBuilder extends Struct<VendorContactBuilder>{

			id(id:string):Ref<VendorContactBuilder>
			name(name:string):Ref<VendorContactBuilder>
			position(position:string):Ref<VendorContactBuilder>
			email(email:string):Ref<VendorContactBuilder>
			phone(phone:string):Ref<VendorContactBuilder>
			remark(remark:string):Ref<VendorContactBuilder>
			extendInfo(extendInfo:Ref<ExtendField>[]):Ref<VendorContactBuilder>
			build():Ref<VendorContact>
	}
	export function emptyUnbindUserAuthDataRelationReq():UnbindUserAuthDataRelationReq
	export function emptyRefUnbindUserAuthDataRelationReq():Ref<UnbindUserAuthDataRelationReq>
	export function refOfUnbindUserAuthDataRelationReq(x:UnbindUserAuthDataRelationReq,v:Ref<UnbindUserAuthDataRelationReq>)
	export function unRefUnbindUserAuthDataRelationReq(v:Ref<UnbindUserAuthDataRelationReq>):UnbindUserAuthDataRelationReq
	export function emptyProject():Project
	export function emptyRefProject():Ref<Project>
	export function refOfProject(x:Project,v:Ref<Project>)
	export function unRefProject(v:Ref<Project>):Project
	export function emptyVendorAccount():VendorAccount
	export function emptyRefVendorAccount():Ref<VendorAccount>
	export function refOfVendorAccount(x:VendorAccount,v:Ref<VendorAccount>)
	export function unRefVendorAccount(v:Ref<VendorAccount>):VendorAccount
	export function emptyInternalOrder():InternalOrder
	export function emptyRefInternalOrder():Ref<InternalOrder>
	export function refOfInternalOrder(x:InternalOrder,v:Ref<InternalOrder>)
	export function unRefInternalOrder(v:Ref<InternalOrder>):InternalOrder
	export function emptyUnbindUserAuthDataRelationResp():UnbindUserAuthDataRelationResp
	export function emptyRefUnbindUserAuthDataRelationResp():Ref<UnbindUserAuthDataRelationResp>
	export function refOfUnbindUserAuthDataRelationResp(x:UnbindUserAuthDataRelationResp,v:Ref<UnbindUserAuthDataRelationResp>)
	export function unRefUnbindUserAuthDataRelationResp(v:Ref<UnbindUserAuthDataRelationResp>):UnbindUserAuthDataRelationResp
	export function emptyVendorCompanyView():VendorCompanyView
	export function emptyRefVendorCompanyView():Ref<VendorCompanyView>
	export function refOfVendorCompanyView(x:VendorCompanyView,v:Ref<VendorCompanyView>)
	export function unRefVendorCompanyView(v:Ref<VendorCompanyView>):VendorCompanyView
	export function emptyDepartmentCostCenterRelationship():DepartmentCostCenterRelationship
	export function emptyRefDepartmentCostCenterRelationship():Ref<DepartmentCostCenterRelationship>
	export function refOfDepartmentCostCenterRelationship(x:DepartmentCostCenterRelationship,v:Ref<DepartmentCostCenterRelationship>)
	export function unRefDepartmentCostCenterRelationship(v:Ref<DepartmentCostCenterRelationship>):DepartmentCostCenterRelationship
	export function emptyLegalEntityBank():LegalEntityBank
	export function emptyRefLegalEntityBank():Ref<LegalEntityBank>
	export function refOfLegalEntityBank(x:LegalEntityBank,v:Ref<LegalEntityBank>)
	export function unRefLegalEntityBank(v:Ref<LegalEntityBank>):LegalEntityBank
	export function emptyCompanyAsset():CompanyAsset
	export function emptyRefCompanyAsset():Ref<CompanyAsset>
	export function refOfCompanyAsset(x:CompanyAsset,v:Ref<CompanyAsset>)
	export function unRefCompanyAsset(v:Ref<CompanyAsset>):CompanyAsset
	export function emptyCompanyCompanyBankAccount():CompanyCompanyBankAccount
	export function emptyRefCompanyCompanyBankAccount():Ref<CompanyCompanyBankAccount>
	export function refOfCompanyCompanyBankAccount(x:CompanyCompanyBankAccount,v:Ref<CompanyCompanyBankAccount>)
	export function unRefCompanyCompanyBankAccount(v:Ref<CompanyCompanyBankAccount>):CompanyCompanyBankAccount
	export function emptyGlAccountCompanyRelationship():GlAccountCompanyRelationship
	export function emptyRefGlAccountCompanyRelationship():Ref<GlAccountCompanyRelationship>
	export function refOfGlAccountCompanyRelationship(x:GlAccountCompanyRelationship,v:Ref<GlAccountCompanyRelationship>)
	export function unRefGlAccountCompanyRelationship(v:Ref<GlAccountCompanyRelationship>):GlAccountCompanyRelationship
	export function emptyVendorAddress():VendorAddress
	export function emptyRefVendorAddress():Ref<VendorAddress>
	export function refOfVendorAddress(x:VendorAddress,v:Ref<VendorAddress>)
	export function unRefVendorAddress(v:Ref<VendorAddress>):VendorAddress
	export function emptyBindUserAuthDataRelationResp():BindUserAuthDataRelationResp
	export function emptyRefBindUserAuthDataRelationResp():Ref<BindUserAuthDataRelationResp>
	export function refOfBindUserAuthDataRelationResp(x:BindUserAuthDataRelationResp,v:Ref<BindUserAuthDataRelationResp>)
	export function unRefBindUserAuthDataRelationResp(v:Ref<BindUserAuthDataRelationResp>):BindUserAuthDataRelationResp
	export function emptyCompany():Company
	export function emptyRefCompany():Ref<Company>
	export function refOfCompany(x:Company,v:Ref<Company>)
	export function unRefCompany(v:Ref<Company>):Company
	export function emptyExtendField():ExtendField
	export function emptyRefExtendField():Ref<ExtendField>
	export function refOfExtendField(x:ExtendField,v:Ref<ExtendField>)
	export function unRefExtendField(v:Ref<ExtendField>):ExtendField
	export function emptyConfig():Config
	export function emptyRefConfig():Ref<Config>
	export function refOfConfig(x:Config,v:Ref<Config>)
	export function unRefConfig(v:Ref<Config>):Config
	export function emptyI18nStruct():I18nStruct
	export function emptyRefI18nStruct():Ref<I18nStruct>
	export function refOfI18nStruct(x:I18nStruct,v:Ref<I18nStruct>)
	export function unRefI18nStruct(v:Ref<I18nStruct>):I18nStruct
	export function emptyLegalEntity():LegalEntity
	export function emptyRefLegalEntity():Ref<LegalEntity>
	export function refOfLegalEntity(x:LegalEntity,v:Ref<LegalEntity>)
	export function unRefLegalEntity(v:Ref<LegalEntity>):LegalEntity
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyVendor():Vendor
	export function emptyRefVendor():Ref<Vendor>
	export function refOfVendor(x:Vendor,v:Ref<Vendor>)
	export function unRefVendor(v:Ref<Vendor>):Vendor
	export function emptyBindUserAuthDataRelationReq():BindUserAuthDataRelationReq
	export function emptyRefBindUserAuthDataRelationReq():Ref<BindUserAuthDataRelationReq>
	export function refOfBindUserAuthDataRelationReq(x:BindUserAuthDataRelationReq,v:Ref<BindUserAuthDataRelationReq>)
	export function unRefBindUserAuthDataRelationReq(v:Ref<BindUserAuthDataRelationReq>):BindUserAuthDataRelationReq
	export function emptyGlAccount():GlAccount
	export function emptyRefGlAccount():Ref<GlAccount>
	export function refOfGlAccount(x:GlAccount,v:Ref<GlAccount>)
	export function unRefGlAccount(v:Ref<GlAccount>):GlAccount
	export function emptyMultiLanguage():MultiLanguage
	export function emptyRefMultiLanguage():Ref<MultiLanguage>
	export function refOfMultiLanguage(x:MultiLanguage,v:Ref<MultiLanguage>)
	export function unRefMultiLanguage(v:Ref<MultiLanguage>):MultiLanguage
	export function emptyOpenApiUpdateVendor():OpenApiUpdateVendor
	export function emptyRefOpenApiUpdateVendor():Ref<OpenApiUpdateVendor>
	export function refOfOpenApiUpdateVendor(x:OpenApiUpdateVendor,v:Ref<OpenApiUpdateVendor>)
	export function unRefOpenApiUpdateVendor(v:Ref<OpenApiUpdateVendor>):OpenApiUpdateVendor
	export function emptyCostCenter():CostCenter
	export function emptyRefCostCenter():Ref<CostCenter>
	export function refOfCostCenter(x:CostCenter,v:Ref<CostCenter>)
	export function unRefCostCenter(v:Ref<CostCenter>):CostCenter
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyUserAuthDataRelation():UserAuthDataRelation
	export function emptyRefUserAuthDataRelation():Ref<UserAuthDataRelation>
	export function refOfUserAuthDataRelation(x:UserAuthDataRelation,v:Ref<UserAuthDataRelation>)
	export function unRefUserAuthDataRelation(v:Ref<UserAuthDataRelation>):UserAuthDataRelation
	export function emptyAppendix():Appendix
	export function emptyRefAppendix():Ref<Appendix>
	export function refOfAppendix(x:Appendix,v:Ref<Appendix>)
	export function unRefAppendix(v:Ref<Appendix>):Appendix
	export function emptyFixedExchangeRate():FixedExchangeRate
	export function emptyRefFixedExchangeRate():Ref<FixedExchangeRate>
	export function refOfFixedExchangeRate(x:FixedExchangeRate,v:Ref<FixedExchangeRate>)
	export function unRefFixedExchangeRate(v:Ref<FixedExchangeRate>):FixedExchangeRate
	export function emptyProjectCompanyDeptMapping():ProjectCompanyDeptMapping
	export function emptyRefProjectCompanyDeptMapping():Ref<ProjectCompanyDeptMapping>
	export function refOfProjectCompanyDeptMapping(x:ProjectCompanyDeptMapping,v:Ref<ProjectCompanyDeptMapping>)
	export function unRefProjectCompanyDeptMapping(v:Ref<ProjectCompanyDeptMapping>):ProjectCompanyDeptMapping
	export function emptyVendorContact():VendorContact
	export function emptyRefVendorContact():Ref<VendorContact>
	export function refOfVendorContact(x:VendorContact,v:Ref<VendorContact>)
	export function unRefVendorContact(v:Ref<VendorContact>):VendorContact
}