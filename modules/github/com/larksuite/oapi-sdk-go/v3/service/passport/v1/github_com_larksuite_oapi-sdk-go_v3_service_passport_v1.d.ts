// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/passport/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Ref,Struct,Alias,Nothing,int,error,bool} from 'go'
	export interface Credentials extends Struct<Credentials>{

			email:Ref<string>
			mobile:Ref<string>
			userId:Ref<string>
	}
	export interface CredentialsBuilder extends Struct<CredentialsBuilder>{

			email(email:string):Ref<CredentialsBuilder>
			mobile(mobile:string):Ref<CredentialsBuilder>
			userId(userId:string):Ref<CredentialsBuilder>
			build():Ref<Credentials>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Device extends Struct<Device>{

			deviceId:Ref<string>
			legacyDeviceId:Ref<string>
	}
	export interface DeviceBuilder extends Struct<DeviceBuilder>{

			deviceId(deviceId:string):Ref<DeviceBuilder>
			legacyDeviceId(legacyDeviceId:string):Ref<DeviceBuilder>
			build():Ref<Device>
	}
	export interface IdpCredential extends Alias<Nothing>{

	}
	export interface IdpCredentialId extends Struct<IdpCredentialId>{

			idpCredentialId:Ref<string>
	}
	export interface IdpCredentialIdBuilder extends Struct<IdpCredentialIdBuilder>{

			idpCredentialId(idpCredentialId:string):Ref<IdpCredentialIdBuilder>
			build():Ref<IdpCredentialId>
	}
	export interface MaskSession extends Struct<MaskSession>{

			createTime:Ref<string>
			terminalType:Ref<int>
			userId:Ref<string>
	}
	export interface MaskSessionBuilder extends Struct<MaskSessionBuilder>{

			createTime(createTime:string):Ref<MaskSessionBuilder>
			terminalType(terminalType:int):Ref<MaskSessionBuilder>
			userId(userId:string):Ref<MaskSessionBuilder>
			build():Ref<MaskSession>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newCredentialsBuilder():Ref<CredentialsBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDeviceBuilder():Ref<DeviceBuilder>

	export function newIdpCredentialIdBuilder():Ref<IdpCredentialIdBuilder>

	export function newMaskSessionBuilder():Ref<MaskSessionBuilder>

	export function newQuerySessionPathReqBodyBuilder():Ref<QuerySessionPathReqBodyBuilder>

	export function newQuerySessionReqBodyBuilder():Ref<QuerySessionReqBodyBuilder>

	export function newQuerySessionReqBuilder():Ref<QuerySessionReqBuilder>

	export interface QuerySessionPathReqBodyBuilder extends Struct<QuerySessionPathReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QuerySessionPathReqBodyBuilder>
			build():Ref<QuerySessionReqBody>
	}
	export interface QuerySessionReq extends Struct<QuerySessionReq>{

			body:Ref<QuerySessionReqBody>
	}
	export interface QuerySessionReqBody extends Struct<QuerySessionReqBody>{

			userIds:string[]
	}
	export interface QuerySessionReqBodyBuilder extends Struct<QuerySessionReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QuerySessionReqBodyBuilder>
			build():Ref<QuerySessionReqBody>
	}
	export interface QuerySessionReqBuilder extends Struct<QuerySessionReqBuilder>{

			userIdType(userIdType:string):Ref<QuerySessionReqBuilder>
			body(body:Ref<QuerySessionReqBody>):Ref<QuerySessionReqBuilder>
			build():Ref<QuerySessionReq>
	}
	export interface QuerySessionResp extends Struct<QuerySessionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QuerySessionRespData>
			success():bool
	}
	export interface QuerySessionRespData extends Struct<QuerySessionRespData>{

			maskSessions:Ref<MaskSession>[]
	}
	//"open_id"
	export const UserIdTypeOpenId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V1 extends Struct<V1>{

			session:Ref<{
			
				query(ctx:context.Context,req:Ref<QuerySessionReq>,...options:larkcore.RequestOptionFunc[]):Ref<QuerySessionResp>
			}>
	}
	export function emptyIdpCredentialId():IdpCredentialId
	export function emptyRefIdpCredentialId():Ref<IdpCredentialId>
	export function refOfIdpCredentialId(x:IdpCredentialId,v:Ref<IdpCredentialId>)
	export function unRefIdpCredentialId(v:Ref<IdpCredentialId>):IdpCredentialId
	export function emptyQuerySessionResp():QuerySessionResp
	export function emptyRefQuerySessionResp():Ref<QuerySessionResp>
	export function refOfQuerySessionResp(x:QuerySessionResp,v:Ref<QuerySessionResp>)
	export function unRefQuerySessionResp(v:Ref<QuerySessionResp>):QuerySessionResp
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyQuerySessionReqBody():QuerySessionReqBody
	export function emptyRefQuerySessionReqBody():Ref<QuerySessionReqBody>
	export function refOfQuerySessionReqBody(x:QuerySessionReqBody,v:Ref<QuerySessionReqBody>)
	export function unRefQuerySessionReqBody(v:Ref<QuerySessionReqBody>):QuerySessionReqBody
	export function emptyCredentials():Credentials
	export function emptyRefCredentials():Ref<Credentials>
	export function refOfCredentials(x:Credentials,v:Ref<Credentials>)
	export function unRefCredentials(v:Ref<Credentials>):Credentials
	export function emptyDevice():Device
	export function emptyRefDevice():Ref<Device>
	export function refOfDevice(x:Device,v:Ref<Device>)
	export function unRefDevice(v:Ref<Device>):Device
	export function emptyMaskSession():MaskSession
	export function emptyRefMaskSession():Ref<MaskSession>
	export function refOfMaskSession(x:MaskSession,v:Ref<MaskSession>)
	export function unRefMaskSession(v:Ref<MaskSession>):MaskSession
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyQuerySessionReq():QuerySessionReq
	export function emptyRefQuerySessionReq():Ref<QuerySessionReq>
	export function refOfQuerySessionReq(x:QuerySessionReq,v:Ref<QuerySessionReq>)
	export function unRefQuerySessionReq(v:Ref<QuerySessionReq>):QuerySessionReq
	export function emptyQuerySessionRespData():QuerySessionRespData
	export function emptyRefQuerySessionRespData():Ref<QuerySessionRespData>
	export function refOfQuerySessionRespData(x:QuerySessionRespData,v:Ref<QuerySessionRespData>)
	export function unRefQuerySessionRespData(v:Ref<QuerySessionRespData>):QuerySessionRespData
}