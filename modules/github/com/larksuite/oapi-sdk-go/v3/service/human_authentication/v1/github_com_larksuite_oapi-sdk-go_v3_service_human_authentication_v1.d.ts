// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/human_authentication/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Struct,Ref,error,bool} from 'go'
	export interface CreateIdentityPathReqBodyBuilder extends Struct<CreateIdentityPathReqBodyBuilder>{

			identityName(identityName:string):Ref<CreateIdentityPathReqBodyBuilder>
			identityCode(identityCode:string):Ref<CreateIdentityPathReqBodyBuilder>
			mobile(mobile:string):Ref<CreateIdentityPathReqBodyBuilder>
			build():Ref<CreateIdentityReqBody>
	}
	export interface CreateIdentityReq extends Struct<CreateIdentityReq>{

			body:Ref<CreateIdentityReqBody>
	}
	export interface CreateIdentityReqBody extends Struct<CreateIdentityReqBody>{

			identityName:Ref<string>
			identityCode:Ref<string>
			mobile:Ref<string>
	}
	export interface CreateIdentityReqBodyBuilder extends Struct<CreateIdentityReqBodyBuilder>{

			identityName(identityName:string):Ref<CreateIdentityReqBodyBuilder>
			identityCode(identityCode:string):Ref<CreateIdentityReqBodyBuilder>
			mobile(mobile:string):Ref<CreateIdentityReqBodyBuilder>
			build():Ref<CreateIdentityReqBody>
	}
	export interface CreateIdentityReqBuilder extends Struct<CreateIdentityReqBuilder>{

			userId(userId:string):Ref<CreateIdentityReqBuilder>
			userIdType(userIdType:string):Ref<CreateIdentityReqBuilder>
			body(body:Ref<CreateIdentityReqBody>):Ref<CreateIdentityReqBuilder>
			build():Ref<CreateIdentityReq>
	}
	export interface CreateIdentityResp extends Struct<CreateIdentityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateIdentityRespData>
			success():bool
	}
	export interface CreateIdentityRespData extends Struct<CreateIdentityRespData>{

			verifyUid:Ref<string>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Identity extends Struct<Identity>{

			identityName:Ref<string>
			identityCode:Ref<string>
			mobile:Ref<string>
	}
	export interface IdentityBuilder extends Struct<IdentityBuilder>{

			identityName(identityName:string):Ref<IdentityBuilder>
			identityCode(identityCode:string):Ref<IdentityBuilder>
			mobile(mobile:string):Ref<IdentityBuilder>
			build():Ref<Identity>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newCreateIdentityPathReqBodyBuilder():Ref<CreateIdentityPathReqBodyBuilder>

	export function newCreateIdentityReqBodyBuilder():Ref<CreateIdentityReqBodyBuilder>

	export function newCreateIdentityReqBuilder():Ref<CreateIdentityReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newIdentityBuilder():Ref<IdentityBuilder>

	//"open_id"
	export const UserIdTypeOpenId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V1 extends Struct<V1>{

			identity:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateIdentityReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateIdentityResp>
			}>
	}
	export function emptyCreateIdentityReq():CreateIdentityReq
	export function emptyRefCreateIdentityReq():Ref<CreateIdentityReq>
	export function refOfCreateIdentityReq(x:CreateIdentityReq,v:Ref<CreateIdentityReq>)
	export function unRefCreateIdentityReq(v:Ref<CreateIdentityReq>):CreateIdentityReq
	export function emptyCreateIdentityResp():CreateIdentityResp
	export function emptyRefCreateIdentityResp():Ref<CreateIdentityResp>
	export function refOfCreateIdentityResp(x:CreateIdentityResp,v:Ref<CreateIdentityResp>)
	export function unRefCreateIdentityResp(v:Ref<CreateIdentityResp>):CreateIdentityResp
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyCreateIdentityReqBody():CreateIdentityReqBody
	export function emptyRefCreateIdentityReqBody():Ref<CreateIdentityReqBody>
	export function refOfCreateIdentityReqBody(x:CreateIdentityReqBody,v:Ref<CreateIdentityReqBody>)
	export function unRefCreateIdentityReqBody(v:Ref<CreateIdentityReqBody>):CreateIdentityReqBody
	export function emptyCreateIdentityRespData():CreateIdentityRespData
	export function emptyRefCreateIdentityRespData():Ref<CreateIdentityRespData>
	export function refOfCreateIdentityRespData(x:CreateIdentityRespData,v:Ref<CreateIdentityRespData>)
	export function unRefCreateIdentityRespData(v:Ref<CreateIdentityRespData>):CreateIdentityRespData
	export function emptyIdentity():Identity
	export function emptyRefIdentity():Ref<Identity>
	export function refOfIdentity(x:Identity,v:Ref<Identity>)
	export function unRefIdentity(v:Ref<Identity>):Identity
}