// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/contact/v3'{

	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as larkevent from 'github.com/larksuite/oapi-sdk-go/v3/event'
	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import type {Struct,Ref,error,bool,int,Alias,Nothing} from 'go'
	export interface AddGroupMemberPathReqBodyBuilder extends Struct<AddGroupMemberPathReqBodyBuilder>{

			memberType(memberType:string):Ref<AddGroupMemberPathReqBodyBuilder>
			memberIdType(memberIdType:string):Ref<AddGroupMemberPathReqBodyBuilder>
			memberId(memberId:string):Ref<AddGroupMemberPathReqBodyBuilder>
			build():Ref<AddGroupMemberReqBody>
	}
	export interface AddGroupMemberReq extends Struct<AddGroupMemberReq>{

			body:Ref<AddGroupMemberReqBody>
	}
	export interface AddGroupMemberReqBody extends Struct<AddGroupMemberReqBody>{

			memberType:Ref<string>
			memberIdType:Ref<string>
			memberId:Ref<string>
	}
	export interface AddGroupMemberReqBodyBuilder extends Struct<AddGroupMemberReqBodyBuilder>{

			memberType(memberType:string):Ref<AddGroupMemberReqBodyBuilder>
			memberIdType(memberIdType:string):Ref<AddGroupMemberReqBodyBuilder>
			memberId(memberId:string):Ref<AddGroupMemberReqBodyBuilder>
			build():Ref<AddGroupMemberReqBody>
	}
	export interface AddGroupMemberReqBuilder extends Struct<AddGroupMemberReqBuilder>{

			groupId(groupId:string):Ref<AddGroupMemberReqBuilder>
			body(body:Ref<AddGroupMemberReqBody>):Ref<AddGroupMemberReqBuilder>
			build():Ref<AddGroupMemberReq>
	}
	export interface AddGroupMemberResp extends Struct<AddGroupMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface AvatarInfo extends Struct<AvatarInfo>{

			avatar72:Ref<string>
			avatar240:Ref<string>
			avatar640:Ref<string>
			avatarOrigin:Ref<string>
	}
	export interface AvatarInfoBuilder extends Struct<AvatarInfoBuilder>{

			avatar72(avatar72:string):Ref<AvatarInfoBuilder>
			avatar240(avatar240:string):Ref<AvatarInfoBuilder>
			avatar640(avatar640:string):Ref<AvatarInfoBuilder>
			avatarOrigin(avatarOrigin:string):Ref<AvatarInfoBuilder>
			build():Ref<AvatarInfo>
	}
	export interface BatchAddGroupMemberPathReqBodyBuilder extends Struct<BatchAddGroupMemberPathReqBodyBuilder>{

			members(members:Ref<Memberlist>[]):Ref<BatchAddGroupMemberPathReqBodyBuilder>
			build():Ref<BatchAddGroupMemberReqBody>
	}
	export interface BatchAddGroupMemberReq extends Struct<BatchAddGroupMemberReq>{

			body:Ref<BatchAddGroupMemberReqBody>
	}
	export interface BatchAddGroupMemberReqBody extends Struct<BatchAddGroupMemberReqBody>{

			members:Ref<Memberlist>[]
	}
	export interface BatchAddGroupMemberReqBodyBuilder extends Struct<BatchAddGroupMemberReqBodyBuilder>{

			members(members:Ref<Memberlist>[]):Ref<BatchAddGroupMemberReqBodyBuilder>
			build():Ref<BatchAddGroupMemberReqBody>
	}
	export interface BatchAddGroupMemberReqBuilder extends Struct<BatchAddGroupMemberReqBuilder>{

			groupId(groupId:string):Ref<BatchAddGroupMemberReqBuilder>
			body(body:Ref<BatchAddGroupMemberReqBody>):Ref<BatchAddGroupMemberReqBuilder>
			build():Ref<BatchAddGroupMemberReq>
	}
	export interface BatchAddGroupMemberResp extends Struct<BatchAddGroupMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchAddGroupMemberRespData>
			success():bool
	}
	export interface BatchAddGroupMemberRespData extends Struct<BatchAddGroupMemberRespData>{

			results:Ref<MemberResult>[]
	}
	export interface BatchCreateFunctionalRoleMemberPathReqBodyBuilder extends Struct<BatchCreateFunctionalRoleMemberPathReqBodyBuilder>{

			members(members:string[]):Ref<BatchCreateFunctionalRoleMemberPathReqBodyBuilder>
			build():Ref<BatchCreateFunctionalRoleMemberReqBody>
	}
	export interface BatchCreateFunctionalRoleMemberReq extends Struct<BatchCreateFunctionalRoleMemberReq>{

			body:Ref<BatchCreateFunctionalRoleMemberReqBody>
	}
	export interface BatchCreateFunctionalRoleMemberReqBody extends Struct<BatchCreateFunctionalRoleMemberReqBody>{

			members:string[]
	}
	export interface BatchCreateFunctionalRoleMemberReqBodyBuilder extends Struct<BatchCreateFunctionalRoleMemberReqBodyBuilder>{

			members(members:string[]):Ref<BatchCreateFunctionalRoleMemberReqBodyBuilder>
			build():Ref<BatchCreateFunctionalRoleMemberReqBody>
	}
	export interface BatchCreateFunctionalRoleMemberReqBuilder extends Struct<BatchCreateFunctionalRoleMemberReqBuilder>{

			roleId(roleId:string):Ref<BatchCreateFunctionalRoleMemberReqBuilder>
			userIdType(userIdType:string):Ref<BatchCreateFunctionalRoleMemberReqBuilder>
			body(body:Ref<BatchCreateFunctionalRoleMemberReqBody>):Ref<BatchCreateFunctionalRoleMemberReqBuilder>
			build():Ref<BatchCreateFunctionalRoleMemberReq>
	}
	export interface BatchCreateFunctionalRoleMemberResp extends Struct<BatchCreateFunctionalRoleMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchCreateFunctionalRoleMemberRespData>
			success():bool
	}
	export interface BatchCreateFunctionalRoleMemberRespData extends Struct<BatchCreateFunctionalRoleMemberRespData>{

			results:Ref<FunctionalRoleMemberResult>[]
	}
	export interface BatchDeleteFunctionalRoleMemberPathReqBodyBuilder extends Struct<BatchDeleteFunctionalRoleMemberPathReqBodyBuilder>{

			members(members:string[]):Ref<BatchDeleteFunctionalRoleMemberPathReqBodyBuilder>
			build():Ref<BatchDeleteFunctionalRoleMemberReqBody>
	}
	export interface BatchDeleteFunctionalRoleMemberReq extends Struct<BatchDeleteFunctionalRoleMemberReq>{

			body:Ref<BatchDeleteFunctionalRoleMemberReqBody>
	}
	export interface BatchDeleteFunctionalRoleMemberReqBody extends Struct<BatchDeleteFunctionalRoleMemberReqBody>{

			members:string[]
	}
	export interface BatchDeleteFunctionalRoleMemberReqBodyBuilder extends Struct<BatchDeleteFunctionalRoleMemberReqBodyBuilder>{

			members(members:string[]):Ref<BatchDeleteFunctionalRoleMemberReqBodyBuilder>
			build():Ref<BatchDeleteFunctionalRoleMemberReqBody>
	}
	export interface BatchDeleteFunctionalRoleMemberReqBuilder extends Struct<BatchDeleteFunctionalRoleMemberReqBuilder>{

			roleId(roleId:string):Ref<BatchDeleteFunctionalRoleMemberReqBuilder>
			userIdType(userIdType:string):Ref<BatchDeleteFunctionalRoleMemberReqBuilder>
			body(body:Ref<BatchDeleteFunctionalRoleMemberReqBody>):Ref<BatchDeleteFunctionalRoleMemberReqBuilder>
			build():Ref<BatchDeleteFunctionalRoleMemberReq>
	}
	export interface BatchDeleteFunctionalRoleMemberResp extends Struct<BatchDeleteFunctionalRoleMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchDeleteFunctionalRoleMemberRespData>
			success():bool
	}
	export interface BatchDeleteFunctionalRoleMemberRespData extends Struct<BatchDeleteFunctionalRoleMemberRespData>{

			result:Ref<FunctionalRoleMemberResult>[]
	}
	export interface BatchDepartmentReq extends Struct<BatchDepartmentReq>{

	}
	export interface BatchDepartmentReqBuilder extends Struct<BatchDepartmentReqBuilder>{

			departmentIds(departmentIds:string[]):Ref<BatchDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<BatchDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<BatchDepartmentReqBuilder>
			build():Ref<BatchDepartmentReq>
	}
	export interface BatchDepartmentResp extends Struct<BatchDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchDepartmentRespData>
			success():bool
	}
	export interface BatchDepartmentRespData extends Struct<BatchDepartmentRespData>{

			items:Ref<Department>[]
	}
	export interface BatchGetIdUserPathReqBodyBuilder extends Struct<BatchGetIdUserPathReqBodyBuilder>{

			emails(emails:string[]):Ref<BatchGetIdUserPathReqBodyBuilder>
			mobiles(mobiles:string[]):Ref<BatchGetIdUserPathReqBodyBuilder>
			includeResigned(includeResigned:bool):Ref<BatchGetIdUserPathReqBodyBuilder>
			build():Ref<BatchGetIdUserReqBody>
	}
	export interface BatchGetIdUserReq extends Struct<BatchGetIdUserReq>{

			body:Ref<BatchGetIdUserReqBody>
	}
	export interface BatchGetIdUserReqBody extends Struct<BatchGetIdUserReqBody>{

			emails:string[]
			mobiles:string[]
			includeResigned:Ref<bool>
	}
	export interface BatchGetIdUserReqBodyBuilder extends Struct<BatchGetIdUserReqBodyBuilder>{

			emails(emails:string[]):Ref<BatchGetIdUserReqBodyBuilder>
			mobiles(mobiles:string[]):Ref<BatchGetIdUserReqBodyBuilder>
			includeResigned(includeResigned:bool):Ref<BatchGetIdUserReqBodyBuilder>
			build():Ref<BatchGetIdUserReqBody>
	}
	export interface BatchGetIdUserReqBuilder extends Struct<BatchGetIdUserReqBuilder>{

			userIdType(userIdType:string):Ref<BatchGetIdUserReqBuilder>
			body(body:Ref<BatchGetIdUserReqBody>):Ref<BatchGetIdUserReqBuilder>
			build():Ref<BatchGetIdUserReq>
	}
	export interface BatchGetIdUserResp extends Struct<BatchGetIdUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchGetIdUserRespData>
			success():bool
	}
	export interface BatchGetIdUserRespData extends Struct<BatchGetIdUserRespData>{

			userList:Ref<UserContactInfo>[]
	}
	export interface BatchRemoveGroupMemberPathReqBodyBuilder extends Struct<BatchRemoveGroupMemberPathReqBodyBuilder>{

			members(members:Ref<Memberlist>[]):Ref<BatchRemoveGroupMemberPathReqBodyBuilder>
			build():Ref<BatchRemoveGroupMemberReqBody>
	}
	export interface BatchRemoveGroupMemberReq extends Struct<BatchRemoveGroupMemberReq>{

			body:Ref<BatchRemoveGroupMemberReqBody>
	}
	export interface BatchRemoveGroupMemberReqBody extends Struct<BatchRemoveGroupMemberReqBody>{

			members:Ref<Memberlist>[]
	}
	export interface BatchRemoveGroupMemberReqBodyBuilder extends Struct<BatchRemoveGroupMemberReqBodyBuilder>{

			members(members:Ref<Memberlist>[]):Ref<BatchRemoveGroupMemberReqBodyBuilder>
			build():Ref<BatchRemoveGroupMemberReqBody>
	}
	export interface BatchRemoveGroupMemberReqBuilder extends Struct<BatchRemoveGroupMemberReqBuilder>{

			groupId(groupId:string):Ref<BatchRemoveGroupMemberReqBuilder>
			body(body:Ref<BatchRemoveGroupMemberReqBody>):Ref<BatchRemoveGroupMemberReqBuilder>
			build():Ref<BatchRemoveGroupMemberReq>
	}
	export interface BatchRemoveGroupMemberResp extends Struct<BatchRemoveGroupMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface BatchUserReq extends Struct<BatchUserReq>{

	}
	export interface BatchUserReqBuilder extends Struct<BatchUserReqBuilder>{

			userIds(userIds:string[]):Ref<BatchUserReqBuilder>
			userIdType(userIdType:string):Ref<BatchUserReqBuilder>
			departmentIdType(departmentIdType:string):Ref<BatchUserReqBuilder>
			build():Ref<BatchUserReq>
	}
	export interface BatchUserResp extends Struct<BatchUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchUserRespData>
			success():bool
	}
	export interface BatchUserRespData extends Struct<BatchUserRespData>{

			items:Ref<User>[]
	}
	export interface BindDepartmentUnitPathReqBodyBuilder extends Struct<BindDepartmentUnitPathReqBodyBuilder>{

			unitId(unitId:string):Ref<BindDepartmentUnitPathReqBodyBuilder>
			departmentId(departmentId:string):Ref<BindDepartmentUnitPathReqBodyBuilder>
			departmentIdType(departmentIdType:string):Ref<BindDepartmentUnitPathReqBodyBuilder>
			build():Ref<BindDepartmentUnitReqBody>
	}
	export interface BindDepartmentUnitReq extends Struct<BindDepartmentUnitReq>{

			body:Ref<BindDepartmentUnitReqBody>
	}
	export interface BindDepartmentUnitReqBody extends Struct<BindDepartmentUnitReqBody>{

			unitId:Ref<string>
			departmentId:Ref<string>
			departmentIdType:Ref<string>
	}
	export interface BindDepartmentUnitReqBodyBuilder extends Struct<BindDepartmentUnitReqBodyBuilder>{

			unitId(unitId:string):Ref<BindDepartmentUnitReqBodyBuilder>
			departmentId(departmentId:string):Ref<BindDepartmentUnitReqBodyBuilder>
			departmentIdType(departmentIdType:string):Ref<BindDepartmentUnitReqBodyBuilder>
			build():Ref<BindDepartmentUnitReqBody>
	}
	export interface BindDepartmentUnitReqBuilder extends Struct<BindDepartmentUnitReqBuilder>{

			body(body:Ref<BindDepartmentUnitReqBody>):Ref<BindDepartmentUnitReqBuilder>
			build():Ref<BindDepartmentUnitReq>
	}
	export interface BindDepartmentUnitResp extends Struct<BindDepartmentUnitResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface ChildrenDepartmentIterator extends Struct<ChildrenDepartmentIterator>{

			next():[bool,Ref<Department>]
			nextPageToken():Ref<string>
	}
	export interface ChildrenDepartmentReq extends Struct<ChildrenDepartmentReq>{

			limit:int
	}
	export interface ChildrenDepartmentReqBuilder extends Struct<ChildrenDepartmentReqBuilder>{

			limit(limit:int):Ref<ChildrenDepartmentReqBuilder>
			departmentId(departmentId:string):Ref<ChildrenDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<ChildrenDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ChildrenDepartmentReqBuilder>
			fetchChild(fetchChild:bool):Ref<ChildrenDepartmentReqBuilder>
			pageSize(pageSize:int):Ref<ChildrenDepartmentReqBuilder>
			pageToken(pageToken:string):Ref<ChildrenDepartmentReqBuilder>
			build():Ref<ChildrenDepartmentReq>
	}
	export interface ChildrenDepartmentResp extends Struct<ChildrenDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ChildrenDepartmentRespData>
			success():bool
	}
	export interface ChildrenDepartmentRespData extends Struct<ChildrenDepartmentRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<Department>[]
	}
	export interface CollaborationTenant extends Struct<CollaborationTenant>{

			tenantKey:Ref<string>
			name:Ref<string>
			nickname:Ref<string>
			connectTime:Ref<int>
			avatar:Ref<AvatarInfo>
			brand:Ref<string>
	}
	export interface CollaborationTenantBuilder extends Struct<CollaborationTenantBuilder>{

			tenantKey(tenantKey:string):Ref<CollaborationTenantBuilder>
			name(name:string):Ref<CollaborationTenantBuilder>
			nickname(nickname:string):Ref<CollaborationTenantBuilder>
			connectTime(connectTime:int):Ref<CollaborationTenantBuilder>
			avatar(avatar:Ref<AvatarInfo>):Ref<CollaborationTenantBuilder>
			brand(brand:string):Ref<CollaborationTenantBuilder>
			build():Ref<CollaborationTenant>
	}
	export interface ConfidentialMember extends Struct<ConfidentialMember>{

			userId:Ref<string>
			isConfidential:Ref<bool>
	}
	export interface ConfidentialMemberBuilder extends Struct<ConfidentialMemberBuilder>{

			userId(userId:string):Ref<ConfidentialMemberBuilder>
			isConfidential(isConfidential:bool):Ref<ConfidentialMemberBuilder>
			build():Ref<ConfidentialMember>
	}
	export interface CreateDepartmentReq extends Struct<CreateDepartmentReq>{

			department:Ref<Department>
	}
	export interface CreateDepartmentReqBuilder extends Struct<CreateDepartmentReqBuilder>{

			userIdType(userIdType:string):Ref<CreateDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<CreateDepartmentReqBuilder>
			clientToken(clientToken:string):Ref<CreateDepartmentReqBuilder>
			department(department:Ref<Department>):Ref<CreateDepartmentReqBuilder>
			build():Ref<CreateDepartmentReq>
	}
	export interface CreateDepartmentResp extends Struct<CreateDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateDepartmentRespData>
			success():bool
	}
	export interface CreateDepartmentRespData extends Struct<CreateDepartmentRespData>{

			department:Ref<Department>
	}
	export interface CreateEmployeeTypeEnumReq extends Struct<CreateEmployeeTypeEnumReq>{

			employeeTypeEnum:Ref<EmployeeTypeEnum>
	}
	export interface CreateEmployeeTypeEnumReqBuilder extends Struct<CreateEmployeeTypeEnumReqBuilder>{

			employeeTypeEnum(employeeTypeEnum:Ref<EmployeeTypeEnum>):Ref<CreateEmployeeTypeEnumReqBuilder>
			build():Ref<CreateEmployeeTypeEnumReq>
	}
	export interface CreateEmployeeTypeEnumResp extends Struct<CreateEmployeeTypeEnumResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateEmployeeTypeEnumRespData>
			success():bool
	}
	export interface CreateEmployeeTypeEnumRespData extends Struct<CreateEmployeeTypeEnumRespData>{

			employeeTypeEnum:Ref<EmployeeTypeEnum>
	}
	export interface CreateFunctionalRolePathReqBodyBuilder extends Struct<CreateFunctionalRolePathReqBodyBuilder>{

			roleName(roleName:string):Ref<CreateFunctionalRolePathReqBodyBuilder>
			build():Ref<CreateFunctionalRoleReqBody>
	}
	export interface CreateFunctionalRoleReq extends Struct<CreateFunctionalRoleReq>{

			body:Ref<CreateFunctionalRoleReqBody>
	}
	export interface CreateFunctionalRoleReqBody extends Struct<CreateFunctionalRoleReqBody>{

			roleName:Ref<string>
	}
	export interface CreateFunctionalRoleReqBodyBuilder extends Struct<CreateFunctionalRoleReqBodyBuilder>{

			roleName(roleName:string):Ref<CreateFunctionalRoleReqBodyBuilder>
			build():Ref<CreateFunctionalRoleReqBody>
	}
	export interface CreateFunctionalRoleReqBuilder extends Struct<CreateFunctionalRoleReqBuilder>{

			body(body:Ref<CreateFunctionalRoleReqBody>):Ref<CreateFunctionalRoleReqBuilder>
			build():Ref<CreateFunctionalRoleReq>
	}
	export interface CreateFunctionalRoleResp extends Struct<CreateFunctionalRoleResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateFunctionalRoleRespData>
			success():bool
	}
	export interface CreateFunctionalRoleRespData extends Struct<CreateFunctionalRoleRespData>{

			roleId:Ref<string>
	}
	export interface CreateGroupReq extends Struct<CreateGroupReq>{

			group:Ref<Group>
	}
	export interface CreateGroupReqBuilder extends Struct<CreateGroupReqBuilder>{

			userIdType(userIdType:string):Ref<CreateGroupReqBuilder>
			departmentIdType(departmentIdType:string):Ref<CreateGroupReqBuilder>
			group(group:Ref<Group>):Ref<CreateGroupReqBuilder>
			build():Ref<CreateGroupReq>
	}
	export interface CreateGroupResp extends Struct<CreateGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateGroupRespData>
			success():bool
	}
	export interface CreateGroupRespData extends Struct<CreateGroupRespData>{

			groupId:Ref<string>
	}
	export interface CreateJobFamilyReq extends Struct<CreateJobFamilyReq>{

			jobFamily:Ref<JobFamily>
	}
	export interface CreateJobFamilyReqBuilder extends Struct<CreateJobFamilyReqBuilder>{

			jobFamily(jobFamily:Ref<JobFamily>):Ref<CreateJobFamilyReqBuilder>
			build():Ref<CreateJobFamilyReq>
	}
	export interface CreateJobFamilyResp extends Struct<CreateJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateJobFamilyRespData>
			success():bool
	}
	export interface CreateJobFamilyRespData extends Struct<CreateJobFamilyRespData>{

			jobFamily:Ref<JobFamily>
	}
	export interface CreateJobLevelReq extends Struct<CreateJobLevelReq>{

			jobLevel:Ref<JobLevel>
	}
	export interface CreateJobLevelReqBuilder extends Struct<CreateJobLevelReqBuilder>{

			jobLevel(jobLevel:Ref<JobLevel>):Ref<CreateJobLevelReqBuilder>
			build():Ref<CreateJobLevelReq>
	}
	export interface CreateJobLevelResp extends Struct<CreateJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateJobLevelRespData>
			success():bool
	}
	export interface CreateJobLevelRespData extends Struct<CreateJobLevelRespData>{

			jobLevel:Ref<JobLevel>
	}
	export interface CreateUnitPathReqBodyBuilder extends Struct<CreateUnitPathReqBodyBuilder>{

			unitId(unitId:string):Ref<CreateUnitPathReqBodyBuilder>
			name(name:string):Ref<CreateUnitPathReqBodyBuilder>
			unitType(unitType:string):Ref<CreateUnitPathReqBodyBuilder>
			build():Ref<CreateUnitReqBody>
	}
	export interface CreateUnitReq extends Struct<CreateUnitReq>{

			body:Ref<CreateUnitReqBody>
	}
	export interface CreateUnitReqBody extends Struct<CreateUnitReqBody>{

			unitId:Ref<string>
			name:Ref<string>
			unitType:Ref<string>
	}
	export interface CreateUnitReqBodyBuilder extends Struct<CreateUnitReqBodyBuilder>{

			unitId(unitId:string):Ref<CreateUnitReqBodyBuilder>
			name(name:string):Ref<CreateUnitReqBodyBuilder>
			unitType(unitType:string):Ref<CreateUnitReqBodyBuilder>
			build():Ref<CreateUnitReqBody>
	}
	export interface CreateUnitReqBuilder extends Struct<CreateUnitReqBuilder>{

			body(body:Ref<CreateUnitReqBody>):Ref<CreateUnitReqBuilder>
			build():Ref<CreateUnitReq>
	}
	export interface CreateUnitResp extends Struct<CreateUnitResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateUnitRespData>
			success():bool
	}
	export interface CreateUnitRespData extends Struct<CreateUnitRespData>{

			unitId:Ref<string>
	}
	export interface CreateUserReq extends Struct<CreateUserReq>{

			user:Ref<User>
	}
	export interface CreateUserReqBuilder extends Struct<CreateUserReqBuilder>{

			userIdType(userIdType:string):Ref<CreateUserReqBuilder>
			departmentIdType(departmentIdType:string):Ref<CreateUserReqBuilder>
			clientToken(clientToken:string):Ref<CreateUserReqBuilder>
			user(user:Ref<User>):Ref<CreateUserReqBuilder>
			build():Ref<CreateUserReq>
	}
	export interface CreateUserResp extends Struct<CreateUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateUserRespData>
			success():bool
	}
	export interface CreateUserRespData extends Struct<CreateUserRespData>{

			user:Ref<User>
	}
	export interface CustomAttr extends Struct<CustomAttr>{

			id:Ref<string>
			type:Ref<string>
			options:Ref<CustomAttrOptions>
			i18nName:Ref<I18nContent>[]
	}
	export interface CustomAttrBuilder extends Struct<CustomAttrBuilder>{

			id(id:string):Ref<CustomAttrBuilder>
			type(type_:string):Ref<CustomAttrBuilder>
			options(options:Ref<CustomAttrOptions>):Ref<CustomAttrBuilder>
			i18nName(i18nName:Ref<I18nContent>[]):Ref<CustomAttrBuilder>
			build():Ref<CustomAttr>
	}
	export interface CustomAttrEvent extends Struct<CustomAttrEvent>{

			contactFieldKey:string[]
			allowOpenQuery:Ref<bool>
	}
	export interface CustomAttrEventBuilder extends Struct<CustomAttrEventBuilder>{

			contactFieldKey(contactFieldKey:string[]):Ref<CustomAttrEventBuilder>
			allowOpenQuery(allowOpenQuery:bool):Ref<CustomAttrEventBuilder>
			build():Ref<CustomAttrEvent>
	}
	export interface CustomAttrGenericUser extends Struct<CustomAttrGenericUser>{

			id:Ref<string>
			type:Ref<int>
	}
	export interface CustomAttrGenericUserBuilder extends Struct<CustomAttrGenericUserBuilder>{

			id(id:string):Ref<CustomAttrGenericUserBuilder>
			type(type_:int):Ref<CustomAttrGenericUserBuilder>
			build():Ref<CustomAttrGenericUser>
	}
	export interface CustomAttrOption extends Struct<CustomAttrOption>{

			id:Ref<string>
			value:Ref<string>
			name:Ref<string>
	}
	export interface CustomAttrOptionBuilder extends Struct<CustomAttrOptionBuilder>{

			id(id:string):Ref<CustomAttrOptionBuilder>
			value(value:string):Ref<CustomAttrOptionBuilder>
			name(name:string):Ref<CustomAttrOptionBuilder>
			build():Ref<CustomAttrOption>
	}
	export interface CustomAttrOptions extends Struct<CustomAttrOptions>{

			defaultOptionId:Ref<string>
			optionType:Ref<string>
			options:Ref<CustomAttrOption>[]
	}
	export interface CustomAttrOptionsBuilder extends Struct<CustomAttrOptionsBuilder>{

			defaultOptionId(defaultOptionId:string):Ref<CustomAttrOptionsBuilder>
			optionType(optionType:string):Ref<CustomAttrOptionsBuilder>
			options(options:Ref<CustomAttrOption>[]):Ref<CustomAttrOptionsBuilder>
			build():Ref<CustomAttrOptions>
	}
	export interface DeleteDepartmentReq extends Struct<DeleteDepartmentReq>{

	}
	export interface DeleteDepartmentReqBuilder extends Struct<DeleteDepartmentReqBuilder>{

			departmentId(departmentId:string):Ref<DeleteDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<DeleteDepartmentReqBuilder>
			build():Ref<DeleteDepartmentReq>
	}
	export interface DeleteDepartmentResp extends Struct<DeleteDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteEmployeeTypeEnumReq extends Struct<DeleteEmployeeTypeEnumReq>{

	}
	export interface DeleteEmployeeTypeEnumReqBuilder extends Struct<DeleteEmployeeTypeEnumReqBuilder>{

			enumId(enumId:string):Ref<DeleteEmployeeTypeEnumReqBuilder>
			build():Ref<DeleteEmployeeTypeEnumReq>
	}
	export interface DeleteEmployeeTypeEnumResp extends Struct<DeleteEmployeeTypeEnumResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteFunctionalRoleReq extends Struct<DeleteFunctionalRoleReq>{

	}
	export interface DeleteFunctionalRoleReqBuilder extends Struct<DeleteFunctionalRoleReqBuilder>{

			roleId(roleId:string):Ref<DeleteFunctionalRoleReqBuilder>
			build():Ref<DeleteFunctionalRoleReq>
	}
	export interface DeleteFunctionalRoleResp extends Struct<DeleteFunctionalRoleResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteGroupReq extends Struct<DeleteGroupReq>{

	}
	export interface DeleteGroupReqBuilder extends Struct<DeleteGroupReqBuilder>{

			groupId(groupId:string):Ref<DeleteGroupReqBuilder>
			build():Ref<DeleteGroupReq>
	}
	export interface DeleteGroupResp extends Struct<DeleteGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteJobFamilyReq extends Struct<DeleteJobFamilyReq>{

	}
	export interface DeleteJobFamilyReqBuilder extends Struct<DeleteJobFamilyReqBuilder>{

			jobFamilyId(jobFamilyId:string):Ref<DeleteJobFamilyReqBuilder>
			build():Ref<DeleteJobFamilyReq>
	}
	export interface DeleteJobFamilyResp extends Struct<DeleteJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteJobLevelReq extends Struct<DeleteJobLevelReq>{

	}
	export interface DeleteJobLevelReqBuilder extends Struct<DeleteJobLevelReqBuilder>{

			jobLevelId(jobLevelId:string):Ref<DeleteJobLevelReqBuilder>
			build():Ref<DeleteJobLevelReq>
	}
	export interface DeleteJobLevelResp extends Struct<DeleteJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteUnitReq extends Struct<DeleteUnitReq>{

	}
	export interface DeleteUnitReqBuilder extends Struct<DeleteUnitReqBuilder>{

			unitId(unitId:string):Ref<DeleteUnitReqBuilder>
			build():Ref<DeleteUnitReq>
	}
	export interface DeleteUnitResp extends Struct<DeleteUnitResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteUserPathReqBodyBuilder extends Struct<DeleteUserPathReqBodyBuilder>{

			departmentChatAcceptorUserId(departmentChatAcceptorUserId:string):Ref<DeleteUserPathReqBodyBuilder>
			externalChatAcceptorUserId(externalChatAcceptorUserId:string):Ref<DeleteUserPathReqBodyBuilder>
			docsAcceptorUserId(docsAcceptorUserId:string):Ref<DeleteUserPathReqBodyBuilder>
			calendarAcceptorUserId(calendarAcceptorUserId:string):Ref<DeleteUserPathReqBodyBuilder>
			applicationAcceptorUserId(applicationAcceptorUserId:string):Ref<DeleteUserPathReqBodyBuilder>
			minutesAcceptorUserId(minutesAcceptorUserId:string):Ref<DeleteUserPathReqBodyBuilder>
			surveyAcceptorUserId(surveyAcceptorUserId:string):Ref<DeleteUserPathReqBodyBuilder>
			emailAcceptor(emailAcceptor:Ref<ResourceAcceptor>):Ref<DeleteUserPathReqBodyBuilder>
			build():Ref<DeleteUserReqBody>
	}
	export interface DeleteUserReq extends Struct<DeleteUserReq>{

			body:Ref<DeleteUserReqBody>
	}
	export interface DeleteUserReqBody extends Struct<DeleteUserReqBody>{

			departmentChatAcceptorUserId:Ref<string>
			externalChatAcceptorUserId:Ref<string>
			docsAcceptorUserId:Ref<string>
			calendarAcceptorUserId:Ref<string>
			applicationAcceptorUserId:Ref<string>
			minutesAcceptorUserId:Ref<string>
			surveyAcceptorUserId:Ref<string>
			emailAcceptor:Ref<ResourceAcceptor>
	}
	export interface DeleteUserReqBodyBuilder extends Struct<DeleteUserReqBodyBuilder>{

			departmentChatAcceptorUserId(departmentChatAcceptorUserId:string):Ref<DeleteUserReqBodyBuilder>
			externalChatAcceptorUserId(externalChatAcceptorUserId:string):Ref<DeleteUserReqBodyBuilder>
			docsAcceptorUserId(docsAcceptorUserId:string):Ref<DeleteUserReqBodyBuilder>
			calendarAcceptorUserId(calendarAcceptorUserId:string):Ref<DeleteUserReqBodyBuilder>
			applicationAcceptorUserId(applicationAcceptorUserId:string):Ref<DeleteUserReqBodyBuilder>
			minutesAcceptorUserId(minutesAcceptorUserId:string):Ref<DeleteUserReqBodyBuilder>
			surveyAcceptorUserId(surveyAcceptorUserId:string):Ref<DeleteUserReqBodyBuilder>
			emailAcceptor(emailAcceptor:Ref<ResourceAcceptor>):Ref<DeleteUserReqBodyBuilder>
			build():Ref<DeleteUserReqBody>
	}
	export interface DeleteUserReqBuilder extends Struct<DeleteUserReqBuilder>{

			userId(userId:string):Ref<DeleteUserReqBuilder>
			userIdType(userIdType:string):Ref<DeleteUserReqBuilder>
			body(body:Ref<DeleteUserReqBody>):Ref<DeleteUserReqBuilder>
			build():Ref<DeleteUserReq>
	}
	export interface DeleteUserResp extends Struct<DeleteUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface Department extends Struct<Department>{

			name:Ref<string>
			i18nName:Ref<DepartmentI18nName>
			parentDepartmentId:Ref<string>
			departmentId:Ref<string>
			openDepartmentId:Ref<string>
			leaderUserId:Ref<string>
			chatId:Ref<string>
			order:Ref<string>
			unitIds:string[]
			memberCount:Ref<int>
			status:Ref<DepartmentStatus>
			createGroupChat:Ref<bool>
			leaders:Ref<DepartmentLeader>[]
			groupChatEmployeeTypes:int[]
			departmentHrbps:string[]
			primaryMemberCount:Ref<int>
	}
	export interface DepartmentBuilder extends Struct<DepartmentBuilder>{

			name(name:string):Ref<DepartmentBuilder>
			i18nName(i18nName:Ref<DepartmentI18nName>):Ref<DepartmentBuilder>
			parentDepartmentId(parentDepartmentId:string):Ref<DepartmentBuilder>
			departmentId(departmentId:string):Ref<DepartmentBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentBuilder>
			leaderUserId(leaderUserId:string):Ref<DepartmentBuilder>
			chatId(chatId:string):Ref<DepartmentBuilder>
			order(order:string):Ref<DepartmentBuilder>
			unitIds(unitIds:string[]):Ref<DepartmentBuilder>
			memberCount(memberCount:int):Ref<DepartmentBuilder>
			status(status:Ref<DepartmentStatus>):Ref<DepartmentBuilder>
			createGroupChat(createGroupChat:bool):Ref<DepartmentBuilder>
			leaders(leaders:Ref<DepartmentLeader>[]):Ref<DepartmentBuilder>
			groupChatEmployeeTypes(groupChatEmployeeTypes:int[]):Ref<DepartmentBuilder>
			departmentHrbps(departmentHrbps:string[]):Ref<DepartmentBuilder>
			primaryMemberCount(primaryMemberCount:int):Ref<DepartmentBuilder>
			build():Ref<Department>
	}
	export interface DepartmentCount extends Struct<DepartmentCount>{

			departmentId:Ref<string>
			directDepartmentCount:Ref<int>
			directUserCount:Ref<int>
			departmentCount:Ref<int>
			userCount:Ref<int>
	}
	export interface DepartmentCountBuilder extends Struct<DepartmentCountBuilder>{

			departmentId(departmentId:string):Ref<DepartmentCountBuilder>
			directDepartmentCount(directDepartmentCount:int):Ref<DepartmentCountBuilder>
			directUserCount(directUserCount:int):Ref<DepartmentCountBuilder>
			departmentCount(departmentCount:int):Ref<DepartmentCountBuilder>
			userCount(userCount:int):Ref<DepartmentCountBuilder>
			build():Ref<DepartmentCount>
	}
	export interface DepartmentDetail extends Struct<DepartmentDetail>{

			departmentId:Ref<string>
			departmentName:Ref<DepartmentPathName>
			departmentPath:Ref<DepartmentPath>
	}
	export interface DepartmentDetailBuilder extends Struct<DepartmentDetailBuilder>{

			departmentId(departmentId:string):Ref<DepartmentDetailBuilder>
			departmentName(departmentName:Ref<DepartmentPathName>):Ref<DepartmentDetailBuilder>
			departmentPath(departmentPath:Ref<DepartmentPath>):Ref<DepartmentDetailBuilder>
			build():Ref<DepartmentDetail>
	}
	export interface DepartmentEvent extends Struct<DepartmentEvent>{

			name:Ref<string>
			parentDepartmentId:Ref<string>
			departmentId:Ref<string>
			openDepartmentId:Ref<string>
			leaderUserId:Ref<string>
			chatId:Ref<string>
			order:Ref<int>
			status:Ref<DepartmentStatus>
			leaders:Ref<DepartmentLeader>[]
			departmentHrbps:Ref<UserId>[]
	}
	export interface DepartmentEventBuilder extends Struct<DepartmentEventBuilder>{

			name(name:string):Ref<DepartmentEventBuilder>
			parentDepartmentId(parentDepartmentId:string):Ref<DepartmentEventBuilder>
			departmentId(departmentId:string):Ref<DepartmentEventBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentEventBuilder>
			leaderUserId(leaderUserId:string):Ref<DepartmentEventBuilder>
			chatId(chatId:string):Ref<DepartmentEventBuilder>
			order(order:int):Ref<DepartmentEventBuilder>
			status(status:Ref<DepartmentStatus>):Ref<DepartmentEventBuilder>
			leaders(leaders:Ref<DepartmentLeader>[]):Ref<DepartmentEventBuilder>
			departmentHrbps(departmentHrbps:Ref<UserId>[]):Ref<DepartmentEventBuilder>
			build():Ref<DepartmentEvent>
	}
	export interface DepartmentI18nName extends Struct<DepartmentI18nName>{

			zhCn:Ref<string>
			jaJp:Ref<string>
			enUs:Ref<string>
	}
	export interface DepartmentI18nNameBuilder extends Struct<DepartmentI18nNameBuilder>{

			zhCn(zhCn:string):Ref<DepartmentI18nNameBuilder>
			jaJp(jaJp:string):Ref<DepartmentI18nNameBuilder>
			enUs(enUs:string):Ref<DepartmentI18nNameBuilder>
			build():Ref<DepartmentI18nName>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	//"department_id"
	export const DepartmentIdTypeBatchUserDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeBatchUserOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeBindDepartmentUnitDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeBindDepartmentUnitOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeChildrenDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeChildrenDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeCreateDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeCreateDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeCreateGroupDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeCreateGroupOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeCreateUserDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeCreateUserOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeDeleteDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeDeleteDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeFindByDepartmentUserDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeFindByDepartmentUserOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeGetDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeGetDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeGetGroupDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeGetGroupOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeGetUserDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeGetUserOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeListDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeListDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeListDepartmentUnitDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeListDepartmentUnitOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeListScopeDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeListScopeOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeListUserDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeListUserOpenDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeParentDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeParentDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypePatchDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypePatchDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypePatchGroupDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypePatchGroupOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypePatchUserDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypePatchUserOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeResurrectUserDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeResurrectUserOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeSearchDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeSearchDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeUnbindDepartmentChatDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeUnbindDepartmentChatDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeUnbindDepartmentUnitDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeUnbindDepartmentUnitOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeUpdateDepartmentDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeUpdateDepartmentIdDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeUpdateDepartmentIdDepartmentOpenDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeUpdateDepartmentOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeUpdateUserDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeUpdateUserOpenDepartmentId:string
	export interface DepartmentLeader extends Struct<DepartmentLeader>{

			leaderType:Ref<int>
			leaderID:Ref<string>
	}
	export interface DepartmentLeaderBuilder extends Struct<DepartmentLeaderBuilder>{

			leaderType(leaderType:int):Ref<DepartmentLeaderBuilder>
			leaderID(leaderID:string):Ref<DepartmentLeaderBuilder>
			build():Ref<DepartmentLeader>
	}
	export interface DepartmentParent extends Struct<DepartmentParent>{

			departmentId:Ref<string>
			parentIds:string[]
	}
	export interface DepartmentParentBuilder extends Struct<DepartmentParentBuilder>{

			departmentId(departmentId:string):Ref<DepartmentParentBuilder>
			parentIds(parentIds:string[]):Ref<DepartmentParentBuilder>
			build():Ref<DepartmentParent>
	}
	export interface DepartmentPath extends Struct<DepartmentPath>{

			departmentIds:string[]
			departmentPathName:Ref<DepartmentPathName>
	}
	export interface DepartmentPathBuilder extends Struct<DepartmentPathBuilder>{

			departmentIds(departmentIds:string[]):Ref<DepartmentPathBuilder>
			departmentPathName(departmentPathName:Ref<DepartmentPathName>):Ref<DepartmentPathBuilder>
			build():Ref<DepartmentPath>
	}
	export interface DepartmentPathName extends Struct<DepartmentPathName>{

			name:Ref<string>
			i18nName:Ref<DepartmentI18nName>
	}
	export interface DepartmentPathNameBuilder extends Struct<DepartmentPathNameBuilder>{

			name(name:string):Ref<DepartmentPathNameBuilder>
			i18nName(i18nName:Ref<DepartmentI18nName>):Ref<DepartmentPathNameBuilder>
			build():Ref<DepartmentPathName>
	}
	export interface DepartmentStatus extends Struct<DepartmentStatus>{

			isDeleted:Ref<bool>
	}
	export interface DepartmentStatusBuilder extends Struct<DepartmentStatusBuilder>{

			isDeleted(isDeleted:bool):Ref<DepartmentStatusBuilder>
			build():Ref<DepartmentStatus>
	}
	export interface DepartmentUnit extends Struct<DepartmentUnit>{

			unitId:Ref<string>
			unitType:Ref<string>
			unitName:Ref<string>
	}
	export interface DepartmentUnitBuilder extends Struct<DepartmentUnitBuilder>{

			unitId(unitId:string):Ref<DepartmentUnitBuilder>
			unitType(unitType:string):Ref<DepartmentUnitBuilder>
			unitName(unitName:string):Ref<DepartmentUnitBuilder>
			build():Ref<DepartmentUnit>
	}
	export interface DynamicGroupExpression extends Struct<DynamicGroupExpression>{

			field:Ref<string>
			operator:Ref<string>
			value:Ref<string>
			values:string[]
	}
	export interface DynamicGroupExpressionBuilder extends Struct<DynamicGroupExpressionBuilder>{

			field(field:string):Ref<DynamicGroupExpressionBuilder>
			operator(operator:string):Ref<DynamicGroupExpressionBuilder>
			value(value:string):Ref<DynamicGroupExpressionBuilder>
			values(values:string[]):Ref<DynamicGroupExpressionBuilder>
			build():Ref<DynamicGroupExpression>
	}
	export interface DynamicGroupRule extends Struct<DynamicGroupRule>{

			departmentLevel:Ref<string>
			expressions:Ref<DynamicGroupExpression>[]
			joinerRule:Ref<string>
			groupStatus:Ref<string>
	}
	export interface DynamicGroupRuleBuilder extends Struct<DynamicGroupRuleBuilder>{

			departmentLevel(departmentLevel:string):Ref<DynamicGroupRuleBuilder>
			expressions(expressions:Ref<DynamicGroupExpression>[]):Ref<DynamicGroupRuleBuilder>
			joinerRule(joinerRule:string):Ref<DynamicGroupRuleBuilder>
			groupStatus(groupStatus:string):Ref<DynamicGroupRuleBuilder>
			build():Ref<DynamicGroupRule>
	}
	export interface EmployeeTypeEnum extends Struct<EmployeeTypeEnum>{

			enumId:Ref<string>
			enumValue:Ref<string>
			content:Ref<string>
			enumType:Ref<int>
			enumStatus:Ref<int>
			i18nContent:Ref<I18nContent>[]
	}
	export interface EmployeeTypeEnumBuilder extends Struct<EmployeeTypeEnumBuilder>{

			enumId(enumId:string):Ref<EmployeeTypeEnumBuilder>
			enumValue(enumValue:string):Ref<EmployeeTypeEnumBuilder>
			content(content:string):Ref<EmployeeTypeEnumBuilder>
			enumType(enumType:int):Ref<EmployeeTypeEnumBuilder>
			enumStatus(enumStatus:int):Ref<EmployeeTypeEnumBuilder>
			i18nContent(i18nContent:Ref<I18nContent>[]):Ref<EmployeeTypeEnumBuilder>
			build():Ref<EmployeeTypeEnum>
	}
	//1
	export const EnumStatusActive:int
	//2
	export const EnumStatusInactive:int
	//1
	export const EnumStatusUpdateEmployeeTypeEnumActive:int
	//2
	export const EnumStatusUpdateEmployeeTypeEnumInactive:int
	//2
	export const EnumTypeCustom:int
	//1
	export const EnumTypeDefualt:int
	//2
	export const EnumTypeUpdateEmployeeTypeEnumCustom:int
	//1
	export const EnumTypeUpdateEmployeeTypeEnumDefualt:int
	export interface FindByDepartmentUserIterator extends Struct<FindByDepartmentUserIterator>{

			next():[bool,Ref<User>]
			nextPageToken():Ref<string>
	}
	export interface FindByDepartmentUserReq extends Struct<FindByDepartmentUserReq>{

			limit:int
	}
	export interface FindByDepartmentUserReqBuilder extends Struct<FindByDepartmentUserReqBuilder>{

			limit(limit:int):Ref<FindByDepartmentUserReqBuilder>
			userIdType(userIdType:string):Ref<FindByDepartmentUserReqBuilder>
			departmentIdType(departmentIdType:string):Ref<FindByDepartmentUserReqBuilder>
			departmentId(departmentId:string):Ref<FindByDepartmentUserReqBuilder>
			pageSize(pageSize:int):Ref<FindByDepartmentUserReqBuilder>
			pageToken(pageToken:string):Ref<FindByDepartmentUserReqBuilder>
			build():Ref<FindByDepartmentUserReq>
	}
	export interface FindByDepartmentUserResp extends Struct<FindByDepartmentUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<FindByDepartmentUserRespData>
			success():bool
	}
	export interface FindByDepartmentUserRespData extends Struct<FindByDepartmentUserRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<User>[]
	}
	export interface FunctionalRole extends Struct<FunctionalRole>{

			roleId:Ref<string>
			roleName:Ref<string>
	}
	export interface FunctionalRoleBuilder extends Struct<FunctionalRoleBuilder>{

			roleId(roleId:string):Ref<FunctionalRoleBuilder>
			roleName(roleName:string):Ref<FunctionalRoleBuilder>
			build():Ref<FunctionalRole>
	}
	export interface FunctionalRoleMember extends Struct<FunctionalRoleMember>{

			userId:Ref<string>
			scopeType:Ref<string>
			departmentIds:string[]
	}
	export interface FunctionalRoleMemberBuilder extends Struct<FunctionalRoleMemberBuilder>{

			userId(userId:string):Ref<FunctionalRoleMemberBuilder>
			scopeType(scopeType:string):Ref<FunctionalRoleMemberBuilder>
			departmentIds(departmentIds:string[]):Ref<FunctionalRoleMemberBuilder>
			build():Ref<FunctionalRoleMember>
	}
	export interface FunctionalRoleMemberResult extends Struct<FunctionalRoleMemberResult>{

			userId:Ref<string>
			reason:Ref<int>
	}
	export interface FunctionalRoleMemberResultBuilder extends Struct<FunctionalRoleMemberResultBuilder>{

			userId(userId:string):Ref<FunctionalRoleMemberResultBuilder>
			reason(reason:int):Ref<FunctionalRoleMemberResultBuilder>
			build():Ref<FunctionalRoleMemberResult>
	}
	//2
	export const GenderTypeFemale:int
	//1
	export const GenderTypeMale:int
	//3
	export const GenderTypeOthers:int
	//2
	export const GenderTypePatchUserFemale:int
	//1
	export const GenderTypePatchUserMale:int
	//3
	export const GenderTypePatchUserOthers:int
	//0
	export const GenderTypePatchUserUnkown:int
	//0
	export const GenderTypeUnkown:int
	//2
	export const GenderTypeUpdateUserFemale:int
	//1
	export const GenderTypeUpdateUserMale:int
	//3
	export const GenderTypeUpdateUserOthers:int
	//0
	export const GenderTypeUpdateUserUnkown:int
	export interface GetDepartmentReq extends Struct<GetDepartmentReq>{

	}
	export interface GetDepartmentReqBuilder extends Struct<GetDepartmentReqBuilder>{

			departmentId(departmentId:string):Ref<GetDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<GetDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<GetDepartmentReqBuilder>
			build():Ref<GetDepartmentReq>
	}
	export interface GetDepartmentResp extends Struct<GetDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetDepartmentRespData>
			success():bool
	}
	export interface GetDepartmentRespData extends Struct<GetDepartmentRespData>{

			department:Ref<Department>
	}
	export interface GetFunctionalRoleMemberReq extends Struct<GetFunctionalRoleMemberReq>{

	}
	export interface GetFunctionalRoleMemberReqBuilder extends Struct<GetFunctionalRoleMemberReqBuilder>{

			roleId(roleId:string):Ref<GetFunctionalRoleMemberReqBuilder>
			memberId(memberId:string):Ref<GetFunctionalRoleMemberReqBuilder>
			userIdType(userIdType:string):Ref<GetFunctionalRoleMemberReqBuilder>
			departmentIdType(departmentIdType:string):Ref<GetFunctionalRoleMemberReqBuilder>
			build():Ref<GetFunctionalRoleMemberReq>
	}
	export interface GetFunctionalRoleMemberResp extends Struct<GetFunctionalRoleMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetFunctionalRoleMemberRespData>
			success():bool
	}
	export interface GetFunctionalRoleMemberRespData extends Struct<GetFunctionalRoleMemberRespData>{

			member:Ref<FunctionalRoleMember>
	}
	export interface GetGroupReq extends Struct<GetGroupReq>{

	}
	export interface GetGroupReqBuilder extends Struct<GetGroupReqBuilder>{

			groupId(groupId:string):Ref<GetGroupReqBuilder>
			userIdType(userIdType:string):Ref<GetGroupReqBuilder>
			departmentIdType(departmentIdType:string):Ref<GetGroupReqBuilder>
			build():Ref<GetGroupReq>
	}
	export interface GetGroupResp extends Struct<GetGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetGroupRespData>
			success():bool
	}
	export interface GetGroupRespData extends Struct<GetGroupRespData>{

			group:Ref<Group>
	}
	export interface GetJobFamilyReq extends Struct<GetJobFamilyReq>{

	}
	export interface GetJobFamilyReqBuilder extends Struct<GetJobFamilyReqBuilder>{

			jobFamilyId(jobFamilyId:string):Ref<GetJobFamilyReqBuilder>
			build():Ref<GetJobFamilyReq>
	}
	export interface GetJobFamilyResp extends Struct<GetJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetJobFamilyRespData>
			success():bool
	}
	export interface GetJobFamilyRespData extends Struct<GetJobFamilyRespData>{

			jobFamily:Ref<JobFamily>
	}
	export interface GetJobLevelReq extends Struct<GetJobLevelReq>{

	}
	export interface GetJobLevelReqBuilder extends Struct<GetJobLevelReqBuilder>{

			jobLevelId(jobLevelId:string):Ref<GetJobLevelReqBuilder>
			build():Ref<GetJobLevelReq>
	}
	export interface GetJobLevelResp extends Struct<GetJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetJobLevelRespData>
			success():bool
	}
	export interface GetJobLevelRespData extends Struct<GetJobLevelRespData>{

			jobLevel:Ref<JobLevel>
	}
	export interface GetJobTitleReq extends Struct<GetJobTitleReq>{

	}
	export interface GetJobTitleReqBuilder extends Struct<GetJobTitleReqBuilder>{

			jobTitleId(jobTitleId:string):Ref<GetJobTitleReqBuilder>
			build():Ref<GetJobTitleReq>
	}
	export interface GetJobTitleResp extends Struct<GetJobTitleResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetJobTitleRespData>
			success():bool
	}
	export interface GetJobTitleRespData extends Struct<GetJobTitleRespData>{

			jobTitle:Ref<JobTitle>
	}
	export interface GetUnitReq extends Struct<GetUnitReq>{

	}
	export interface GetUnitReqBuilder extends Struct<GetUnitReqBuilder>{

			unitId(unitId:string):Ref<GetUnitReqBuilder>
			build():Ref<GetUnitReq>
	}
	export interface GetUnitResp extends Struct<GetUnitResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetUnitRespData>
			success():bool
	}
	export interface GetUnitRespData extends Struct<GetUnitRespData>{

			unit:Ref<Unit>
	}
	export interface GetUserReq extends Struct<GetUserReq>{

	}
	export interface GetUserReqBuilder extends Struct<GetUserReqBuilder>{

			userId(userId:string):Ref<GetUserReqBuilder>
			userIdType(userIdType:string):Ref<GetUserReqBuilder>
			departmentIdType(departmentIdType:string):Ref<GetUserReqBuilder>
			build():Ref<GetUserReq>
	}
	export interface GetUserResp extends Struct<GetUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetUserRespData>
			success():bool
	}
	export interface GetUserRespData extends Struct<GetUserRespData>{

			user:Ref<User>
	}
	export interface GetWorkCityReq extends Struct<GetWorkCityReq>{

	}
	export interface GetWorkCityReqBuilder extends Struct<GetWorkCityReqBuilder>{

			workCityId(workCityId:string):Ref<GetWorkCityReqBuilder>
			build():Ref<GetWorkCityReq>
	}
	export interface GetWorkCityResp extends Struct<GetWorkCityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetWorkCityRespData>
			success():bool
	}
	export interface GetWorkCityRespData extends Struct<GetWorkCityRespData>{

			workCity:Ref<WorkCity>
	}
	export interface Group extends Struct<Group>{

			id:Ref<string>
			name:Ref<string>
			description:Ref<string>
			memberUserCount:Ref<int>
			memberDepartmentCount:Ref<int>
			type:Ref<int>
			groupId:Ref<string>
	}
	export interface GroupBuilder extends Struct<GroupBuilder>{

			id(id:string):Ref<GroupBuilder>
			name(name:string):Ref<GroupBuilder>
			description(description:string):Ref<GroupBuilder>
			memberUserCount(memberUserCount:int):Ref<GroupBuilder>
			memberDepartmentCount(memberDepartmentCount:int):Ref<GroupBuilder>
			type(type_:int):Ref<GroupBuilder>
			groupId(groupId:string):Ref<GroupBuilder>
			build():Ref<Group>
	}
	export interface GroupEvent extends Struct<GroupEvent>{

			userGroupId:Ref<string>
			name:Ref<string>
	}
	export interface GroupEventBuilder extends Struct<GroupEventBuilder>{

			userGroupId(userGroupId:string):Ref<GroupEventBuilder>
			name(name:string):Ref<GroupEventBuilder>
			build():Ref<GroupEvent>
	}
	//1
	export const GroupTypeAssign:int
	//2
	export const GroupTypeDynamic:int
	//1
	export const GroupTypeMemberBelongGroupAssign:int
	//2
	export const GroupTypeMemberBelongGroupDynamic:int
	//1
	export const GroupTypeSimplelistGroupAssign:int
	//2
	export const GroupTypeSimplelistGroupDynamic:int
	export interface GroupVisibleScope extends Struct<GroupVisibleScope>{

			visibleScopeType:Ref<string>
			visibleUsers:string[]
			visibleDepartments:string[]
			sceneTypes:int[]
	}
	export interface GroupVisibleScopeBuilder extends Struct<GroupVisibleScopeBuilder>{

			visibleScopeType(visibleScopeType:string):Ref<GroupVisibleScopeBuilder>
			visibleUsers(visibleUsers:string[]):Ref<GroupVisibleScopeBuilder>
			visibleDepartments(visibleDepartments:string[]):Ref<GroupVisibleScopeBuilder>
			sceneTypes(sceneTypes:int[]):Ref<GroupVisibleScopeBuilder>
			build():Ref<GroupVisibleScope>
	}
	export interface I18nContent extends Struct<I18nContent>{

			locale:Ref<string>
			value:Ref<string>
	}
	export interface I18nContentBuilder extends Struct<I18nContentBuilder>{

			locale(locale:string):Ref<I18nContentBuilder>
			value(value:string):Ref<I18nContentBuilder>
			build():Ref<I18nContent>
	}
	export interface JobFamily extends Struct<JobFamily>{

			name:Ref<string>
			description:Ref<string>
			parentJobFamilyId:Ref<string>
			status:Ref<bool>
			i18nName:Ref<I18nContent>[]
			i18nDescription:Ref<I18nContent>[]
			jobFamilyId:Ref<string>
	}
	export interface JobFamilyBuilder extends Struct<JobFamilyBuilder>{

			name(name:string):Ref<JobFamilyBuilder>
			description(description:string):Ref<JobFamilyBuilder>
			parentJobFamilyId(parentJobFamilyId:string):Ref<JobFamilyBuilder>
			status(status:bool):Ref<JobFamilyBuilder>
			i18nName(i18nName:Ref<I18nContent>[]):Ref<JobFamilyBuilder>
			i18nDescription(i18nDescription:Ref<I18nContent>[]):Ref<JobFamilyBuilder>
			jobFamilyId(jobFamilyId:string):Ref<JobFamilyBuilder>
			build():Ref<JobFamily>
	}
	export interface JobLevel extends Struct<JobLevel>{

			name:Ref<string>
			description:Ref<string>
			order:Ref<int>
			status:Ref<bool>
			jobLevelId:Ref<string>
			i18nName:Ref<I18nContent>[]
			i18nDescription:Ref<I18nContent>[]
	}
	export interface JobLevelBuilder extends Struct<JobLevelBuilder>{

			name(name:string):Ref<JobLevelBuilder>
			description(description:string):Ref<JobLevelBuilder>
			order(order:int):Ref<JobLevelBuilder>
			status(status:bool):Ref<JobLevelBuilder>
			jobLevelId(jobLevelId:string):Ref<JobLevelBuilder>
			i18nName(i18nName:Ref<I18nContent>[]):Ref<JobLevelBuilder>
			i18nDescription(i18nDescription:Ref<I18nContent>[]):Ref<JobLevelBuilder>
			build():Ref<JobLevel>
	}
	export interface JobTitle extends Struct<JobTitle>{

			jobTitleId:Ref<string>
			name:Ref<string>
			i18nName:Ref<I18nContent>[]
			status:Ref<bool>
	}
	export interface JobTitleBuilder extends Struct<JobTitleBuilder>{

			jobTitleId(jobTitleId:string):Ref<JobTitleBuilder>
			name(name:string):Ref<JobTitleBuilder>
			i18nName(i18nName:Ref<I18nContent>[]):Ref<JobTitleBuilder>
			status(status:bool):Ref<JobTitleBuilder>
			build():Ref<JobTitle>
	}
	export interface ListCustomAttrIterator extends Struct<ListCustomAttrIterator>{

			next():[bool,Ref<CustomAttr>]
			nextPageToken():Ref<string>
	}
	export interface ListCustomAttrReq extends Struct<ListCustomAttrReq>{

			limit:int
	}
	export interface ListCustomAttrReqBuilder extends Struct<ListCustomAttrReqBuilder>{

			limit(limit:int):Ref<ListCustomAttrReqBuilder>
			pageSize(pageSize:int):Ref<ListCustomAttrReqBuilder>
			pageToken(pageToken:string):Ref<ListCustomAttrReqBuilder>
			build():Ref<ListCustomAttrReq>
	}
	export interface ListCustomAttrResp extends Struct<ListCustomAttrResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListCustomAttrRespData>
			success():bool
	}
	export interface ListCustomAttrRespData extends Struct<ListCustomAttrRespData>{

			items:Ref<CustomAttr>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListDepartmentIterator extends Struct<ListDepartmentIterator>{

			next():[bool,Ref<Department>]
			nextPageToken():Ref<string>
	}
	export interface ListDepartmentReq extends Struct<ListDepartmentReq>{

			limit:int
	}
	export interface ListDepartmentReqBuilder extends Struct<ListDepartmentReqBuilder>{

			limit(limit:int):Ref<ListDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<ListDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListDepartmentReqBuilder>
			parentDepartmentId(parentDepartmentId:string):Ref<ListDepartmentReqBuilder>
			fetchChild(fetchChild:bool):Ref<ListDepartmentReqBuilder>
			pageSize(pageSize:int):Ref<ListDepartmentReqBuilder>
			pageToken(pageToken:string):Ref<ListDepartmentReqBuilder>
			build():Ref<ListDepartmentReq>
	}
	export interface ListDepartmentResp extends Struct<ListDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListDepartmentRespData>
			success():bool
	}
	export interface ListDepartmentRespData extends Struct<ListDepartmentRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<Department>[]
	}
	export interface ListDepartmentUnitReq extends Struct<ListDepartmentUnitReq>{

	}
	export interface ListDepartmentUnitReqBuilder extends Struct<ListDepartmentUnitReqBuilder>{

			unitId(unitId:string):Ref<ListDepartmentUnitReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListDepartmentUnitReqBuilder>
			pageToken(pageToken:string):Ref<ListDepartmentUnitReqBuilder>
			pageSize(pageSize:int):Ref<ListDepartmentUnitReqBuilder>
			build():Ref<ListDepartmentUnitReq>
	}
	export interface ListDepartmentUnitResp extends Struct<ListDepartmentUnitResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListDepartmentUnitRespData>
			success():bool
	}
	export interface ListDepartmentUnitRespData extends Struct<ListDepartmentUnitRespData>{

			departmentlist:Ref<UnitDepartment>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListEmployeeTypeEnumIterator extends Struct<ListEmployeeTypeEnumIterator>{

			next():[bool,Ref<EmployeeTypeEnum>]
			nextPageToken():Ref<string>
	}
	export interface ListEmployeeTypeEnumReq extends Struct<ListEmployeeTypeEnumReq>{

			limit:int
	}
	export interface ListEmployeeTypeEnumReqBuilder extends Struct<ListEmployeeTypeEnumReqBuilder>{

			limit(limit:int):Ref<ListEmployeeTypeEnumReqBuilder>
			pageToken(pageToken:string):Ref<ListEmployeeTypeEnumReqBuilder>
			pageSize(pageSize:int):Ref<ListEmployeeTypeEnumReqBuilder>
			build():Ref<ListEmployeeTypeEnumReq>
	}
	export interface ListEmployeeTypeEnumResp extends Struct<ListEmployeeTypeEnumResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListEmployeeTypeEnumRespData>
			success():bool
	}
	export interface ListEmployeeTypeEnumRespData extends Struct<ListEmployeeTypeEnumRespData>{

			items:Ref<EmployeeTypeEnum>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListFunctionalRoleMemberIterator extends Struct<ListFunctionalRoleMemberIterator>{

			next():[bool,Ref<FunctionalRoleMember>]
			nextPageToken():Ref<string>
	}
	export interface ListFunctionalRoleMemberReq extends Struct<ListFunctionalRoleMemberReq>{

			limit:int
	}
	export interface ListFunctionalRoleMemberReqBuilder extends Struct<ListFunctionalRoleMemberReqBuilder>{

			limit(limit:int):Ref<ListFunctionalRoleMemberReqBuilder>
			roleId(roleId:string):Ref<ListFunctionalRoleMemberReqBuilder>
			pageSize(pageSize:int):Ref<ListFunctionalRoleMemberReqBuilder>
			pageToken(pageToken:string):Ref<ListFunctionalRoleMemberReqBuilder>
			userIdType(userIdType:string):Ref<ListFunctionalRoleMemberReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListFunctionalRoleMemberReqBuilder>
			build():Ref<ListFunctionalRoleMemberReq>
	}
	export interface ListFunctionalRoleMemberResp extends Struct<ListFunctionalRoleMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListFunctionalRoleMemberRespData>
			success():bool
	}
	export interface ListFunctionalRoleMemberRespData extends Struct<ListFunctionalRoleMemberRespData>{

			members:Ref<FunctionalRoleMember>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListJobFamilyIterator extends Struct<ListJobFamilyIterator>{

			next():[bool,Ref<JobFamily>]
			nextPageToken():Ref<string>
	}
	export interface ListJobFamilyReq extends Struct<ListJobFamilyReq>{

			limit:int
	}
	export interface ListJobFamilyReqBuilder extends Struct<ListJobFamilyReqBuilder>{

			limit(limit:int):Ref<ListJobFamilyReqBuilder>
			pageSize(pageSize:int):Ref<ListJobFamilyReqBuilder>
			pageToken(pageToken:string):Ref<ListJobFamilyReqBuilder>
			name(name:string):Ref<ListJobFamilyReqBuilder>
			build():Ref<ListJobFamilyReq>
	}
	export interface ListJobFamilyResp extends Struct<ListJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListJobFamilyRespData>
			success():bool
	}
	export interface ListJobFamilyRespData extends Struct<ListJobFamilyRespData>{

			items:Ref<JobFamily>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListJobLevelIterator extends Struct<ListJobLevelIterator>{

			next():[bool,Ref<JobLevel>]
			nextPageToken():Ref<string>
	}
	export interface ListJobLevelReq extends Struct<ListJobLevelReq>{

			limit:int
	}
	export interface ListJobLevelReqBuilder extends Struct<ListJobLevelReqBuilder>{

			limit(limit:int):Ref<ListJobLevelReqBuilder>
			pageSize(pageSize:int):Ref<ListJobLevelReqBuilder>
			pageToken(pageToken:string):Ref<ListJobLevelReqBuilder>
			name(name:string):Ref<ListJobLevelReqBuilder>
			build():Ref<ListJobLevelReq>
	}
	export interface ListJobLevelResp extends Struct<ListJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListJobLevelRespData>
			success():bool
	}
	export interface ListJobLevelRespData extends Struct<ListJobLevelRespData>{

			items:Ref<JobLevel>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListJobTitleIterator extends Struct<ListJobTitleIterator>{

			next():[bool,Ref<JobTitle>]
			nextPageToken():Ref<string>
	}
	export interface ListJobTitleReq extends Struct<ListJobTitleReq>{

			limit:int
	}
	export interface ListJobTitleReqBuilder extends Struct<ListJobTitleReqBuilder>{

			limit(limit:int):Ref<ListJobTitleReqBuilder>
			pageSize(pageSize:int):Ref<ListJobTitleReqBuilder>
			pageToken(pageToken:string):Ref<ListJobTitleReqBuilder>
			build():Ref<ListJobTitleReq>
	}
	export interface ListJobTitleResp extends Struct<ListJobTitleResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListJobTitleRespData>
			success():bool
	}
	export interface ListJobTitleRespData extends Struct<ListJobTitleRespData>{

			items:Ref<JobTitle>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListScopeReq extends Struct<ListScopeReq>{

	}
	export interface ListScopeReqBuilder extends Struct<ListScopeReqBuilder>{

			userIdType(userIdType:string):Ref<ListScopeReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListScopeReqBuilder>
			pageToken(pageToken:string):Ref<ListScopeReqBuilder>
			pageSize(pageSize:int):Ref<ListScopeReqBuilder>
			build():Ref<ListScopeReq>
	}
	export interface ListScopeResp extends Struct<ListScopeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListScopeRespData>
			success():bool
	}
	export interface ListScopeRespData extends Struct<ListScopeRespData>{

			departmentIds:string[]
			userIds:string[]
			groupIds:string[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListUnitReq extends Struct<ListUnitReq>{

	}
	export interface ListUnitReqBuilder extends Struct<ListUnitReqBuilder>{

			pageSize(pageSize:int):Ref<ListUnitReqBuilder>
			pageToken(pageToken:string):Ref<ListUnitReqBuilder>
			build():Ref<ListUnitReq>
	}
	export interface ListUnitResp extends Struct<ListUnitResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListUnitRespData>
			success():bool
	}
	export interface ListUnitRespData extends Struct<ListUnitRespData>{

			unitlist:Ref<Unit>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListUserIterator extends Struct<ListUserIterator>{

			next():[bool,Ref<User>]
			nextPageToken():Ref<string>
	}
	export interface ListUserReq extends Struct<ListUserReq>{

			limit:int
	}
	export interface ListUserReqBuilder extends Struct<ListUserReqBuilder>{

			limit(limit:int):Ref<ListUserReqBuilder>
			userIdType(userIdType:string):Ref<ListUserReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListUserReqBuilder>
			departmentId(departmentId:string):Ref<ListUserReqBuilder>
			pageToken(pageToken:string):Ref<ListUserReqBuilder>
			pageSize(pageSize:int):Ref<ListUserReqBuilder>
			build():Ref<ListUserReq>
	}
	export interface ListUserResp extends Struct<ListUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListUserRespData>
			success():bool
	}
	export interface ListUserRespData extends Struct<ListUserRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<User>[]
	}
	export interface ListWorkCityIterator extends Struct<ListWorkCityIterator>{

			next():[bool,Ref<WorkCity>]
			nextPageToken():Ref<string>
	}
	export interface ListWorkCityReq extends Struct<ListWorkCityReq>{

			limit:int
	}
	export interface ListWorkCityReqBuilder extends Struct<ListWorkCityReqBuilder>{

			limit(limit:int):Ref<ListWorkCityReqBuilder>
			pageSize(pageSize:int):Ref<ListWorkCityReqBuilder>
			pageToken(pageToken:string):Ref<ListWorkCityReqBuilder>
			build():Ref<ListWorkCityReq>
	}
	export interface ListWorkCityResp extends Struct<ListWorkCityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListWorkCityRespData>
			success():bool
	}
	export interface ListWorkCityRespData extends Struct<ListWorkCityRespData>{

			items:Ref<WorkCity>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface MemberBelongGroupReq extends Struct<MemberBelongGroupReq>{

	}
	export interface MemberBelongGroupReqBuilder extends Struct<MemberBelongGroupReqBuilder>{

			memberId(memberId:string):Ref<MemberBelongGroupReqBuilder>
			memberIdType(memberIdType:string):Ref<MemberBelongGroupReqBuilder>
			groupType(groupType:int):Ref<MemberBelongGroupReqBuilder>
			pageSize(pageSize:int):Ref<MemberBelongGroupReqBuilder>
			pageToken(pageToken:string):Ref<MemberBelongGroupReqBuilder>
			build():Ref<MemberBelongGroupReq>
	}
	export interface MemberBelongGroupResp extends Struct<MemberBelongGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<MemberBelongGroupRespData>
			success():bool
	}
	export interface MemberBelongGroupRespData extends Struct<MemberBelongGroupRespData>{

			groupList:string[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	//"open_id"
	export const MemberIdTypeAddGroupMemberOpenID:string
	//"union_id"
	export const MemberIdTypeAddGroupMemberUnionID:string
	//"user_id"
	export const MemberIdTypeAddGroupMemberUserID:string
	//"open_id"
	export const MemberIdTypeOpenID:string
	//"open_id"
	export const MemberIdTypeRemoveGroupMemberOpenID:string
	//"union_id"
	export const MemberIdTypeRemoveGroupMemberUnionID:string
	//"user_id"
	export const MemberIdTypeRemoveGroupMemberUserID:string
	//"department_id"
	export const MemberIdTypeSimplelistGroupMemberDepartmentId:string
	//"open_id"
	export const MemberIdTypeSimplelistGroupMemberOpenId:string
	//"union_id"
	export const MemberIdTypeSimplelistGroupMemberUnionId:string
	//"user_id"
	export const MemberIdTypeSimplelistGroupMemberUserId:string
	//"union_id"
	export const MemberIdTypeUnionID:string
	//"user_id"
	export const MemberIdTypeUserID:string
	export interface MemberResult extends Struct<MemberResult>{

			memberId:Ref<string>
			code:Ref<int>
	}
	export interface MemberResultBuilder extends Struct<MemberResultBuilder>{

			memberId(memberId:string):Ref<MemberResultBuilder>
			code(code:int):Ref<MemberResultBuilder>
			build():Ref<MemberResult>
	}
	//"user"
	export const MemberTypeRemoveGroupMemberUser:string
	//"department"
	export const MemberTypeSimplelistGroupMemberDepartment:string
	//"user"
	export const MemberTypeSimplelistGroupMemberUser:string
	//"user"
	export const MemberTypeUser:string
	export interface Memberlist extends Struct<Memberlist>{

			memberId:Ref<string>
			memberType:Ref<string>
			memberIdType:Ref<string>
	}
	export interface MemberlistBuilder extends Struct<MemberlistBuilder>{

			memberId(memberId:string):Ref<MemberlistBuilder>
			memberType(memberType:string):Ref<MemberlistBuilder>
			memberIdType(memberIdType:string):Ref<MemberlistBuilder>
			build():Ref<Memberlist>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V3>

	export function newAddGroupMemberPathReqBodyBuilder():Ref<AddGroupMemberPathReqBodyBuilder>

	export function newAddGroupMemberReqBodyBuilder():Ref<AddGroupMemberReqBodyBuilder>

	export function newAddGroupMemberReqBuilder():Ref<AddGroupMemberReqBuilder>

	export function newAvatarInfoBuilder():Ref<AvatarInfoBuilder>

	export function newBatchAddGroupMemberPathReqBodyBuilder():Ref<BatchAddGroupMemberPathReqBodyBuilder>

	export function newBatchAddGroupMemberReqBodyBuilder():Ref<BatchAddGroupMemberReqBodyBuilder>

	export function newBatchAddGroupMemberReqBuilder():Ref<BatchAddGroupMemberReqBuilder>

	export function newBatchCreateFunctionalRoleMemberPathReqBodyBuilder():Ref<BatchCreateFunctionalRoleMemberPathReqBodyBuilder>

	export function newBatchCreateFunctionalRoleMemberReqBodyBuilder():Ref<BatchCreateFunctionalRoleMemberReqBodyBuilder>

	export function newBatchCreateFunctionalRoleMemberReqBuilder():Ref<BatchCreateFunctionalRoleMemberReqBuilder>

	export function newBatchDeleteFunctionalRoleMemberPathReqBodyBuilder():Ref<BatchDeleteFunctionalRoleMemberPathReqBodyBuilder>

	export function newBatchDeleteFunctionalRoleMemberReqBodyBuilder():Ref<BatchDeleteFunctionalRoleMemberReqBodyBuilder>

	export function newBatchDeleteFunctionalRoleMemberReqBuilder():Ref<BatchDeleteFunctionalRoleMemberReqBuilder>

	export function newBatchDepartmentReqBuilder():Ref<BatchDepartmentReqBuilder>

	export function newBatchGetIdUserPathReqBodyBuilder():Ref<BatchGetIdUserPathReqBodyBuilder>

	export function newBatchGetIdUserReqBodyBuilder():Ref<BatchGetIdUserReqBodyBuilder>

	export function newBatchGetIdUserReqBuilder():Ref<BatchGetIdUserReqBuilder>

	export function newBatchRemoveGroupMemberPathReqBodyBuilder():Ref<BatchRemoveGroupMemberPathReqBodyBuilder>

	export function newBatchRemoveGroupMemberReqBodyBuilder():Ref<BatchRemoveGroupMemberReqBodyBuilder>

	export function newBatchRemoveGroupMemberReqBuilder():Ref<BatchRemoveGroupMemberReqBuilder>

	export function newBatchUserReqBuilder():Ref<BatchUserReqBuilder>

	export function newBindDepartmentUnitPathReqBodyBuilder():Ref<BindDepartmentUnitPathReqBodyBuilder>

	export function newBindDepartmentUnitReqBodyBuilder():Ref<BindDepartmentUnitReqBodyBuilder>

	export function newBindDepartmentUnitReqBuilder():Ref<BindDepartmentUnitReqBuilder>

	export function newChildrenDepartmentReqBuilder():Ref<ChildrenDepartmentReqBuilder>

	export function newCollaborationTenantBuilder():Ref<CollaborationTenantBuilder>

	export function newConfidentialMemberBuilder():Ref<ConfidentialMemberBuilder>

	export function newCreateDepartmentReqBuilder():Ref<CreateDepartmentReqBuilder>

	export function newCreateEmployeeTypeEnumReqBuilder():Ref<CreateEmployeeTypeEnumReqBuilder>

	export function newCreateFunctionalRolePathReqBodyBuilder():Ref<CreateFunctionalRolePathReqBodyBuilder>

	export function newCreateFunctionalRoleReqBodyBuilder():Ref<CreateFunctionalRoleReqBodyBuilder>

	export function newCreateFunctionalRoleReqBuilder():Ref<CreateFunctionalRoleReqBuilder>

	export function newCreateGroupReqBuilder():Ref<CreateGroupReqBuilder>

	export function newCreateJobFamilyReqBuilder():Ref<CreateJobFamilyReqBuilder>

	export function newCreateJobLevelReqBuilder():Ref<CreateJobLevelReqBuilder>

	export function newCreateUnitPathReqBodyBuilder():Ref<CreateUnitPathReqBodyBuilder>

	export function newCreateUnitReqBodyBuilder():Ref<CreateUnitReqBodyBuilder>

	export function newCreateUnitReqBuilder():Ref<CreateUnitReqBuilder>

	export function newCreateUserReqBuilder():Ref<CreateUserReqBuilder>

	export function newCustomAttrBuilder():Ref<CustomAttrBuilder>

	export function newCustomAttrEventBuilder():Ref<CustomAttrEventBuilder>

	export function newCustomAttrGenericUserBuilder():Ref<CustomAttrGenericUserBuilder>

	export function newCustomAttrOptionBuilder():Ref<CustomAttrOptionBuilder>

	export function newCustomAttrOptionsBuilder():Ref<CustomAttrOptionsBuilder>

	export function newDeleteDepartmentReqBuilder():Ref<DeleteDepartmentReqBuilder>

	export function newDeleteEmployeeTypeEnumReqBuilder():Ref<DeleteEmployeeTypeEnumReqBuilder>

	export function newDeleteFunctionalRoleReqBuilder():Ref<DeleteFunctionalRoleReqBuilder>

	export function newDeleteGroupReqBuilder():Ref<DeleteGroupReqBuilder>

	export function newDeleteJobFamilyReqBuilder():Ref<DeleteJobFamilyReqBuilder>

	export function newDeleteJobLevelReqBuilder():Ref<DeleteJobLevelReqBuilder>

	export function newDeleteUnitReqBuilder():Ref<DeleteUnitReqBuilder>

	export function newDeleteUserPathReqBodyBuilder():Ref<DeleteUserPathReqBodyBuilder>

	export function newDeleteUserReqBodyBuilder():Ref<DeleteUserReqBodyBuilder>

	export function newDeleteUserReqBuilder():Ref<DeleteUserReqBuilder>

	export function newDepartmentBuilder():Ref<DepartmentBuilder>

	export function newDepartmentCountBuilder():Ref<DepartmentCountBuilder>

	export function newDepartmentDetailBuilder():Ref<DepartmentDetailBuilder>

	export function newDepartmentEventBuilder():Ref<DepartmentEventBuilder>

	export function newDepartmentI18nNameBuilder():Ref<DepartmentI18nNameBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDepartmentLeaderBuilder():Ref<DepartmentLeaderBuilder>

	export function newDepartmentParentBuilder():Ref<DepartmentParentBuilder>

	export function newDepartmentPathBuilder():Ref<DepartmentPathBuilder>

	export function newDepartmentPathNameBuilder():Ref<DepartmentPathNameBuilder>

	export function newDepartmentStatusBuilder():Ref<DepartmentStatusBuilder>

	export function newDepartmentUnitBuilder():Ref<DepartmentUnitBuilder>

	export function newDynamicGroupExpressionBuilder():Ref<DynamicGroupExpressionBuilder>

	export function newDynamicGroupRuleBuilder():Ref<DynamicGroupRuleBuilder>

	export function newEmployeeTypeEnumBuilder():Ref<EmployeeTypeEnumBuilder>

	export function newFindByDepartmentUserReqBuilder():Ref<FindByDepartmentUserReqBuilder>

	export function newFunctionalRoleBuilder():Ref<FunctionalRoleBuilder>

	export function newFunctionalRoleMemberBuilder():Ref<FunctionalRoleMemberBuilder>

	export function newFunctionalRoleMemberResultBuilder():Ref<FunctionalRoleMemberResultBuilder>

	export function newGetDepartmentReqBuilder():Ref<GetDepartmentReqBuilder>

	export function newGetFunctionalRoleMemberReqBuilder():Ref<GetFunctionalRoleMemberReqBuilder>

	export function newGetGroupReqBuilder():Ref<GetGroupReqBuilder>

	export function newGetJobFamilyReqBuilder():Ref<GetJobFamilyReqBuilder>

	export function newGetJobLevelReqBuilder():Ref<GetJobLevelReqBuilder>

	export function newGetJobTitleReqBuilder():Ref<GetJobTitleReqBuilder>

	export function newGetUnitReqBuilder():Ref<GetUnitReqBuilder>

	export function newGetUserReqBuilder():Ref<GetUserReqBuilder>

	export function newGetWorkCityReqBuilder():Ref<GetWorkCityReqBuilder>

	export function newGroupBuilder():Ref<GroupBuilder>

	export function newGroupEventBuilder():Ref<GroupEventBuilder>

	export function newGroupVisibleScopeBuilder():Ref<GroupVisibleScopeBuilder>

	export function newI18nContentBuilder():Ref<I18nContentBuilder>

	export function newJobFamilyBuilder():Ref<JobFamilyBuilder>

	export function newJobLevelBuilder():Ref<JobLevelBuilder>

	export function newJobTitleBuilder():Ref<JobTitleBuilder>

	export function newListCustomAttrReqBuilder():Ref<ListCustomAttrReqBuilder>

	export function newListDepartmentReqBuilder():Ref<ListDepartmentReqBuilder>

	export function newListDepartmentUnitReqBuilder():Ref<ListDepartmentUnitReqBuilder>

	export function newListEmployeeTypeEnumReqBuilder():Ref<ListEmployeeTypeEnumReqBuilder>

	export function newListFunctionalRoleMemberReqBuilder():Ref<ListFunctionalRoleMemberReqBuilder>

	export function newListJobFamilyReqBuilder():Ref<ListJobFamilyReqBuilder>

	export function newListJobLevelReqBuilder():Ref<ListJobLevelReqBuilder>

	export function newListJobTitleReqBuilder():Ref<ListJobTitleReqBuilder>

	export function newListScopeReqBuilder():Ref<ListScopeReqBuilder>

	export function newListUnitReqBuilder():Ref<ListUnitReqBuilder>

	export function newListUserReqBuilder():Ref<ListUserReqBuilder>

	export function newListWorkCityReqBuilder():Ref<ListWorkCityReqBuilder>

	export function newMemberBelongGroupReqBuilder():Ref<MemberBelongGroupReqBuilder>

	export function newMemberResultBuilder():Ref<MemberResultBuilder>

	export function newMemberlistBuilder():Ref<MemberlistBuilder>

	export function newNotificationOptionBuilder():Ref<NotificationOptionBuilder>

	export function newOldDepartmentObjectBuilder():Ref<OldDepartmentObjectBuilder>

	export function newOldUserObjectBuilder():Ref<OldUserObjectBuilder>

	export function newP1ContactScopeChangedV3Handler(v1:(v2:context.Context,v1:Ref<P1ContactScopeChangedV3>)=>void/*error*/):Ref<P1ContactScopeChangedV3Handler>

	export function newP1DepartmentChangedV3Handler(v1:(v2:context.Context,v1:Ref<P1DepartmentChangedV3>)=>void/*error*/):Ref<P1DepartmentChangedV3Handler>

	export function newP1UserChangedV3Handler(v1:(v2:context.Context,v1:Ref<P1UserChangedV3>)=>void/*error*/):Ref<P1UserChangedV3Handler>

	export function newP1UserStatusChangedV3Handler(v1:(v2:context.Context,v1:Ref<P1UserStatusChangedV3>)=>void/*error*/):Ref<P1UserStatusChangedV3Handler>

	export function newP2CustomAttrEventUpdatedV3Handler(v1:(v2:context.Context,v1:Ref<P2CustomAttrEventUpdatedV3>)=>void/*error*/):Ref<P2CustomAttrEventUpdatedV3Handler>

	export function newP2DepartmentCreatedV3Handler(v1:(v2:context.Context,v1:Ref<P2DepartmentCreatedV3>)=>void/*error*/):Ref<P2DepartmentCreatedV3Handler>

	export function newP2DepartmentDeletedV3Handler(v1:(v2:context.Context,v1:Ref<P2DepartmentDeletedV3>)=>void/*error*/):Ref<P2DepartmentDeletedV3Handler>

	export function newP2DepartmentUpdatedV3Handler(v1:(v2:context.Context,v1:Ref<P2DepartmentUpdatedV3>)=>void/*error*/):Ref<P2DepartmentUpdatedV3Handler>

	export function newP2EmployeeTypeEnumActivedV3Handler(v1:(v2:context.Context,v1:Ref<P2EmployeeTypeEnumActivedV3>)=>void/*error*/):Ref<P2EmployeeTypeEnumActivedV3Handler>

	export function newP2EmployeeTypeEnumCreatedV3Handler(v1:(v2:context.Context,v1:Ref<P2EmployeeTypeEnumCreatedV3>)=>void/*error*/):Ref<P2EmployeeTypeEnumCreatedV3Handler>

	export function newP2EmployeeTypeEnumDeactivatedV3Handler(v1:(v2:context.Context,v1:Ref<P2EmployeeTypeEnumDeactivatedV3>)=>void/*error*/):Ref<P2EmployeeTypeEnumDeactivatedV3Handler>

	export function newP2EmployeeTypeEnumDeletedV3Handler(v1:(v2:context.Context,v1:Ref<P2EmployeeTypeEnumDeletedV3>)=>void/*error*/):Ref<P2EmployeeTypeEnumDeletedV3Handler>

	export function newP2EmployeeTypeEnumUpdatedV3Handler(v1:(v2:context.Context,v1:Ref<P2EmployeeTypeEnumUpdatedV3>)=>void/*error*/):Ref<P2EmployeeTypeEnumUpdatedV3Handler>

	export function newP2ScopeUpdatedV3Handler(v1:(v2:context.Context,v1:Ref<P2ScopeUpdatedV3>)=>void/*error*/):Ref<P2ScopeUpdatedV3Handler>

	export function newP2UserCreatedV3Handler(v1:(v2:context.Context,v1:Ref<P2UserCreatedV3>)=>void/*error*/):Ref<P2UserCreatedV3Handler>

	export function newP2UserDeletedV3Handler(v1:(v2:context.Context,v1:Ref<P2UserDeletedV3>)=>void/*error*/):Ref<P2UserDeletedV3Handler>

	export function newP2UserUpdatedV3Handler(v1:(v2:context.Context,v1:Ref<P2UserUpdatedV3>)=>void/*error*/):Ref<P2UserUpdatedV3Handler>

	export function newParentDepartmentReqBuilder():Ref<ParentDepartmentReqBuilder>

	export function newPatchDepartmentReqBuilder():Ref<PatchDepartmentReqBuilder>

	export function newPatchGroupReqBuilder():Ref<PatchGroupReqBuilder>

	export function newPatchUnitPathReqBodyBuilder():Ref<PatchUnitPathReqBodyBuilder>

	export function newPatchUnitReqBodyBuilder():Ref<PatchUnitReqBodyBuilder>

	export function newPatchUnitReqBuilder():Ref<PatchUnitReqBuilder>

	export function newPatchUserReqBuilder():Ref<PatchUserReqBuilder>

	export function newProductI18nNameBuilder():Ref<ProductI18nNameBuilder>

	export function newRemoveGroupMemberPathReqBodyBuilder():Ref<RemoveGroupMemberPathReqBodyBuilder>

	export function newRemoveGroupMemberReqBodyBuilder():Ref<RemoveGroupMemberReqBodyBuilder>

	export function newRemoveGroupMemberReqBuilder():Ref<RemoveGroupMemberReqBuilder>

	export function newResourceAcceptorBuilder():Ref<ResourceAcceptorBuilder>

	export function newResurrectUserPathReqBodyBuilder():Ref<ResurrectUserPathReqBodyBuilder>

	export function newResurrectUserReqBodyBuilder():Ref<ResurrectUserReqBodyBuilder>

	export function newResurrectUserReqBuilder():Ref<ResurrectUserReqBuilder>

	export function newScopeBuilder():Ref<ScopeBuilder>

	export function newScopesFunctionalRoleMemberPathReqBodyBuilder():Ref<ScopesFunctionalRoleMemberPathReqBodyBuilder>

	export function newScopesFunctionalRoleMemberReqBodyBuilder():Ref<ScopesFunctionalRoleMemberReqBodyBuilder>

	export function newScopesFunctionalRoleMemberReqBuilder():Ref<ScopesFunctionalRoleMemberReqBuilder>

	export function newSearchDepartmentPathReqBodyBuilder():Ref<SearchDepartmentPathReqBodyBuilder>

	export function newSearchDepartmentReqBodyBuilder():Ref<SearchDepartmentReqBodyBuilder>

	export function newSearchDepartmentReqBuilder():Ref<SearchDepartmentReqBuilder>

	export function newShareDepartmentBuilder():Ref<ShareDepartmentBuilder>

	export function newShareUserBuilder():Ref<ShareUserBuilder>

	export function newSimplelistGroupMemberReqBuilder():Ref<SimplelistGroupMemberReqBuilder>

	export function newSimplelistGroupReqBuilder():Ref<SimplelistGroupReqBuilder>

	export function newUnbindDepartmentChatDepartmentPathReqBodyBuilder():Ref<UnbindDepartmentChatDepartmentPathReqBodyBuilder>

	export function newUnbindDepartmentChatDepartmentReqBodyBuilder():Ref<UnbindDepartmentChatDepartmentReqBodyBuilder>

	export function newUnbindDepartmentChatDepartmentReqBuilder():Ref<UnbindDepartmentChatDepartmentReqBuilder>

	export function newUnbindDepartmentUnitPathReqBodyBuilder():Ref<UnbindDepartmentUnitPathReqBodyBuilder>

	export function newUnbindDepartmentUnitReqBodyBuilder():Ref<UnbindDepartmentUnitReqBodyBuilder>

	export function newUnbindDepartmentUnitReqBuilder():Ref<UnbindDepartmentUnitReqBuilder>

	export function newUnitBuilder():Ref<UnitBuilder>

	export function newUnitDepartmentBuilder():Ref<UnitDepartmentBuilder>

	export function newUpdateDepartmentIdDepartmentPathReqBodyBuilder():Ref<UpdateDepartmentIdDepartmentPathReqBodyBuilder>

	export function newUpdateDepartmentIdDepartmentReqBodyBuilder():Ref<UpdateDepartmentIdDepartmentReqBodyBuilder>

	export function newUpdateDepartmentIdDepartmentReqBuilder():Ref<UpdateDepartmentIdDepartmentReqBuilder>

	export function newUpdateDepartmentReqBuilder():Ref<UpdateDepartmentReqBuilder>

	export function newUpdateEmployeeTypeEnumReqBuilder():Ref<UpdateEmployeeTypeEnumReqBuilder>

	export function newUpdateFunctionalRolePathReqBodyBuilder():Ref<UpdateFunctionalRolePathReqBodyBuilder>

	export function newUpdateFunctionalRoleReqBodyBuilder():Ref<UpdateFunctionalRoleReqBodyBuilder>

	export function newUpdateFunctionalRoleReqBuilder():Ref<UpdateFunctionalRoleReqBuilder>

	export function newUpdateJobFamilyReqBuilder():Ref<UpdateJobFamilyReqBuilder>

	export function newUpdateJobLevelReqBuilder():Ref<UpdateJobLevelReqBuilder>

	export function newUpdateUserIdUserPathReqBodyBuilder():Ref<UpdateUserIdUserPathReqBodyBuilder>

	export function newUpdateUserIdUserReqBodyBuilder():Ref<UpdateUserIdUserReqBodyBuilder>

	export function newUpdateUserIdUserReqBuilder():Ref<UpdateUserIdUserReqBuilder>

	export function newUpdateUserReqBuilder():Ref<UpdateUserReqBuilder>

	export function newUserAssignInfoBuilder():Ref<UserAssignInfoBuilder>

	export function newUserBuilder():Ref<UserBuilder>

	export function newUserContactInfoBuilder():Ref<UserContactInfoBuilder>

	export function newUserCustomAttrBuilder():Ref<UserCustomAttrBuilder>

	export function newUserCustomAttrValueBuilder():Ref<UserCustomAttrValueBuilder>

	export function newUserDepartmentInfoBuilder():Ref<UserDepartmentInfoBuilder>

	export function newUserEventBuilder():Ref<UserEventBuilder>

	export function newUserGroupBuilder():Ref<UserGroupBuilder>

	export function newUserI18nNameBuilder():Ref<UserI18nNameBuilder>

	export function newUserIdBuilder():Ref<UserIdBuilder>

	export function newUserOrderBuilder():Ref<UserOrderBuilder>

	export function newUserPositionBuilder():Ref<UserPositionBuilder>

	export function newUserStatusBuilder():Ref<UserStatusBuilder>

	export function newWorkCityBuilder():Ref<WorkCityBuilder>

	export interface NotificationOption extends Struct<NotificationOption>{

			channels:string[]
			language:Ref<string>
	}
	export interface NotificationOptionBuilder extends Struct<NotificationOptionBuilder>{

			channels(channels:string[]):Ref<NotificationOptionBuilder>
			language(language:string):Ref<NotificationOptionBuilder>
			build():Ref<NotificationOption>
	}
	export interface OldDepartmentObject extends Struct<OldDepartmentObject>{

			status:Ref<DepartmentStatus>
			openDepartmentId:Ref<string>
	}
	export interface OldDepartmentObjectBuilder extends Struct<OldDepartmentObjectBuilder>{

			status(status:Ref<DepartmentStatus>):Ref<OldDepartmentObjectBuilder>
			openDepartmentId(openDepartmentId:string):Ref<OldDepartmentObjectBuilder>
			build():Ref<OldDepartmentObject>
	}
	export interface OldUserObject extends Struct<OldUserObject>{

			departmentIds:string[]
			openId:Ref<string>
	}
	export interface OldUserObjectBuilder extends Struct<OldUserObjectBuilder>{

			departmentIds(departmentIds:string[]):Ref<OldUserObjectBuilder>
			openId(openId:string):Ref<OldUserObjectBuilder>
			build():Ref<OldUserObject>
	}
	export interface P1ContactScopeChangedV3 extends Struct<P1ContactScopeChangedV3>,larkevent.EventHandlerModel{

			eventBase:Ref<larkevent.EventBase>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P1ContactScopeChangedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1ContactScopeChangedV3Data extends Struct<P1ContactScopeChangedV3Data>{

			type:string
			appID:string
			tenantKey:string
	}
	export interface P1ContactScopeChangedV3Handler extends Struct<P1ContactScopeChangedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1DepartmentChangedV3 extends Struct<P1DepartmentChangedV3>,larkevent.EventHandlerModel{

			eventBase:Ref<larkevent.EventBase>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P1DepartmentChangedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1DepartmentChangedV3Data extends Struct<P1DepartmentChangedV3Data>{

			type:string
			appID:string
			tenantKey:string
			openID:string
			openDepartmentId:string
	}
	export interface P1DepartmentChangedV3Handler extends Struct<P1DepartmentChangedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1UserChangedV3 extends Struct<P1UserChangedV3>,larkevent.EventHandlerModel{

			eventBase:Ref<larkevent.EventBase>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P1UserChangedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1UserChangedV3Data extends Struct<P1UserChangedV3Data>{

			type:string
			appID:string
			tenantKey:string
			openID:string
			employeeId:string
			unionId:string
	}
	export interface P1UserChangedV3Handler extends Struct<P1UserChangedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1UserStatusChangedV3 extends Struct<P1UserStatusChangedV3>,larkevent.EventHandlerModel{

			eventBase:Ref<larkevent.EventBase>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P1UserStatusChangedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P1UserStatusChangedV3Data extends Struct<P1UserStatusChangedV3Data>{

			type:string
			appID:string
			tenantKey:string
			openID:string
			employeeId:string
			unionId:string
			beforeStatus:Ref<P1UserStatusV3>
			currentStatus:Ref<P1UserStatusV3>
			changeTime:string
	}
	export interface P1UserStatusChangedV3Handler extends Struct<P1UserStatusChangedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P1UserStatusV3 extends Struct<P1UserStatusV3>{

			isActive:bool
			isFrozen:bool
			isResigned:bool
	}
	export interface P2CustomAttrEventUpdatedV3 extends Struct<P2CustomAttrEventUpdatedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2CustomAttrEventUpdatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2CustomAttrEventUpdatedV3Data extends Struct<P2CustomAttrEventUpdatedV3Data>{

			object:Ref<CustomAttrEvent>
			oldObject:Ref<CustomAttrEvent>
	}
	export interface P2CustomAttrEventUpdatedV3Handler extends Struct<P2CustomAttrEventUpdatedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2DepartmentCreatedV3 extends Struct<P2DepartmentCreatedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2DepartmentCreatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2DepartmentCreatedV3Data extends Struct<P2DepartmentCreatedV3Data>{

			object:Ref<DepartmentEvent>
	}
	export interface P2DepartmentCreatedV3Handler extends larkevent.EventHandler,Struct<P2DepartmentCreatedV3Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2DepartmentDeletedV3 extends larkevent.EventHandlerModel,Struct<P2DepartmentDeletedV3>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2DepartmentDeletedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2DepartmentDeletedV3Data extends Struct<P2DepartmentDeletedV3Data>{

			object:Ref<DepartmentEvent>
			oldObject:Ref<OldDepartmentObject>
	}
	export interface P2DepartmentDeletedV3Handler extends Struct<P2DepartmentDeletedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2DepartmentUpdatedV3 extends Struct<P2DepartmentUpdatedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2DepartmentUpdatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2DepartmentUpdatedV3Data extends Struct<P2DepartmentUpdatedV3Data>{

			object:Ref<DepartmentEvent>
			oldObject:Ref<DepartmentEvent>
	}
	export interface P2DepartmentUpdatedV3Handler extends larkevent.EventHandler,Struct<P2DepartmentUpdatedV3Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmployeeTypeEnumActivedV3 extends larkevent.EventHandlerModel,Struct<P2EmployeeTypeEnumActivedV3>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmployeeTypeEnumActivedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmployeeTypeEnumActivedV3Data extends Struct<P2EmployeeTypeEnumActivedV3Data>{

			oldEnum:Ref<EmployeeTypeEnum>
			newEnum:Ref<EmployeeTypeEnum>
	}
	export interface P2EmployeeTypeEnumActivedV3Handler extends Struct<P2EmployeeTypeEnumActivedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmployeeTypeEnumCreatedV3 extends larkevent.EventHandlerModel,Struct<P2EmployeeTypeEnumCreatedV3>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmployeeTypeEnumCreatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmployeeTypeEnumCreatedV3Data extends Struct<P2EmployeeTypeEnumCreatedV3Data>{

			newEnum:Ref<EmployeeTypeEnum>
	}
	export interface P2EmployeeTypeEnumCreatedV3Handler extends larkevent.EventHandler,Struct<P2EmployeeTypeEnumCreatedV3Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmployeeTypeEnumDeactivatedV3 extends Struct<P2EmployeeTypeEnumDeactivatedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmployeeTypeEnumDeactivatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmployeeTypeEnumDeactivatedV3Data extends Struct<P2EmployeeTypeEnumDeactivatedV3Data>{

			oldEnum:Ref<EmployeeTypeEnum>
			newEnum:Ref<EmployeeTypeEnum>
	}
	export interface P2EmployeeTypeEnumDeactivatedV3Handler extends Struct<P2EmployeeTypeEnumDeactivatedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmployeeTypeEnumDeletedV3 extends Struct<P2EmployeeTypeEnumDeletedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmployeeTypeEnumDeletedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmployeeTypeEnumDeletedV3Data extends Struct<P2EmployeeTypeEnumDeletedV3Data>{

			oldEnum:Ref<EmployeeTypeEnum>
	}
	export interface P2EmployeeTypeEnumDeletedV3Handler extends Struct<P2EmployeeTypeEnumDeletedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmployeeTypeEnumUpdatedV3 extends Struct<P2EmployeeTypeEnumUpdatedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmployeeTypeEnumUpdatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmployeeTypeEnumUpdatedV3Data extends Struct<P2EmployeeTypeEnumUpdatedV3Data>{

			oldEnum:Ref<EmployeeTypeEnum>
			newEnum:Ref<EmployeeTypeEnum>
	}
	export interface P2EmployeeTypeEnumUpdatedV3Handler extends Struct<P2EmployeeTypeEnumUpdatedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2ScopeUpdatedV3 extends Struct<P2ScopeUpdatedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2ScopeUpdatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2ScopeUpdatedV3Data extends Struct<P2ScopeUpdatedV3Data>{

			added:Ref<Scope>
			removed:Ref<Scope>
	}
	export interface P2ScopeUpdatedV3Handler extends larkevent.EventHandler,Struct<P2ScopeUpdatedV3Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2UserCreatedV3 extends larkevent.EventHandlerModel,Struct<P2UserCreatedV3>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2UserCreatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2UserCreatedV3Data extends Struct<P2UserCreatedV3Data>{

			object:Ref<UserEvent>
	}
	export interface P2UserCreatedV3Handler extends Struct<P2UserCreatedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2UserDeletedV3 extends Struct<P2UserDeletedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2UserDeletedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2UserDeletedV3Data extends Struct<P2UserDeletedV3Data>{

			object:Ref<UserEvent>
			oldObject:Ref<OldUserObject>
	}
	export interface P2UserDeletedV3Handler extends Struct<P2UserDeletedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2UserUpdatedV3 extends Struct<P2UserUpdatedV3>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2UserUpdatedV3Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2UserUpdatedV3Data extends Struct<P2UserUpdatedV3Data>{

			object:Ref<UserEvent>
			oldObject:Ref<UserEvent>
	}
	export interface P2UserUpdatedV3Handler extends Struct<P2UserUpdatedV3Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface ParentDepartmentIterator extends Struct<ParentDepartmentIterator>{

			next():[bool,Ref<Department>]
			nextPageToken():Ref<string>
	}
	export interface ParentDepartmentReq extends Struct<ParentDepartmentReq>{

			limit:int
	}
	export interface ParentDepartmentReqBuilder extends Struct<ParentDepartmentReqBuilder>{

			limit(limit:int):Ref<ParentDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<ParentDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ParentDepartmentReqBuilder>
			departmentId(departmentId:string):Ref<ParentDepartmentReqBuilder>
			pageToken(pageToken:string):Ref<ParentDepartmentReqBuilder>
			pageSize(pageSize:int):Ref<ParentDepartmentReqBuilder>
			build():Ref<ParentDepartmentReq>
	}
	export interface ParentDepartmentResp extends Struct<ParentDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ParentDepartmentRespData>
			success():bool
	}
	export interface ParentDepartmentRespData extends Struct<ParentDepartmentRespData>{

			hasMore:Ref<bool>
			pageToken:Ref<string>
			items:Ref<Department>[]
	}
	export interface PatchDepartmentReq extends Struct<PatchDepartmentReq>{

			department:Ref<Department>
	}
	export interface PatchDepartmentReqBuilder extends Struct<PatchDepartmentReqBuilder>{

			departmentId(departmentId:string):Ref<PatchDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<PatchDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<PatchDepartmentReqBuilder>
			department(department:Ref<Department>):Ref<PatchDepartmentReqBuilder>
			build():Ref<PatchDepartmentReq>
	}
	export interface PatchDepartmentResp extends Struct<PatchDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchDepartmentRespData>
			success():bool
	}
	export interface PatchDepartmentRespData extends Struct<PatchDepartmentRespData>{

			department:Ref<Department>
	}
	export interface PatchGroupReq extends Struct<PatchGroupReq>{

			group:Ref<Group>
	}
	export interface PatchGroupReqBuilder extends Struct<PatchGroupReqBuilder>{

			groupId(groupId:string):Ref<PatchGroupReqBuilder>
			userIdType(userIdType:string):Ref<PatchGroupReqBuilder>
			departmentIdType(departmentIdType:string):Ref<PatchGroupReqBuilder>
			group(group:Ref<Group>):Ref<PatchGroupReqBuilder>
			build():Ref<PatchGroupReq>
	}
	export interface PatchGroupResp extends Struct<PatchGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface PatchUnitPathReqBodyBuilder extends Struct<PatchUnitPathReqBodyBuilder>{

			name(name:string):Ref<PatchUnitPathReqBodyBuilder>
			build():Ref<PatchUnitReqBody>
	}
	export interface PatchUnitReq extends Struct<PatchUnitReq>{

			body:Ref<PatchUnitReqBody>
	}
	export interface PatchUnitReqBody extends Struct<PatchUnitReqBody>{

			name:Ref<string>
	}
	export interface PatchUnitReqBodyBuilder extends Struct<PatchUnitReqBodyBuilder>{

			name(name:string):Ref<PatchUnitReqBodyBuilder>
			build():Ref<PatchUnitReqBody>
	}
	export interface PatchUnitReqBuilder extends Struct<PatchUnitReqBuilder>{

			unitId(unitId:string):Ref<PatchUnitReqBuilder>
			body(body:Ref<PatchUnitReqBody>):Ref<PatchUnitReqBuilder>
			build():Ref<PatchUnitReq>
	}
	export interface PatchUnitResp extends Struct<PatchUnitResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface PatchUserReq extends Struct<PatchUserReq>{

			user:Ref<User>
	}
	export interface PatchUserReqBuilder extends Struct<PatchUserReqBuilder>{

			userId(userId:string):Ref<PatchUserReqBuilder>
			userIdType(userIdType:string):Ref<PatchUserReqBuilder>
			departmentIdType(departmentIdType:string):Ref<PatchUserReqBuilder>
			user(user:Ref<User>):Ref<PatchUserReqBuilder>
			build():Ref<PatchUserReq>
	}
	export interface PatchUserResp extends Struct<PatchUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchUserRespData>
			success():bool
	}
	export interface PatchUserRespData extends Struct<PatchUserRespData>{

			user:Ref<User>
	}
	export interface ProductI18nName extends Struct<ProductI18nName>{

			zhCn:Ref<string>
			jaJp:Ref<string>
			enUs:Ref<string>
	}
	export interface ProductI18nNameBuilder extends Struct<ProductI18nNameBuilder>{

			zhCn(zhCn:string):Ref<ProductI18nNameBuilder>
			jaJp(jaJp:string):Ref<ProductI18nNameBuilder>
			enUs(enUs:string):Ref<ProductI18nNameBuilder>
			build():Ref<ProductI18nName>
	}
	export interface RemoveGroupMemberPathReqBodyBuilder extends Struct<RemoveGroupMemberPathReqBodyBuilder>{

			memberType(memberType:string):Ref<RemoveGroupMemberPathReqBodyBuilder>
			memberId(memberId:string):Ref<RemoveGroupMemberPathReqBodyBuilder>
			memberIdType(memberIdType:string):Ref<RemoveGroupMemberPathReqBodyBuilder>
			build():Ref<RemoveGroupMemberReqBody>
	}
	export interface RemoveGroupMemberReq extends Struct<RemoveGroupMemberReq>{

			body:Ref<RemoveGroupMemberReqBody>
	}
	export interface RemoveGroupMemberReqBody extends Struct<RemoveGroupMemberReqBody>{

			memberType:Ref<string>
			memberId:Ref<string>
			memberIdType:Ref<string>
	}
	export interface RemoveGroupMemberReqBodyBuilder extends Struct<RemoveGroupMemberReqBodyBuilder>{

			memberType(memberType:string):Ref<RemoveGroupMemberReqBodyBuilder>
			memberId(memberId:string):Ref<RemoveGroupMemberReqBodyBuilder>
			memberIdType(memberIdType:string):Ref<RemoveGroupMemberReqBodyBuilder>
			build():Ref<RemoveGroupMemberReqBody>
	}
	export interface RemoveGroupMemberReqBuilder extends Struct<RemoveGroupMemberReqBuilder>{

			groupId(groupId:string):Ref<RemoveGroupMemberReqBuilder>
			body(body:Ref<RemoveGroupMemberReqBody>):Ref<RemoveGroupMemberReqBuilder>
			build():Ref<RemoveGroupMemberReq>
	}
	export interface RemoveGroupMemberResp extends Struct<RemoveGroupMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface ResourceAcceptor extends Struct<ResourceAcceptor>{

			processingType:Ref<string>
			acceptorUserId:Ref<string>
	}
	export interface ResourceAcceptorBuilder extends Struct<ResourceAcceptorBuilder>{

			processingType(processingType:string):Ref<ResourceAcceptorBuilder>
			acceptorUserId(acceptorUserId:string):Ref<ResourceAcceptorBuilder>
			build():Ref<ResourceAcceptor>
	}
	export interface ResurrectUserPathReqBodyBuilder extends Struct<ResurrectUserPathReqBodyBuilder>{

			departments(departments:Ref<UserDepartmentInfo>[]):Ref<ResurrectUserPathReqBodyBuilder>
			subscriptionIds(subscriptionIds:string[]):Ref<ResurrectUserPathReqBodyBuilder>
			build():Ref<ResurrectUserReqBody>
	}
	export interface ResurrectUserReq extends Struct<ResurrectUserReq>{

			body:Ref<ResurrectUserReqBody>
	}
	export interface ResurrectUserReqBody extends Struct<ResurrectUserReqBody>{

			departments:Ref<UserDepartmentInfo>[]
			subscriptionIds:string[]
	}
	export interface ResurrectUserReqBodyBuilder extends Struct<ResurrectUserReqBodyBuilder>{

			departments(departments:Ref<UserDepartmentInfo>[]):Ref<ResurrectUserReqBodyBuilder>
			subscriptionIds(subscriptionIds:string[]):Ref<ResurrectUserReqBodyBuilder>
			build():Ref<ResurrectUserReqBody>
	}
	export interface ResurrectUserReqBuilder extends Struct<ResurrectUserReqBuilder>{

			userId(userId:string):Ref<ResurrectUserReqBuilder>
			userIdType(userIdType:string):Ref<ResurrectUserReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ResurrectUserReqBuilder>
			body(body:Ref<ResurrectUserReqBody>):Ref<ResurrectUserReqBuilder>
			build():Ref<ResurrectUserReq>
	}
	export interface ResurrectUserResp extends Struct<ResurrectUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	//"open_id"
	export const RoleMemberIDTypeBatchDeleteFunctionalRoleMemberOpenId:string
	//"union_id"
	export const RoleMemberIDTypeBatchDeleteFunctionalRoleMemberUnionId:string
	//"user_id"
	export const RoleMemberIDTypeBatchDeleteFunctionalRoleMemberUserId:string
	//"open_id"
	export const RoleMemberIDTypeGetFunctionalRoleMemberOpenId:string
	//"union_id"
	export const RoleMemberIDTypeGetFunctionalRoleMemberUnionId:string
	//"user_id"
	export const RoleMemberIDTypeGetFunctionalRoleMemberUserId:string
	//"open_id"
	export const RoleMemberIDTypeListFunctionalRoleMemberOpenId:string
	//"union_id"
	export const RoleMemberIDTypeListFunctionalRoleMemberUnionId:string
	//"user_id"
	export const RoleMemberIDTypeListFunctionalRoleMemberUserId:string
	//"open_id"
	export const RoleMemberIDTypeOpenId:string
	//"open_id"
	export const RoleMemberIDTypeScopesFunctionalRoleMemberOpenId:string
	//"union_id"
	export const RoleMemberIDTypeScopesFunctionalRoleMemberUnionId:string
	//"user_id"
	export const RoleMemberIDTypeScopesFunctionalRoleMemberUserId:string
	//"union_id"
	export const RoleMemberIDTypeUnionId:string
	//"user_id"
	export const RoleMemberIDTypeUserId:string
	//"department_id"
	export const RoleMemberScopeIDTypeDepartmentId:string
	//"department_id"
	export const RoleMemberScopeIDTypeListFunctionalRoleMemberDepartmentId:string
	//"open_department_id"
	export const RoleMemberScopeIDTypeListFunctionalRoleMemberOpenDepartmentId:string
	//"open_department_id"
	export const RoleMemberScopeIDTypeOpenDepartmentId:string
	//"department_id"
	export const RoleMemberScopeIDTypeScopesFunctionalRoleMemberDepartmentId:string
	//"open_department_id"
	export const RoleMemberScopeIDTypeScopesFunctionalRoleMemberOpenDepartmentId:string
	export interface Scope extends Struct<Scope>{

			departments:Ref<Department>[]
			users:Ref<User>[]
			userGroups:Ref<UserGroup>[]
	}
	export interface ScopeBuilder extends Struct<ScopeBuilder>{

			departments(departments:Ref<Department>[]):Ref<ScopeBuilder>
			users(users:Ref<User>[]):Ref<ScopeBuilder>
			userGroups(userGroups:Ref<UserGroup>[]):Ref<ScopeBuilder>
			build():Ref<Scope>
	}
	export interface ScopesFunctionalRoleMemberPathReqBodyBuilder extends Struct<ScopesFunctionalRoleMemberPathReqBodyBuilder>{

			members(members:string[]):Ref<ScopesFunctionalRoleMemberPathReqBodyBuilder>
			departments(departments:string[]):Ref<ScopesFunctionalRoleMemberPathReqBodyBuilder>
			build():Ref<ScopesFunctionalRoleMemberReqBody>
	}
	export interface ScopesFunctionalRoleMemberReq extends Struct<ScopesFunctionalRoleMemberReq>{

			body:Ref<ScopesFunctionalRoleMemberReqBody>
	}
	export interface ScopesFunctionalRoleMemberReqBody extends Struct<ScopesFunctionalRoleMemberReqBody>{

			members:string[]
			departments:string[]
	}
	export interface ScopesFunctionalRoleMemberReqBodyBuilder extends Struct<ScopesFunctionalRoleMemberReqBodyBuilder>{

			members(members:string[]):Ref<ScopesFunctionalRoleMemberReqBodyBuilder>
			departments(departments:string[]):Ref<ScopesFunctionalRoleMemberReqBodyBuilder>
			build():Ref<ScopesFunctionalRoleMemberReqBody>
	}
	export interface ScopesFunctionalRoleMemberReqBuilder extends Struct<ScopesFunctionalRoleMemberReqBuilder>{

			roleId(roleId:string):Ref<ScopesFunctionalRoleMemberReqBuilder>
			userIdType(userIdType:string):Ref<ScopesFunctionalRoleMemberReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ScopesFunctionalRoleMemberReqBuilder>
			body(body:Ref<ScopesFunctionalRoleMemberReqBody>):Ref<ScopesFunctionalRoleMemberReqBuilder>
			build():Ref<ScopesFunctionalRoleMemberReq>
	}
	export interface ScopesFunctionalRoleMemberResp extends Struct<ScopesFunctionalRoleMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ScopesFunctionalRoleMemberRespData>
			success():bool
	}
	export interface ScopesFunctionalRoleMemberRespData extends Struct<ScopesFunctionalRoleMemberRespData>{

			results:Ref<FunctionalRoleMemberResult>[]
	}
	export interface SearchDepartmentIterator extends Struct<SearchDepartmentIterator>{

			next():[bool,Ref<Department>]
			nextPageToken():Ref<string>
	}
	export interface SearchDepartmentPathReqBodyBuilder extends Struct<SearchDepartmentPathReqBodyBuilder>{

			query(query:string):Ref<SearchDepartmentPathReqBodyBuilder>
			build():Ref<SearchDepartmentReqBody>
	}
	export interface SearchDepartmentReq extends Struct<SearchDepartmentReq>{

			body:Ref<SearchDepartmentReqBody>
			limit:int
	}
	export interface SearchDepartmentReqBody extends Struct<SearchDepartmentReqBody>{

			query:Ref<string>
	}
	export interface SearchDepartmentReqBodyBuilder extends Struct<SearchDepartmentReqBodyBuilder>{

			query(query:string):Ref<SearchDepartmentReqBodyBuilder>
			build():Ref<SearchDepartmentReqBody>
	}
	export interface SearchDepartmentReqBuilder extends Struct<SearchDepartmentReqBuilder>{

			limit(limit:int):Ref<SearchDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<SearchDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<SearchDepartmentReqBuilder>
			pageToken(pageToken:string):Ref<SearchDepartmentReqBuilder>
			pageSize(pageSize:int):Ref<SearchDepartmentReqBuilder>
			body(body:Ref<SearchDepartmentReqBody>):Ref<SearchDepartmentReqBuilder>
			build():Ref<SearchDepartmentReq>
	}
	export interface SearchDepartmentResp extends Struct<SearchDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SearchDepartmentRespData>
			success():bool
	}
	export interface SearchDepartmentRespData extends Struct<SearchDepartmentRespData>{

			items:Ref<Department>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ShareDepartment extends Struct<ShareDepartment>{

			openId:Ref<string>
			name:Ref<string>
			i18nName:Ref<DepartmentI18nName>
			order:Ref<string>
	}
	export interface ShareDepartmentBuilder extends Struct<ShareDepartmentBuilder>{

			openId(openId:string):Ref<ShareDepartmentBuilder>
			name(name:string):Ref<ShareDepartmentBuilder>
			i18nName(i18nName:Ref<DepartmentI18nName>):Ref<ShareDepartmentBuilder>
			order(order:string):Ref<ShareDepartmentBuilder>
			build():Ref<ShareDepartment>
	}
	export interface ShareUser extends Struct<ShareUser>{

			openId:Ref<string>
			name:Ref<string>
			enName:Ref<string>
			avatar:Ref<AvatarInfo>
	}
	export interface ShareUserBuilder extends Struct<ShareUserBuilder>{

			openId(openId:string):Ref<ShareUserBuilder>
			name(name:string):Ref<ShareUserBuilder>
			enName(enName:string):Ref<ShareUserBuilder>
			avatar(avatar:Ref<AvatarInfo>):Ref<ShareUserBuilder>
			build():Ref<ShareUser>
	}
	export interface SimplelistGroupIterator extends Struct<SimplelistGroupIterator>{

			next():[bool,Ref<Group>]
			nextPageToken():Ref<string>
	}
	export interface SimplelistGroupMemberReq extends Struct<SimplelistGroupMemberReq>{

	}
	export interface SimplelistGroupMemberReqBuilder extends Struct<SimplelistGroupMemberReqBuilder>{

			groupId(groupId:string):Ref<SimplelistGroupMemberReqBuilder>
			pageSize(pageSize:int):Ref<SimplelistGroupMemberReqBuilder>
			pageToken(pageToken:string):Ref<SimplelistGroupMemberReqBuilder>
			memberIdType(memberIdType:string):Ref<SimplelistGroupMemberReqBuilder>
			memberType(memberType:string):Ref<SimplelistGroupMemberReqBuilder>
			build():Ref<SimplelistGroupMemberReq>
	}
	export interface SimplelistGroupMemberResp extends Struct<SimplelistGroupMemberResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SimplelistGroupMemberRespData>
			success():bool
	}
	export interface SimplelistGroupMemberRespData extends Struct<SimplelistGroupMemberRespData>{

			memberlist:Ref<Memberlist>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface SimplelistGroupReq extends Struct<SimplelistGroupReq>{

			limit:int
	}
	export interface SimplelistGroupReqBuilder extends Struct<SimplelistGroupReqBuilder>{

			limit(limit:int):Ref<SimplelistGroupReqBuilder>
			pageSize(pageSize:int):Ref<SimplelistGroupReqBuilder>
			pageToken(pageToken:string):Ref<SimplelistGroupReqBuilder>
			type(type_:int):Ref<SimplelistGroupReqBuilder>
			build():Ref<SimplelistGroupReq>
	}
	export interface SimplelistGroupResp extends Struct<SimplelistGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SimplelistGroupRespData>
			success():bool
	}
	export interface SimplelistGroupRespData extends Struct<SimplelistGroupRespData>{

			grouplist:Ref<Group>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface UnbindDepartmentChatDepartmentPathReqBodyBuilder extends Struct<UnbindDepartmentChatDepartmentPathReqBodyBuilder>{

			departmentId(departmentId:string):Ref<UnbindDepartmentChatDepartmentPathReqBodyBuilder>
			build():Ref<UnbindDepartmentChatDepartmentReqBody>
	}
	export interface UnbindDepartmentChatDepartmentReq extends Struct<UnbindDepartmentChatDepartmentReq>{

			body:Ref<UnbindDepartmentChatDepartmentReqBody>
	}
	export interface UnbindDepartmentChatDepartmentReqBody extends Struct<UnbindDepartmentChatDepartmentReqBody>{

			departmentId:Ref<string>
	}
	export interface UnbindDepartmentChatDepartmentReqBodyBuilder extends Struct<UnbindDepartmentChatDepartmentReqBodyBuilder>{

			departmentId(departmentId:string):Ref<UnbindDepartmentChatDepartmentReqBodyBuilder>
			build():Ref<UnbindDepartmentChatDepartmentReqBody>
	}
	export interface UnbindDepartmentChatDepartmentReqBuilder extends Struct<UnbindDepartmentChatDepartmentReqBuilder>{

			departmentIdType(departmentIdType:string):Ref<UnbindDepartmentChatDepartmentReqBuilder>
			body(body:Ref<UnbindDepartmentChatDepartmentReqBody>):Ref<UnbindDepartmentChatDepartmentReqBuilder>
			build():Ref<UnbindDepartmentChatDepartmentReq>
	}
	export interface UnbindDepartmentChatDepartmentResp extends Struct<UnbindDepartmentChatDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface UnbindDepartmentUnitPathReqBodyBuilder extends Struct<UnbindDepartmentUnitPathReqBodyBuilder>{

			unitId(unitId:string):Ref<UnbindDepartmentUnitPathReqBodyBuilder>
			departmentId(departmentId:string):Ref<UnbindDepartmentUnitPathReqBodyBuilder>
			departmentIdType(departmentIdType:string):Ref<UnbindDepartmentUnitPathReqBodyBuilder>
			build():Ref<UnbindDepartmentUnitReqBody>
	}
	export interface UnbindDepartmentUnitReq extends Struct<UnbindDepartmentUnitReq>{

			body:Ref<UnbindDepartmentUnitReqBody>
	}
	export interface UnbindDepartmentUnitReqBody extends Struct<UnbindDepartmentUnitReqBody>{

			unitId:Ref<string>
			departmentId:Ref<string>
			departmentIdType:Ref<string>
	}
	export interface UnbindDepartmentUnitReqBodyBuilder extends Struct<UnbindDepartmentUnitReqBodyBuilder>{

			unitId(unitId:string):Ref<UnbindDepartmentUnitReqBodyBuilder>
			departmentId(departmentId:string):Ref<UnbindDepartmentUnitReqBodyBuilder>
			departmentIdType(departmentIdType:string):Ref<UnbindDepartmentUnitReqBodyBuilder>
			build():Ref<UnbindDepartmentUnitReqBody>
	}
	export interface UnbindDepartmentUnitReqBuilder extends Struct<UnbindDepartmentUnitReqBuilder>{

			body(body:Ref<UnbindDepartmentUnitReqBody>):Ref<UnbindDepartmentUnitReqBuilder>
			build():Ref<UnbindDepartmentUnitReq>
	}
	export interface UnbindDepartmentUnitResp extends Struct<UnbindDepartmentUnitResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface Unit extends Struct<Unit>{

			unitId:Ref<string>
			name:Ref<string>
			unitType:Ref<string>
	}
	export interface UnitBuilder extends Struct<UnitBuilder>{

			unitId(unitId:string):Ref<UnitBuilder>
			name(name:string):Ref<UnitBuilder>
			unitType(unitType:string):Ref<UnitBuilder>
			build():Ref<Unit>
	}
	export interface UnitDepartment extends Struct<UnitDepartment>{

			unitId:Ref<string>
			departmentId:Ref<string>
	}
	export interface UnitDepartmentBuilder extends Struct<UnitDepartmentBuilder>{

			unitId(unitId:string):Ref<UnitDepartmentBuilder>
			departmentId(departmentId:string):Ref<UnitDepartmentBuilder>
			build():Ref<UnitDepartment>
	}
	export interface UpdateDepartmentIdDepartmentPathReqBodyBuilder extends Struct<UpdateDepartmentIdDepartmentPathReqBodyBuilder>{

			newDepartmentId(newDepartmentId:string):Ref<UpdateDepartmentIdDepartmentPathReqBodyBuilder>
			build():Ref<UpdateDepartmentIdDepartmentReqBody>
	}
	export interface UpdateDepartmentIdDepartmentReq extends Struct<UpdateDepartmentIdDepartmentReq>{

			body:Ref<UpdateDepartmentIdDepartmentReqBody>
	}
	export interface UpdateDepartmentIdDepartmentReqBody extends Struct<UpdateDepartmentIdDepartmentReqBody>{

			newDepartmentId:Ref<string>
	}
	export interface UpdateDepartmentIdDepartmentReqBodyBuilder extends Struct<UpdateDepartmentIdDepartmentReqBodyBuilder>{

			newDepartmentId(newDepartmentId:string):Ref<UpdateDepartmentIdDepartmentReqBodyBuilder>
			build():Ref<UpdateDepartmentIdDepartmentReqBody>
	}
	export interface UpdateDepartmentIdDepartmentReqBuilder extends Struct<UpdateDepartmentIdDepartmentReqBuilder>{

			departmentId(departmentId:string):Ref<UpdateDepartmentIdDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<UpdateDepartmentIdDepartmentReqBuilder>
			body(body:Ref<UpdateDepartmentIdDepartmentReqBody>):Ref<UpdateDepartmentIdDepartmentReqBuilder>
			build():Ref<UpdateDepartmentIdDepartmentReq>
	}
	export interface UpdateDepartmentIdDepartmentResp extends Struct<UpdateDepartmentIdDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface UpdateDepartmentReq extends Struct<UpdateDepartmentReq>{

			department:Ref<Department>
	}
	export interface UpdateDepartmentReqBuilder extends Struct<UpdateDepartmentReqBuilder>{

			departmentId(departmentId:string):Ref<UpdateDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<UpdateDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<UpdateDepartmentReqBuilder>
			department(department:Ref<Department>):Ref<UpdateDepartmentReqBuilder>
			build():Ref<UpdateDepartmentReq>
	}
	export interface UpdateDepartmentResp extends Struct<UpdateDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateDepartmentRespData>
			success():bool
	}
	export interface UpdateDepartmentRespData extends Struct<UpdateDepartmentRespData>{

			department:Ref<Department>
	}
	export interface UpdateEmployeeTypeEnumReq extends Struct<UpdateEmployeeTypeEnumReq>{

			employeeTypeEnum:Ref<EmployeeTypeEnum>
	}
	export interface UpdateEmployeeTypeEnumReqBuilder extends Struct<UpdateEmployeeTypeEnumReqBuilder>{

			enumId(enumId:string):Ref<UpdateEmployeeTypeEnumReqBuilder>
			employeeTypeEnum(employeeTypeEnum:Ref<EmployeeTypeEnum>):Ref<UpdateEmployeeTypeEnumReqBuilder>
			build():Ref<UpdateEmployeeTypeEnumReq>
	}
	export interface UpdateEmployeeTypeEnumResp extends Struct<UpdateEmployeeTypeEnumResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateEmployeeTypeEnumRespData>
			success():bool
	}
	export interface UpdateEmployeeTypeEnumRespData extends Struct<UpdateEmployeeTypeEnumRespData>{

			employeeTypeEnum:Ref<EmployeeTypeEnum>
	}
	export interface UpdateFunctionalRolePathReqBodyBuilder extends Struct<UpdateFunctionalRolePathReqBodyBuilder>{

			roleName(roleName:string):Ref<UpdateFunctionalRolePathReqBodyBuilder>
			build():Ref<UpdateFunctionalRoleReqBody>
	}
	export interface UpdateFunctionalRoleReq extends Struct<UpdateFunctionalRoleReq>{

			body:Ref<UpdateFunctionalRoleReqBody>
	}
	export interface UpdateFunctionalRoleReqBody extends Struct<UpdateFunctionalRoleReqBody>{

			roleName:Ref<string>
	}
	export interface UpdateFunctionalRoleReqBodyBuilder extends Struct<UpdateFunctionalRoleReqBodyBuilder>{

			roleName(roleName:string):Ref<UpdateFunctionalRoleReqBodyBuilder>
			build():Ref<UpdateFunctionalRoleReqBody>
	}
	export interface UpdateFunctionalRoleReqBuilder extends Struct<UpdateFunctionalRoleReqBuilder>{

			roleId(roleId:string):Ref<UpdateFunctionalRoleReqBuilder>
			body(body:Ref<UpdateFunctionalRoleReqBody>):Ref<UpdateFunctionalRoleReqBuilder>
			build():Ref<UpdateFunctionalRoleReq>
	}
	export interface UpdateFunctionalRoleResp extends Struct<UpdateFunctionalRoleResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface UpdateJobFamilyReq extends Struct<UpdateJobFamilyReq>{

			jobFamily:Ref<JobFamily>
	}
	export interface UpdateJobFamilyReqBuilder extends Struct<UpdateJobFamilyReqBuilder>{

			jobFamilyId(jobFamilyId:string):Ref<UpdateJobFamilyReqBuilder>
			jobFamily(jobFamily:Ref<JobFamily>):Ref<UpdateJobFamilyReqBuilder>
			build():Ref<UpdateJobFamilyReq>
	}
	export interface UpdateJobFamilyResp extends Struct<UpdateJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateJobFamilyRespData>
			success():bool
	}
	export interface UpdateJobFamilyRespData extends Struct<UpdateJobFamilyRespData>{

			jobFamily:Ref<JobFamily>
	}
	export interface UpdateJobLevelReq extends Struct<UpdateJobLevelReq>{

			jobLevel:Ref<JobLevel>
	}
	export interface UpdateJobLevelReqBuilder extends Struct<UpdateJobLevelReqBuilder>{

			jobLevelId(jobLevelId:string):Ref<UpdateJobLevelReqBuilder>
			jobLevel(jobLevel:Ref<JobLevel>):Ref<UpdateJobLevelReqBuilder>
			build():Ref<UpdateJobLevelReq>
	}
	export interface UpdateJobLevelResp extends Struct<UpdateJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateJobLevelRespData>
			success():bool
	}
	export interface UpdateJobLevelRespData extends Struct<UpdateJobLevelRespData>{

			jobLevel:Ref<JobLevel>
	}
	export interface UpdateUserIdUserPathReqBodyBuilder extends Struct<UpdateUserIdUserPathReqBodyBuilder>{

			newUserId(newUserId:string):Ref<UpdateUserIdUserPathReqBodyBuilder>
			build():Ref<UpdateUserIdUserReqBody>
	}
	export interface UpdateUserIdUserReq extends Struct<UpdateUserIdUserReq>{

			body:Ref<UpdateUserIdUserReqBody>
	}
	export interface UpdateUserIdUserReqBody extends Struct<UpdateUserIdUserReqBody>{

			newUserId:Ref<string>
	}
	export interface UpdateUserIdUserReqBodyBuilder extends Struct<UpdateUserIdUserReqBodyBuilder>{

			newUserId(newUserId:string):Ref<UpdateUserIdUserReqBodyBuilder>
			build():Ref<UpdateUserIdUserReqBody>
	}
	export interface UpdateUserIdUserReqBuilder extends Struct<UpdateUserIdUserReqBuilder>{

			userId(userId:string):Ref<UpdateUserIdUserReqBuilder>
			userIdType(userIdType:string):Ref<UpdateUserIdUserReqBuilder>
			body(body:Ref<UpdateUserIdUserReqBody>):Ref<UpdateUserIdUserReqBuilder>
			build():Ref<UpdateUserIdUserReq>
	}
	export interface UpdateUserIdUserResp extends Struct<UpdateUserIdUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface UpdateUserReq extends Struct<UpdateUserReq>{

			user:Ref<User>
	}
	export interface UpdateUserReqBuilder extends Struct<UpdateUserReqBuilder>{

			userId(userId:string):Ref<UpdateUserReqBuilder>
			userIdType(userIdType:string):Ref<UpdateUserReqBuilder>
			departmentIdType(departmentIdType:string):Ref<UpdateUserReqBuilder>
			user(user:Ref<User>):Ref<UpdateUserReqBuilder>
			build():Ref<UpdateUserReq>
	}
	export interface UpdateUserResp extends Struct<UpdateUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateUserRespData>
			success():bool
	}
	export interface UpdateUserRespData extends Struct<UpdateUserRespData>{

			user:Ref<User>
	}
	export interface User extends Struct<User>{

			unionId:Ref<string>
			userId:Ref<string>
			openId:Ref<string>
			name:Ref<string>
			enName:Ref<string>
			nickname:Ref<string>
			email:Ref<string>
			mobile:Ref<string>
			mobileVisible:Ref<bool>
			gender:Ref<int>
			avatarKey:Ref<string>
			avatar:Ref<AvatarInfo>
			status:Ref<UserStatus>
			departmentIds:string[]
			leaderUserId:Ref<string>
			city:Ref<string>
			country:Ref<string>
			workStation:Ref<string>
			joinTime:Ref<int>
			isTenantManager:Ref<bool>
			employeeNo:Ref<string>
			employeeType:Ref<int>
			orders:Ref<UserOrder>[]
			customAttrs:Ref<UserCustomAttr>[]
			enterpriseEmail:Ref<string>
			jobTitle:Ref<string>
			isFrozen:Ref<bool>
			geo:Ref<string>
			jobLevelId:Ref<string>
			jobFamilyId:Ref<string>
			subscriptionIds:string[]
			assignInfo:Ref<UserAssignInfo>[]
			departmentPath:Ref<DepartmentDetail>[]
			dottedLineLeaderUserIds:string[]
	}
	export interface UserAssignInfo extends Struct<UserAssignInfo>{

			subscriptionId:Ref<string>
			licensePlanKey:Ref<string>
			productName:Ref<string>
			i18nName:Ref<ProductI18nName>
			startTime:Ref<string>
			endTime:Ref<string>
	}
	export interface UserAssignInfoBuilder extends Struct<UserAssignInfoBuilder>{

			subscriptionId(subscriptionId:string):Ref<UserAssignInfoBuilder>
			licensePlanKey(licensePlanKey:string):Ref<UserAssignInfoBuilder>
			productName(productName:string):Ref<UserAssignInfoBuilder>
			i18nName(i18nName:Ref<ProductI18nName>):Ref<UserAssignInfoBuilder>
			startTime(startTime:string):Ref<UserAssignInfoBuilder>
			endTime(endTime:string):Ref<UserAssignInfoBuilder>
			build():Ref<UserAssignInfo>
	}
	export interface UserBuilder extends Struct<UserBuilder>{

			unionId(unionId:string):Ref<UserBuilder>
			userId(userId:string):Ref<UserBuilder>
			openId(openId:string):Ref<UserBuilder>
			name(name:string):Ref<UserBuilder>
			enName(enName:string):Ref<UserBuilder>
			nickname(nickname:string):Ref<UserBuilder>
			email(email:string):Ref<UserBuilder>
			mobile(mobile:string):Ref<UserBuilder>
			mobileVisible(mobileVisible:bool):Ref<UserBuilder>
			gender(gender:int):Ref<UserBuilder>
			avatarKey(avatarKey:string):Ref<UserBuilder>
			avatar(avatar:Ref<AvatarInfo>):Ref<UserBuilder>
			status(status:Ref<UserStatus>):Ref<UserBuilder>
			departmentIds(departmentIds:string[]):Ref<UserBuilder>
			leaderUserId(leaderUserId:string):Ref<UserBuilder>
			city(city:string):Ref<UserBuilder>
			country(country:string):Ref<UserBuilder>
			workStation(workStation:string):Ref<UserBuilder>
			joinTime(joinTime:int):Ref<UserBuilder>
			isTenantManager(isTenantManager:bool):Ref<UserBuilder>
			employeeNo(employeeNo:string):Ref<UserBuilder>
			employeeType(employeeType:int):Ref<UserBuilder>
			orders(orders:Ref<UserOrder>[]):Ref<UserBuilder>
			customAttrs(customAttrs:Ref<UserCustomAttr>[]):Ref<UserBuilder>
			enterpriseEmail(enterpriseEmail:string):Ref<UserBuilder>
			jobTitle(jobTitle:string):Ref<UserBuilder>
			isFrozen(isFrozen:bool):Ref<UserBuilder>
			geo(geo:string):Ref<UserBuilder>
			jobLevelId(jobLevelId:string):Ref<UserBuilder>
			jobFamilyId(jobFamilyId:string):Ref<UserBuilder>
			subscriptionIds(subscriptionIds:string[]):Ref<UserBuilder>
			assignInfo(assignInfo:Ref<UserAssignInfo>[]):Ref<UserBuilder>
			departmentPath(departmentPath:Ref<DepartmentDetail>[]):Ref<UserBuilder>
			dottedLineLeaderUserIds(dottedLineLeaderUserIds:string[]):Ref<UserBuilder>
			build():Ref<User>
	}
	export interface UserContactInfo extends Struct<UserContactInfo>{

			userId:Ref<string>
			mobile:Ref<string>
			email:Ref<string>
			status:Ref<UserStatus>
	}
	export interface UserContactInfoBuilder extends Struct<UserContactInfoBuilder>{

			userId(userId:string):Ref<UserContactInfoBuilder>
			mobile(mobile:string):Ref<UserContactInfoBuilder>
			email(email:string):Ref<UserContactInfoBuilder>
			status(status:Ref<UserStatus>):Ref<UserContactInfoBuilder>
			build():Ref<UserContactInfo>
	}
	export interface UserCustomAttr extends Struct<UserCustomAttr>{

			type:Ref<string>
			id:Ref<string>
			value:Ref<UserCustomAttrValue>
	}
	export interface UserCustomAttrBuilder extends Struct<UserCustomAttrBuilder>{

			type(type_:string):Ref<UserCustomAttrBuilder>
			id(id:string):Ref<UserCustomAttrBuilder>
			value(value:Ref<UserCustomAttrValue>):Ref<UserCustomAttrBuilder>
			build():Ref<UserCustomAttr>
	}
	export interface UserCustomAttrValue extends Struct<UserCustomAttrValue>{

			text:Ref<string>
			url:Ref<string>
			pcUrl:Ref<string>
			optionId:Ref<string>
			optionValue:Ref<string>
			name:Ref<string>
			pictureUrl:Ref<string>
			genericUser:Ref<CustomAttrGenericUser>
	}
	export interface UserCustomAttrValueBuilder extends Struct<UserCustomAttrValueBuilder>{

			text(text:string):Ref<UserCustomAttrValueBuilder>
			url(url:string):Ref<UserCustomAttrValueBuilder>
			pcUrl(pcUrl:string):Ref<UserCustomAttrValueBuilder>
			optionId(optionId:string):Ref<UserCustomAttrValueBuilder>
			optionValue(optionValue:string):Ref<UserCustomAttrValueBuilder>
			name(name:string):Ref<UserCustomAttrValueBuilder>
			pictureUrl(pictureUrl:string):Ref<UserCustomAttrValueBuilder>
			genericUser(genericUser:Ref<CustomAttrGenericUser>):Ref<UserCustomAttrValueBuilder>
			build():Ref<UserCustomAttrValue>
	}
	export interface UserDepartmentInfo extends Struct<UserDepartmentInfo>{

			departmentId:Ref<string>
			userOrder:Ref<int>
			departmentOrder:Ref<int>
	}
	export interface UserDepartmentInfoBuilder extends Struct<UserDepartmentInfoBuilder>{

			departmentId(departmentId:string):Ref<UserDepartmentInfoBuilder>
			userOrder(userOrder:int):Ref<UserDepartmentInfoBuilder>
			departmentOrder(departmentOrder:int):Ref<UserDepartmentInfoBuilder>
			build():Ref<UserDepartmentInfo>
	}
	export interface UserEvent extends Struct<UserEvent>{

			openId:Ref<string>
			unionId:Ref<string>
			userId:Ref<string>
			name:Ref<string>
			enName:Ref<string>
			nickname:Ref<string>
			email:Ref<string>
			enterpriseEmail:Ref<string>
			jobTitle:Ref<string>
			mobile:Ref<string>
			gender:Ref<int>
			avatar:Ref<AvatarInfo>
			status:Ref<UserStatus>
			departmentIds:string[]
			leaderUserId:Ref<string>
			city:Ref<string>
			country:Ref<string>
			workStation:Ref<string>
			joinTime:Ref<int>
			employeeNo:Ref<string>
			employeeType:Ref<int>
			orders:Ref<UserOrder>[]
			customAttrs:Ref<UserCustomAttr>[]
			jobLevelId:Ref<string>
			jobFamilyId:Ref<string>
			dottedLineLeaderUserIds:string[]
	}
	export interface UserEventBuilder extends Struct<UserEventBuilder>{

			openId(openId:string):Ref<UserEventBuilder>
			unionId(unionId:string):Ref<UserEventBuilder>
			userId(userId:string):Ref<UserEventBuilder>
			name(name:string):Ref<UserEventBuilder>
			enName(enName:string):Ref<UserEventBuilder>
			nickname(nickname:string):Ref<UserEventBuilder>
			email(email:string):Ref<UserEventBuilder>
			enterpriseEmail(enterpriseEmail:string):Ref<UserEventBuilder>
			jobTitle(jobTitle:string):Ref<UserEventBuilder>
			mobile(mobile:string):Ref<UserEventBuilder>
			gender(gender:int):Ref<UserEventBuilder>
			avatar(avatar:Ref<AvatarInfo>):Ref<UserEventBuilder>
			status(status:Ref<UserStatus>):Ref<UserEventBuilder>
			departmentIds(departmentIds:string[]):Ref<UserEventBuilder>
			leaderUserId(leaderUserId:string):Ref<UserEventBuilder>
			city(city:string):Ref<UserEventBuilder>
			country(country:string):Ref<UserEventBuilder>
			workStation(workStation:string):Ref<UserEventBuilder>
			joinTime(joinTime:int):Ref<UserEventBuilder>
			employeeNo(employeeNo:string):Ref<UserEventBuilder>
			employeeType(employeeType:int):Ref<UserEventBuilder>
			orders(orders:Ref<UserOrder>[]):Ref<UserEventBuilder>
			customAttrs(customAttrs:Ref<UserCustomAttr>[]):Ref<UserEventBuilder>
			jobLevelId(jobLevelId:string):Ref<UserEventBuilder>
			jobFamilyId(jobFamilyId:string):Ref<UserEventBuilder>
			dottedLineLeaderUserIds(dottedLineLeaderUserIds:string[]):Ref<UserEventBuilder>
			build():Ref<UserEvent>
	}
	export interface UserGroup extends Struct<UserGroup>{

			userGroupId:Ref<string>
			name:Ref<string>
			type:Ref<int>
			memberCount:Ref<int>
			status:Ref<int>
	}
	export interface UserGroupBuilder extends Struct<UserGroupBuilder>{

			userGroupId(userGroupId:string):Ref<UserGroupBuilder>
			name(name:string):Ref<UserGroupBuilder>
			type(type_:int):Ref<UserGroupBuilder>
			memberCount(memberCount:int):Ref<UserGroupBuilder>
			status(status:int):Ref<UserGroupBuilder>
			build():Ref<UserGroup>
	}
	export interface UserGroupMember extends Alias<Nothing>{

	}
	export interface UserI18nName extends Struct<UserI18nName>{

			zhCn:Ref<string>
			jaJp:Ref<string>
			enUs:Ref<string>
	}
	export interface UserI18nNameBuilder extends Struct<UserI18nNameBuilder>{

			zhCn(zhCn:string):Ref<UserI18nNameBuilder>
			jaJp(jaJp:string):Ref<UserI18nNameBuilder>
			enUs(enUs:string):Ref<UserI18nNameBuilder>
			build():Ref<UserI18nName>
	}
	export interface UserId extends Struct<UserId>{

			userId:Ref<string>
			openId:Ref<string>
			unionId:Ref<string>
	}
	export interface UserIdBuilder extends Struct<UserIdBuilder>{

			userId(userId:string):Ref<UserIdBuilder>
			openId(openId:string):Ref<UserIdBuilder>
			unionId(unionId:string):Ref<UserIdBuilder>
			build():Ref<UserId>
	}
	//"open_id"
	export const UserIdTypeBatchGetIdUserOpenId:string
	//"union_id"
	export const UserIdTypeBatchGetIdUserUnionId:string
	//"user_id"
	export const UserIdTypeBatchGetIdUserUserId:string
	//"open_id"
	export const UserIdTypeBatchUserOpenId:string
	//"union_id"
	export const UserIdTypeBatchUserUnionId:string
	//"user_id"
	export const UserIdTypeBatchUserUserId:string
	//"open_id"
	export const UserIdTypeChildrenDepartmentOpenId:string
	//"union_id"
	export const UserIdTypeChildrenDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeChildrenDepartmentUserId:string
	//"open_id"
	export const UserIdTypeCreateDepartmentOpenId:string
	//"union_id"
	export const UserIdTypeCreateDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeCreateDepartmentUserId:string
	//"open_id"
	export const UserIdTypeCreateGroupOpenId:string
	//"union_id"
	export const UserIdTypeCreateGroupUnionId:string
	//"user_id"
	export const UserIdTypeCreateGroupUserId:string
	//"open_id"
	export const UserIdTypeCreateUserOpenId:string
	//"union_id"
	export const UserIdTypeCreateUserUnionId:string
	//"user_id"
	export const UserIdTypeCreateUserUserId:string
	//"open_id"
	export const UserIdTypeDeleteUserOpenId:string
	//"union_id"
	export const UserIdTypeDeleteUserUnionId:string
	//"user_id"
	export const UserIdTypeDeleteUserUserId:string
	//"open_id"
	export const UserIdTypeFindByDepartmentUserOpenId:string
	//"union_id"
	export const UserIdTypeFindByDepartmentUserUnionId:string
	//"user_id"
	export const UserIdTypeFindByDepartmentUserUserId:string
	//"open_id"
	export const UserIdTypeGetDepartmentOpenId:string
	//"union_id"
	export const UserIdTypeGetDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeGetDepartmentUserId:string
	//"open_id"
	export const UserIdTypeGetGroupOpenId:string
	//"union_id"
	export const UserIdTypeGetGroupUnionId:string
	//"user_id"
	export const UserIdTypeGetGroupUserId:string
	//"open_id"
	export const UserIdTypeGetUserOpenId:string
	//"union_id"
	export const UserIdTypeGetUserUnionId:string
	//"user_id"
	export const UserIdTypeGetUserUserId:string
	//"open_id"
	export const UserIdTypeListDepartmentOpenId:string
	//"union_id"
	export const UserIdTypeListDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeListDepartmentUserId:string
	//"open_id"
	export const UserIdTypeListScopeOpenId:string
	//"union_id"
	export const UserIdTypeListScopeUnionId:string
	//"user_id"
	export const UserIdTypeListScopeUserId:string
	//"open_id"
	export const UserIdTypeListUserOpenId:string
	//"union_id"
	export const UserIdTypeListUserUnionId:string
	//"user_id"
	export const UserIdTypeListUserUserId:string
	//"open_id"
	export const UserIdTypeOpenId:string
	//"open_id"
	export const UserIdTypeParentDepartmentOpenId:string
	//"union_id"
	export const UserIdTypeParentDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeParentDepartmentUserId:string
	//"open_id"
	export const UserIdTypePatchDepartmentOpenId:string
	//"union_id"
	export const UserIdTypePatchDepartmentUnionId:string
	//"user_id"
	export const UserIdTypePatchDepartmentUserId:string
	//"open_id"
	export const UserIdTypePatchGroupOpenId:string
	//"union_id"
	export const UserIdTypePatchGroupUnionId:string
	//"user_id"
	export const UserIdTypePatchGroupUserId:string
	//"open_id"
	export const UserIdTypePatchUserOpenId:string
	//"union_id"
	export const UserIdTypePatchUserUnionId:string
	//"user_id"
	export const UserIdTypePatchUserUserId:string
	//"open_id"
	export const UserIdTypeResurrectUserOpenId:string
	//"union_id"
	export const UserIdTypeResurrectUserUnionId:string
	//"user_id"
	export const UserIdTypeResurrectUserUserId:string
	//"open_id"
	export const UserIdTypeSearchDepartmentOpenId:string
	//"union_id"
	export const UserIdTypeSearchDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeSearchDepartmentUserId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"open_id"
	export const UserIdTypeUpdateDepartmentOpenId:string
	//"union_id"
	export const UserIdTypeUpdateDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeUpdateDepartmentUserId:string
	//"open_id"
	export const UserIdTypeUpdateUserIdUserOpenId:string
	//"union_id"
	export const UserIdTypeUpdateUserIdUserUnionId:string
	//"user_id"
	export const UserIdTypeUpdateUserIdUserUserId:string
	//"open_id"
	export const UserIdTypeUpdateUserOpenId:string
	//"union_id"
	export const UserIdTypeUpdateUserUnionId:string
	//"user_id"
	export const UserIdTypeUpdateUserUserId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface UserOrder extends Struct<UserOrder>{

			departmentId:Ref<string>
			userOrder:Ref<int>
			departmentOrder:Ref<int>
			isPrimaryDept:Ref<bool>
	}
	export interface UserOrderBuilder extends Struct<UserOrderBuilder>{

			departmentId(departmentId:string):Ref<UserOrderBuilder>
			userOrder(userOrder:int):Ref<UserOrderBuilder>
			departmentOrder(departmentOrder:int):Ref<UserOrderBuilder>
			isPrimaryDept(isPrimaryDept:bool):Ref<UserOrderBuilder>
			build():Ref<UserOrder>
	}
	export interface UserPosition extends Struct<UserPosition>{

			positionCode:Ref<string>
			positionName:Ref<string>
			departmentId:Ref<string>
			leaderUserId:Ref<string>
			leaderPositionCode:Ref<string>
			isMajor:Ref<bool>
	}
	export interface UserPositionBuilder extends Struct<UserPositionBuilder>{

			positionCode(positionCode:string):Ref<UserPositionBuilder>
			positionName(positionName:string):Ref<UserPositionBuilder>
			departmentId(departmentId:string):Ref<UserPositionBuilder>
			leaderUserId(leaderUserId:string):Ref<UserPositionBuilder>
			leaderPositionCode(leaderPositionCode:string):Ref<UserPositionBuilder>
			isMajor(isMajor:bool):Ref<UserPositionBuilder>
			build():Ref<UserPosition>
	}
	export interface UserStatus extends Struct<UserStatus>{

			isFrozen:Ref<bool>
			isResigned:Ref<bool>
			isActivated:Ref<bool>
			isExited:Ref<bool>
			isUnjoin:Ref<bool>
	}
	export interface UserStatusBuilder extends Struct<UserStatusBuilder>{

			isFrozen(isFrozen:bool):Ref<UserStatusBuilder>
			isResigned(isResigned:bool):Ref<UserStatusBuilder>
			isActivated(isActivated:bool):Ref<UserStatusBuilder>
			isExited(isExited:bool):Ref<UserStatusBuilder>
			isUnjoin(isUnjoin:bool):Ref<UserStatusBuilder>
			build():Ref<UserStatus>
	}
	export interface V3 extends Struct<V3>{

			customAttr:Ref<{
			
				list(ctx:context.Context,req:Ref<ListCustomAttrReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListCustomAttrResp>
				listByIterator(ctx:context.Context,req:Ref<ListCustomAttrReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListCustomAttrIterator>
			}>
			department:Ref<{
			
				batch(ctx:context.Context,req:Ref<BatchDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchDepartmentResp>
				children(ctx:context.Context,req:Ref<ChildrenDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ChildrenDepartmentResp>
				childrenByIterator(ctx:context.Context,req:Ref<ChildrenDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ChildrenDepartmentIterator>
				create(ctx:context.Context,req:Ref<CreateDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateDepartmentResp>
				delete(ctx:context.Context,req:Ref<DeleteDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteDepartmentResp>
				get(ctx:context.Context,req:Ref<GetDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetDepartmentResp>
				list(ctx:context.Context,req:Ref<ListDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDepartmentResp>
				listByIterator(ctx:context.Context,req:Ref<ListDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDepartmentIterator>
				parent(ctx:context.Context,req:Ref<ParentDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ParentDepartmentResp>
				parentByIterator(ctx:context.Context,req:Ref<ParentDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ParentDepartmentIterator>
				patch(ctx:context.Context,req:Ref<PatchDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchDepartmentResp>
				search(ctx:context.Context,req:Ref<SearchDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchDepartmentResp>
				searchByIterator(ctx:context.Context,req:Ref<SearchDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchDepartmentIterator>
				unbindDepartmentChat(ctx:context.Context,req:Ref<UnbindDepartmentChatDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<UnbindDepartmentChatDepartmentResp>
				update(ctx:context.Context,req:Ref<UpdateDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateDepartmentResp>
				updateDepartmentId(ctx:context.Context,req:Ref<UpdateDepartmentIdDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateDepartmentIdDepartmentResp>
			}>
			employeeTypeEnum:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateEmployeeTypeEnumReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateEmployeeTypeEnumResp>
				delete(ctx:context.Context,req:Ref<DeleteEmployeeTypeEnumReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteEmployeeTypeEnumResp>
				list(ctx:context.Context,req:Ref<ListEmployeeTypeEnumReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListEmployeeTypeEnumResp>
				listByIterator(ctx:context.Context,req:Ref<ListEmployeeTypeEnumReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListEmployeeTypeEnumIterator>
				update(ctx:context.Context,req:Ref<UpdateEmployeeTypeEnumReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateEmployeeTypeEnumResp>
			}>
			functionalRole:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateFunctionalRoleReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateFunctionalRoleResp>
				delete(ctx:context.Context,req:Ref<DeleteFunctionalRoleReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteFunctionalRoleResp>
				update(ctx:context.Context,req:Ref<UpdateFunctionalRoleReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateFunctionalRoleResp>
			}>
			functionalRoleMember:Ref<{
			
				batchCreate(ctx:context.Context,req:Ref<BatchCreateFunctionalRoleMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchCreateFunctionalRoleMemberResp>
				batchDelete(ctx:context.Context,req:Ref<BatchDeleteFunctionalRoleMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchDeleteFunctionalRoleMemberResp>
				get(ctx:context.Context,req:Ref<GetFunctionalRoleMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetFunctionalRoleMemberResp>
				list(ctx:context.Context,req:Ref<ListFunctionalRoleMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListFunctionalRoleMemberResp>
				listByIterator(ctx:context.Context,req:Ref<ListFunctionalRoleMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListFunctionalRoleMemberIterator>
				scopes(ctx:context.Context,req:Ref<ScopesFunctionalRoleMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<ScopesFunctionalRoleMemberResp>
			}>
			group:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateGroupResp>
				delete(ctx:context.Context,req:Ref<DeleteGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteGroupResp>
				get(ctx:context.Context,req:Ref<GetGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetGroupResp>
				memberBelong(ctx:context.Context,req:Ref<MemberBelongGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<MemberBelongGroupResp>
				patch(ctx:context.Context,req:Ref<PatchGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchGroupResp>
				simplelist(ctx:context.Context,req:Ref<SimplelistGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<SimplelistGroupResp>
				simplelistByIterator(ctx:context.Context,req:Ref<SimplelistGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<SimplelistGroupIterator>
			}>
			groupMember:Ref<{
			
				add(ctx:context.Context,req:Ref<AddGroupMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<AddGroupMemberResp>
				batchAdd(ctx:context.Context,req:Ref<BatchAddGroupMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchAddGroupMemberResp>
				batchRemove(ctx:context.Context,req:Ref<BatchRemoveGroupMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchRemoveGroupMemberResp>
				remove(ctx:context.Context,req:Ref<RemoveGroupMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<RemoveGroupMemberResp>
				simplelist(ctx:context.Context,req:Ref<SimplelistGroupMemberReq>,...options:larkcore.RequestOptionFunc[]):Ref<SimplelistGroupMemberResp>
			}>
			jobFamily:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateJobFamilyResp>
				delete(ctx:context.Context,req:Ref<DeleteJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteJobFamilyResp>
				get(ctx:context.Context,req:Ref<GetJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetJobFamilyResp>
				list(ctx:context.Context,req:Ref<ListJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobFamilyResp>
				listByIterator(ctx:context.Context,req:Ref<ListJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobFamilyIterator>
				update(ctx:context.Context,req:Ref<UpdateJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateJobFamilyResp>
			}>
			jobLevel:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateJobLevelResp>
				delete(ctx:context.Context,req:Ref<DeleteJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteJobLevelResp>
				get(ctx:context.Context,req:Ref<GetJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetJobLevelResp>
				list(ctx:context.Context,req:Ref<ListJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobLevelResp>
				listByIterator(ctx:context.Context,req:Ref<ListJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobLevelIterator>
				update(ctx:context.Context,req:Ref<UpdateJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateJobLevelResp>
			}>
			jobTitle:Ref<{
			
				get(ctx:context.Context,req:Ref<GetJobTitleReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetJobTitleResp>
				list(ctx:context.Context,req:Ref<ListJobTitleReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobTitleResp>
				listByIterator(ctx:context.Context,req:Ref<ListJobTitleReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobTitleIterator>
			}>
			scope:Ref<{
			
				list(ctx:context.Context,req:Ref<ListScopeReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListScopeResp>
			}>
			unit:Ref<{
			
				bindDepartment(ctx:context.Context,req:Ref<BindDepartmentUnitReq>,...options:larkcore.RequestOptionFunc[]):Ref<BindDepartmentUnitResp>
				create(ctx:context.Context,req:Ref<CreateUnitReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateUnitResp>
				delete(ctx:context.Context,req:Ref<DeleteUnitReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteUnitResp>
				get(ctx:context.Context,req:Ref<GetUnitReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetUnitResp>
				list(ctx:context.Context,req:Ref<ListUnitReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListUnitResp>
				listDepartment(ctx:context.Context,req:Ref<ListDepartmentUnitReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDepartmentUnitResp>
				patch(ctx:context.Context,req:Ref<PatchUnitReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchUnitResp>
				unbindDepartment(ctx:context.Context,req:Ref<UnbindDepartmentUnitReq>,...options:larkcore.RequestOptionFunc[]):Ref<UnbindDepartmentUnitResp>
			}>
			user:Ref<{
			
				batch(ctx:context.Context,req:Ref<BatchUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchUserResp>
				batchGetId(ctx:context.Context,req:Ref<BatchGetIdUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchGetIdUserResp>
				create(ctx:context.Context,req:Ref<CreateUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateUserResp>
				delete(ctx:context.Context,req:Ref<DeleteUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteUserResp>
				findByDepartment(ctx:context.Context,req:Ref<FindByDepartmentUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<FindByDepartmentUserResp>
				findByDepartmentByIterator(ctx:context.Context,req:Ref<FindByDepartmentUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<FindByDepartmentUserIterator>
				get(ctx:context.Context,req:Ref<GetUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetUserResp>
				list(ctx:context.Context,req:Ref<ListUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListUserResp>
				listByIterator(ctx:context.Context,req:Ref<ListUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListUserIterator>
				patch(ctx:context.Context,req:Ref<PatchUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchUserResp>
				resurrect(ctx:context.Context,req:Ref<ResurrectUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<ResurrectUserResp>
				update(ctx:context.Context,req:Ref<UpdateUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateUserResp>
				updateUserId(ctx:context.Context,req:Ref<UpdateUserIdUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateUserIdUserResp>
			}>
			workCity:Ref<{
			
				get(ctx:context.Context,req:Ref<GetWorkCityReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetWorkCityResp>
				list(ctx:context.Context,req:Ref<ListWorkCityReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListWorkCityResp>
				listByIterator(ctx:context.Context,req:Ref<ListWorkCityReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListWorkCityIterator>
			}>
	}
	export interface WorkCity extends Struct<WorkCity>{

			workCityId:Ref<string>
			name:Ref<string>
			i18nName:Ref<I18nContent>[]
			status:Ref<bool>
	}
	export interface WorkCityBuilder extends Struct<WorkCityBuilder>{

			workCityId(workCityId:string):Ref<WorkCityBuilder>
			name(name:string):Ref<WorkCityBuilder>
			i18nName(i18nName:Ref<I18nContent>[]):Ref<WorkCityBuilder>
			status(status:bool):Ref<WorkCityBuilder>
			build():Ref<WorkCity>
	}
	export function emptyCreateJobFamilyReq():CreateJobFamilyReq
	export function emptyRefCreateJobFamilyReq():Ref<CreateJobFamilyReq>
	export function refOfCreateJobFamilyReq(x:CreateJobFamilyReq,v:Ref<CreateJobFamilyReq>)
	export function unRefCreateJobFamilyReq(v:Ref<CreateJobFamilyReq>):CreateJobFamilyReq
	export function emptyBatchDepartmentRespData():BatchDepartmentRespData
	export function emptyRefBatchDepartmentRespData():Ref<BatchDepartmentRespData>
	export function refOfBatchDepartmentRespData(x:BatchDepartmentRespData,v:Ref<BatchDepartmentRespData>)
	export function unRefBatchDepartmentRespData(v:Ref<BatchDepartmentRespData>):BatchDepartmentRespData
	export function emptyUserContactInfo():UserContactInfo
	export function emptyRefUserContactInfo():Ref<UserContactInfo>
	export function refOfUserContactInfo(x:UserContactInfo,v:Ref<UserContactInfo>)
	export function unRefUserContactInfo(v:Ref<UserContactInfo>):UserContactInfo
	export function emptyP2DepartmentDeletedV3Data():P2DepartmentDeletedV3Data
	export function emptyRefP2DepartmentDeletedV3Data():Ref<P2DepartmentDeletedV3Data>
	export function refOfP2DepartmentDeletedV3Data(x:P2DepartmentDeletedV3Data,v:Ref<P2DepartmentDeletedV3Data>)
	export function unRefP2DepartmentDeletedV3Data(v:Ref<P2DepartmentDeletedV3Data>):P2DepartmentDeletedV3Data
	export function emptyBatchDeleteFunctionalRoleMemberRespData():BatchDeleteFunctionalRoleMemberRespData
	export function emptyRefBatchDeleteFunctionalRoleMemberRespData():Ref<BatchDeleteFunctionalRoleMemberRespData>
	export function refOfBatchDeleteFunctionalRoleMemberRespData(x:BatchDeleteFunctionalRoleMemberRespData,v:Ref<BatchDeleteFunctionalRoleMemberRespData>)
	export function unRefBatchDeleteFunctionalRoleMemberRespData(v:Ref<BatchDeleteFunctionalRoleMemberRespData>):BatchDeleteFunctionalRoleMemberRespData
	export function emptyCreateUnitResp():CreateUnitResp
	export function emptyRefCreateUnitResp():Ref<CreateUnitResp>
	export function refOfCreateUnitResp(x:CreateUnitResp,v:Ref<CreateUnitResp>)
	export function unRefCreateUnitResp(v:Ref<CreateUnitResp>):CreateUnitResp
	export function emptyDepartmentParent():DepartmentParent
	export function emptyRefDepartmentParent():Ref<DepartmentParent>
	export function refOfDepartmentParent(x:DepartmentParent,v:Ref<DepartmentParent>)
	export function unRefDepartmentParent(v:Ref<DepartmentParent>):DepartmentParent
	export function emptyListJobTitleIterator():ListJobTitleIterator
	export function emptyRefListJobTitleIterator():Ref<ListJobTitleIterator>
	export function refOfListJobTitleIterator(x:ListJobTitleIterator,v:Ref<ListJobTitleIterator>)
	export function unRefListJobTitleIterator(v:Ref<ListJobTitleIterator>):ListJobTitleIterator
	export function emptyDepartmentCount():DepartmentCount
	export function emptyRefDepartmentCount():Ref<DepartmentCount>
	export function refOfDepartmentCount(x:DepartmentCount,v:Ref<DepartmentCount>)
	export function unRefDepartmentCount(v:Ref<DepartmentCount>):DepartmentCount
	export function emptyGetWorkCityResp():GetWorkCityResp
	export function emptyRefGetWorkCityResp():Ref<GetWorkCityResp>
	export function refOfGetWorkCityResp(x:GetWorkCityResp,v:Ref<GetWorkCityResp>)
	export function unRefGetWorkCityResp(v:Ref<GetWorkCityResp>):GetWorkCityResp
	export function emptyListFunctionalRoleMemberRespData():ListFunctionalRoleMemberRespData
	export function emptyRefListFunctionalRoleMemberRespData():Ref<ListFunctionalRoleMemberRespData>
	export function refOfListFunctionalRoleMemberRespData(x:ListFunctionalRoleMemberRespData,v:Ref<ListFunctionalRoleMemberRespData>)
	export function unRefListFunctionalRoleMemberRespData(v:Ref<ListFunctionalRoleMemberRespData>):ListFunctionalRoleMemberRespData
	export function emptyListJobTitleReq():ListJobTitleReq
	export function emptyRefListJobTitleReq():Ref<ListJobTitleReq>
	export function refOfListJobTitleReq(x:ListJobTitleReq,v:Ref<ListJobTitleReq>)
	export function unRefListJobTitleReq(v:Ref<ListJobTitleReq>):ListJobTitleReq
	export function emptyDeleteJobLevelResp():DeleteJobLevelResp
	export function emptyRefDeleteJobLevelResp():Ref<DeleteJobLevelResp>
	export function refOfDeleteJobLevelResp(x:DeleteJobLevelResp,v:Ref<DeleteJobLevelResp>)
	export function unRefDeleteJobLevelResp(v:Ref<DeleteJobLevelResp>):DeleteJobLevelResp
	export function emptyListWorkCityReq():ListWorkCityReq
	export function emptyRefListWorkCityReq():Ref<ListWorkCityReq>
	export function refOfListWorkCityReq(x:ListWorkCityReq,v:Ref<ListWorkCityReq>)
	export function unRefListWorkCityReq(v:Ref<ListWorkCityReq>):ListWorkCityReq
	export function emptyP2EmployeeTypeEnumDeletedV3Data():P2EmployeeTypeEnumDeletedV3Data
	export function emptyRefP2EmployeeTypeEnumDeletedV3Data():Ref<P2EmployeeTypeEnumDeletedV3Data>
	export function refOfP2EmployeeTypeEnumDeletedV3Data(x:P2EmployeeTypeEnumDeletedV3Data,v:Ref<P2EmployeeTypeEnumDeletedV3Data>)
	export function unRefP2EmployeeTypeEnumDeletedV3Data(v:Ref<P2EmployeeTypeEnumDeletedV3Data>):P2EmployeeTypeEnumDeletedV3Data
	export function emptyGetJobLevelReq():GetJobLevelReq
	export function emptyRefGetJobLevelReq():Ref<GetJobLevelReq>
	export function refOfGetJobLevelReq(x:GetJobLevelReq,v:Ref<GetJobLevelReq>)
	export function unRefGetJobLevelReq(v:Ref<GetJobLevelReq>):GetJobLevelReq
	export function emptyP2UserCreatedV3Data():P2UserCreatedV3Data
	export function emptyRefP2UserCreatedV3Data():Ref<P2UserCreatedV3Data>
	export function refOfP2UserCreatedV3Data(x:P2UserCreatedV3Data,v:Ref<P2UserCreatedV3Data>)
	export function unRefP2UserCreatedV3Data(v:Ref<P2UserCreatedV3Data>):P2UserCreatedV3Data
	export function emptyResurrectUserReqBody():ResurrectUserReqBody
	export function emptyRefResurrectUserReqBody():Ref<ResurrectUserReqBody>
	export function refOfResurrectUserReqBody(x:ResurrectUserReqBody,v:Ref<ResurrectUserReqBody>)
	export function unRefResurrectUserReqBody(v:Ref<ResurrectUserReqBody>):ResurrectUserReqBody
	export function emptyGetWorkCityRespData():GetWorkCityRespData
	export function emptyRefGetWorkCityRespData():Ref<GetWorkCityRespData>
	export function refOfGetWorkCityRespData(x:GetWorkCityRespData,v:Ref<GetWorkCityRespData>)
	export function unRefGetWorkCityRespData(v:Ref<GetWorkCityRespData>):GetWorkCityRespData
	export function emptyRemoveGroupMemberReq():RemoveGroupMemberReq
	export function emptyRefRemoveGroupMemberReq():Ref<RemoveGroupMemberReq>
	export function refOfRemoveGroupMemberReq(x:RemoveGroupMemberReq,v:Ref<RemoveGroupMemberReq>)
	export function unRefRemoveGroupMemberReq(v:Ref<RemoveGroupMemberReq>):RemoveGroupMemberReq
	export function emptyGetJobFamilyResp():GetJobFamilyResp
	export function emptyRefGetJobFamilyResp():Ref<GetJobFamilyResp>
	export function refOfGetJobFamilyResp(x:GetJobFamilyResp,v:Ref<GetJobFamilyResp>)
	export function unRefGetJobFamilyResp(v:Ref<GetJobFamilyResp>):GetJobFamilyResp
	export function emptyP1UserStatusV3():P1UserStatusV3
	export function emptyRefP1UserStatusV3():Ref<P1UserStatusV3>
	export function refOfP1UserStatusV3(x:P1UserStatusV3,v:Ref<P1UserStatusV3>)
	export function unRefP1UserStatusV3(v:Ref<P1UserStatusV3>):P1UserStatusV3
	export function emptySearchDepartmentReq():SearchDepartmentReq
	export function emptyRefSearchDepartmentReq():Ref<SearchDepartmentReq>
	export function refOfSearchDepartmentReq(x:SearchDepartmentReq,v:Ref<SearchDepartmentReq>)
	export function unRefSearchDepartmentReq(v:Ref<SearchDepartmentReq>):SearchDepartmentReq
	export function emptyGetDepartmentResp():GetDepartmentResp
	export function emptyRefGetDepartmentResp():Ref<GetDepartmentResp>
	export function refOfGetDepartmentResp(x:GetDepartmentResp,v:Ref<GetDepartmentResp>)
	export function unRefGetDepartmentResp(v:Ref<GetDepartmentResp>):GetDepartmentResp
	export function emptyGetGroupReq():GetGroupReq
	export function emptyRefGetGroupReq():Ref<GetGroupReq>
	export function refOfGetGroupReq(x:GetGroupReq,v:Ref<GetGroupReq>)
	export function unRefGetGroupReq(v:Ref<GetGroupReq>):GetGroupReq
	export function emptyP2UserUpdatedV3():P2UserUpdatedV3
	export function emptyRefP2UserUpdatedV3():Ref<P2UserUpdatedV3>
	export function refOfP2UserUpdatedV3(x:P2UserUpdatedV3,v:Ref<P2UserUpdatedV3>)
	export function unRefP2UserUpdatedV3(v:Ref<P2UserUpdatedV3>):P2UserUpdatedV3
	export function emptyShareUser():ShareUser
	export function emptyRefShareUser():Ref<ShareUser>
	export function refOfShareUser(x:ShareUser,v:Ref<ShareUser>)
	export function unRefShareUser(v:Ref<ShareUser>):ShareUser
	export function emptySimplelistGroupReq():SimplelistGroupReq
	export function emptyRefSimplelistGroupReq():Ref<SimplelistGroupReq>
	export function refOfSimplelistGroupReq(x:SimplelistGroupReq,v:Ref<SimplelistGroupReq>)
	export function unRefSimplelistGroupReq(v:Ref<SimplelistGroupReq>):SimplelistGroupReq
	export function emptyGetUserResp():GetUserResp
	export function emptyRefGetUserResp():Ref<GetUserResp>
	export function refOfGetUserResp(x:GetUserResp,v:Ref<GetUserResp>)
	export function unRefGetUserResp(v:Ref<GetUserResp>):GetUserResp
	export function emptyListJobLevelRespData():ListJobLevelRespData
	export function emptyRefListJobLevelRespData():Ref<ListJobLevelRespData>
	export function refOfListJobLevelRespData(x:ListJobLevelRespData,v:Ref<ListJobLevelRespData>)
	export function unRefListJobLevelRespData(v:Ref<ListJobLevelRespData>):ListJobLevelRespData
	export function emptyScope():Scope
	export function emptyRefScope():Ref<Scope>
	export function refOfScope(x:Scope,v:Ref<Scope>)
	export function unRefScope(v:Ref<Scope>):Scope
	export function emptyCreateDepartmentReq():CreateDepartmentReq
	export function emptyRefCreateDepartmentReq():Ref<CreateDepartmentReq>
	export function refOfCreateDepartmentReq(x:CreateDepartmentReq,v:Ref<CreateDepartmentReq>)
	export function unRefCreateDepartmentReq(v:Ref<CreateDepartmentReq>):CreateDepartmentReq
	export function emptySearchDepartmentReqBody():SearchDepartmentReqBody
	export function emptyRefSearchDepartmentReqBody():Ref<SearchDepartmentReqBody>
	export function refOfSearchDepartmentReqBody(x:SearchDepartmentReqBody,v:Ref<SearchDepartmentReqBody>)
	export function unRefSearchDepartmentReqBody(v:Ref<SearchDepartmentReqBody>):SearchDepartmentReqBody
	export function emptyGetGroupResp():GetGroupResp
	export function emptyRefGetGroupResp():Ref<GetGroupResp>
	export function refOfGetGroupResp(x:GetGroupResp,v:Ref<GetGroupResp>)
	export function unRefGetGroupResp(v:Ref<GetGroupResp>):GetGroupResp
	export function emptyAddGroupMemberReqBody():AddGroupMemberReqBody
	export function emptyRefAddGroupMemberReqBody():Ref<AddGroupMemberReqBody>
	export function refOfAddGroupMemberReqBody(x:AddGroupMemberReqBody,v:Ref<AddGroupMemberReqBody>)
	export function unRefAddGroupMemberReqBody(v:Ref<AddGroupMemberReqBody>):AddGroupMemberReqBody
	export function emptyCreateDepartmentRespData():CreateDepartmentRespData
	export function emptyRefCreateDepartmentRespData():Ref<CreateDepartmentRespData>
	export function refOfCreateDepartmentRespData(x:CreateDepartmentRespData,v:Ref<CreateDepartmentRespData>)
	export function unRefCreateDepartmentRespData(v:Ref<CreateDepartmentRespData>):CreateDepartmentRespData
	export function emptyP2DepartmentUpdatedV3Data():P2DepartmentUpdatedV3Data
	export function emptyRefP2DepartmentUpdatedV3Data():Ref<P2DepartmentUpdatedV3Data>
	export function refOfP2DepartmentUpdatedV3Data(x:P2DepartmentUpdatedV3Data,v:Ref<P2DepartmentUpdatedV3Data>)
	export function unRefP2DepartmentUpdatedV3Data(v:Ref<P2DepartmentUpdatedV3Data>):P2DepartmentUpdatedV3Data
	export function emptyScopesFunctionalRoleMemberReq():ScopesFunctionalRoleMemberReq
	export function emptyRefScopesFunctionalRoleMemberReq():Ref<ScopesFunctionalRoleMemberReq>
	export function refOfScopesFunctionalRoleMemberReq(x:ScopesFunctionalRoleMemberReq,v:Ref<ScopesFunctionalRoleMemberReq>)
	export function unRefScopesFunctionalRoleMemberReq(v:Ref<ScopesFunctionalRoleMemberReq>):ScopesFunctionalRoleMemberReq
	export function emptyCreateUnitReqBody():CreateUnitReqBody
	export function emptyRefCreateUnitReqBody():Ref<CreateUnitReqBody>
	export function refOfCreateUnitReqBody(x:CreateUnitReqBody,v:Ref<CreateUnitReqBody>)
	export function unRefCreateUnitReqBody(v:Ref<CreateUnitReqBody>):CreateUnitReqBody
	export function emptyParentDepartmentResp():ParentDepartmentResp
	export function emptyRefParentDepartmentResp():Ref<ParentDepartmentResp>
	export function refOfParentDepartmentResp(x:ParentDepartmentResp,v:Ref<ParentDepartmentResp>)
	export function unRefParentDepartmentResp(v:Ref<ParentDepartmentResp>):ParentDepartmentResp
	export function emptyDeleteGroupReq():DeleteGroupReq
	export function emptyRefDeleteGroupReq():Ref<DeleteGroupReq>
	export function refOfDeleteGroupReq(x:DeleteGroupReq,v:Ref<DeleteGroupReq>)
	export function unRefDeleteGroupReq(v:Ref<DeleteGroupReq>):DeleteGroupReq
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptySimplelistGroupRespData():SimplelistGroupRespData
	export function emptyRefSimplelistGroupRespData():Ref<SimplelistGroupRespData>
	export function refOfSimplelistGroupRespData(x:SimplelistGroupRespData,v:Ref<SimplelistGroupRespData>)
	export function unRefSimplelistGroupRespData(v:Ref<SimplelistGroupRespData>):SimplelistGroupRespData
	export function emptyUpdateUserReq():UpdateUserReq
	export function emptyRefUpdateUserReq():Ref<UpdateUserReq>
	export function refOfUpdateUserReq(x:UpdateUserReq,v:Ref<UpdateUserReq>)
	export function unRefUpdateUserReq(v:Ref<UpdateUserReq>):UpdateUserReq
	export function emptyListUserReq():ListUserReq
	export function emptyRefListUserReq():Ref<ListUserReq>
	export function refOfListUserReq(x:ListUserReq,v:Ref<ListUserReq>)
	export function unRefListUserReq(v:Ref<ListUserReq>):ListUserReq
	export function emptyBatchGetIdUserResp():BatchGetIdUserResp
	export function emptyRefBatchGetIdUserResp():Ref<BatchGetIdUserResp>
	export function refOfBatchGetIdUserResp(x:BatchGetIdUserResp,v:Ref<BatchGetIdUserResp>)
	export function unRefBatchGetIdUserResp(v:Ref<BatchGetIdUserResp>):BatchGetIdUserResp
	export function emptyCreateEmployeeTypeEnumRespData():CreateEmployeeTypeEnumRespData
	export function emptyRefCreateEmployeeTypeEnumRespData():Ref<CreateEmployeeTypeEnumRespData>
	export function refOfCreateEmployeeTypeEnumRespData(x:CreateEmployeeTypeEnumRespData,v:Ref<CreateEmployeeTypeEnumRespData>)
	export function unRefCreateEmployeeTypeEnumRespData(v:Ref<CreateEmployeeTypeEnumRespData>):CreateEmployeeTypeEnumRespData
	export function emptyDepartmentI18nName():DepartmentI18nName
	export function emptyRefDepartmentI18nName():Ref<DepartmentI18nName>
	export function refOfDepartmentI18nName(x:DepartmentI18nName,v:Ref<DepartmentI18nName>)
	export function unRefDepartmentI18nName(v:Ref<DepartmentI18nName>):DepartmentI18nName
	export function emptyListCustomAttrReq():ListCustomAttrReq
	export function emptyRefListCustomAttrReq():Ref<ListCustomAttrReq>
	export function refOfListCustomAttrReq(x:ListCustomAttrReq,v:Ref<ListCustomAttrReq>)
	export function unRefListCustomAttrReq(v:Ref<ListCustomAttrReq>):ListCustomAttrReq
	export function emptyDepartmentUnit():DepartmentUnit
	export function emptyRefDepartmentUnit():Ref<DepartmentUnit>
	export function refOfDepartmentUnit(x:DepartmentUnit,v:Ref<DepartmentUnit>)
	export function unRefDepartmentUnit(v:Ref<DepartmentUnit>):DepartmentUnit
	export function emptyListDepartmentUnitRespData():ListDepartmentUnitRespData
	export function emptyRefListDepartmentUnitRespData():Ref<ListDepartmentUnitRespData>
	export function refOfListDepartmentUnitRespData(x:ListDepartmentUnitRespData,v:Ref<ListDepartmentUnitRespData>)
	export function unRefListDepartmentUnitRespData(v:Ref<ListDepartmentUnitRespData>):ListDepartmentUnitRespData
	export function emptySimplelistGroupMemberRespData():SimplelistGroupMemberRespData
	export function emptyRefSimplelistGroupMemberRespData():Ref<SimplelistGroupMemberRespData>
	export function refOfSimplelistGroupMemberRespData(x:SimplelistGroupMemberRespData,v:Ref<SimplelistGroupMemberRespData>)
	export function unRefSimplelistGroupMemberRespData(v:Ref<SimplelistGroupMemberRespData>):SimplelistGroupMemberRespData
	export function emptyUnbindDepartmentChatDepartmentResp():UnbindDepartmentChatDepartmentResp
	export function emptyRefUnbindDepartmentChatDepartmentResp():Ref<UnbindDepartmentChatDepartmentResp>
	export function refOfUnbindDepartmentChatDepartmentResp(x:UnbindDepartmentChatDepartmentResp,v:Ref<UnbindDepartmentChatDepartmentResp>)
	export function unRefUnbindDepartmentChatDepartmentResp(v:Ref<UnbindDepartmentChatDepartmentResp>):UnbindDepartmentChatDepartmentResp
	export function emptyChildrenDepartmentReq():ChildrenDepartmentReq
	export function emptyRefChildrenDepartmentReq():Ref<ChildrenDepartmentReq>
	export function refOfChildrenDepartmentReq(x:ChildrenDepartmentReq,v:Ref<ChildrenDepartmentReq>)
	export function unRefChildrenDepartmentReq(v:Ref<ChildrenDepartmentReq>):ChildrenDepartmentReq
	export function emptyCreateUserResp():CreateUserResp
	export function emptyRefCreateUserResp():Ref<CreateUserResp>
	export function refOfCreateUserResp(x:CreateUserResp,v:Ref<CreateUserResp>)
	export function unRefCreateUserResp(v:Ref<CreateUserResp>):CreateUserResp
	export function emptyGetUnitReq():GetUnitReq
	export function emptyRefGetUnitReq():Ref<GetUnitReq>
	export function refOfGetUnitReq(x:GetUnitReq,v:Ref<GetUnitReq>)
	export function unRefGetUnitReq(v:Ref<GetUnitReq>):GetUnitReq
	export function emptyP2EmployeeTypeEnumDeactivatedV3():P2EmployeeTypeEnumDeactivatedV3
	export function emptyRefP2EmployeeTypeEnumDeactivatedV3():Ref<P2EmployeeTypeEnumDeactivatedV3>
	export function refOfP2EmployeeTypeEnumDeactivatedV3(x:P2EmployeeTypeEnumDeactivatedV3,v:Ref<P2EmployeeTypeEnumDeactivatedV3>)
	export function unRefP2EmployeeTypeEnumDeactivatedV3(v:Ref<P2EmployeeTypeEnumDeactivatedV3>):P2EmployeeTypeEnumDeactivatedV3
	export function emptyFindByDepartmentUserResp():FindByDepartmentUserResp
	export function emptyRefFindByDepartmentUserResp():Ref<FindByDepartmentUserResp>
	export function refOfFindByDepartmentUserResp(x:FindByDepartmentUserResp,v:Ref<FindByDepartmentUserResp>)
	export function unRefFindByDepartmentUserResp(v:Ref<FindByDepartmentUserResp>):FindByDepartmentUserResp
	export function emptyUserOrder():UserOrder
	export function emptyRefUserOrder():Ref<UserOrder>
	export function refOfUserOrder(x:UserOrder,v:Ref<UserOrder>)
	export function unRefUserOrder(v:Ref<UserOrder>):UserOrder
	export function emptyBatchAddGroupMemberReq():BatchAddGroupMemberReq
	export function emptyRefBatchAddGroupMemberReq():Ref<BatchAddGroupMemberReq>
	export function refOfBatchAddGroupMemberReq(x:BatchAddGroupMemberReq,v:Ref<BatchAddGroupMemberReq>)
	export function unRefBatchAddGroupMemberReq(v:Ref<BatchAddGroupMemberReq>):BatchAddGroupMemberReq
	export function emptyBatchCreateFunctionalRoleMemberRespData():BatchCreateFunctionalRoleMemberRespData
	export function emptyRefBatchCreateFunctionalRoleMemberRespData():Ref<BatchCreateFunctionalRoleMemberRespData>
	export function refOfBatchCreateFunctionalRoleMemberRespData(x:BatchCreateFunctionalRoleMemberRespData,v:Ref<BatchCreateFunctionalRoleMemberRespData>)
	export function unRefBatchCreateFunctionalRoleMemberRespData(v:Ref<BatchCreateFunctionalRoleMemberRespData>):BatchCreateFunctionalRoleMemberRespData
	export function emptyListJobFamilyResp():ListJobFamilyResp
	export function emptyRefListJobFamilyResp():Ref<ListJobFamilyResp>
	export function refOfListJobFamilyResp(x:ListJobFamilyResp,v:Ref<ListJobFamilyResp>)
	export function unRefListJobFamilyResp(v:Ref<ListJobFamilyResp>):ListJobFamilyResp
	export function emptyListUnitResp():ListUnitResp
	export function emptyRefListUnitResp():Ref<ListUnitResp>
	export function refOfListUnitResp(x:ListUnitResp,v:Ref<ListUnitResp>)
	export function unRefListUnitResp(v:Ref<ListUnitResp>):ListUnitResp
	export function emptyGetUserReq():GetUserReq
	export function emptyRefGetUserReq():Ref<GetUserReq>
	export function refOfGetUserReq(x:GetUserReq,v:Ref<GetUserReq>)
	export function unRefGetUserReq(v:Ref<GetUserReq>):GetUserReq
	export function emptyListWorkCityRespData():ListWorkCityRespData
	export function emptyRefListWorkCityRespData():Ref<ListWorkCityRespData>
	export function refOfListWorkCityRespData(x:ListWorkCityRespData,v:Ref<ListWorkCityRespData>)
	export function unRefListWorkCityRespData(v:Ref<ListWorkCityRespData>):ListWorkCityRespData
	export function emptyAddGroupMemberResp():AddGroupMemberResp
	export function emptyRefAddGroupMemberResp():Ref<AddGroupMemberResp>
	export function refOfAddGroupMemberResp(x:AddGroupMemberResp,v:Ref<AddGroupMemberResp>)
	export function unRefAddGroupMemberResp(v:Ref<AddGroupMemberResp>):AddGroupMemberResp
	export function emptyCreateUnitRespData():CreateUnitRespData
	export function emptyRefCreateUnitRespData():Ref<CreateUnitRespData>
	export function refOfCreateUnitRespData(x:CreateUnitRespData,v:Ref<CreateUnitRespData>)
	export function unRefCreateUnitRespData(v:Ref<CreateUnitRespData>):CreateUnitRespData
	export function emptyGetGroupRespData():GetGroupRespData
	export function emptyRefGetGroupRespData():Ref<GetGroupRespData>
	export function refOfGetGroupRespData(x:GetGroupRespData,v:Ref<GetGroupRespData>)
	export function unRefGetGroupRespData(v:Ref<GetGroupRespData>):GetGroupRespData
	export function emptyP1UserChangedV3Data():P1UserChangedV3Data
	export function emptyRefP1UserChangedV3Data():Ref<P1UserChangedV3Data>
	export function refOfP1UserChangedV3Data(x:P1UserChangedV3Data,v:Ref<P1UserChangedV3Data>)
	export function unRefP1UserChangedV3Data(v:Ref<P1UserChangedV3Data>):P1UserChangedV3Data
	export function emptyBatchRemoveGroupMemberResp():BatchRemoveGroupMemberResp
	export function emptyRefBatchRemoveGroupMemberResp():Ref<BatchRemoveGroupMemberResp>
	export function refOfBatchRemoveGroupMemberResp(x:BatchRemoveGroupMemberResp,v:Ref<BatchRemoveGroupMemberResp>)
	export function unRefBatchRemoveGroupMemberResp(v:Ref<BatchRemoveGroupMemberResp>):BatchRemoveGroupMemberResp
	export function emptyJobFamily():JobFamily
	export function emptyRefJobFamily():Ref<JobFamily>
	export function refOfJobFamily(x:JobFamily,v:Ref<JobFamily>)
	export function unRefJobFamily(v:Ref<JobFamily>):JobFamily
	export function emptyUpdateDepartmentIdDepartmentResp():UpdateDepartmentIdDepartmentResp
	export function emptyRefUpdateDepartmentIdDepartmentResp():Ref<UpdateDepartmentIdDepartmentResp>
	export function refOfUpdateDepartmentIdDepartmentResp(x:UpdateDepartmentIdDepartmentResp,v:Ref<UpdateDepartmentIdDepartmentResp>)
	export function unRefUpdateDepartmentIdDepartmentResp(v:Ref<UpdateDepartmentIdDepartmentResp>):UpdateDepartmentIdDepartmentResp
	export function emptyBatchAddGroupMemberRespData():BatchAddGroupMemberRespData
	export function emptyRefBatchAddGroupMemberRespData():Ref<BatchAddGroupMemberRespData>
	export function refOfBatchAddGroupMemberRespData(x:BatchAddGroupMemberRespData,v:Ref<BatchAddGroupMemberRespData>)
	export function unRefBatchAddGroupMemberRespData(v:Ref<BatchAddGroupMemberRespData>):BatchAddGroupMemberRespData
	export function emptyCreateGroupRespData():CreateGroupRespData
	export function emptyRefCreateGroupRespData():Ref<CreateGroupRespData>
	export function refOfCreateGroupRespData(x:CreateGroupRespData,v:Ref<CreateGroupRespData>)
	export function unRefCreateGroupRespData(v:Ref<CreateGroupRespData>):CreateGroupRespData
	export function emptyListFunctionalRoleMemberIterator():ListFunctionalRoleMemberIterator
	export function emptyRefListFunctionalRoleMemberIterator():Ref<ListFunctionalRoleMemberIterator>
	export function refOfListFunctionalRoleMemberIterator(x:ListFunctionalRoleMemberIterator,v:Ref<ListFunctionalRoleMemberIterator>)
	export function unRefListFunctionalRoleMemberIterator(v:Ref<ListFunctionalRoleMemberIterator>):ListFunctionalRoleMemberIterator
	export function emptyUserCustomAttrValue():UserCustomAttrValue
	export function emptyRefUserCustomAttrValue():Ref<UserCustomAttrValue>
	export function refOfUserCustomAttrValue(x:UserCustomAttrValue,v:Ref<UserCustomAttrValue>)
	export function unRefUserCustomAttrValue(v:Ref<UserCustomAttrValue>):UserCustomAttrValue
	export function emptyUserAssignInfo():UserAssignInfo
	export function emptyRefUserAssignInfo():Ref<UserAssignInfo>
	export function refOfUserAssignInfo(x:UserAssignInfo,v:Ref<UserAssignInfo>)
	export function unRefUserAssignInfo(v:Ref<UserAssignInfo>):UserAssignInfo
	export function emptyUserPosition():UserPosition
	export function emptyRefUserPosition():Ref<UserPosition>
	export function refOfUserPosition(x:UserPosition,v:Ref<UserPosition>)
	export function unRefUserPosition(v:Ref<UserPosition>):UserPosition
	export function emptyListCustomAttrRespData():ListCustomAttrRespData
	export function emptyRefListCustomAttrRespData():Ref<ListCustomAttrRespData>
	export function refOfListCustomAttrRespData(x:ListCustomAttrRespData,v:Ref<ListCustomAttrRespData>)
	export function unRefListCustomAttrRespData(v:Ref<ListCustomAttrRespData>):ListCustomAttrRespData
	export function emptyP1UserStatusChangedV3Data():P1UserStatusChangedV3Data
	export function emptyRefP1UserStatusChangedV3Data():Ref<P1UserStatusChangedV3Data>
	export function refOfP1UserStatusChangedV3Data(x:P1UserStatusChangedV3Data,v:Ref<P1UserStatusChangedV3Data>)
	export function unRefP1UserStatusChangedV3Data(v:Ref<P1UserStatusChangedV3Data>):P1UserStatusChangedV3Data
	export function emptyGroupEvent():GroupEvent
	export function emptyRefGroupEvent():Ref<GroupEvent>
	export function refOfGroupEvent(x:GroupEvent,v:Ref<GroupEvent>)
	export function unRefGroupEvent(v:Ref<GroupEvent>):GroupEvent
	export function emptyListDepartmentUnitResp():ListDepartmentUnitResp
	export function emptyRefListDepartmentUnitResp():Ref<ListDepartmentUnitResp>
	export function refOfListDepartmentUnitResp(x:ListDepartmentUnitResp,v:Ref<ListDepartmentUnitResp>)
	export function unRefListDepartmentUnitResp(v:Ref<ListDepartmentUnitResp>):ListDepartmentUnitResp
	export function emptyListUnitReq():ListUnitReq
	export function emptyRefListUnitReq():Ref<ListUnitReq>
	export function refOfListUnitReq(x:ListUnitReq,v:Ref<ListUnitReq>)
	export function unRefListUnitReq(v:Ref<ListUnitReq>):ListUnitReq
	export function emptyScopesFunctionalRoleMemberReqBody():ScopesFunctionalRoleMemberReqBody
	export function emptyRefScopesFunctionalRoleMemberReqBody():Ref<ScopesFunctionalRoleMemberReqBody>
	export function refOfScopesFunctionalRoleMemberReqBody(x:ScopesFunctionalRoleMemberReqBody,v:Ref<ScopesFunctionalRoleMemberReqBody>)
	export function unRefScopesFunctionalRoleMemberReqBody(v:Ref<ScopesFunctionalRoleMemberReqBody>):ScopesFunctionalRoleMemberReqBody
	export function emptyDeleteUserReqBody():DeleteUserReqBody
	export function emptyRefDeleteUserReqBody():Ref<DeleteUserReqBody>
	export function refOfDeleteUserReqBody(x:DeleteUserReqBody,v:Ref<DeleteUserReqBody>)
	export function unRefDeleteUserReqBody(v:Ref<DeleteUserReqBody>):DeleteUserReqBody
	export function emptyUpdateDepartmentRespData():UpdateDepartmentRespData
	export function emptyRefUpdateDepartmentRespData():Ref<UpdateDepartmentRespData>
	export function refOfUpdateDepartmentRespData(x:UpdateDepartmentRespData,v:Ref<UpdateDepartmentRespData>)
	export function unRefUpdateDepartmentRespData(v:Ref<UpdateDepartmentRespData>):UpdateDepartmentRespData
	export function emptyCollaborationTenant():CollaborationTenant
	export function emptyRefCollaborationTenant():Ref<CollaborationTenant>
	export function refOfCollaborationTenant(x:CollaborationTenant,v:Ref<CollaborationTenant>)
	export function unRefCollaborationTenant(v:Ref<CollaborationTenant>):CollaborationTenant
	export function emptyGetDepartmentRespData():GetDepartmentRespData
	export function emptyRefGetDepartmentRespData():Ref<GetDepartmentRespData>
	export function refOfGetDepartmentRespData(x:GetDepartmentRespData,v:Ref<GetDepartmentRespData>)
	export function unRefGetDepartmentRespData(v:Ref<GetDepartmentRespData>):GetDepartmentRespData
	export function emptyListJobTitleResp():ListJobTitleResp
	export function emptyRefListJobTitleResp():Ref<ListJobTitleResp>
	export function refOfListJobTitleResp(x:ListJobTitleResp,v:Ref<ListJobTitleResp>)
	export function unRefListJobTitleResp(v:Ref<ListJobTitleResp>):ListJobTitleResp
	export function emptyUpdateJobLevelReq():UpdateJobLevelReq
	export function emptyRefUpdateJobLevelReq():Ref<UpdateJobLevelReq>
	export function refOfUpdateJobLevelReq(x:UpdateJobLevelReq,v:Ref<UpdateJobLevelReq>)
	export function unRefUpdateJobLevelReq(v:Ref<UpdateJobLevelReq>):UpdateJobLevelReq
	export function emptyBatchCreateFunctionalRoleMemberResp():BatchCreateFunctionalRoleMemberResp
	export function emptyRefBatchCreateFunctionalRoleMemberResp():Ref<BatchCreateFunctionalRoleMemberResp>
	export function refOfBatchCreateFunctionalRoleMemberResp(x:BatchCreateFunctionalRoleMemberResp,v:Ref<BatchCreateFunctionalRoleMemberResp>)
	export function unRefBatchCreateFunctionalRoleMemberResp(v:Ref<BatchCreateFunctionalRoleMemberResp>):BatchCreateFunctionalRoleMemberResp
	export function emptyBindDepartmentUnitReqBody():BindDepartmentUnitReqBody
	export function emptyRefBindDepartmentUnitReqBody():Ref<BindDepartmentUnitReqBody>
	export function refOfBindDepartmentUnitReqBody(x:BindDepartmentUnitReqBody,v:Ref<BindDepartmentUnitReqBody>)
	export function unRefBindDepartmentUnitReqBody(v:Ref<BindDepartmentUnitReqBody>):BindDepartmentUnitReqBody
	export function emptyP2DepartmentUpdatedV3():P2DepartmentUpdatedV3
	export function emptyRefP2DepartmentUpdatedV3():Ref<P2DepartmentUpdatedV3>
	export function refOfP2DepartmentUpdatedV3(x:P2DepartmentUpdatedV3,v:Ref<P2DepartmentUpdatedV3>)
	export function unRefP2DepartmentUpdatedV3(v:Ref<P2DepartmentUpdatedV3>):P2DepartmentUpdatedV3
	export function emptyUser():User
	export function emptyRefUser():Ref<User>
	export function refOfUser(x:User,v:Ref<User>)
	export function unRefUser(v:Ref<User>):User
	export function emptyUserCustomAttr():UserCustomAttr
	export function emptyRefUserCustomAttr():Ref<UserCustomAttr>
	export function refOfUserCustomAttr(x:UserCustomAttr,v:Ref<UserCustomAttr>)
	export function unRefUserCustomAttr(v:Ref<UserCustomAttr>):UserCustomAttr
	export function emptyBatchUserResp():BatchUserResp
	export function emptyRefBatchUserResp():Ref<BatchUserResp>
	export function refOfBatchUserResp(x:BatchUserResp,v:Ref<BatchUserResp>)
	export function unRefBatchUserResp(v:Ref<BatchUserResp>):BatchUserResp
	export function emptyCreateJobLevelReq():CreateJobLevelReq
	export function emptyRefCreateJobLevelReq():Ref<CreateJobLevelReq>
	export function refOfCreateJobLevelReq(x:CreateJobLevelReq,v:Ref<CreateJobLevelReq>)
	export function unRefCreateJobLevelReq(v:Ref<CreateJobLevelReq>):CreateJobLevelReq
	export function emptyCustomAttr():CustomAttr
	export function emptyRefCustomAttr():Ref<CustomAttr>
	export function refOfCustomAttr(x:CustomAttr,v:Ref<CustomAttr>)
	export function unRefCustomAttr(v:Ref<CustomAttr>):CustomAttr
	export function emptyP2EmployeeTypeEnumCreatedV3():P2EmployeeTypeEnumCreatedV3
	export function emptyRefP2EmployeeTypeEnumCreatedV3():Ref<P2EmployeeTypeEnumCreatedV3>
	export function refOfP2EmployeeTypeEnumCreatedV3(x:P2EmployeeTypeEnumCreatedV3,v:Ref<P2EmployeeTypeEnumCreatedV3>)
	export function unRefP2EmployeeTypeEnumCreatedV3(v:Ref<P2EmployeeTypeEnumCreatedV3>):P2EmployeeTypeEnumCreatedV3
	export function emptyGetJobFamilyReq():GetJobFamilyReq
	export function emptyRefGetJobFamilyReq():Ref<GetJobFamilyReq>
	export function refOfGetJobFamilyReq(x:GetJobFamilyReq,v:Ref<GetJobFamilyReq>)
	export function unRefGetJobFamilyReq(v:Ref<GetJobFamilyReq>):GetJobFamilyReq
	export function emptyListDepartmentRespData():ListDepartmentRespData
	export function emptyRefListDepartmentRespData():Ref<ListDepartmentRespData>
	export function refOfListDepartmentRespData(x:ListDepartmentRespData,v:Ref<ListDepartmentRespData>)
	export function unRefListDepartmentRespData(v:Ref<ListDepartmentRespData>):ListDepartmentRespData
	export function emptyBatchUserRespData():BatchUserRespData
	export function emptyRefBatchUserRespData():Ref<BatchUserRespData>
	export function refOfBatchUserRespData(x:BatchUserRespData,v:Ref<BatchUserRespData>)
	export function unRefBatchUserRespData(v:Ref<BatchUserRespData>):BatchUserRespData
	export function emptyChildrenDepartmentRespData():ChildrenDepartmentRespData
	export function emptyRefChildrenDepartmentRespData():Ref<ChildrenDepartmentRespData>
	export function refOfChildrenDepartmentRespData(x:ChildrenDepartmentRespData,v:Ref<ChildrenDepartmentRespData>)
	export function unRefChildrenDepartmentRespData(v:Ref<ChildrenDepartmentRespData>):ChildrenDepartmentRespData
	export function emptyParentDepartmentIterator():ParentDepartmentIterator
	export function emptyRefParentDepartmentIterator():Ref<ParentDepartmentIterator>
	export function refOfParentDepartmentIterator(x:ParentDepartmentIterator,v:Ref<ParentDepartmentIterator>)
	export function unRefParentDepartmentIterator(v:Ref<ParentDepartmentIterator>):ParentDepartmentIterator
	export function emptyUpdateJobLevelRespData():UpdateJobLevelRespData
	export function emptyRefUpdateJobLevelRespData():Ref<UpdateJobLevelRespData>
	export function refOfUpdateJobLevelRespData(x:UpdateJobLevelRespData,v:Ref<UpdateJobLevelRespData>)
	export function unRefUpdateJobLevelRespData(v:Ref<UpdateJobLevelRespData>):UpdateJobLevelRespData
	export function emptyDeleteDepartmentReq():DeleteDepartmentReq
	export function emptyRefDeleteDepartmentReq():Ref<DeleteDepartmentReq>
	export function refOfDeleteDepartmentReq(x:DeleteDepartmentReq,v:Ref<DeleteDepartmentReq>)
	export function unRefDeleteDepartmentReq(v:Ref<DeleteDepartmentReq>):DeleteDepartmentReq
	export function emptyDeleteEmployeeTypeEnumReq():DeleteEmployeeTypeEnumReq
	export function emptyRefDeleteEmployeeTypeEnumReq():Ref<DeleteEmployeeTypeEnumReq>
	export function refOfDeleteEmployeeTypeEnumReq(x:DeleteEmployeeTypeEnumReq,v:Ref<DeleteEmployeeTypeEnumReq>)
	export function unRefDeleteEmployeeTypeEnumReq(v:Ref<DeleteEmployeeTypeEnumReq>):DeleteEmployeeTypeEnumReq
	export function emptyP2CustomAttrEventUpdatedV3():P2CustomAttrEventUpdatedV3
	export function emptyRefP2CustomAttrEventUpdatedV3():Ref<P2CustomAttrEventUpdatedV3>
	export function refOfP2CustomAttrEventUpdatedV3(x:P2CustomAttrEventUpdatedV3,v:Ref<P2CustomAttrEventUpdatedV3>)
	export function unRefP2CustomAttrEventUpdatedV3(v:Ref<P2CustomAttrEventUpdatedV3>):P2CustomAttrEventUpdatedV3
	export function emptyP2EmployeeTypeEnumUpdatedV3():P2EmployeeTypeEnumUpdatedV3
	export function emptyRefP2EmployeeTypeEnumUpdatedV3():Ref<P2EmployeeTypeEnumUpdatedV3>
	export function refOfP2EmployeeTypeEnumUpdatedV3(x:P2EmployeeTypeEnumUpdatedV3,v:Ref<P2EmployeeTypeEnumUpdatedV3>)
	export function unRefP2EmployeeTypeEnumUpdatedV3(v:Ref<P2EmployeeTypeEnumUpdatedV3>):P2EmployeeTypeEnumUpdatedV3
	export function emptySimplelistGroupMemberResp():SimplelistGroupMemberResp
	export function emptyRefSimplelistGroupMemberResp():Ref<SimplelistGroupMemberResp>
	export function refOfSimplelistGroupMemberResp(x:SimplelistGroupMemberResp,v:Ref<SimplelistGroupMemberResp>)
	export function unRefSimplelistGroupMemberResp(v:Ref<SimplelistGroupMemberResp>):SimplelistGroupMemberResp
	export function emptyUnbindDepartmentChatDepartmentReq():UnbindDepartmentChatDepartmentReq
	export function emptyRefUnbindDepartmentChatDepartmentReq():Ref<UnbindDepartmentChatDepartmentReq>
	export function refOfUnbindDepartmentChatDepartmentReq(x:UnbindDepartmentChatDepartmentReq,v:Ref<UnbindDepartmentChatDepartmentReq>)
	export function unRefUnbindDepartmentChatDepartmentReq(v:Ref<UnbindDepartmentChatDepartmentReq>):UnbindDepartmentChatDepartmentReq
	export function emptyListUserIterator():ListUserIterator
	export function emptyRefListUserIterator():Ref<ListUserIterator>
	export function refOfListUserIterator(x:ListUserIterator,v:Ref<ListUserIterator>)
	export function unRefListUserIterator(v:Ref<ListUserIterator>):ListUserIterator
	export function emptyBatchGetIdUserReq():BatchGetIdUserReq
	export function emptyRefBatchGetIdUserReq():Ref<BatchGetIdUserReq>
	export function refOfBatchGetIdUserReq(x:BatchGetIdUserReq,v:Ref<BatchGetIdUserReq>)
	export function unRefBatchGetIdUserReq(v:Ref<BatchGetIdUserReq>):BatchGetIdUserReq
	export function emptyEmployeeTypeEnum():EmployeeTypeEnum
	export function emptyRefEmployeeTypeEnum():Ref<EmployeeTypeEnum>
	export function refOfEmployeeTypeEnum(x:EmployeeTypeEnum,v:Ref<EmployeeTypeEnum>)
	export function unRefEmployeeTypeEnum(v:Ref<EmployeeTypeEnum>):EmployeeTypeEnum
	export function emptyJobTitle():JobTitle
	export function emptyRefJobTitle():Ref<JobTitle>
	export function refOfJobTitle(x:JobTitle,v:Ref<JobTitle>)
	export function unRefJobTitle(v:Ref<JobTitle>):JobTitle
	export function emptyMemberlist():Memberlist
	export function emptyRefMemberlist():Ref<Memberlist>
	export function refOfMemberlist(x:Memberlist,v:Ref<Memberlist>)
	export function unRefMemberlist(v:Ref<Memberlist>):Memberlist
	export function emptyCreateUnitReq():CreateUnitReq
	export function emptyRefCreateUnitReq():Ref<CreateUnitReq>
	export function refOfCreateUnitReq(x:CreateUnitReq,v:Ref<CreateUnitReq>)
	export function unRefCreateUnitReq(v:Ref<CreateUnitReq>):CreateUnitReq
	export function emptyP2UserCreatedV3():P2UserCreatedV3
	export function emptyRefP2UserCreatedV3():Ref<P2UserCreatedV3>
	export function refOfP2UserCreatedV3(x:P2UserCreatedV3,v:Ref<P2UserCreatedV3>)
	export function unRefP2UserCreatedV3(v:Ref<P2UserCreatedV3>):P2UserCreatedV3
	export function emptyPatchUserRespData():PatchUserRespData
	export function emptyRefPatchUserRespData():Ref<PatchUserRespData>
	export function refOfPatchUserRespData(x:PatchUserRespData,v:Ref<PatchUserRespData>)
	export function unRefPatchUserRespData(v:Ref<PatchUserRespData>):PatchUserRespData
	export function emptyDynamicGroupRule():DynamicGroupRule
	export function emptyRefDynamicGroupRule():Ref<DynamicGroupRule>
	export function refOfDynamicGroupRule(x:DynamicGroupRule,v:Ref<DynamicGroupRule>)
	export function unRefDynamicGroupRule(v:Ref<DynamicGroupRule>):DynamicGroupRule
	export function emptyUpdateEmployeeTypeEnumResp():UpdateEmployeeTypeEnumResp
	export function emptyRefUpdateEmployeeTypeEnumResp():Ref<UpdateEmployeeTypeEnumResp>
	export function refOfUpdateEmployeeTypeEnumResp(x:UpdateEmployeeTypeEnumResp,v:Ref<UpdateEmployeeTypeEnumResp>)
	export function unRefUpdateEmployeeTypeEnumResp(v:Ref<UpdateEmployeeTypeEnumResp>):UpdateEmployeeTypeEnumResp
	export function emptyUpdateJobFamilyReq():UpdateJobFamilyReq
	export function emptyRefUpdateJobFamilyReq():Ref<UpdateJobFamilyReq>
	export function refOfUpdateJobFamilyReq(x:UpdateJobFamilyReq,v:Ref<UpdateJobFamilyReq>)
	export function unRefUpdateJobFamilyReq(v:Ref<UpdateJobFamilyReq>):UpdateJobFamilyReq
	export function emptyUpdateUserIdUserReq():UpdateUserIdUserReq
	export function emptyRefUpdateUserIdUserReq():Ref<UpdateUserIdUserReq>
	export function refOfUpdateUserIdUserReq(x:UpdateUserIdUserReq,v:Ref<UpdateUserIdUserReq>)
	export function unRefUpdateUserIdUserReq(v:Ref<UpdateUserIdUserReq>):UpdateUserIdUserReq
	export function emptyListJobLevelResp():ListJobLevelResp
	export function emptyRefListJobLevelResp():Ref<ListJobLevelResp>
	export function refOfListJobLevelResp(x:ListJobLevelResp,v:Ref<ListJobLevelResp>)
	export function unRefListJobLevelResp(v:Ref<ListJobLevelResp>):ListJobLevelResp
	export function emptyListScopeReq():ListScopeReq
	export function emptyRefListScopeReq():Ref<ListScopeReq>
	export function refOfListScopeReq(x:ListScopeReq,v:Ref<ListScopeReq>)
	export function unRefListScopeReq(v:Ref<ListScopeReq>):ListScopeReq
	export function emptyP2EmployeeTypeEnumDeletedV3():P2EmployeeTypeEnumDeletedV3
	export function emptyRefP2EmployeeTypeEnumDeletedV3():Ref<P2EmployeeTypeEnumDeletedV3>
	export function refOfP2EmployeeTypeEnumDeletedV3(x:P2EmployeeTypeEnumDeletedV3,v:Ref<P2EmployeeTypeEnumDeletedV3>)
	export function unRefP2EmployeeTypeEnumDeletedV3(v:Ref<P2EmployeeTypeEnumDeletedV3>):P2EmployeeTypeEnumDeletedV3
	export function emptyDepartment():Department
	export function emptyRefDepartment():Ref<Department>
	export function refOfDepartment(x:Department,v:Ref<Department>)
	export function unRefDepartment(v:Ref<Department>):Department
	export function emptyListDepartmentIterator():ListDepartmentIterator
	export function emptyRefListDepartmentIterator():Ref<ListDepartmentIterator>
	export function refOfListDepartmentIterator(x:ListDepartmentIterator,v:Ref<ListDepartmentIterator>)
	export function unRefListDepartmentIterator(v:Ref<ListDepartmentIterator>):ListDepartmentIterator
	export function emptyUnbindDepartmentChatDepartmentReqBody():UnbindDepartmentChatDepartmentReqBody
	export function emptyRefUnbindDepartmentChatDepartmentReqBody():Ref<UnbindDepartmentChatDepartmentReqBody>
	export function refOfUnbindDepartmentChatDepartmentReqBody(x:UnbindDepartmentChatDepartmentReqBody,v:Ref<UnbindDepartmentChatDepartmentReqBody>)
	export function unRefUnbindDepartmentChatDepartmentReqBody(v:Ref<UnbindDepartmentChatDepartmentReqBody>):UnbindDepartmentChatDepartmentReqBody
	export function emptyBatchCreateFunctionalRoleMemberReqBody():BatchCreateFunctionalRoleMemberReqBody
	export function emptyRefBatchCreateFunctionalRoleMemberReqBody():Ref<BatchCreateFunctionalRoleMemberReqBody>
	export function refOfBatchCreateFunctionalRoleMemberReqBody(x:BatchCreateFunctionalRoleMemberReqBody,v:Ref<BatchCreateFunctionalRoleMemberReqBody>)
	export function unRefBatchCreateFunctionalRoleMemberReqBody(v:Ref<BatchCreateFunctionalRoleMemberReqBody>):BatchCreateFunctionalRoleMemberReqBody
	export function emptyBatchUserReq():BatchUserReq
	export function emptyRefBatchUserReq():Ref<BatchUserReq>
	export function refOfBatchUserReq(x:BatchUserReq,v:Ref<BatchUserReq>)
	export function unRefBatchUserReq(v:Ref<BatchUserReq>):BatchUserReq
	export function emptyGetJobTitleRespData():GetJobTitleRespData
	export function emptyRefGetJobTitleRespData():Ref<GetJobTitleRespData>
	export function refOfGetJobTitleRespData(x:GetJobTitleRespData,v:Ref<GetJobTitleRespData>)
	export function unRefGetJobTitleRespData(v:Ref<GetJobTitleRespData>):GetJobTitleRespData
	export function emptyP1DepartmentChangedV3():P1DepartmentChangedV3
	export function emptyRefP1DepartmentChangedV3():Ref<P1DepartmentChangedV3>
	export function refOfP1DepartmentChangedV3(x:P1DepartmentChangedV3,v:Ref<P1DepartmentChangedV3>)
	export function unRefP1DepartmentChangedV3(v:Ref<P1DepartmentChangedV3>):P1DepartmentChangedV3
	export function emptyGroup():Group
	export function emptyRefGroup():Ref<Group>
	export function refOfGroup(x:Group,v:Ref<Group>)
	export function unRefGroup(v:Ref<Group>):Group
	export function emptyP1UserChangedV3():P1UserChangedV3
	export function emptyRefP1UserChangedV3():Ref<P1UserChangedV3>
	export function refOfP1UserChangedV3(x:P1UserChangedV3,v:Ref<P1UserChangedV3>)
	export function unRefP1UserChangedV3(v:Ref<P1UserChangedV3>):P1UserChangedV3
	export function emptyPatchGroupReq():PatchGroupReq
	export function emptyRefPatchGroupReq():Ref<PatchGroupReq>
	export function refOfPatchGroupReq(x:PatchGroupReq,v:Ref<PatchGroupReq>)
	export function unRefPatchGroupReq(v:Ref<PatchGroupReq>):PatchGroupReq
	export function emptyBindDepartmentUnitReq():BindDepartmentUnitReq
	export function emptyRefBindDepartmentUnitReq():Ref<BindDepartmentUnitReq>
	export function refOfBindDepartmentUnitReq(x:BindDepartmentUnitReq,v:Ref<BindDepartmentUnitReq>)
	export function unRefBindDepartmentUnitReq(v:Ref<BindDepartmentUnitReq>):BindDepartmentUnitReq
	export function emptyFindByDepartmentUserRespData():FindByDepartmentUserRespData
	export function emptyRefFindByDepartmentUserRespData():Ref<FindByDepartmentUserRespData>
	export function refOfFindByDepartmentUserRespData(x:FindByDepartmentUserRespData,v:Ref<FindByDepartmentUserRespData>)
	export function unRefFindByDepartmentUserRespData(v:Ref<FindByDepartmentUserRespData>):FindByDepartmentUserRespData
	export function emptyP2ScopeUpdatedV3():P2ScopeUpdatedV3
	export function emptyRefP2ScopeUpdatedV3():Ref<P2ScopeUpdatedV3>
	export function refOfP2ScopeUpdatedV3(x:P2ScopeUpdatedV3,v:Ref<P2ScopeUpdatedV3>)
	export function unRefP2ScopeUpdatedV3(v:Ref<P2ScopeUpdatedV3>):P2ScopeUpdatedV3
	export function emptyUnbindDepartmentUnitResp():UnbindDepartmentUnitResp
	export function emptyRefUnbindDepartmentUnitResp():Ref<UnbindDepartmentUnitResp>
	export function refOfUnbindDepartmentUnitResp(x:UnbindDepartmentUnitResp,v:Ref<UnbindDepartmentUnitResp>)
	export function unRefUnbindDepartmentUnitResp(v:Ref<UnbindDepartmentUnitResp>):UnbindDepartmentUnitResp
	export function emptyUnit():Unit
	export function emptyRefUnit():Ref<Unit>
	export function refOfUnit(x:Unit,v:Ref<Unit>)
	export function unRefUnit(v:Ref<Unit>):Unit
	export function emptyUpdateDepartmentReq():UpdateDepartmentReq
	export function emptyRefUpdateDepartmentReq():Ref<UpdateDepartmentReq>
	export function refOfUpdateDepartmentReq(x:UpdateDepartmentReq,v:Ref<UpdateDepartmentReq>)
	export function unRefUpdateDepartmentReq(v:Ref<UpdateDepartmentReq>):UpdateDepartmentReq
	export function emptyBatchCreateFunctionalRoleMemberReq():BatchCreateFunctionalRoleMemberReq
	export function emptyRefBatchCreateFunctionalRoleMemberReq():Ref<BatchCreateFunctionalRoleMemberReq>
	export function refOfBatchCreateFunctionalRoleMemberReq(x:BatchCreateFunctionalRoleMemberReq,v:Ref<BatchCreateFunctionalRoleMemberReq>)
	export function unRefBatchCreateFunctionalRoleMemberReq(v:Ref<BatchCreateFunctionalRoleMemberReq>):BatchCreateFunctionalRoleMemberReq
	export function emptyCreateJobFamilyResp():CreateJobFamilyResp
	export function emptyRefCreateJobFamilyResp():Ref<CreateJobFamilyResp>
	export function refOfCreateJobFamilyResp(x:CreateJobFamilyResp,v:Ref<CreateJobFamilyResp>)
	export function unRefCreateJobFamilyResp(v:Ref<CreateJobFamilyResp>):CreateJobFamilyResp
	export function emptyFunctionalRole():FunctionalRole
	export function emptyRefFunctionalRole():Ref<FunctionalRole>
	export function refOfFunctionalRole(x:FunctionalRole,v:Ref<FunctionalRole>)
	export function unRefFunctionalRole(v:Ref<FunctionalRole>):FunctionalRole
	export function emptyBatchGetIdUserReqBody():BatchGetIdUserReqBody
	export function emptyRefBatchGetIdUserReqBody():Ref<BatchGetIdUserReqBody>
	export function refOfBatchGetIdUserReqBody(x:BatchGetIdUserReqBody,v:Ref<BatchGetIdUserReqBody>)
	export function unRefBatchGetIdUserReqBody(v:Ref<BatchGetIdUserReqBody>):BatchGetIdUserReqBody
	export function emptyConfidentialMember():ConfidentialMember
	export function emptyRefConfidentialMember():Ref<ConfidentialMember>
	export function refOfConfidentialMember(x:ConfidentialMember,v:Ref<ConfidentialMember>)
	export function unRefConfidentialMember(v:Ref<ConfidentialMember>):ConfidentialMember
	export function emptyUpdateFunctionalRoleReq():UpdateFunctionalRoleReq
	export function emptyRefUpdateFunctionalRoleReq():Ref<UpdateFunctionalRoleReq>
	export function refOfUpdateFunctionalRoleReq(x:UpdateFunctionalRoleReq,v:Ref<UpdateFunctionalRoleReq>)
	export function unRefUpdateFunctionalRoleReq(v:Ref<UpdateFunctionalRoleReq>):UpdateFunctionalRoleReq
	export function emptyBatchDeleteFunctionalRoleMemberReqBody():BatchDeleteFunctionalRoleMemberReqBody
	export function emptyRefBatchDeleteFunctionalRoleMemberReqBody():Ref<BatchDeleteFunctionalRoleMemberReqBody>
	export function refOfBatchDeleteFunctionalRoleMemberReqBody(x:BatchDeleteFunctionalRoleMemberReqBody,v:Ref<BatchDeleteFunctionalRoleMemberReqBody>)
	export function unRefBatchDeleteFunctionalRoleMemberReqBody(v:Ref<BatchDeleteFunctionalRoleMemberReqBody>):BatchDeleteFunctionalRoleMemberReqBody
	export function emptyDeleteJobFamilyResp():DeleteJobFamilyResp
	export function emptyRefDeleteJobFamilyResp():Ref<DeleteJobFamilyResp>
	export function refOfDeleteJobFamilyResp(x:DeleteJobFamilyResp,v:Ref<DeleteJobFamilyResp>)
	export function unRefDeleteJobFamilyResp(v:Ref<DeleteJobFamilyResp>):DeleteJobFamilyResp
	export function emptyP2DepartmentDeletedV3():P2DepartmentDeletedV3
	export function emptyRefP2DepartmentDeletedV3():Ref<P2DepartmentDeletedV3>
	export function refOfP2DepartmentDeletedV3(x:P2DepartmentDeletedV3,v:Ref<P2DepartmentDeletedV3>)
	export function unRefP2DepartmentDeletedV3(v:Ref<P2DepartmentDeletedV3>):P2DepartmentDeletedV3
	export function emptyShareDepartment():ShareDepartment
	export function emptyRefShareDepartment():Ref<ShareDepartment>
	export function refOfShareDepartment(x:ShareDepartment,v:Ref<ShareDepartment>)
	export function unRefShareDepartment(v:Ref<ShareDepartment>):ShareDepartment
	export function emptyDeleteUnitResp():DeleteUnitResp
	export function emptyRefDeleteUnitResp():Ref<DeleteUnitResp>
	export function refOfDeleteUnitResp(x:DeleteUnitResp,v:Ref<DeleteUnitResp>)
	export function unRefDeleteUnitResp(v:Ref<DeleteUnitResp>):DeleteUnitResp
	export function emptyPatchDepartmentReq():PatchDepartmentReq
	export function emptyRefPatchDepartmentReq():Ref<PatchDepartmentReq>
	export function refOfPatchDepartmentReq(x:PatchDepartmentReq,v:Ref<PatchDepartmentReq>)
	export function unRefPatchDepartmentReq(v:Ref<PatchDepartmentReq>):PatchDepartmentReq
	export function emptyDeleteJobLevelReq():DeleteJobLevelReq
	export function emptyRefDeleteJobLevelReq():Ref<DeleteJobLevelReq>
	export function refOfDeleteJobLevelReq(x:DeleteJobLevelReq,v:Ref<DeleteJobLevelReq>)
	export function unRefDeleteJobLevelReq(v:Ref<DeleteJobLevelReq>):DeleteJobLevelReq
	export function emptyP2EmployeeTypeEnumUpdatedV3Data():P2EmployeeTypeEnumUpdatedV3Data
	export function emptyRefP2EmployeeTypeEnumUpdatedV3Data():Ref<P2EmployeeTypeEnumUpdatedV3Data>
	export function refOfP2EmployeeTypeEnumUpdatedV3Data(x:P2EmployeeTypeEnumUpdatedV3Data,v:Ref<P2EmployeeTypeEnumUpdatedV3Data>)
	export function unRefP2EmployeeTypeEnumUpdatedV3Data(v:Ref<P2EmployeeTypeEnumUpdatedV3Data>):P2EmployeeTypeEnumUpdatedV3Data
	export function emptyProductI18nName():ProductI18nName
	export function emptyRefProductI18nName():Ref<ProductI18nName>
	export function refOfProductI18nName(x:ProductI18nName,v:Ref<ProductI18nName>)
	export function unRefProductI18nName(v:Ref<ProductI18nName>):ProductI18nName
	export function emptyDepartmentEvent():DepartmentEvent
	export function emptyRefDepartmentEvent():Ref<DepartmentEvent>
	export function refOfDepartmentEvent(x:DepartmentEvent,v:Ref<DepartmentEvent>)
	export function unRefDepartmentEvent(v:Ref<DepartmentEvent>):DepartmentEvent
	export function emptyDepartmentLeader():DepartmentLeader
	export function emptyRefDepartmentLeader():Ref<DepartmentLeader>
	export function refOfDepartmentLeader(x:DepartmentLeader,v:Ref<DepartmentLeader>)
	export function unRefDepartmentLeader(v:Ref<DepartmentLeader>):DepartmentLeader
	export function emptySearchDepartmentRespData():SearchDepartmentRespData
	export function emptyRefSearchDepartmentRespData():Ref<SearchDepartmentRespData>
	export function refOfSearchDepartmentRespData(x:SearchDepartmentRespData,v:Ref<SearchDepartmentRespData>)
	export function unRefSearchDepartmentRespData(v:Ref<SearchDepartmentRespData>):SearchDepartmentRespData
	export function emptyUpdateEmployeeTypeEnumReq():UpdateEmployeeTypeEnumReq
	export function emptyRefUpdateEmployeeTypeEnumReq():Ref<UpdateEmployeeTypeEnumReq>
	export function refOfUpdateEmployeeTypeEnumReq(x:UpdateEmployeeTypeEnumReq,v:Ref<UpdateEmployeeTypeEnumReq>)
	export function unRefUpdateEmployeeTypeEnumReq(v:Ref<UpdateEmployeeTypeEnumReq>):UpdateEmployeeTypeEnumReq
	export function emptyUpdateUserRespData():UpdateUserRespData
	export function emptyRefUpdateUserRespData():Ref<UpdateUserRespData>
	export function refOfUpdateUserRespData(x:UpdateUserRespData,v:Ref<UpdateUserRespData>)
	export function unRefUpdateUserRespData(v:Ref<UpdateUserRespData>):UpdateUserRespData
	export function emptyUserGroup():UserGroup
	export function emptyRefUserGroup():Ref<UserGroup>
	export function refOfUserGroup(x:UserGroup,v:Ref<UserGroup>)
	export function unRefUserGroup(v:Ref<UserGroup>):UserGroup
	export function emptyBatchDeleteFunctionalRoleMemberReq():BatchDeleteFunctionalRoleMemberReq
	export function emptyRefBatchDeleteFunctionalRoleMemberReq():Ref<BatchDeleteFunctionalRoleMemberReq>
	export function refOfBatchDeleteFunctionalRoleMemberReq(x:BatchDeleteFunctionalRoleMemberReq,v:Ref<BatchDeleteFunctionalRoleMemberReq>)
	export function unRefBatchDeleteFunctionalRoleMemberReq(v:Ref<BatchDeleteFunctionalRoleMemberReq>):BatchDeleteFunctionalRoleMemberReq
	export function emptyBatchGetIdUserRespData():BatchGetIdUserRespData
	export function emptyRefBatchGetIdUserRespData():Ref<BatchGetIdUserRespData>
	export function refOfBatchGetIdUserRespData(x:BatchGetIdUserRespData,v:Ref<BatchGetIdUserRespData>)
	export function unRefBatchGetIdUserRespData(v:Ref<BatchGetIdUserRespData>):BatchGetIdUserRespData
	export function emptyAvatarInfo():AvatarInfo
	export function emptyRefAvatarInfo():Ref<AvatarInfo>
	export function refOfAvatarInfo(x:AvatarInfo,v:Ref<AvatarInfo>)
	export function unRefAvatarInfo(v:Ref<AvatarInfo>):AvatarInfo
	export function emptyP1ContactScopeChangedV3Data():P1ContactScopeChangedV3Data
	export function emptyRefP1ContactScopeChangedV3Data():Ref<P1ContactScopeChangedV3Data>
	export function refOfP1ContactScopeChangedV3Data(x:P1ContactScopeChangedV3Data,v:Ref<P1ContactScopeChangedV3Data>)
	export function unRefP1ContactScopeChangedV3Data(v:Ref<P1ContactScopeChangedV3Data>):P1ContactScopeChangedV3Data
	export function emptyGetWorkCityReq():GetWorkCityReq
	export function emptyRefGetWorkCityReq():Ref<GetWorkCityReq>
	export function refOfGetWorkCityReq(x:GetWorkCityReq,v:Ref<GetWorkCityReq>)
	export function unRefGetWorkCityReq(v:Ref<GetWorkCityReq>):GetWorkCityReq
	export function emptyP2UserDeletedV3():P2UserDeletedV3
	export function emptyRefP2UserDeletedV3():Ref<P2UserDeletedV3>
	export function refOfP2UserDeletedV3(x:P2UserDeletedV3,v:Ref<P2UserDeletedV3>)
	export function unRefP2UserDeletedV3(v:Ref<P2UserDeletedV3>):P2UserDeletedV3
	export function emptyPatchUserResp():PatchUserResp
	export function emptyRefPatchUserResp():Ref<PatchUserResp>
	export function refOfPatchUserResp(x:PatchUserResp,v:Ref<PatchUserResp>)
	export function unRefPatchUserResp(v:Ref<PatchUserResp>):PatchUserResp
	export function emptyCreateDepartmentResp():CreateDepartmentResp
	export function emptyRefCreateDepartmentResp():Ref<CreateDepartmentResp>
	export function refOfCreateDepartmentResp(x:CreateDepartmentResp,v:Ref<CreateDepartmentResp>)
	export function unRefCreateDepartmentResp(v:Ref<CreateDepartmentResp>):CreateDepartmentResp
	export function emptyDeleteJobFamilyReq():DeleteJobFamilyReq
	export function emptyRefDeleteJobFamilyReq():Ref<DeleteJobFamilyReq>
	export function refOfDeleteJobFamilyReq(x:DeleteJobFamilyReq,v:Ref<DeleteJobFamilyReq>)
	export function unRefDeleteJobFamilyReq(v:Ref<DeleteJobFamilyReq>):DeleteJobFamilyReq
	export function emptyRemoveGroupMemberResp():RemoveGroupMemberResp
	export function emptyRefRemoveGroupMemberResp():Ref<RemoveGroupMemberResp>
	export function refOfRemoveGroupMemberResp(x:RemoveGroupMemberResp,v:Ref<RemoveGroupMemberResp>)
	export function unRefRemoveGroupMemberResp(v:Ref<RemoveGroupMemberResp>):RemoveGroupMemberResp
	export function emptyDepartmentStatus():DepartmentStatus
	export function emptyRefDepartmentStatus():Ref<DepartmentStatus>
	export function refOfDepartmentStatus(x:DepartmentStatus,v:Ref<DepartmentStatus>)
	export function unRefDepartmentStatus(v:Ref<DepartmentStatus>):DepartmentStatus
	export function emptyListJobFamilyReq():ListJobFamilyReq
	export function emptyRefListJobFamilyReq():Ref<ListJobFamilyReq>
	export function refOfListJobFamilyReq(x:ListJobFamilyReq,v:Ref<ListJobFamilyReq>)
	export function unRefListJobFamilyReq(v:Ref<ListJobFamilyReq>):ListJobFamilyReq
	export function emptyP2EmployeeTypeEnumActivedV3():P2EmployeeTypeEnumActivedV3
	export function emptyRefP2EmployeeTypeEnumActivedV3():Ref<P2EmployeeTypeEnumActivedV3>
	export function refOfP2EmployeeTypeEnumActivedV3(x:P2EmployeeTypeEnumActivedV3,v:Ref<P2EmployeeTypeEnumActivedV3>)
	export function unRefP2EmployeeTypeEnumActivedV3(v:Ref<P2EmployeeTypeEnumActivedV3>):P2EmployeeTypeEnumActivedV3
	export function emptyP2DepartmentCreatedV3Data():P2DepartmentCreatedV3Data
	export function emptyRefP2DepartmentCreatedV3Data():Ref<P2DepartmentCreatedV3Data>
	export function refOfP2DepartmentCreatedV3Data(x:P2DepartmentCreatedV3Data,v:Ref<P2DepartmentCreatedV3Data>)
	export function unRefP2DepartmentCreatedV3Data(v:Ref<P2DepartmentCreatedV3Data>):P2DepartmentCreatedV3Data
	export function emptyAddGroupMemberReq():AddGroupMemberReq
	export function emptyRefAddGroupMemberReq():Ref<AddGroupMemberReq>
	export function refOfAddGroupMemberReq(x:AddGroupMemberReq,v:Ref<AddGroupMemberReq>)
	export function unRefAddGroupMemberReq(v:Ref<AddGroupMemberReq>):AddGroupMemberReq
	export function emptyDepartmentPath():DepartmentPath
	export function emptyRefDepartmentPath():Ref<DepartmentPath>
	export function refOfDepartmentPath(x:DepartmentPath,v:Ref<DepartmentPath>)
	export function unRefDepartmentPath(v:Ref<DepartmentPath>):DepartmentPath
	export function emptyListCustomAttrIterator():ListCustomAttrIterator
	export function emptyRefListCustomAttrIterator():Ref<ListCustomAttrIterator>
	export function refOfListCustomAttrIterator(x:ListCustomAttrIterator,v:Ref<ListCustomAttrIterator>)
	export function unRefListCustomAttrIterator(v:Ref<ListCustomAttrIterator>):ListCustomAttrIterator
	export function emptyCreateEmployeeTypeEnumResp():CreateEmployeeTypeEnumResp
	export function emptyRefCreateEmployeeTypeEnumResp():Ref<CreateEmployeeTypeEnumResp>
	export function refOfCreateEmployeeTypeEnumResp(x:CreateEmployeeTypeEnumResp,v:Ref<CreateEmployeeTypeEnumResp>)
	export function unRefCreateEmployeeTypeEnumResp(v:Ref<CreateEmployeeTypeEnumResp>):CreateEmployeeTypeEnumResp
	export function emptyListCustomAttrResp():ListCustomAttrResp
	export function emptyRefListCustomAttrResp():Ref<ListCustomAttrResp>
	export function refOfListCustomAttrResp(x:ListCustomAttrResp,v:Ref<ListCustomAttrResp>)
	export function unRefListCustomAttrResp(v:Ref<ListCustomAttrResp>):ListCustomAttrResp
	export function emptyUserI18nName():UserI18nName
	export function emptyRefUserI18nName():Ref<UserI18nName>
	export function refOfUserI18nName(x:UserI18nName,v:Ref<UserI18nName>)
	export function unRefUserI18nName(v:Ref<UserI18nName>):UserI18nName
	export function emptyDeleteFunctionalRoleReq():DeleteFunctionalRoleReq
	export function emptyRefDeleteFunctionalRoleReq():Ref<DeleteFunctionalRoleReq>
	export function refOfDeleteFunctionalRoleReq(x:DeleteFunctionalRoleReq,v:Ref<DeleteFunctionalRoleReq>)
	export function unRefDeleteFunctionalRoleReq(v:Ref<DeleteFunctionalRoleReq>):DeleteFunctionalRoleReq
	export function emptyMemberBelongGroupReq():MemberBelongGroupReq
	export function emptyRefMemberBelongGroupReq():Ref<MemberBelongGroupReq>
	export function refOfMemberBelongGroupReq(x:MemberBelongGroupReq,v:Ref<MemberBelongGroupReq>)
	export function unRefMemberBelongGroupReq(v:Ref<MemberBelongGroupReq>):MemberBelongGroupReq
	export function emptyBatchDepartmentResp():BatchDepartmentResp
	export function emptyRefBatchDepartmentResp():Ref<BatchDepartmentResp>
	export function refOfBatchDepartmentResp(x:BatchDepartmentResp,v:Ref<BatchDepartmentResp>)
	export function unRefBatchDepartmentResp(v:Ref<BatchDepartmentResp>):BatchDepartmentResp
	export function emptyListEmployeeTypeEnumIterator():ListEmployeeTypeEnumIterator
	export function emptyRefListEmployeeTypeEnumIterator():Ref<ListEmployeeTypeEnumIterator>
	export function refOfListEmployeeTypeEnumIterator(x:ListEmployeeTypeEnumIterator,v:Ref<ListEmployeeTypeEnumIterator>)
	export function unRefListEmployeeTypeEnumIterator(v:Ref<ListEmployeeTypeEnumIterator>):ListEmployeeTypeEnumIterator
	export function emptyListJobFamilyIterator():ListJobFamilyIterator
	export function emptyRefListJobFamilyIterator():Ref<ListJobFamilyIterator>
	export function refOfListJobFamilyIterator(x:ListJobFamilyIterator,v:Ref<ListJobFamilyIterator>)
	export function unRefListJobFamilyIterator(v:Ref<ListJobFamilyIterator>):ListJobFamilyIterator
	export function emptyCreateFunctionalRoleRespData():CreateFunctionalRoleRespData
	export function emptyRefCreateFunctionalRoleRespData():Ref<CreateFunctionalRoleRespData>
	export function refOfCreateFunctionalRoleRespData(x:CreateFunctionalRoleRespData,v:Ref<CreateFunctionalRoleRespData>)
	export function unRefCreateFunctionalRoleRespData(v:Ref<CreateFunctionalRoleRespData>):CreateFunctionalRoleRespData
	export function emptyMemberResult():MemberResult
	export function emptyRefMemberResult():Ref<MemberResult>
	export function refOfMemberResult(x:MemberResult,v:Ref<MemberResult>)
	export function unRefMemberResult(v:Ref<MemberResult>):MemberResult
	export function emptyListDepartmentResp():ListDepartmentResp
	export function emptyRefListDepartmentResp():Ref<ListDepartmentResp>
	export function refOfListDepartmentResp(x:ListDepartmentResp,v:Ref<ListDepartmentResp>)
	export function unRefListDepartmentResp(v:Ref<ListDepartmentResp>):ListDepartmentResp
	export function emptyDeleteFunctionalRoleResp():DeleteFunctionalRoleResp
	export function emptyRefDeleteFunctionalRoleResp():Ref<DeleteFunctionalRoleResp>
	export function refOfDeleteFunctionalRoleResp(x:DeleteFunctionalRoleResp,v:Ref<DeleteFunctionalRoleResp>)
	export function unRefDeleteFunctionalRoleResp(v:Ref<DeleteFunctionalRoleResp>):DeleteFunctionalRoleResp
	export function emptyOldDepartmentObject():OldDepartmentObject
	export function emptyRefOldDepartmentObject():Ref<OldDepartmentObject>
	export function refOfOldDepartmentObject(x:OldDepartmentObject,v:Ref<OldDepartmentObject>)
	export function unRefOldDepartmentObject(v:Ref<OldDepartmentObject>):OldDepartmentObject
	export function emptyCustomAttrEvent():CustomAttrEvent
	export function emptyRefCustomAttrEvent():Ref<CustomAttrEvent>
	export function refOfCustomAttrEvent(x:CustomAttrEvent,v:Ref<CustomAttrEvent>)
	export function unRefCustomAttrEvent(v:Ref<CustomAttrEvent>):CustomAttrEvent
	export function emptyUpdateUserIdUserReqBody():UpdateUserIdUserReqBody
	export function emptyRefUpdateUserIdUserReqBody():Ref<UpdateUserIdUserReqBody>
	export function refOfUpdateUserIdUserReqBody(x:UpdateUserIdUserReqBody,v:Ref<UpdateUserIdUserReqBody>)
	export function unRefUpdateUserIdUserReqBody(v:Ref<UpdateUserIdUserReqBody>):UpdateUserIdUserReqBody
	export function emptyFindByDepartmentUserIterator():FindByDepartmentUserIterator
	export function emptyRefFindByDepartmentUserIterator():Ref<FindByDepartmentUserIterator>
	export function refOfFindByDepartmentUserIterator(x:FindByDepartmentUserIterator,v:Ref<FindByDepartmentUserIterator>)
	export function unRefFindByDepartmentUserIterator(v:Ref<FindByDepartmentUserIterator>):FindByDepartmentUserIterator
	export function emptyGetJobTitleResp():GetJobTitleResp
	export function emptyRefGetJobTitleResp():Ref<GetJobTitleResp>
	export function refOfGetJobTitleResp(x:GetJobTitleResp,v:Ref<GetJobTitleResp>)
	export function unRefGetJobTitleResp(v:Ref<GetJobTitleResp>):GetJobTitleResp
	export function emptyP1ContactScopeChangedV3():P1ContactScopeChangedV3
	export function emptyRefP1ContactScopeChangedV3():Ref<P1ContactScopeChangedV3>
	export function refOfP1ContactScopeChangedV3(x:P1ContactScopeChangedV3,v:Ref<P1ContactScopeChangedV3>)
	export function unRefP1ContactScopeChangedV3(v:Ref<P1ContactScopeChangedV3>):P1ContactScopeChangedV3
	export function emptyP1DepartmentChangedV3Data():P1DepartmentChangedV3Data
	export function emptyRefP1DepartmentChangedV3Data():Ref<P1DepartmentChangedV3Data>
	export function refOfP1DepartmentChangedV3Data(x:P1DepartmentChangedV3Data,v:Ref<P1DepartmentChangedV3Data>)
	export function unRefP1DepartmentChangedV3Data(v:Ref<P1DepartmentChangedV3Data>):P1DepartmentChangedV3Data
	export function emptyDepartmentDetail():DepartmentDetail
	export function emptyRefDepartmentDetail():Ref<DepartmentDetail>
	export function refOfDepartmentDetail(x:DepartmentDetail,v:Ref<DepartmentDetail>)
	export function unRefDepartmentDetail(v:Ref<DepartmentDetail>):DepartmentDetail
	export function emptyListJobLevelIterator():ListJobLevelIterator
	export function emptyRefListJobLevelIterator():Ref<ListJobLevelIterator>
	export function refOfListJobLevelIterator(x:ListJobLevelIterator,v:Ref<ListJobLevelIterator>)
	export function unRefListJobLevelIterator(v:Ref<ListJobLevelIterator>):ListJobLevelIterator
	export function emptyChildrenDepartmentResp():ChildrenDepartmentResp
	export function emptyRefChildrenDepartmentResp():Ref<ChildrenDepartmentResp>
	export function refOfChildrenDepartmentResp(x:ChildrenDepartmentResp,v:Ref<ChildrenDepartmentResp>)
	export function unRefChildrenDepartmentResp(v:Ref<ChildrenDepartmentResp>):ChildrenDepartmentResp
	export function emptyCustomAttrGenericUser():CustomAttrGenericUser
	export function emptyRefCustomAttrGenericUser():Ref<CustomAttrGenericUser>
	export function refOfCustomAttrGenericUser(x:CustomAttrGenericUser,v:Ref<CustomAttrGenericUser>)
	export function unRefCustomAttrGenericUser(v:Ref<CustomAttrGenericUser>):CustomAttrGenericUser
	export function emptyListScopeResp():ListScopeResp
	export function emptyRefListScopeResp():Ref<ListScopeResp>
	export function refOfListScopeResp(x:ListScopeResp,v:Ref<ListScopeResp>)
	export function unRefListScopeResp(v:Ref<ListScopeResp>):ListScopeResp
	export function emptyListUnitRespData():ListUnitRespData
	export function emptyRefListUnitRespData():Ref<ListUnitRespData>
	export function refOfListUnitRespData(x:ListUnitRespData,v:Ref<ListUnitRespData>)
	export function unRefListUnitRespData(v:Ref<ListUnitRespData>):ListUnitRespData
	export function emptyScopesFunctionalRoleMemberResp():ScopesFunctionalRoleMemberResp
	export function emptyRefScopesFunctionalRoleMemberResp():Ref<ScopesFunctionalRoleMemberResp>
	export function refOfScopesFunctionalRoleMemberResp(x:ScopesFunctionalRoleMemberResp,v:Ref<ScopesFunctionalRoleMemberResp>)
	export function unRefScopesFunctionalRoleMemberResp(v:Ref<ScopesFunctionalRoleMemberResp>):ScopesFunctionalRoleMemberResp
	export function emptyBatchAddGroupMemberReqBody():BatchAddGroupMemberReqBody
	export function emptyRefBatchAddGroupMemberReqBody():Ref<BatchAddGroupMemberReqBody>
	export function refOfBatchAddGroupMemberReqBody(x:BatchAddGroupMemberReqBody,v:Ref<BatchAddGroupMemberReqBody>)
	export function unRefBatchAddGroupMemberReqBody(v:Ref<BatchAddGroupMemberReqBody>):BatchAddGroupMemberReqBody
	export function emptyCustomAttrOptions():CustomAttrOptions
	export function emptyRefCustomAttrOptions():Ref<CustomAttrOptions>
	export function refOfCustomAttrOptions(x:CustomAttrOptions,v:Ref<CustomAttrOptions>)
	export function unRefCustomAttrOptions(v:Ref<CustomAttrOptions>):CustomAttrOptions
	export function emptyP2EmployeeTypeEnumDeactivatedV3Data():P2EmployeeTypeEnumDeactivatedV3Data
	export function emptyRefP2EmployeeTypeEnumDeactivatedV3Data():Ref<P2EmployeeTypeEnumDeactivatedV3Data>
	export function refOfP2EmployeeTypeEnumDeactivatedV3Data(x:P2EmployeeTypeEnumDeactivatedV3Data,v:Ref<P2EmployeeTypeEnumDeactivatedV3Data>)
	export function unRefP2EmployeeTypeEnumDeactivatedV3Data(v:Ref<P2EmployeeTypeEnumDeactivatedV3Data>):P2EmployeeTypeEnumDeactivatedV3Data
	export function emptyUnbindDepartmentUnitReqBody():UnbindDepartmentUnitReqBody
	export function emptyRefUnbindDepartmentUnitReqBody():Ref<UnbindDepartmentUnitReqBody>
	export function refOfUnbindDepartmentUnitReqBody(x:UnbindDepartmentUnitReqBody,v:Ref<UnbindDepartmentUnitReqBody>)
	export function unRefUnbindDepartmentUnitReqBody(v:Ref<UnbindDepartmentUnitReqBody>):UnbindDepartmentUnitReqBody
	export function emptyListEmployeeTypeEnumResp():ListEmployeeTypeEnumResp
	export function emptyRefListEmployeeTypeEnumResp():Ref<ListEmployeeTypeEnumResp>
	export function refOfListEmployeeTypeEnumResp(x:ListEmployeeTypeEnumResp,v:Ref<ListEmployeeTypeEnumResp>)
	export function unRefListEmployeeTypeEnumResp(v:Ref<ListEmployeeTypeEnumResp>):ListEmployeeTypeEnumResp
	export function emptyParentDepartmentRespData():ParentDepartmentRespData
	export function emptyRefParentDepartmentRespData():Ref<ParentDepartmentRespData>
	export function refOfParentDepartmentRespData(x:ParentDepartmentRespData,v:Ref<ParentDepartmentRespData>)
	export function unRefParentDepartmentRespData(v:Ref<ParentDepartmentRespData>):ParentDepartmentRespData
	export function emptyUpdateJobFamilyRespData():UpdateJobFamilyRespData
	export function emptyRefUpdateJobFamilyRespData():Ref<UpdateJobFamilyRespData>
	export function refOfUpdateJobFamilyRespData(x:UpdateJobFamilyRespData,v:Ref<UpdateJobFamilyRespData>)
	export function unRefUpdateJobFamilyRespData(v:Ref<UpdateJobFamilyRespData>):UpdateJobFamilyRespData
	export function emptyBatchRemoveGroupMemberReq():BatchRemoveGroupMemberReq
	export function emptyRefBatchRemoveGroupMemberReq():Ref<BatchRemoveGroupMemberReq>
	export function refOfBatchRemoveGroupMemberReq(x:BatchRemoveGroupMemberReq,v:Ref<BatchRemoveGroupMemberReq>)
	export function unRefBatchRemoveGroupMemberReq(v:Ref<BatchRemoveGroupMemberReq>):BatchRemoveGroupMemberReq
	export function emptyCreateFunctionalRoleResp():CreateFunctionalRoleResp
	export function emptyRefCreateFunctionalRoleResp():Ref<CreateFunctionalRoleResp>
	export function refOfCreateFunctionalRoleResp(x:CreateFunctionalRoleResp,v:Ref<CreateFunctionalRoleResp>)
	export function unRefCreateFunctionalRoleResp(v:Ref<CreateFunctionalRoleResp>):CreateFunctionalRoleResp
	export function emptyCreateUserRespData():CreateUserRespData
	export function emptyRefCreateUserRespData():Ref<CreateUserRespData>
	export function refOfCreateUserRespData(x:CreateUserRespData,v:Ref<CreateUserRespData>)
	export function unRefCreateUserRespData(v:Ref<CreateUserRespData>):CreateUserRespData
	export function emptyListWorkCityIterator():ListWorkCityIterator
	export function emptyRefListWorkCityIterator():Ref<ListWorkCityIterator>
	export function refOfListWorkCityIterator(x:ListWorkCityIterator,v:Ref<ListWorkCityIterator>)
	export function unRefListWorkCityIterator(v:Ref<ListWorkCityIterator>):ListWorkCityIterator
	export function emptyP2DepartmentCreatedV3():P2DepartmentCreatedV3
	export function emptyRefP2DepartmentCreatedV3():Ref<P2DepartmentCreatedV3>
	export function refOfP2DepartmentCreatedV3(x:P2DepartmentCreatedV3,v:Ref<P2DepartmentCreatedV3>)
	export function unRefP2DepartmentCreatedV3(v:Ref<P2DepartmentCreatedV3>):P2DepartmentCreatedV3
	export function emptySimplelistGroupIterator():SimplelistGroupIterator
	export function emptyRefSimplelistGroupIterator():Ref<SimplelistGroupIterator>
	export function refOfSimplelistGroupIterator(x:SimplelistGroupIterator,v:Ref<SimplelistGroupIterator>)
	export function unRefSimplelistGroupIterator(v:Ref<SimplelistGroupIterator>):SimplelistGroupIterator
	export function emptyChildrenDepartmentIterator():ChildrenDepartmentIterator
	export function emptyRefChildrenDepartmentIterator():Ref<ChildrenDepartmentIterator>
	export function refOfChildrenDepartmentIterator(x:ChildrenDepartmentIterator,v:Ref<ChildrenDepartmentIterator>)
	export function unRefChildrenDepartmentIterator(v:Ref<ChildrenDepartmentIterator>):ChildrenDepartmentIterator
	export function emptyDepartmentPathName():DepartmentPathName
	export function emptyRefDepartmentPathName():Ref<DepartmentPathName>
	export function refOfDepartmentPathName(x:DepartmentPathName,v:Ref<DepartmentPathName>)
	export function unRefDepartmentPathName(v:Ref<DepartmentPathName>):DepartmentPathName
	export function emptyListJobFamilyRespData():ListJobFamilyRespData
	export function emptyRefListJobFamilyRespData():Ref<ListJobFamilyRespData>
	export function refOfListJobFamilyRespData(x:ListJobFamilyRespData,v:Ref<ListJobFamilyRespData>)
	export function unRefListJobFamilyRespData(v:Ref<ListJobFamilyRespData>):ListJobFamilyRespData
	export function emptyRemoveGroupMemberReqBody():RemoveGroupMemberReqBody
	export function emptyRefRemoveGroupMemberReqBody():Ref<RemoveGroupMemberReqBody>
	export function refOfRemoveGroupMemberReqBody(x:RemoveGroupMemberReqBody,v:Ref<RemoveGroupMemberReqBody>)
	export function unRefRemoveGroupMemberReqBody(v:Ref<RemoveGroupMemberReqBody>):RemoveGroupMemberReqBody
	export function emptySimplelistGroupMemberReq():SimplelistGroupMemberReq
	export function emptyRefSimplelistGroupMemberReq():Ref<SimplelistGroupMemberReq>
	export function refOfSimplelistGroupMemberReq(x:SimplelistGroupMemberReq,v:Ref<SimplelistGroupMemberReq>)
	export function unRefSimplelistGroupMemberReq(v:Ref<SimplelistGroupMemberReq>):SimplelistGroupMemberReq
	export function emptyBatchDepartmentReq():BatchDepartmentReq
	export function emptyRefBatchDepartmentReq():Ref<BatchDepartmentReq>
	export function refOfBatchDepartmentReq(x:BatchDepartmentReq,v:Ref<BatchDepartmentReq>)
	export function unRefBatchDepartmentReq(v:Ref<BatchDepartmentReq>):BatchDepartmentReq
	export function emptyGetUserRespData():GetUserRespData
	export function emptyRefGetUserRespData():Ref<GetUserRespData>
	export function refOfGetUserRespData(x:GetUserRespData,v:Ref<GetUserRespData>)
	export function unRefGetUserRespData(v:Ref<GetUserRespData>):GetUserRespData
	export function emptyPatchUserReq():PatchUserReq
	export function emptyRefPatchUserReq():Ref<PatchUserReq>
	export function refOfPatchUserReq(x:PatchUserReq,v:Ref<PatchUserReq>)
	export function unRefPatchUserReq(v:Ref<PatchUserReq>):PatchUserReq
	export function emptyDeleteEmployeeTypeEnumResp():DeleteEmployeeTypeEnumResp
	export function emptyRefDeleteEmployeeTypeEnumResp():Ref<DeleteEmployeeTypeEnumResp>
	export function refOfDeleteEmployeeTypeEnumResp(x:DeleteEmployeeTypeEnumResp,v:Ref<DeleteEmployeeTypeEnumResp>)
	export function unRefDeleteEmployeeTypeEnumResp(v:Ref<DeleteEmployeeTypeEnumResp>):DeleteEmployeeTypeEnumResp
	export function emptyP2CustomAttrEventUpdatedV3Data():P2CustomAttrEventUpdatedV3Data
	export function emptyRefP2CustomAttrEventUpdatedV3Data():Ref<P2CustomAttrEventUpdatedV3Data>
	export function refOfP2CustomAttrEventUpdatedV3Data(x:P2CustomAttrEventUpdatedV3Data,v:Ref<P2CustomAttrEventUpdatedV3Data>)
	export function unRefP2CustomAttrEventUpdatedV3Data(v:Ref<P2CustomAttrEventUpdatedV3Data>):P2CustomAttrEventUpdatedV3Data
	export function emptyDeleteDepartmentResp():DeleteDepartmentResp
	export function emptyRefDeleteDepartmentResp():Ref<DeleteDepartmentResp>
	export function refOfDeleteDepartmentResp(x:DeleteDepartmentResp,v:Ref<DeleteDepartmentResp>)
	export function unRefDeleteDepartmentResp(v:Ref<DeleteDepartmentResp>):DeleteDepartmentResp
	export function emptyGetUnitResp():GetUnitResp
	export function emptyRefGetUnitResp():Ref<GetUnitResp>
	export function refOfGetUnitResp(x:GetUnitResp,v:Ref<GetUnitResp>)
	export function unRefGetUnitResp(v:Ref<GetUnitResp>):GetUnitResp
	export function emptyUpdateJobLevelResp():UpdateJobLevelResp
	export function emptyRefUpdateJobLevelResp():Ref<UpdateJobLevelResp>
	export function refOfUpdateJobLevelResp(x:UpdateJobLevelResp,v:Ref<UpdateJobLevelResp>)
	export function unRefUpdateJobLevelResp(v:Ref<UpdateJobLevelResp>):UpdateJobLevelResp
	export function emptyBatchDeleteFunctionalRoleMemberResp():BatchDeleteFunctionalRoleMemberResp
	export function emptyRefBatchDeleteFunctionalRoleMemberResp():Ref<BatchDeleteFunctionalRoleMemberResp>
	export function refOfBatchDeleteFunctionalRoleMemberResp(x:BatchDeleteFunctionalRoleMemberResp,v:Ref<BatchDeleteFunctionalRoleMemberResp>)
	export function unRefBatchDeleteFunctionalRoleMemberResp(v:Ref<BatchDeleteFunctionalRoleMemberResp>):BatchDeleteFunctionalRoleMemberResp
	export function emptyCreateEmployeeTypeEnumReq():CreateEmployeeTypeEnumReq
	export function emptyRefCreateEmployeeTypeEnumReq():Ref<CreateEmployeeTypeEnumReq>
	export function refOfCreateEmployeeTypeEnumReq(x:CreateEmployeeTypeEnumReq,v:Ref<CreateEmployeeTypeEnumReq>)
	export function unRefCreateEmployeeTypeEnumReq(v:Ref<CreateEmployeeTypeEnumReq>):CreateEmployeeTypeEnumReq
	export function emptyCreateJobLevelRespData():CreateJobLevelRespData
	export function emptyRefCreateJobLevelRespData():Ref<CreateJobLevelRespData>
	export function refOfCreateJobLevelRespData(x:CreateJobLevelRespData,v:Ref<CreateJobLevelRespData>)
	export function unRefCreateJobLevelRespData(v:Ref<CreateJobLevelRespData>):CreateJobLevelRespData
	export function emptyScopesFunctionalRoleMemberRespData():ScopesFunctionalRoleMemberRespData
	export function emptyRefScopesFunctionalRoleMemberRespData():Ref<ScopesFunctionalRoleMemberRespData>
	export function refOfScopesFunctionalRoleMemberRespData(x:ScopesFunctionalRoleMemberRespData,v:Ref<ScopesFunctionalRoleMemberRespData>)
	export function unRefScopesFunctionalRoleMemberRespData(v:Ref<ScopesFunctionalRoleMemberRespData>):ScopesFunctionalRoleMemberRespData
	export function emptyP2EmployeeTypeEnumActivedV3Data():P2EmployeeTypeEnumActivedV3Data
	export function emptyRefP2EmployeeTypeEnumActivedV3Data():Ref<P2EmployeeTypeEnumActivedV3Data>
	export function refOfP2EmployeeTypeEnumActivedV3Data(x:P2EmployeeTypeEnumActivedV3Data,v:Ref<P2EmployeeTypeEnumActivedV3Data>)
	export function unRefP2EmployeeTypeEnumActivedV3Data(v:Ref<P2EmployeeTypeEnumActivedV3Data>):P2EmployeeTypeEnumActivedV3Data
	export function emptyBatchRemoveGroupMemberReqBody():BatchRemoveGroupMemberReqBody
	export function emptyRefBatchRemoveGroupMemberReqBody():Ref<BatchRemoveGroupMemberReqBody>
	export function refOfBatchRemoveGroupMemberReqBody(x:BatchRemoveGroupMemberReqBody,v:Ref<BatchRemoveGroupMemberReqBody>)
	export function unRefBatchRemoveGroupMemberReqBody(v:Ref<BatchRemoveGroupMemberReqBody>):BatchRemoveGroupMemberReqBody
	export function emptyGetJobTitleReq():GetJobTitleReq
	export function emptyRefGetJobTitleReq():Ref<GetJobTitleReq>
	export function refOfGetJobTitleReq(x:GetJobTitleReq,v:Ref<GetJobTitleReq>)
	export function unRefGetJobTitleReq(v:Ref<GetJobTitleReq>):GetJobTitleReq
	export function emptyCustomAttrOption():CustomAttrOption
	export function emptyRefCustomAttrOption():Ref<CustomAttrOption>
	export function refOfCustomAttrOption(x:CustomAttrOption,v:Ref<CustomAttrOption>)
	export function unRefCustomAttrOption(v:Ref<CustomAttrOption>):CustomAttrOption
	export function emptyListJobTitleRespData():ListJobTitleRespData
	export function emptyRefListJobTitleRespData():Ref<ListJobTitleRespData>
	export function refOfListJobTitleRespData(x:ListJobTitleRespData,v:Ref<ListJobTitleRespData>)
	export function unRefListJobTitleRespData(v:Ref<ListJobTitleRespData>):ListJobTitleRespData
	export function emptyParentDepartmentReq():ParentDepartmentReq
	export function emptyRefParentDepartmentReq():Ref<ParentDepartmentReq>
	export function refOfParentDepartmentReq(x:ParentDepartmentReq,v:Ref<ParentDepartmentReq>)
	export function unRefParentDepartmentReq(v:Ref<ParentDepartmentReq>):ParentDepartmentReq
	export function emptyDeleteUserResp():DeleteUserResp
	export function emptyRefDeleteUserResp():Ref<DeleteUserResp>
	export function refOfDeleteUserResp(x:DeleteUserResp,v:Ref<DeleteUserResp>)
	export function unRefDeleteUserResp(v:Ref<DeleteUserResp>):DeleteUserResp
	export function emptyGroupVisibleScope():GroupVisibleScope
	export function emptyRefGroupVisibleScope():Ref<GroupVisibleScope>
	export function refOfGroupVisibleScope(x:GroupVisibleScope,v:Ref<GroupVisibleScope>)
	export function unRefGroupVisibleScope(v:Ref<GroupVisibleScope>):GroupVisibleScope
	export function emptyP2EmployeeTypeEnumCreatedV3Data():P2EmployeeTypeEnumCreatedV3Data
	export function emptyRefP2EmployeeTypeEnumCreatedV3Data():Ref<P2EmployeeTypeEnumCreatedV3Data>
	export function refOfP2EmployeeTypeEnumCreatedV3Data(x:P2EmployeeTypeEnumCreatedV3Data,v:Ref<P2EmployeeTypeEnumCreatedV3Data>)
	export function unRefP2EmployeeTypeEnumCreatedV3Data(v:Ref<P2EmployeeTypeEnumCreatedV3Data>):P2EmployeeTypeEnumCreatedV3Data
	export function emptyUpdateEmployeeTypeEnumRespData():UpdateEmployeeTypeEnumRespData
	export function emptyRefUpdateEmployeeTypeEnumRespData():Ref<UpdateEmployeeTypeEnumRespData>
	export function refOfUpdateEmployeeTypeEnumRespData(x:UpdateEmployeeTypeEnumRespData,v:Ref<UpdateEmployeeTypeEnumRespData>)
	export function unRefUpdateEmployeeTypeEnumRespData(v:Ref<UpdateEmployeeTypeEnumRespData>):UpdateEmployeeTypeEnumRespData
	export function emptyUpdateUserIdUserResp():UpdateUserIdUserResp
	export function emptyRefUpdateUserIdUserResp():Ref<UpdateUserIdUserResp>
	export function refOfUpdateUserIdUserResp(x:UpdateUserIdUserResp,v:Ref<UpdateUserIdUserResp>)
	export function unRefUpdateUserIdUserResp(v:Ref<UpdateUserIdUserResp>):UpdateUserIdUserResp
	export function emptyDynamicGroupExpression():DynamicGroupExpression
	export function emptyRefDynamicGroupExpression():Ref<DynamicGroupExpression>
	export function refOfDynamicGroupExpression(x:DynamicGroupExpression,v:Ref<DynamicGroupExpression>)
	export function unRefDynamicGroupExpression(v:Ref<DynamicGroupExpression>):DynamicGroupExpression
	export function emptyGetFunctionalRoleMemberRespData():GetFunctionalRoleMemberRespData
	export function emptyRefGetFunctionalRoleMemberRespData():Ref<GetFunctionalRoleMemberRespData>
	export function refOfGetFunctionalRoleMemberRespData(x:GetFunctionalRoleMemberRespData,v:Ref<GetFunctionalRoleMemberRespData>)
	export function unRefGetFunctionalRoleMemberRespData(v:Ref<GetFunctionalRoleMemberRespData>):GetFunctionalRoleMemberRespData
	export function emptyUpdateDepartmentIdDepartmentReq():UpdateDepartmentIdDepartmentReq
	export function emptyRefUpdateDepartmentIdDepartmentReq():Ref<UpdateDepartmentIdDepartmentReq>
	export function refOfUpdateDepartmentIdDepartmentReq(x:UpdateDepartmentIdDepartmentReq,v:Ref<UpdateDepartmentIdDepartmentReq>)
	export function unRefUpdateDepartmentIdDepartmentReq(v:Ref<UpdateDepartmentIdDepartmentReq>):UpdateDepartmentIdDepartmentReq
	export function emptyUpdateFunctionalRoleResp():UpdateFunctionalRoleResp
	export function emptyRefUpdateFunctionalRoleResp():Ref<UpdateFunctionalRoleResp>
	export function refOfUpdateFunctionalRoleResp(x:UpdateFunctionalRoleResp,v:Ref<UpdateFunctionalRoleResp>)
	export function unRefUpdateFunctionalRoleResp(v:Ref<UpdateFunctionalRoleResp>):UpdateFunctionalRoleResp
	export function emptyWorkCity():WorkCity
	export function emptyRefWorkCity():Ref<WorkCity>
	export function refOfWorkCity(x:WorkCity,v:Ref<WorkCity>)
	export function unRefWorkCity(v:Ref<WorkCity>):WorkCity
	export function emptyListFunctionalRoleMemberReq():ListFunctionalRoleMemberReq
	export function emptyRefListFunctionalRoleMemberReq():Ref<ListFunctionalRoleMemberReq>
	export function refOfListFunctionalRoleMemberReq(x:ListFunctionalRoleMemberReq,v:Ref<ListFunctionalRoleMemberReq>)
	export function unRefListFunctionalRoleMemberReq(v:Ref<ListFunctionalRoleMemberReq>):ListFunctionalRoleMemberReq
	export function emptyResurrectUserReq():ResurrectUserReq
	export function emptyRefResurrectUserReq():Ref<ResurrectUserReq>
	export function refOfResurrectUserReq(x:ResurrectUserReq,v:Ref<ResurrectUserReq>)
	export function unRefResurrectUserReq(v:Ref<ResurrectUserReq>):ResurrectUserReq
	export function emptyUpdateDepartmentResp():UpdateDepartmentResp
	export function emptyRefUpdateDepartmentResp():Ref<UpdateDepartmentResp>
	export function refOfUpdateDepartmentResp(x:UpdateDepartmentResp,v:Ref<UpdateDepartmentResp>)
	export function unRefUpdateDepartmentResp(v:Ref<UpdateDepartmentResp>):UpdateDepartmentResp
	export function emptyUpdateFunctionalRoleReqBody():UpdateFunctionalRoleReqBody
	export function emptyRefUpdateFunctionalRoleReqBody():Ref<UpdateFunctionalRoleReqBody>
	export function refOfUpdateFunctionalRoleReqBody(x:UpdateFunctionalRoleReqBody,v:Ref<UpdateFunctionalRoleReqBody>)
	export function unRefUpdateFunctionalRoleReqBody(v:Ref<UpdateFunctionalRoleReqBody>):UpdateFunctionalRoleReqBody
	export function emptyP2UserUpdatedV3Data():P2UserUpdatedV3Data
	export function emptyRefP2UserUpdatedV3Data():Ref<P2UserUpdatedV3Data>
	export function refOfP2UserUpdatedV3Data(x:P2UserUpdatedV3Data,v:Ref<P2UserUpdatedV3Data>)
	export function unRefP2UserUpdatedV3Data(v:Ref<P2UserUpdatedV3Data>):P2UserUpdatedV3Data
	export function emptyPatchUnitReq():PatchUnitReq
	export function emptyRefPatchUnitReq():Ref<PatchUnitReq>
	export function refOfPatchUnitReq(x:PatchUnitReq,v:Ref<PatchUnitReq>)
	export function unRefPatchUnitReq(v:Ref<PatchUnitReq>):PatchUnitReq
	export function emptyCreateGroupResp():CreateGroupResp
	export function emptyRefCreateGroupResp():Ref<CreateGroupResp>
	export function refOfCreateGroupResp(x:CreateGroupResp,v:Ref<CreateGroupResp>)
	export function unRefCreateGroupResp(v:Ref<CreateGroupResp>):CreateGroupResp
	export function emptyUserStatus():UserStatus
	export function emptyRefUserStatus():Ref<UserStatus>
	export function refOfUserStatus(x:UserStatus,v:Ref<UserStatus>)
	export function unRefUserStatus(v:Ref<UserStatus>):UserStatus
	export function emptyBindDepartmentUnitResp():BindDepartmentUnitResp
	export function emptyRefBindDepartmentUnitResp():Ref<BindDepartmentUnitResp>
	export function refOfBindDepartmentUnitResp(x:BindDepartmentUnitResp,v:Ref<BindDepartmentUnitResp>)
	export function unRefBindDepartmentUnitResp(v:Ref<BindDepartmentUnitResp>):BindDepartmentUnitResp
	export function emptyCreateFunctionalRoleReqBody():CreateFunctionalRoleReqBody
	export function emptyRefCreateFunctionalRoleReqBody():Ref<CreateFunctionalRoleReqBody>
	export function refOfCreateFunctionalRoleReqBody(x:CreateFunctionalRoleReqBody,v:Ref<CreateFunctionalRoleReqBody>)
	export function unRefCreateFunctionalRoleReqBody(v:Ref<CreateFunctionalRoleReqBody>):CreateFunctionalRoleReqBody
	export function emptyDeleteGroupResp():DeleteGroupResp
	export function emptyRefDeleteGroupResp():Ref<DeleteGroupResp>
	export function refOfDeleteGroupResp(x:DeleteGroupResp,v:Ref<DeleteGroupResp>)
	export function unRefDeleteGroupResp(v:Ref<DeleteGroupResp>):DeleteGroupResp
	export function emptyMemberBelongGroupRespData():MemberBelongGroupRespData
	export function emptyRefMemberBelongGroupRespData():Ref<MemberBelongGroupRespData>
	export function refOfMemberBelongGroupRespData(x:MemberBelongGroupRespData,v:Ref<MemberBelongGroupRespData>)
	export function unRefMemberBelongGroupRespData(v:Ref<MemberBelongGroupRespData>):MemberBelongGroupRespData
	export function emptyDeleteUnitReq():DeleteUnitReq
	export function emptyRefDeleteUnitReq():Ref<DeleteUnitReq>
	export function refOfDeleteUnitReq(x:DeleteUnitReq,v:Ref<DeleteUnitReq>)
	export function unRefDeleteUnitReq(v:Ref<DeleteUnitReq>):DeleteUnitReq
	export function emptyNotificationOption():NotificationOption
	export function emptyRefNotificationOption():Ref<NotificationOption>
	export function refOfNotificationOption(x:NotificationOption,v:Ref<NotificationOption>)
	export function unRefNotificationOption(v:Ref<NotificationOption>):NotificationOption
	export function emptyGetJobLevelResp():GetJobLevelResp
	export function emptyRefGetJobLevelResp():Ref<GetJobLevelResp>
	export function refOfGetJobLevelResp(x:GetJobLevelResp,v:Ref<GetJobLevelResp>)
	export function unRefGetJobLevelResp(v:Ref<GetJobLevelResp>):GetJobLevelResp
	export function emptyUpdateJobFamilyResp():UpdateJobFamilyResp
	export function emptyRefUpdateJobFamilyResp():Ref<UpdateJobFamilyResp>
	export function refOfUpdateJobFamilyResp(x:UpdateJobFamilyResp,v:Ref<UpdateJobFamilyResp>)
	export function unRefUpdateJobFamilyResp(v:Ref<UpdateJobFamilyResp>):UpdateJobFamilyResp
	export function emptyUpdateUserResp():UpdateUserResp
	export function emptyRefUpdateUserResp():Ref<UpdateUserResp>
	export function refOfUpdateUserResp(x:UpdateUserResp,v:Ref<UpdateUserResp>)
	export function unRefUpdateUserResp(v:Ref<UpdateUserResp>):UpdateUserResp
	export function emptyUnitDepartment():UnitDepartment
	export function emptyRefUnitDepartment():Ref<UnitDepartment>
	export function refOfUnitDepartment(x:UnitDepartment,v:Ref<UnitDepartment>)
	export function unRefUnitDepartment(v:Ref<UnitDepartment>):UnitDepartment
	export function emptyDeleteUserReq():DeleteUserReq
	export function emptyRefDeleteUserReq():Ref<DeleteUserReq>
	export function refOfDeleteUserReq(x:DeleteUserReq,v:Ref<DeleteUserReq>)
	export function unRefDeleteUserReq(v:Ref<DeleteUserReq>):DeleteUserReq
	export function emptyGetJobFamilyRespData():GetJobFamilyRespData
	export function emptyRefGetJobFamilyRespData():Ref<GetJobFamilyRespData>
	export function refOfGetJobFamilyRespData(x:GetJobFamilyRespData,v:Ref<GetJobFamilyRespData>)
	export function unRefGetJobFamilyRespData(v:Ref<GetJobFamilyRespData>):GetJobFamilyRespData
	export function emptyListUserRespData():ListUserRespData
	export function emptyRefListUserRespData():Ref<ListUserRespData>
	export function refOfListUserRespData(x:ListUserRespData,v:Ref<ListUserRespData>)
	export function unRefListUserRespData(v:Ref<ListUserRespData>):ListUserRespData
	export function emptyUserEvent():UserEvent
	export function emptyRefUserEvent():Ref<UserEvent>
	export function refOfUserEvent(x:UserEvent,v:Ref<UserEvent>)
	export function unRefUserEvent(v:Ref<UserEvent>):UserEvent
	export function emptyP1UserStatusChangedV3():P1UserStatusChangedV3
	export function emptyRefP1UserStatusChangedV3():Ref<P1UserStatusChangedV3>
	export function refOfP1UserStatusChangedV3(x:P1UserStatusChangedV3,v:Ref<P1UserStatusChangedV3>)
	export function unRefP1UserStatusChangedV3(v:Ref<P1UserStatusChangedV3>):P1UserStatusChangedV3
	export function emptyP2UserDeletedV3Data():P2UserDeletedV3Data
	export function emptyRefP2UserDeletedV3Data():Ref<P2UserDeletedV3Data>
	export function refOfP2UserDeletedV3Data(x:P2UserDeletedV3Data,v:Ref<P2UserDeletedV3Data>)
	export function unRefP2UserDeletedV3Data(v:Ref<P2UserDeletedV3Data>):P2UserDeletedV3Data
	export function emptyCreateGroupReq():CreateGroupReq
	export function emptyRefCreateGroupReq():Ref<CreateGroupReq>
	export function refOfCreateGroupReq(x:CreateGroupReq,v:Ref<CreateGroupReq>)
	export function unRefCreateGroupReq(v:Ref<CreateGroupReq>):CreateGroupReq
	export function emptyCreateUserReq():CreateUserReq
	export function emptyRefCreateUserReq():Ref<CreateUserReq>
	export function refOfCreateUserReq(x:CreateUserReq,v:Ref<CreateUserReq>)
	export function unRefCreateUserReq(v:Ref<CreateUserReq>):CreateUserReq
	export function emptyFindByDepartmentUserReq():FindByDepartmentUserReq
	export function emptyRefFindByDepartmentUserReq():Ref<FindByDepartmentUserReq>
	export function refOfFindByDepartmentUserReq(x:FindByDepartmentUserReq,v:Ref<FindByDepartmentUserReq>)
	export function unRefFindByDepartmentUserReq(v:Ref<FindByDepartmentUserReq>):FindByDepartmentUserReq
	export function emptyListFunctionalRoleMemberResp():ListFunctionalRoleMemberResp
	export function emptyRefListFunctionalRoleMemberResp():Ref<ListFunctionalRoleMemberResp>
	export function refOfListFunctionalRoleMemberResp(x:ListFunctionalRoleMemberResp,v:Ref<ListFunctionalRoleMemberResp>)
	export function unRefListFunctionalRoleMemberResp(v:Ref<ListFunctionalRoleMemberResp>):ListFunctionalRoleMemberResp
	export function emptyPatchUnitResp():PatchUnitResp
	export function emptyRefPatchUnitResp():Ref<PatchUnitResp>
	export function refOfPatchUnitResp(x:PatchUnitResp,v:Ref<PatchUnitResp>)
	export function unRefPatchUnitResp(v:Ref<PatchUnitResp>):PatchUnitResp
	export function emptySearchDepartmentIterator():SearchDepartmentIterator
	export function emptyRefSearchDepartmentIterator():Ref<SearchDepartmentIterator>
	export function refOfSearchDepartmentIterator(x:SearchDepartmentIterator,v:Ref<SearchDepartmentIterator>)
	export function unRefSearchDepartmentIterator(v:Ref<SearchDepartmentIterator>):SearchDepartmentIterator
	export function emptyGetFunctionalRoleMemberResp():GetFunctionalRoleMemberResp
	export function emptyRefGetFunctionalRoleMemberResp():Ref<GetFunctionalRoleMemberResp>
	export function refOfGetFunctionalRoleMemberResp(x:GetFunctionalRoleMemberResp,v:Ref<GetFunctionalRoleMemberResp>)
	export function unRefGetFunctionalRoleMemberResp(v:Ref<GetFunctionalRoleMemberResp>):GetFunctionalRoleMemberResp
	export function emptyGetUnitRespData():GetUnitRespData
	export function emptyRefGetUnitRespData():Ref<GetUnitRespData>
	export function refOfGetUnitRespData(x:GetUnitRespData,v:Ref<GetUnitRespData>)
	export function unRefGetUnitRespData(v:Ref<GetUnitRespData>):GetUnitRespData
	export function emptyP2ScopeUpdatedV3Data():P2ScopeUpdatedV3Data
	export function emptyRefP2ScopeUpdatedV3Data():Ref<P2ScopeUpdatedV3Data>
	export function refOfP2ScopeUpdatedV3Data(x:P2ScopeUpdatedV3Data,v:Ref<P2ScopeUpdatedV3Data>)
	export function unRefP2ScopeUpdatedV3Data(v:Ref<P2ScopeUpdatedV3Data>):P2ScopeUpdatedV3Data
	export function emptyPatchDepartmentRespData():PatchDepartmentRespData
	export function emptyRefPatchDepartmentRespData():Ref<PatchDepartmentRespData>
	export function refOfPatchDepartmentRespData(x:PatchDepartmentRespData,v:Ref<PatchDepartmentRespData>)
	export function unRefPatchDepartmentRespData(v:Ref<PatchDepartmentRespData>):PatchDepartmentRespData
	export function emptySearchDepartmentResp():SearchDepartmentResp
	export function emptyRefSearchDepartmentResp():Ref<SearchDepartmentResp>
	export function refOfSearchDepartmentResp(x:SearchDepartmentResp,v:Ref<SearchDepartmentResp>)
	export function unRefSearchDepartmentResp(v:Ref<SearchDepartmentResp>):SearchDepartmentResp
	export function emptyUserDepartmentInfo():UserDepartmentInfo
	export function emptyRefUserDepartmentInfo():Ref<UserDepartmentInfo>
	export function refOfUserDepartmentInfo(x:UserDepartmentInfo,v:Ref<UserDepartmentInfo>)
	export function unRefUserDepartmentInfo(v:Ref<UserDepartmentInfo>):UserDepartmentInfo
	export function emptyCreateJobFamilyRespData():CreateJobFamilyRespData
	export function emptyRefCreateJobFamilyRespData():Ref<CreateJobFamilyRespData>
	export function refOfCreateJobFamilyRespData(x:CreateJobFamilyRespData,v:Ref<CreateJobFamilyRespData>)
	export function unRefCreateJobFamilyRespData(v:Ref<CreateJobFamilyRespData>):CreateJobFamilyRespData
	export function emptyI18nContent():I18nContent
	export function emptyRefI18nContent():Ref<I18nContent>
	export function refOfI18nContent(x:I18nContent,v:Ref<I18nContent>)
	export function unRefI18nContent(v:Ref<I18nContent>):I18nContent
	export function emptyFunctionalRoleMember():FunctionalRoleMember
	export function emptyRefFunctionalRoleMember():Ref<FunctionalRoleMember>
	export function refOfFunctionalRoleMember(x:FunctionalRoleMember,v:Ref<FunctionalRoleMember>)
	export function unRefFunctionalRoleMember(v:Ref<FunctionalRoleMember>):FunctionalRoleMember
	export function emptyListEmployeeTypeEnumReq():ListEmployeeTypeEnumReq
	export function emptyRefListEmployeeTypeEnumReq():Ref<ListEmployeeTypeEnumReq>
	export function refOfListEmployeeTypeEnumReq(x:ListEmployeeTypeEnumReq,v:Ref<ListEmployeeTypeEnumReq>)
	export function unRefListEmployeeTypeEnumReq(v:Ref<ListEmployeeTypeEnumReq>):ListEmployeeTypeEnumReq
	export function emptyMemberBelongGroupResp():MemberBelongGroupResp
	export function emptyRefMemberBelongGroupResp():Ref<MemberBelongGroupResp>
	export function refOfMemberBelongGroupResp(x:MemberBelongGroupResp,v:Ref<MemberBelongGroupResp>)
	export function unRefMemberBelongGroupResp(v:Ref<MemberBelongGroupResp>):MemberBelongGroupResp
	export function emptyOldUserObject():OldUserObject
	export function emptyRefOldUserObject():Ref<OldUserObject>
	export function refOfOldUserObject(x:OldUserObject,v:Ref<OldUserObject>)
	export function unRefOldUserObject(v:Ref<OldUserObject>):OldUserObject
	export function emptyListScopeRespData():ListScopeRespData
	export function emptyRefListScopeRespData():Ref<ListScopeRespData>
	export function refOfListScopeRespData(x:ListScopeRespData,v:Ref<ListScopeRespData>)
	export function unRefListScopeRespData(v:Ref<ListScopeRespData>):ListScopeRespData
	export function emptySimplelistGroupResp():SimplelistGroupResp
	export function emptyRefSimplelistGroupResp():Ref<SimplelistGroupResp>
	export function refOfSimplelistGroupResp(x:SimplelistGroupResp,v:Ref<SimplelistGroupResp>)
	export function unRefSimplelistGroupResp(v:Ref<SimplelistGroupResp>):SimplelistGroupResp
	export function emptyListDepartmentUnitReq():ListDepartmentUnitReq
	export function emptyRefListDepartmentUnitReq():Ref<ListDepartmentUnitReq>
	export function refOfListDepartmentUnitReq(x:ListDepartmentUnitReq,v:Ref<ListDepartmentUnitReq>)
	export function unRefListDepartmentUnitReq(v:Ref<ListDepartmentUnitReq>):ListDepartmentUnitReq
	export function emptyListEmployeeTypeEnumRespData():ListEmployeeTypeEnumRespData
	export function emptyRefListEmployeeTypeEnumRespData():Ref<ListEmployeeTypeEnumRespData>
	export function refOfListEmployeeTypeEnumRespData(x:ListEmployeeTypeEnumRespData,v:Ref<ListEmployeeTypeEnumRespData>)
	export function unRefListEmployeeTypeEnumRespData(v:Ref<ListEmployeeTypeEnumRespData>):ListEmployeeTypeEnumRespData
	export function emptyListJobLevelReq():ListJobLevelReq
	export function emptyRefListJobLevelReq():Ref<ListJobLevelReq>
	export function refOfListJobLevelReq(x:ListJobLevelReq,v:Ref<ListJobLevelReq>)
	export function unRefListJobLevelReq(v:Ref<ListJobLevelReq>):ListJobLevelReq
	export function emptyListUserResp():ListUserResp
	export function emptyRefListUserResp():Ref<ListUserResp>
	export function refOfListUserResp(x:ListUserResp,v:Ref<ListUserResp>)
	export function unRefListUserResp(v:Ref<ListUserResp>):ListUserResp
	export function emptyUnbindDepartmentUnitReq():UnbindDepartmentUnitReq
	export function emptyRefUnbindDepartmentUnitReq():Ref<UnbindDepartmentUnitReq>
	export function refOfUnbindDepartmentUnitReq(x:UnbindDepartmentUnitReq,v:Ref<UnbindDepartmentUnitReq>)
	export function unRefUnbindDepartmentUnitReq(v:Ref<UnbindDepartmentUnitReq>):UnbindDepartmentUnitReq
	export function emptyUserId():UserId
	export function emptyRefUserId():Ref<UserId>
	export function refOfUserId(x:UserId,v:Ref<UserId>)
	export function unRefUserId(v:Ref<UserId>):UserId
	export function emptyV3():V3
	export function emptyRefV3():Ref<V3>
	export function refOfV3(x:V3,v:Ref<V3>)
	export function unRefV3(v:Ref<V3>):V3
	export function emptyGetDepartmentReq():GetDepartmentReq
	export function emptyRefGetDepartmentReq():Ref<GetDepartmentReq>
	export function refOfGetDepartmentReq(x:GetDepartmentReq,v:Ref<GetDepartmentReq>)
	export function unRefGetDepartmentReq(v:Ref<GetDepartmentReq>):GetDepartmentReq
	export function emptyGetFunctionalRoleMemberReq():GetFunctionalRoleMemberReq
	export function emptyRefGetFunctionalRoleMemberReq():Ref<GetFunctionalRoleMemberReq>
	export function refOfGetFunctionalRoleMemberReq(x:GetFunctionalRoleMemberReq,v:Ref<GetFunctionalRoleMemberReq>)
	export function unRefGetFunctionalRoleMemberReq(v:Ref<GetFunctionalRoleMemberReq>):GetFunctionalRoleMemberReq
	export function emptyPatchGroupResp():PatchGroupResp
	export function emptyRefPatchGroupResp():Ref<PatchGroupResp>
	export function refOfPatchGroupResp(x:PatchGroupResp,v:Ref<PatchGroupResp>)
	export function unRefPatchGroupResp(v:Ref<PatchGroupResp>):PatchGroupResp
	export function emptyResurrectUserResp():ResurrectUserResp
	export function emptyRefResurrectUserResp():Ref<ResurrectUserResp>
	export function refOfResurrectUserResp(x:ResurrectUserResp,v:Ref<ResurrectUserResp>)
	export function unRefResurrectUserResp(v:Ref<ResurrectUserResp>):ResurrectUserResp
	export function emptyBatchAddGroupMemberResp():BatchAddGroupMemberResp
	export function emptyRefBatchAddGroupMemberResp():Ref<BatchAddGroupMemberResp>
	export function refOfBatchAddGroupMemberResp(x:BatchAddGroupMemberResp,v:Ref<BatchAddGroupMemberResp>)
	export function unRefBatchAddGroupMemberResp(v:Ref<BatchAddGroupMemberResp>):BatchAddGroupMemberResp
	export function emptyJobLevel():JobLevel
	export function emptyRefJobLevel():Ref<JobLevel>
	export function refOfJobLevel(x:JobLevel,v:Ref<JobLevel>)
	export function unRefJobLevel(v:Ref<JobLevel>):JobLevel
	export function emptyResourceAcceptor():ResourceAcceptor
	export function emptyRefResourceAcceptor():Ref<ResourceAcceptor>
	export function refOfResourceAcceptor(x:ResourceAcceptor,v:Ref<ResourceAcceptor>)
	export function unRefResourceAcceptor(v:Ref<ResourceAcceptor>):ResourceAcceptor
	export function emptyCreateJobLevelResp():CreateJobLevelResp
	export function emptyRefCreateJobLevelResp():Ref<CreateJobLevelResp>
	export function refOfCreateJobLevelResp(x:CreateJobLevelResp,v:Ref<CreateJobLevelResp>)
	export function unRefCreateJobLevelResp(v:Ref<CreateJobLevelResp>):CreateJobLevelResp
	export function emptyCreateFunctionalRoleReq():CreateFunctionalRoleReq
	export function emptyRefCreateFunctionalRoleReq():Ref<CreateFunctionalRoleReq>
	export function refOfCreateFunctionalRoleReq(x:CreateFunctionalRoleReq,v:Ref<CreateFunctionalRoleReq>)
	export function unRefCreateFunctionalRoleReq(v:Ref<CreateFunctionalRoleReq>):CreateFunctionalRoleReq
	export function emptyGetJobLevelRespData():GetJobLevelRespData
	export function emptyRefGetJobLevelRespData():Ref<GetJobLevelRespData>
	export function refOfGetJobLevelRespData(x:GetJobLevelRespData,v:Ref<GetJobLevelRespData>)
	export function unRefGetJobLevelRespData(v:Ref<GetJobLevelRespData>):GetJobLevelRespData
	export function emptyUpdateDepartmentIdDepartmentReqBody():UpdateDepartmentIdDepartmentReqBody
	export function emptyRefUpdateDepartmentIdDepartmentReqBody():Ref<UpdateDepartmentIdDepartmentReqBody>
	export function refOfUpdateDepartmentIdDepartmentReqBody(x:UpdateDepartmentIdDepartmentReqBody,v:Ref<UpdateDepartmentIdDepartmentReqBody>)
	export function unRefUpdateDepartmentIdDepartmentReqBody(v:Ref<UpdateDepartmentIdDepartmentReqBody>):UpdateDepartmentIdDepartmentReqBody
	export function emptyFunctionalRoleMemberResult():FunctionalRoleMemberResult
	export function emptyRefFunctionalRoleMemberResult():Ref<FunctionalRoleMemberResult>
	export function refOfFunctionalRoleMemberResult(x:FunctionalRoleMemberResult,v:Ref<FunctionalRoleMemberResult>)
	export function unRefFunctionalRoleMemberResult(v:Ref<FunctionalRoleMemberResult>):FunctionalRoleMemberResult
	export function emptyListWorkCityResp():ListWorkCityResp
	export function emptyRefListWorkCityResp():Ref<ListWorkCityResp>
	export function refOfListWorkCityResp(x:ListWorkCityResp,v:Ref<ListWorkCityResp>)
	export function unRefListWorkCityResp(v:Ref<ListWorkCityResp>):ListWorkCityResp
	export function emptyPatchUnitReqBody():PatchUnitReqBody
	export function emptyRefPatchUnitReqBody():Ref<PatchUnitReqBody>
	export function refOfPatchUnitReqBody(x:PatchUnitReqBody,v:Ref<PatchUnitReqBody>)
	export function unRefPatchUnitReqBody(v:Ref<PatchUnitReqBody>):PatchUnitReqBody
	export function emptyListDepartmentReq():ListDepartmentReq
	export function emptyRefListDepartmentReq():Ref<ListDepartmentReq>
	export function refOfListDepartmentReq(x:ListDepartmentReq,v:Ref<ListDepartmentReq>)
	export function unRefListDepartmentReq(v:Ref<ListDepartmentReq>):ListDepartmentReq
	export function emptyPatchDepartmentResp():PatchDepartmentResp
	export function emptyRefPatchDepartmentResp():Ref<PatchDepartmentResp>
	export function refOfPatchDepartmentResp(x:PatchDepartmentResp,v:Ref<PatchDepartmentResp>)
	export function unRefPatchDepartmentResp(v:Ref<PatchDepartmentResp>):PatchDepartmentResp
}