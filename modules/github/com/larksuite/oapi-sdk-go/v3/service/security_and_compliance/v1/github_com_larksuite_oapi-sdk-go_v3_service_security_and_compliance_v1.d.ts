// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/security_and_compliance/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {error,Ref,int,Struct,bool,Alias,Nothing} from 'go'
	export interface AdminLog extends Struct<AdminLog>{

			uniqueId:Ref<string>
			userId:Ref<string>
			categoryName:Ref<string>
			eventName:Ref<string>
			ipAddress:Ref<string>
			createTime:Ref<string>
			content:Ref<string>
			operationStatus:Ref<int>
	}
	export interface AdminLogBuilder extends Struct<AdminLogBuilder>{

			uniqueId(uniqueId:string):Ref<AdminLogBuilder>
			userId(userId:string):Ref<AdminLogBuilder>
			categoryName(categoryName:string):Ref<AdminLogBuilder>
			eventName(eventName:string):Ref<AdminLogBuilder>
			ipAddress(ipAddress:string):Ref<AdminLogBuilder>
			createTime(createTime:string):Ref<AdminLogBuilder>
			content(content:string):Ref<AdminLogBuilder>
			operationStatus(operationStatus:int):Ref<AdminLogBuilder>
			build():Ref<AdminLog>
	}
	export interface AppDlpExecuteLog extends Struct<AppDlpExecuteLog>{

			eventName:Ref<string>
			userId:Ref<string>
			executeTime:Ref<string>
			actionName:Ref<string>
			hitPolicies:string[]
			entityId:Ref<string>
			evidences:Ref<DlpExecuteEvidence>
	}
	export interface AppDlpExecuteLogBuilder extends Struct<AppDlpExecuteLogBuilder>{

			eventName(eventName:string):Ref<AppDlpExecuteLogBuilder>
			userId(userId:string):Ref<AppDlpExecuteLogBuilder>
			executeTime(executeTime:string):Ref<AppDlpExecuteLogBuilder>
			actionName(actionName:string):Ref<AppDlpExecuteLogBuilder>
			hitPolicies(hitPolicies:string[]):Ref<AppDlpExecuteLogBuilder>
			entityId(entityId:string):Ref<AppDlpExecuteLogBuilder>
			evidences(evidences:Ref<DlpExecuteEvidence>):Ref<AppDlpExecuteLogBuilder>
			build():Ref<AppDlpExecuteLog>
	}
	export interface CreateMigrationEntity extends Struct<CreateMigrationEntity>{

			id:Ref<string>
			type:Ref<string>
			location:Ref<string>
			mailAddress:Ref<string>
	}
	export interface CreateMigrationEntityBuilder extends Struct<CreateMigrationEntityBuilder>{

			id(id:string):Ref<CreateMigrationEntityBuilder>
			type(type_:string):Ref<CreateMigrationEntityBuilder>
			location(location:string):Ref<CreateMigrationEntityBuilder>
			mailAddress(mailAddress:string):Ref<CreateMigrationEntityBuilder>
			build():Ref<CreateMigrationEntity>
	}
	export interface CreateMigrationItems extends Struct<CreateMigrationItems>{

			taskId:Ref<string>
			taskStatus:Ref<string>
			entity:Ref<CreateMigrationEntity>
	}
	export interface CreateMigrationItemsBuilder extends Struct<CreateMigrationItemsBuilder>{

			taskId(taskId:string):Ref<CreateMigrationItemsBuilder>
			taskStatus(taskStatus:string):Ref<CreateMigrationItemsBuilder>
			entity(entity:Ref<CreateMigrationEntity>):Ref<CreateMigrationItemsBuilder>
			build():Ref<CreateMigrationItems>
	}
	export interface DataArchivingMessage extends Struct<DataArchivingMessage>{

			seqId:Ref<string>
			limit:Ref<int>
	}
	export interface DataArchivingMessageBuilder extends Struct<DataArchivingMessageBuilder>{

			seqId(seqId:string):Ref<DataArchivingMessageBuilder>
			limit(limit:int):Ref<DataArchivingMessageBuilder>
			build():Ref<DataArchivingMessage>
	}
	export interface DataArchivingMessageStruct extends Struct<DataArchivingMessageStruct>{

			messageId:Ref<string>
			messageType:Ref<int>
			senderInfo:Ref<DataArchivingUserStruct>
			receiverIds:string[]
			actionType:Ref<string>
			chatId:Ref<string>
			actionTime:Ref<string>
			isSuperChat:Ref<bool>
			isCrossTenantChat:Ref<bool>
			chatName:Ref<string>
			content:Ref<string>
			chatMode:Ref<string>
			reactionType:Ref<string>
			parentMsgId:Ref<string>
	}
	export interface DataArchivingMessageStructBuilder extends Struct<DataArchivingMessageStructBuilder>{

			messageId(messageId:string):Ref<DataArchivingMessageStructBuilder>
			messageType(messageType:int):Ref<DataArchivingMessageStructBuilder>
			senderInfo(senderInfo:Ref<DataArchivingUserStruct>):Ref<DataArchivingMessageStructBuilder>
			receiverIds(receiverIds:string[]):Ref<DataArchivingMessageStructBuilder>
			actionType(actionType:string):Ref<DataArchivingMessageStructBuilder>
			chatId(chatId:string):Ref<DataArchivingMessageStructBuilder>
			actionTime(actionTime:string):Ref<DataArchivingMessageStructBuilder>
			isSuperChat(isSuperChat:bool):Ref<DataArchivingMessageStructBuilder>
			isCrossTenantChat(isCrossTenantChat:bool):Ref<DataArchivingMessageStructBuilder>
			chatName(chatName:string):Ref<DataArchivingMessageStructBuilder>
			content(content:string):Ref<DataArchivingMessageStructBuilder>
			chatMode(chatMode:string):Ref<DataArchivingMessageStructBuilder>
			reactionType(reactionType:string):Ref<DataArchivingMessageStructBuilder>
			parentMsgId(parentMsgId:string):Ref<DataArchivingMessageStructBuilder>
			build():Ref<DataArchivingMessageStruct>
	}
	export interface DataArchivingUser extends Struct<DataArchivingUser>{

			userIds:string[]
	}
	export interface DataArchivingUserBuilder extends Struct<DataArchivingUserBuilder>{

			userIds(userIds:string[]):Ref<DataArchivingUserBuilder>
			build():Ref<DataArchivingUser>
	}
	export interface DataArchivingUserStruct extends Struct<DataArchivingUserStruct>{

			type:Ref<string>
			id:Ref<string>
			name:Ref<string>
	}
	export interface DataArchivingUserStructBuilder extends Struct<DataArchivingUserStructBuilder>{

			type(type_:string):Ref<DataArchivingUserStructBuilder>
			id(id:string):Ref<DataArchivingUserStructBuilder>
			name(name:string):Ref<DataArchivingUserStructBuilder>
			build():Ref<DataArchivingUserStruct>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface DeviceApplyRecord extends Struct<DeviceApplyRecord>{

			applyId:Ref<string>
			deviceTerminalType:Ref<string>
			model:Ref<string>
			serialNumber:Ref<string>
			uuid:Ref<string>
			macAddress:Ref<string>
			imei:Ref<string>
			androidId:Ref<string>
			googleAid:Ref<string>
			idfa:Ref<string>
			idfv:Ref<string>
			applyStatus:Ref<string>
			operator:Ref<UserId>
			applyTime:Ref<string>
			diskSerialNumber:Ref<string>
			deviceOwnership:Ref<string>
			deviceSystem:Ref<string>
			deviceName:Ref<string>
			deviceRecordId:Ref<string>
	}
	export interface DeviceApplyRecordBuilder extends Struct<DeviceApplyRecordBuilder>{

			applyId(applyId:string):Ref<DeviceApplyRecordBuilder>
			deviceTerminalType(deviceTerminalType:string):Ref<DeviceApplyRecordBuilder>
			model(model:string):Ref<DeviceApplyRecordBuilder>
			serialNumber(serialNumber:string):Ref<DeviceApplyRecordBuilder>
			uuid(uuid:string):Ref<DeviceApplyRecordBuilder>
			macAddress(macAddress:string):Ref<DeviceApplyRecordBuilder>
			imei(imei:string):Ref<DeviceApplyRecordBuilder>
			androidId(androidId:string):Ref<DeviceApplyRecordBuilder>
			googleAid(googleAid:string):Ref<DeviceApplyRecordBuilder>
			idfa(idfa:string):Ref<DeviceApplyRecordBuilder>
			idfv(idfv:string):Ref<DeviceApplyRecordBuilder>
			applyStatus(applyStatus:string):Ref<DeviceApplyRecordBuilder>
			operator(operator:Ref<UserId>):Ref<DeviceApplyRecordBuilder>
			applyTime(applyTime:string):Ref<DeviceApplyRecordBuilder>
			diskSerialNumber(diskSerialNumber:string):Ref<DeviceApplyRecordBuilder>
			deviceOwnership(deviceOwnership:string):Ref<DeviceApplyRecordBuilder>
			deviceSystem(deviceSystem:string):Ref<DeviceApplyRecordBuilder>
			deviceName(deviceName:string):Ref<DeviceApplyRecordBuilder>
			deviceRecordId(deviceRecordId:string):Ref<DeviceApplyRecordBuilder>
			build():Ref<DeviceApplyRecord>
	}
	export interface DeviceRecord extends Struct<DeviceRecord>{

			deviceRecordId:Ref<string>
			deviceTerminalType:Ref<string>
			deviceSystem:Ref<string>
			model:Ref<string>
			deviceName:Ref<string>
			serialNumber:Ref<string>
			uuid:Ref<string>
			macAddress:Ref<string>
			imei:Ref<string>
			androidId:Ref<string>
			googleAid:Ref<string>
			idfa:Ref<string>
			idfv:Ref<string>
			deviceOwnership:Ref<string>
			deviceSource:Ref<string>
			registerTime:Ref<string>
			deviceCredibility:Ref<string>
			version:Ref<string>
			diskSerialNumber:Ref<string>
	}
	export interface DeviceRecordBuilder extends Struct<DeviceRecordBuilder>{

			deviceRecordId(deviceRecordId:string):Ref<DeviceRecordBuilder>
			deviceTerminalType(deviceTerminalType:string):Ref<DeviceRecordBuilder>
			deviceSystem(deviceSystem:string):Ref<DeviceRecordBuilder>
			model(model:string):Ref<DeviceRecordBuilder>
			deviceName(deviceName:string):Ref<DeviceRecordBuilder>
			serialNumber(serialNumber:string):Ref<DeviceRecordBuilder>
			uuid(uuid:string):Ref<DeviceRecordBuilder>
			macAddress(macAddress:string):Ref<DeviceRecordBuilder>
			imei(imei:string):Ref<DeviceRecordBuilder>
			androidId(androidId:string):Ref<DeviceRecordBuilder>
			googleAid(googleAid:string):Ref<DeviceRecordBuilder>
			idfa(idfa:string):Ref<DeviceRecordBuilder>
			idfv(idfv:string):Ref<DeviceRecordBuilder>
			deviceOwnership(deviceOwnership:string):Ref<DeviceRecordBuilder>
			deviceSource(deviceSource:string):Ref<DeviceRecordBuilder>
			registerTime(registerTime:string):Ref<DeviceRecordBuilder>
			deviceCredibility(deviceCredibility:string):Ref<DeviceRecordBuilder>
			version(version:string):Ref<DeviceRecordBuilder>
			diskSerialNumber(diskSerialNumber:string):Ref<DeviceRecordBuilder>
			build():Ref<DeviceRecord>
	}
	export interface DirectoryItems extends Struct<DirectoryItems>{

			entityId:Ref<string>
			mailAddress:Ref<string>
			entityLocation:Ref<string>
			entityCreateTime:Ref<string>
			entityType:Ref<string>
	}
	export interface DirectoryItemsBuilder extends Struct<DirectoryItemsBuilder>{

			entityId(entityId:string):Ref<DirectoryItemsBuilder>
			mailAddress(mailAddress:string):Ref<DirectoryItemsBuilder>
			entityLocation(entityLocation:string):Ref<DirectoryItemsBuilder>
			entityCreateTime(entityCreateTime:string):Ref<DirectoryItemsBuilder>
			entityType(entityType:string):Ref<DirectoryItemsBuilder>
			build():Ref<DirectoryItems>
	}
	export interface DlpDetectModeProofContext extends Struct<DlpDetectModeProofContext>{

			detectMode:Ref<int>
			detectName:Ref<string>
			proofContexts:Ref<DlpProofContext>[]
			hitCount:Ref<int>
	}
	export interface DlpDetectModeProofContextBuilder extends Struct<DlpDetectModeProofContextBuilder>{

			detectMode(detectMode:int):Ref<DlpDetectModeProofContextBuilder>
			detectName(detectName:string):Ref<DlpDetectModeProofContextBuilder>
			proofContexts(proofContexts:Ref<DlpProofContext>[]):Ref<DlpDetectModeProofContextBuilder>
			hitCount(hitCount:int):Ref<DlpDetectModeProofContextBuilder>
			build():Ref<DlpDetectModeProofContext>
	}
	export interface DlpEvidenceDetail extends Struct<DlpEvidenceDetail>{

			keywordHits:string[]
			regularHits:string[]
			sensitiveHits:string[]
			fileSizeHits:string[]
			fileTypeHits:string[]
			fileNameExtHits:string[]
			triggerSnippets:Ref<DlpPolicyHitProof>[]
			secureLabelHits:string[]
	}
	export interface DlpEvidenceDetailBuilder extends Struct<DlpEvidenceDetailBuilder>{

			keywordHits(keywordHits:string[]):Ref<DlpEvidenceDetailBuilder>
			regularHits(regularHits:string[]):Ref<DlpEvidenceDetailBuilder>
			sensitiveHits(sensitiveHits:string[]):Ref<DlpEvidenceDetailBuilder>
			fileSizeHits(fileSizeHits:string[]):Ref<DlpEvidenceDetailBuilder>
			fileTypeHits(fileTypeHits:string[]):Ref<DlpEvidenceDetailBuilder>
			fileNameExtHits(fileNameExtHits:string[]):Ref<DlpEvidenceDetailBuilder>
			triggerSnippets(triggerSnippets:Ref<DlpPolicyHitProof>[]):Ref<DlpEvidenceDetailBuilder>
			secureLabelHits(secureLabelHits:string[]):Ref<DlpEvidenceDetailBuilder>
			build():Ref<DlpEvidenceDetail>
	}
	export interface DlpExecuteEvidence extends Struct<DlpExecuteEvidence>{

			keywordHits:string[]
			regularHits:string[]
			sensitiveHits:string[]
	}
	export interface DlpExecuteEvidenceBuilder extends Struct<DlpExecuteEvidenceBuilder>{

			keywordHits(keywordHits:string[]):Ref<DlpExecuteEvidenceBuilder>
			regularHits(regularHits:string[]):Ref<DlpExecuteEvidenceBuilder>
			sensitiveHits(sensitiveHits:string[]):Ref<DlpExecuteEvidenceBuilder>
			build():Ref<DlpExecuteEvidence>
	}
	export interface DlpExecuteLog extends Struct<DlpExecuteLog>{

			applicableService:Ref<string>
			userName:Ref<string>
			userId:Ref<string>
			trigger:Ref<string>
			time:Ref<string>
			systemAction:Ref<string>
			senderName:Ref<string>
			senderId:Ref<string>
			recipientName:Ref<string>
			recipientId:Ref<string>
			chatName:Ref<string>
			chatId:Ref<string>
			messageId:Ref<string>
			messageContent:Ref<string>
			aliasIngroup:Ref<string>
			groupDescription:Ref<string>
			groupTabContent:Ref<string>
			fileName:Ref<string>
			fileKey:Ref<string>
			documentOwnerName:Ref<string>
			documentOwnerId:Ref<string>
			documentName:Ref<string>
			documentType:Ref<string>
			documentLink:Ref<string>
			evidenceDetail:Ref<DlpEvidenceDetail>
			hitPolicies:Ref<DlpHitPolicy>[]
			fileToken:Ref<string>
	}
	export interface DlpExecuteLogBuilder extends Struct<DlpExecuteLogBuilder>{

			applicableService(applicableService:string):Ref<DlpExecuteLogBuilder>
			userName(userName:string):Ref<DlpExecuteLogBuilder>
			userId(userId:string):Ref<DlpExecuteLogBuilder>
			trigger(trigger:string):Ref<DlpExecuteLogBuilder>
			time(time:string):Ref<DlpExecuteLogBuilder>
			systemAction(systemAction:string):Ref<DlpExecuteLogBuilder>
			senderName(senderName:string):Ref<DlpExecuteLogBuilder>
			senderId(senderId:string):Ref<DlpExecuteLogBuilder>
			recipientName(recipientName:string):Ref<DlpExecuteLogBuilder>
			recipientId(recipientId:string):Ref<DlpExecuteLogBuilder>
			chatName(chatName:string):Ref<DlpExecuteLogBuilder>
			chatId(chatId:string):Ref<DlpExecuteLogBuilder>
			messageId(messageId:string):Ref<DlpExecuteLogBuilder>
			messageContent(messageContent:string):Ref<DlpExecuteLogBuilder>
			aliasIngroup(aliasIngroup:string):Ref<DlpExecuteLogBuilder>
			groupDescription(groupDescription:string):Ref<DlpExecuteLogBuilder>
			groupTabContent(groupTabContent:string):Ref<DlpExecuteLogBuilder>
			fileName(fileName:string):Ref<DlpExecuteLogBuilder>
			fileKey(fileKey:string):Ref<DlpExecuteLogBuilder>
			documentOwnerName(documentOwnerName:string):Ref<DlpExecuteLogBuilder>
			documentOwnerId(documentOwnerId:string):Ref<DlpExecuteLogBuilder>
			documentName(documentName:string):Ref<DlpExecuteLogBuilder>
			documentType(documentType:string):Ref<DlpExecuteLogBuilder>
			documentLink(documentLink:string):Ref<DlpExecuteLogBuilder>
			evidenceDetail(evidenceDetail:Ref<DlpEvidenceDetail>):Ref<DlpExecuteLogBuilder>
			hitPolicies(hitPolicies:Ref<DlpHitPolicy>[]):Ref<DlpExecuteLogBuilder>
			fileToken(fileToken:string):Ref<DlpExecuteLogBuilder>
			build():Ref<DlpExecuteLog>
	}
	export interface DlpHitPolicy extends Struct<DlpHitPolicy>{

			policyId:Ref<string>
			policyName:Ref<string>
	}
	export interface DlpHitPolicyBuilder extends Struct<DlpHitPolicyBuilder>{

			policyId(policyId:string):Ref<DlpHitPolicyBuilder>
			policyName(policyName:string):Ref<DlpHitPolicyBuilder>
			build():Ref<DlpHitPolicy>
	}
	export interface DlpPolicyHitProof extends Struct<DlpPolicyHitProof>{

			policyId:Ref<string>
			detectModeProofContexts:Ref<DlpDetectModeProofContext>[]
	}
	export interface DlpPolicyHitProofBuilder extends Struct<DlpPolicyHitProofBuilder>{

			policyId(policyId:string):Ref<DlpPolicyHitProofBuilder>
			detectModeProofContexts(detectModeProofContexts:Ref<DlpDetectModeProofContext>[]):Ref<DlpPolicyHitProofBuilder>
			build():Ref<DlpPolicyHitProof>
	}
	export interface DlpProofContext extends Struct<DlpProofContext>{

			hitContent:Ref<string>
			contextSnippet:Ref<string>
	}
	export interface DlpProofContextBuilder extends Struct<DlpProofContextBuilder>{

			hitContent(hitContent:string):Ref<DlpProofContextBuilder>
			contextSnippet(contextSnippet:string):Ref<DlpProofContextBuilder>
			build():Ref<DlpProofContext>
	}
	export interface Document extends Struct<Document>{

			token:Ref<string>
			title:Ref<string>
			updateTime:Ref<int>
			objectStatus:Ref<int>
			objectType:Ref<int>
			owner:Ref<SimpleUser>
	}
	export interface DocumentBuilder extends Struct<DocumentBuilder>{

			token(token:string):Ref<DocumentBuilder>
			title(title:string):Ref<DocumentBuilder>
			updateTime(updateTime:int):Ref<DocumentBuilder>
			objectStatus(objectStatus:int):Ref<DocumentBuilder>
			objectType(objectType:int):Ref<DocumentBuilder>
			owner(owner:Ref<SimpleUser>):Ref<DocumentBuilder>
			build():Ref<Document>
	}
	export interface DownloadToken extends Struct<DownloadToken>{

			token:Ref<string>
	}
	export interface DownloadTokenBuilder extends Struct<DownloadTokenBuilder>{

			token(token:string):Ref<DownloadTokenBuilder>
			build():Ref<DownloadToken>
	}
	export interface Email extends Struct<Email>{

			id:Ref<string>
			title:Ref<string>
			ownerType:Ref<int>
			createTime:Ref<string>
			ownerUserId:Ref<string>
			ownerAddress:Ref<string>
	}
	export interface EmailBuilder extends Struct<EmailBuilder>{

			id(id:string):Ref<EmailBuilder>
			title(title:string):Ref<EmailBuilder>
			ownerType(ownerType:int):Ref<EmailBuilder>
			createTime(createTime:string):Ref<EmailBuilder>
			ownerUserId(ownerUserId:string):Ref<EmailBuilder>
			ownerAddress(ownerAddress:string):Ref<EmailBuilder>
			build():Ref<Email>
	}
	export interface EmailFilter extends Struct<EmailFilter>{

			ownerUseridList:string[]
			ownerAddressList:string[]
			timeRange:Ref<TimeRange>
			senders:string[]
			recipients:string[]
			emailTitle:Ref<string>
			emailId:Ref<string>
	}
	export interface EmailFilterBuilder extends Struct<EmailFilterBuilder>{

			ownerUseridList(ownerUseridList:string[]):Ref<EmailFilterBuilder>
			ownerAddressList(ownerAddressList:string[]):Ref<EmailFilterBuilder>
			timeRange(timeRange:Ref<TimeRange>):Ref<EmailFilterBuilder>
			senders(senders:string[]):Ref<EmailFilterBuilder>
			recipients(recipients:string[]):Ref<EmailFilterBuilder>
			emailTitle(emailTitle:string):Ref<EmailFilterBuilder>
			emailId(emailId:string):Ref<EmailFilterBuilder>
			build():Ref<EmailFilter>
	}
	export interface File extends Alias<Nothing>{

	}
	export interface GwCommon extends Struct<GwCommon>{

			locale:Ref<string>
			reportTime:Ref<string>
			sessionUuid:Ref<string>
			terminalType:Ref<string>
			userId:Ref<UserId>
			openplatformAppId:Ref<string>
			requestId:Ref<string>
			logId:Ref<string>
	}
	export interface GwCommonBuilder extends Struct<GwCommonBuilder>{

			locale(locale:string):Ref<GwCommonBuilder>
			reportTime(reportTime:string):Ref<GwCommonBuilder>
			sessionUuid(sessionUuid:string):Ref<GwCommonBuilder>
			terminalType(terminalType:string):Ref<GwCommonBuilder>
			userId(userId:Ref<UserId>):Ref<GwCommonBuilder>
			openplatformAppId(openplatformAppId:string):Ref<GwCommonBuilder>
			requestId(requestId:string):Ref<GwCommonBuilder>
			logId(logId:string):Ref<GwCommonBuilder>
			build():Ref<GwCommon>
	}
	export interface GwRequest extends Struct<GwRequest>{

			host:Ref<string>
			path:Ref<string>
			pathParams:Ref<Param>[]
			query:Ref<string>
			method:Ref<string>
			userAgent:Ref<string>
			clientIp:Ref<string>
			referer:Ref<string>
			origin:Ref<string>
			header:Ref<string>
	}
	export interface GwRequestBuilder extends Struct<GwRequestBuilder>{

			host(host:string):Ref<GwRequestBuilder>
			path(path:string):Ref<GwRequestBuilder>
			pathParams(pathParams:Ref<Param>[]):Ref<GwRequestBuilder>
			query(query:string):Ref<GwRequestBuilder>
			method(method:string):Ref<GwRequestBuilder>
			userAgent(userAgent:string):Ref<GwRequestBuilder>
			clientIp(clientIp:string):Ref<GwRequestBuilder>
			referer(referer:string):Ref<GwRequestBuilder>
			origin(origin:string):Ref<GwRequestBuilder>
			header(header:string):Ref<GwRequestBuilder>
			build():Ref<GwRequest>
	}
	export interface GwResponse extends Struct<GwResponse>{

			statusCode:Ref<int>
			header:Ref<string>
	}
	export interface GwResponseBuilder extends Struct<GwResponseBuilder>{

			statusCode(statusCode:int):Ref<GwResponseBuilder>
			header(header:string):Ref<GwResponseBuilder>
			build():Ref<GwResponse>
	}
	export interface KeyPerson extends Struct<KeyPerson>{

			keyPersonId:Ref<string>
			name:Ref<string>
			email:Ref<string>
			avatarUrl:Ref<string>
	}
	export interface KeyPersonBuilder extends Struct<KeyPersonBuilder>{

			keyPersonId(keyPersonId:string):Ref<KeyPersonBuilder>
			name(name:string):Ref<KeyPersonBuilder>
			email(email:string):Ref<KeyPersonBuilder>
			avatarUrl(avatarUrl:string):Ref<KeyPersonBuilder>
			build():Ref<KeyPerson>
	}
	export interface ListDataOpenapiLogReq extends Struct<ListDataOpenapiLogReq>{

			listOpenapiLogRequest:Ref<ListOpenapiLogRequest>
	}
	export interface ListDataOpenapiLogReqBuilder extends Struct<ListDataOpenapiLogReqBuilder>{

			listOpenapiLogRequest(listOpenapiLogRequest:Ref<ListOpenapiLogRequest>):Ref<ListDataOpenapiLogReqBuilder>
			build():Ref<ListDataOpenapiLogReq>
	}
	export interface ListDataOpenapiLogResp extends Struct<ListDataOpenapiLogResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListDataOpenapiLogRespData>
			success():bool
	}
	export interface ListDataOpenapiLogRespData extends Struct<ListDataOpenapiLogRespData>{

			items:Ref<OpenapiLog>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListOpenapiLogRequest extends Struct<ListOpenapiLogRequest>{

			apiKeys:string[]
			startTime:Ref<int>
			endTime:Ref<int>
			appId:Ref<string>
			pageSize:Ref<int>
			pageToken:Ref<string>
	}
	export interface ListOpenapiLogRequestBuilder extends Struct<ListOpenapiLogRequestBuilder>{

			apiKeys(apiKeys:string[]):Ref<ListOpenapiLogRequestBuilder>
			startTime(startTime:int):Ref<ListOpenapiLogRequestBuilder>
			endTime(endTime:int):Ref<ListOpenapiLogRequestBuilder>
			appId(appId:string):Ref<ListOpenapiLogRequestBuilder>
			pageSize(pageSize:int):Ref<ListOpenapiLogRequestBuilder>
			pageToken(pageToken:string):Ref<ListOpenapiLogRequestBuilder>
			build():Ref<ListOpenapiLogRequest>
	}
	export interface Message extends Struct<Message>{

			openMessageId:Ref<string>
			text:Ref<string>
			openChatId:Ref<string>
			chatName:Ref<string>
			chatType:Ref<int>
			owner:Ref<User>
			createTime:Ref<string>
	}
	export interface MessageBuilder extends Struct<MessageBuilder>{

			openMessageId(openMessageId:string):Ref<MessageBuilder>
			text(text:string):Ref<MessageBuilder>
			openChatId(openChatId:string):Ref<MessageBuilder>
			chatName(chatName:string):Ref<MessageBuilder>
			chatType(chatType:int):Ref<MessageBuilder>
			owner(owner:Ref<User>):Ref<MessageBuilder>
			createTime(createTime:string):Ref<MessageBuilder>
			build():Ref<Message>
	}
	export interface MigrationEntity extends Struct<MigrationEntity>{

			id:Ref<string>
			location:Ref<string>
			type:Ref<string>
			creatorId:Ref<string>
			creatorType:Ref<string>
			createTime:Ref<string>
			mailAddress:Ref<string>
	}
	export interface MigrationEntityBuilder extends Struct<MigrationEntityBuilder>{

			id(id:string):Ref<MigrationEntityBuilder>
			location(location:string):Ref<MigrationEntityBuilder>
			type(type_:string):Ref<MigrationEntityBuilder>
			creatorId(creatorId:string):Ref<MigrationEntityBuilder>
			creatorType(creatorType:string):Ref<MigrationEntityBuilder>
			createTime(createTime:string):Ref<MigrationEntityBuilder>
			mailAddress(mailAddress:string):Ref<MigrationEntityBuilder>
			build():Ref<MigrationEntity>
	}
	export interface MigrationItems extends Struct<MigrationItems>{

			taskId:Ref<string>
			taskStatus:Ref<string>
			entity:Ref<MigrationEntity>
			message:Ref<string>
	}
	export interface MigrationItemsBuilder extends Struct<MigrationItemsBuilder>{

			taskId(taskId:string):Ref<MigrationItemsBuilder>
			taskStatus(taskStatus:string):Ref<MigrationItemsBuilder>
			entity(entity:Ref<MigrationEntity>):Ref<MigrationItemsBuilder>
			message(message:string):Ref<MigrationItemsBuilder>
			build():Ref<MigrationItems>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAdminLogBuilder():Ref<AdminLogBuilder>

	export function newAppDlpExecuteLogBuilder():Ref<AppDlpExecuteLogBuilder>

	export function newCreateMigrationEntityBuilder():Ref<CreateMigrationEntityBuilder>

	export function newCreateMigrationItemsBuilder():Ref<CreateMigrationItemsBuilder>

	export function newDataArchivingMessageBuilder():Ref<DataArchivingMessageBuilder>

	export function newDataArchivingMessageStructBuilder():Ref<DataArchivingMessageStructBuilder>

	export function newDataArchivingUserBuilder():Ref<DataArchivingUserBuilder>

	export function newDataArchivingUserStructBuilder():Ref<DataArchivingUserStructBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDeviceApplyRecordBuilder():Ref<DeviceApplyRecordBuilder>

	export function newDeviceRecordBuilder():Ref<DeviceRecordBuilder>

	export function newDirectoryItemsBuilder():Ref<DirectoryItemsBuilder>

	export function newDlpDetectModeProofContextBuilder():Ref<DlpDetectModeProofContextBuilder>

	export function newDlpEvidenceDetailBuilder():Ref<DlpEvidenceDetailBuilder>

	export function newDlpExecuteEvidenceBuilder():Ref<DlpExecuteEvidenceBuilder>

	export function newDlpExecuteLogBuilder():Ref<DlpExecuteLogBuilder>

	export function newDlpHitPolicyBuilder():Ref<DlpHitPolicyBuilder>

	export function newDlpPolicyHitProofBuilder():Ref<DlpPolicyHitProofBuilder>

	export function newDlpProofContextBuilder():Ref<DlpProofContextBuilder>

	export function newDocumentBuilder():Ref<DocumentBuilder>

	export function newDownloadTokenBuilder():Ref<DownloadTokenBuilder>

	export function newEmailBuilder():Ref<EmailBuilder>

	export function newEmailFilterBuilder():Ref<EmailFilterBuilder>

	export function newGwCommonBuilder():Ref<GwCommonBuilder>

	export function newGwRequestBuilder():Ref<GwRequestBuilder>

	export function newGwResponseBuilder():Ref<GwResponseBuilder>

	export function newKeyPersonBuilder():Ref<KeyPersonBuilder>

	export function newListDataOpenapiLogReqBuilder():Ref<ListDataOpenapiLogReqBuilder>

	export function newListOpenapiLogRequestBuilder():Ref<ListOpenapiLogRequestBuilder>

	export function newMessageBuilder():Ref<MessageBuilder>

	export function newMigrationEntityBuilder():Ref<MigrationEntityBuilder>

	export function newMigrationItemsBuilder():Ref<MigrationItemsBuilder>

	export function newNotificationBuilder():Ref<NotificationBuilder>

	export function newOpenapiLogBuilder():Ref<OpenapiLogBuilder>

	export function newOpenapiLogDetailBuilder():Ref<OpenapiLogDetailBuilder>

	export function newParamBuilder():Ref<ParamBuilder>

	export function newSecurityLogErrorBuilder():Ref<SecurityLogErrorBuilder>

	export function newSimpleUserBuilder():Ref<SimpleUserBuilder>

	export function newTaskStatusBuilder():Ref<TaskStatusBuilder>

	export function newTenantBuilder():Ref<TenantBuilder>

	export function newTenantThirdPartyEncryptionAppBuilder():Ref<TenantThirdPartyEncryptionAppBuilder>

	export function newTimeRangeBuilder():Ref<TimeRangeBuilder>

	export function newUserBuilder():Ref<UserBuilder>

	export function newUserIdBuilder():Ref<UserIdBuilder>

	export function newUserMigrationBuilder():Ref<UserMigrationBuilder>

	export function newVaultExportFileBuilder():Ref<VaultExportFileBuilder>

	export function newVaultTaskBuilder():Ref<VaultTaskBuilder>

	export interface Notification extends Struct<Notification>{

			idempotentKey:Ref<string>
			content:Ref<string>
	}
	export interface NotificationBuilder extends Struct<NotificationBuilder>{

			idempotentKey(idempotentKey:string):Ref<NotificationBuilder>
			content(content:string):Ref<NotificationBuilder>
			build():Ref<Notification>
	}
	export interface OpenapiLog extends Struct<OpenapiLog>{

			id:Ref<string>
			apiKey:Ref<string>
			eventTime:Ref<int>
			appId:Ref<string>
			ip:Ref<string>
			logDetail:Ref<OpenapiLogDetail>
	}
	export interface OpenapiLogBuilder extends Struct<OpenapiLogBuilder>{

			id(id:string):Ref<OpenapiLogBuilder>
			apiKey(apiKey:string):Ref<OpenapiLogBuilder>
			eventTime(eventTime:int):Ref<OpenapiLogBuilder>
			appId(appId:string):Ref<OpenapiLogBuilder>
			ip(ip:string):Ref<OpenapiLogBuilder>
			logDetail(logDetail:Ref<OpenapiLogDetail>):Ref<OpenapiLogBuilder>
			build():Ref<OpenapiLog>
	}
	export interface OpenapiLogDetail extends Struct<OpenapiLogDetail>{

			path:Ref<string>
			method:Ref<string>
			queryParam:Ref<string>
			payload:Ref<string>
			statusCode:Ref<int>
			response:Ref<string>
	}
	export interface OpenapiLogDetailBuilder extends Struct<OpenapiLogDetailBuilder>{

			path(path:string):Ref<OpenapiLogDetailBuilder>
			method(method:string):Ref<OpenapiLogDetailBuilder>
			queryParam(queryParam:string):Ref<OpenapiLogDetailBuilder>
			payload(payload:string):Ref<OpenapiLogDetailBuilder>
			statusCode(statusCode:int):Ref<OpenapiLogDetailBuilder>
			response(response:string):Ref<OpenapiLogDetailBuilder>
			build():Ref<OpenapiLogDetail>
	}
	export interface Param extends Struct<Param>{

			key:Ref<string>
			value:Ref<string>
	}
	export interface ParamBuilder extends Struct<ParamBuilder>{

			key(key:string):Ref<ParamBuilder>
			value(value:string):Ref<ParamBuilder>
			build():Ref<Param>
	}
	export interface SecurityLogError extends Struct<SecurityLogError>,Error{

			request:Ref<GwRequest>
			response:Ref<GwResponse>
			common:Ref<GwCommon>
	}
	export interface SecurityLogErrorBuilder extends Struct<SecurityLogErrorBuilder>,Error{

			request(request:Ref<GwRequest>):Ref<SecurityLogErrorBuilder>
			response(response:Ref<GwResponse>):Ref<SecurityLogErrorBuilder>
			common(common:Ref<GwCommon>):Ref<SecurityLogErrorBuilder>
			build():Ref<SecurityLogError>
	}
	export interface SimpleUser extends Struct<SimpleUser>{

			id:Ref<string>
			name:Ref<string>
	}
	export interface SimpleUserBuilder extends Struct<SimpleUserBuilder>{

			id(id:string):Ref<SimpleUserBuilder>
			name(name:string):Ref<SimpleUserBuilder>
			build():Ref<SimpleUser>
	}
	export interface TaskStatus extends Struct<TaskStatus>{

			failureReason:Ref<string>
			statusCode:Ref<int>
	}
	export interface TaskStatusBuilder extends Struct<TaskStatusBuilder>{

			failureReason(failureReason:string):Ref<TaskStatusBuilder>
			statusCode(statusCode:int):Ref<TaskStatusBuilder>
			build():Ref<TaskStatus>
	}
	export interface Tenant extends Struct<Tenant>{

			availableGeoLocations:string[]
	}
	export interface TenantBuilder extends Struct<TenantBuilder>{

			availableGeoLocations(availableGeoLocations:string[]):Ref<TenantBuilder>
			build():Ref<Tenant>
	}
	export interface TenantThirdPartyEncryptionApp extends Struct<TenantThirdPartyEncryptionApp>{

			vendorName:Ref<string>
			status:Ref<int>
			serviceStartTime:Ref<string>
			serviceEndTime:Ref<string>
			config:Ref<string>
	}
	export interface TenantThirdPartyEncryptionAppBuilder extends Struct<TenantThirdPartyEncryptionAppBuilder>{

			vendorName(vendorName:string):Ref<TenantThirdPartyEncryptionAppBuilder>
			status(status:int):Ref<TenantThirdPartyEncryptionAppBuilder>
			serviceStartTime(serviceStartTime:string):Ref<TenantThirdPartyEncryptionAppBuilder>
			serviceEndTime(serviceEndTime:string):Ref<TenantThirdPartyEncryptionAppBuilder>
			config(config:string):Ref<TenantThirdPartyEncryptionAppBuilder>
			build():Ref<TenantThirdPartyEncryptionApp>
	}
	export interface TimeRange extends Struct<TimeRange>{

			start:Ref<string>
			end:Ref<string>
	}
	export interface TimeRangeBuilder extends Struct<TimeRangeBuilder>{

			start(start:string):Ref<TimeRangeBuilder>
			end(end:string):Ref<TimeRangeBuilder>
			build():Ref<TimeRange>
	}
	export interface User extends Struct<User>{

			userId:Ref<string>
			name:Ref<string>
			email:Ref<string>
			avatarUrl:Ref<string>
	}
	export interface UserBuilder extends Struct<UserBuilder>{

			userId(userId:string):Ref<UserBuilder>
			name(name:string):Ref<UserBuilder>
			email(email:string):Ref<UserBuilder>
			avatarUrl(avatarUrl:string):Ref<UserBuilder>
			build():Ref<User>
	}
	export interface UserId extends Struct<UserId>{

			userId:Ref<string>
			openId:Ref<string>
			unionId:Ref<string>
	}
	export interface UserIdBuilder extends Struct<UserIdBuilder>{

			userId(userId:string):Ref<UserIdBuilder>
			openId(openId:string):Ref<UserIdBuilder>
			unionId(unionId:string):Ref<UserIdBuilder>
			build():Ref<UserId>
	}
	export interface UserMigration extends Struct<UserMigration>{

			userId:Ref<string>
			destGeo:Ref<string>
			taskId:Ref<string>
			status:Ref<string>
			progress:Ref<int>
	}
	export interface UserMigrationBuilder extends Struct<UserMigrationBuilder>{

			userId(userId:string):Ref<UserMigrationBuilder>
			destGeo(destGeo:string):Ref<UserMigrationBuilder>
			taskId(taskId:string):Ref<UserMigrationBuilder>
			status(status:string):Ref<UserMigrationBuilder>
			progress(progress:int):Ref<UserMigrationBuilder>
			build():Ref<UserMigration>
	}
	export interface V1 extends Struct<V1>{

			openapiLog:Ref<{
			
				listData(ctx:context.Context,req:Ref<ListDataOpenapiLogReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDataOpenapiLogResp>
			}>
	}
	export interface VaultExportFile extends Struct<VaultExportFile>{

			name:Ref<string>
			size:Ref<string>
			url:Ref<string>
			downloadUrl:Ref<string>
	}
	export interface VaultExportFileBuilder extends Struct<VaultExportFileBuilder>{

			name(name:string):Ref<VaultExportFileBuilder>
			size(size:string):Ref<VaultExportFileBuilder>
			url(url:string):Ref<VaultExportFileBuilder>
			downloadUrl(downloadUrl:string):Ref<VaultExportFileBuilder>
			build():Ref<VaultExportFile>
	}
	export interface VaultTask extends Struct<VaultTask>{

			taskId:Ref<string>
			name:Ref<string>
			size:Ref<string>
			validDays:Ref<int>
			createTime:Ref<string>
			extractKey:Ref<string>
			creator:Ref<SimpleUser>
			files:Ref<VaultExportFile>[]
			status:Ref<TaskStatus>
	}
	export interface VaultTaskBuilder extends Struct<VaultTaskBuilder>{

			taskId(taskId:string):Ref<VaultTaskBuilder>
			name(name:string):Ref<VaultTaskBuilder>
			size(size:string):Ref<VaultTaskBuilder>
			validDays(validDays:int):Ref<VaultTaskBuilder>
			createTime(createTime:string):Ref<VaultTaskBuilder>
			extractKey(extractKey:string):Ref<VaultTaskBuilder>
			creator(creator:Ref<SimpleUser>):Ref<VaultTaskBuilder>
			files(files:Ref<VaultExportFile>[]):Ref<VaultTaskBuilder>
			status(status:Ref<TaskStatus>):Ref<VaultTaskBuilder>
			build():Ref<VaultTask>
	}
	export function emptyDataArchivingMessage():DataArchivingMessage
	export function emptyRefDataArchivingMessage():Ref<DataArchivingMessage>
	export function refOfDataArchivingMessage(x:DataArchivingMessage,v:Ref<DataArchivingMessage>)
	export function unRefDataArchivingMessage(v:Ref<DataArchivingMessage>):DataArchivingMessage
	export function emptyEmail():Email
	export function emptyRefEmail():Ref<Email>
	export function refOfEmail(x:Email,v:Ref<Email>)
	export function unRefEmail(v:Ref<Email>):Email
	export function emptyTenantThirdPartyEncryptionAppBuilder():TenantThirdPartyEncryptionAppBuilder
	export function emptyRefTenantThirdPartyEncryptionAppBuilder():Ref<TenantThirdPartyEncryptionAppBuilder>
	export function refOfTenantThirdPartyEncryptionAppBuilder(x:TenantThirdPartyEncryptionAppBuilder,v:Ref<TenantThirdPartyEncryptionAppBuilder>)
	export function unRefTenantThirdPartyEncryptionAppBuilder(v:Ref<TenantThirdPartyEncryptionAppBuilder>):TenantThirdPartyEncryptionAppBuilder
	export function emptyDeviceRecord():DeviceRecord
	export function emptyRefDeviceRecord():Ref<DeviceRecord>
	export function refOfDeviceRecord(x:DeviceRecord,v:Ref<DeviceRecord>)
	export function unRefDeviceRecord(v:Ref<DeviceRecord>):DeviceRecord
	export function emptyDlpEvidenceDetail():DlpEvidenceDetail
	export function emptyRefDlpEvidenceDetail():Ref<DlpEvidenceDetail>
	export function refOfDlpEvidenceDetail(x:DlpEvidenceDetail,v:Ref<DlpEvidenceDetail>)
	export function unRefDlpEvidenceDetail(v:Ref<DlpEvidenceDetail>):DlpEvidenceDetail
	export function emptyDocument():Document
	export function emptyRefDocument():Ref<Document>
	export function refOfDocument(x:Document,v:Ref<Document>)
	export function unRefDocument(v:Ref<Document>):Document
	export function emptyTimeRange():TimeRange
	export function emptyRefTimeRange():Ref<TimeRange>
	export function refOfTimeRange(x:TimeRange,v:Ref<TimeRange>)
	export function unRefTimeRange(v:Ref<TimeRange>):TimeRange
	export function emptyCreateMigrationEntity():CreateMigrationEntity
	export function emptyRefCreateMigrationEntity():Ref<CreateMigrationEntity>
	export function refOfCreateMigrationEntity(x:CreateMigrationEntity,v:Ref<CreateMigrationEntity>)
	export function unRefCreateMigrationEntity(v:Ref<CreateMigrationEntity>):CreateMigrationEntity
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyListOpenapiLogRequestBuilder():ListOpenapiLogRequestBuilder
	export function emptyRefListOpenapiLogRequestBuilder():Ref<ListOpenapiLogRequestBuilder>
	export function refOfListOpenapiLogRequestBuilder(x:ListOpenapiLogRequestBuilder,v:Ref<ListOpenapiLogRequestBuilder>)
	export function unRefListOpenapiLogRequestBuilder(v:Ref<ListOpenapiLogRequestBuilder>):ListOpenapiLogRequestBuilder
	export function emptyVaultTask():VaultTask
	export function emptyRefVaultTask():Ref<VaultTask>
	export function refOfVaultTask(x:VaultTask,v:Ref<VaultTask>)
	export function unRefVaultTask(v:Ref<VaultTask>):VaultTask
	export function emptyListDataOpenapiLogRespData():ListDataOpenapiLogRespData
	export function emptyRefListDataOpenapiLogRespData():Ref<ListDataOpenapiLogRespData>
	export function refOfListDataOpenapiLogRespData(x:ListDataOpenapiLogRespData,v:Ref<ListDataOpenapiLogRespData>)
	export function unRefListDataOpenapiLogRespData(v:Ref<ListDataOpenapiLogRespData>):ListDataOpenapiLogRespData
	export function emptyListDataOpenapiLogReqBuilder():ListDataOpenapiLogReqBuilder
	export function emptyRefListDataOpenapiLogReqBuilder():Ref<ListDataOpenapiLogReqBuilder>
	export function refOfListDataOpenapiLogReqBuilder(x:ListDataOpenapiLogReqBuilder,v:Ref<ListDataOpenapiLogReqBuilder>)
	export function unRefListDataOpenapiLogReqBuilder(v:Ref<ListDataOpenapiLogReqBuilder>):ListDataOpenapiLogReqBuilder
	export function emptyUserMigration():UserMigration
	export function emptyRefUserMigration():Ref<UserMigration>
	export function refOfUserMigration(x:UserMigration,v:Ref<UserMigration>)
	export function unRefUserMigration(v:Ref<UserMigration>):UserMigration
	export function emptyUserMigrationBuilder():UserMigrationBuilder
	export function emptyRefUserMigrationBuilder():Ref<UserMigrationBuilder>
	export function refOfUserMigrationBuilder(x:UserMigrationBuilder,v:Ref<UserMigrationBuilder>)
	export function unRefUserMigrationBuilder(v:Ref<UserMigrationBuilder>):UserMigrationBuilder
	export function emptyCreateMigrationItems():CreateMigrationItems
	export function emptyRefCreateMigrationItems():Ref<CreateMigrationItems>
	export function refOfCreateMigrationItems(x:CreateMigrationItems,v:Ref<CreateMigrationItems>)
	export function unRefCreateMigrationItems(v:Ref<CreateMigrationItems>):CreateMigrationItems
	export function emptyDirectoryItems():DirectoryItems
	export function emptyRefDirectoryItems():Ref<DirectoryItems>
	export function refOfDirectoryItems(x:DirectoryItems,v:Ref<DirectoryItems>)
	export function unRefDirectoryItems(v:Ref<DirectoryItems>):DirectoryItems
	export function emptyMigrationEntity():MigrationEntity
	export function emptyRefMigrationEntity():Ref<MigrationEntity>
	export function refOfMigrationEntity(x:MigrationEntity,v:Ref<MigrationEntity>)
	export function unRefMigrationEntity(v:Ref<MigrationEntity>):MigrationEntity
	export function emptyUserBuilder():UserBuilder
	export function emptyRefUserBuilder():Ref<UserBuilder>
	export function refOfUserBuilder(x:UserBuilder,v:Ref<UserBuilder>)
	export function unRefUserBuilder(v:Ref<UserBuilder>):UserBuilder
	export function emptyEmailFilterBuilder():EmailFilterBuilder
	export function emptyRefEmailFilterBuilder():Ref<EmailFilterBuilder>
	export function refOfEmailFilterBuilder(x:EmailFilterBuilder,v:Ref<EmailFilterBuilder>)
	export function unRefEmailFilterBuilder(v:Ref<EmailFilterBuilder>):EmailFilterBuilder
	export function emptyAdminLog():AdminLog
	export function emptyRefAdminLog():Ref<AdminLog>
	export function refOfAdminLog(x:AdminLog,v:Ref<AdminLog>)
	export function unRefAdminLog(v:Ref<AdminLog>):AdminLog
	export function emptyCreateMigrationEntityBuilder():CreateMigrationEntityBuilder
	export function emptyRefCreateMigrationEntityBuilder():Ref<CreateMigrationEntityBuilder>
	export function refOfCreateMigrationEntityBuilder(x:CreateMigrationEntityBuilder,v:Ref<CreateMigrationEntityBuilder>)
	export function unRefCreateMigrationEntityBuilder(v:Ref<CreateMigrationEntityBuilder>):CreateMigrationEntityBuilder
	export function emptyGwRequestBuilder():GwRequestBuilder
	export function emptyRefGwRequestBuilder():Ref<GwRequestBuilder>
	export function refOfGwRequestBuilder(x:GwRequestBuilder,v:Ref<GwRequestBuilder>)
	export function unRefGwRequestBuilder(v:Ref<GwRequestBuilder>):GwRequestBuilder
	export function emptyListDataOpenapiLogReq():ListDataOpenapiLogReq
	export function emptyRefListDataOpenapiLogReq():Ref<ListDataOpenapiLogReq>
	export function refOfListDataOpenapiLogReq(x:ListDataOpenapiLogReq,v:Ref<ListDataOpenapiLogReq>)
	export function unRefListDataOpenapiLogReq(v:Ref<ListDataOpenapiLogReq>):ListDataOpenapiLogReq
	export function emptyDeviceApplyRecordBuilder():DeviceApplyRecordBuilder
	export function emptyRefDeviceApplyRecordBuilder():Ref<DeviceApplyRecordBuilder>
	export function refOfDeviceApplyRecordBuilder(x:DeviceApplyRecordBuilder,v:Ref<DeviceApplyRecordBuilder>)
	export function unRefDeviceApplyRecordBuilder(v:Ref<DeviceApplyRecordBuilder>):DeviceApplyRecordBuilder
	export function emptyGwResponseBuilder():GwResponseBuilder
	export function emptyRefGwResponseBuilder():Ref<GwResponseBuilder>
	export function refOfGwResponseBuilder(x:GwResponseBuilder,v:Ref<GwResponseBuilder>)
	export function unRefGwResponseBuilder(v:Ref<GwResponseBuilder>):GwResponseBuilder
	export function emptySimpleUser():SimpleUser
	export function emptyRefSimpleUser():Ref<SimpleUser>
	export function refOfSimpleUser(x:SimpleUser,v:Ref<SimpleUser>)
	export function unRefSimpleUser(v:Ref<SimpleUser>):SimpleUser
	export function emptySimpleUserBuilder():SimpleUserBuilder
	export function emptyRefSimpleUserBuilder():Ref<SimpleUserBuilder>
	export function refOfSimpleUserBuilder(x:SimpleUserBuilder,v:Ref<SimpleUserBuilder>)
	export function unRefSimpleUserBuilder(v:Ref<SimpleUserBuilder>):SimpleUserBuilder
	export function emptyUser():User
	export function emptyRefUser():Ref<User>
	export function refOfUser(x:User,v:Ref<User>)
	export function unRefUser(v:Ref<User>):User
	export function emptyVaultExportFileBuilder():VaultExportFileBuilder
	export function emptyRefVaultExportFileBuilder():Ref<VaultExportFileBuilder>
	export function refOfVaultExportFileBuilder(x:VaultExportFileBuilder,v:Ref<VaultExportFileBuilder>)
	export function unRefVaultExportFileBuilder(v:Ref<VaultExportFileBuilder>):VaultExportFileBuilder
	export function emptyCreateMigrationItemsBuilder():CreateMigrationItemsBuilder
	export function emptyRefCreateMigrationItemsBuilder():Ref<CreateMigrationItemsBuilder>
	export function refOfCreateMigrationItemsBuilder(x:CreateMigrationItemsBuilder,v:Ref<CreateMigrationItemsBuilder>)
	export function unRefCreateMigrationItemsBuilder(v:Ref<CreateMigrationItemsBuilder>):CreateMigrationItemsBuilder
	export function emptyDlpExecuteLog():DlpExecuteLog
	export function emptyRefDlpExecuteLog():Ref<DlpExecuteLog>
	export function refOfDlpExecuteLog(x:DlpExecuteLog,v:Ref<DlpExecuteLog>)
	export function unRefDlpExecuteLog(v:Ref<DlpExecuteLog>):DlpExecuteLog
	export function emptyEmailBuilder():EmailBuilder
	export function emptyRefEmailBuilder():Ref<EmailBuilder>
	export function refOfEmailBuilder(x:EmailBuilder,v:Ref<EmailBuilder>)
	export function unRefEmailBuilder(v:Ref<EmailBuilder>):EmailBuilder
	export function emptyOpenapiLogDetailBuilder():OpenapiLogDetailBuilder
	export function emptyRefOpenapiLogDetailBuilder():Ref<OpenapiLogDetailBuilder>
	export function refOfOpenapiLogDetailBuilder(x:OpenapiLogDetailBuilder,v:Ref<OpenapiLogDetailBuilder>)
	export function unRefOpenapiLogDetailBuilder(v:Ref<OpenapiLogDetailBuilder>):OpenapiLogDetailBuilder
	export function emptyTimeRangeBuilder():TimeRangeBuilder
	export function emptyRefTimeRangeBuilder():Ref<TimeRangeBuilder>
	export function refOfTimeRangeBuilder(x:TimeRangeBuilder,v:Ref<TimeRangeBuilder>)
	export function unRefTimeRangeBuilder(v:Ref<TimeRangeBuilder>):TimeRangeBuilder
	export function emptyMigrationItems():MigrationItems
	export function emptyRefMigrationItems():Ref<MigrationItems>
	export function refOfMigrationItems(x:MigrationItems,v:Ref<MigrationItems>)
	export function unRefMigrationItems(v:Ref<MigrationItems>):MigrationItems
	export function emptyMigrationItemsBuilder():MigrationItemsBuilder
	export function emptyRefMigrationItemsBuilder():Ref<MigrationItemsBuilder>
	export function refOfMigrationItemsBuilder(x:MigrationItemsBuilder,v:Ref<MigrationItemsBuilder>)
	export function unRefMigrationItemsBuilder(v:Ref<MigrationItemsBuilder>):MigrationItemsBuilder
	export function emptyOpenapiLog():OpenapiLog
	export function emptyRefOpenapiLog():Ref<OpenapiLog>
	export function refOfOpenapiLog(x:OpenapiLog,v:Ref<OpenapiLog>)
	export function unRefOpenapiLog(v:Ref<OpenapiLog>):OpenapiLog
	export function emptyTenantThirdPartyEncryptionApp():TenantThirdPartyEncryptionApp
	export function emptyRefTenantThirdPartyEncryptionApp():Ref<TenantThirdPartyEncryptionApp>
	export function refOfTenantThirdPartyEncryptionApp(x:TenantThirdPartyEncryptionApp,v:Ref<TenantThirdPartyEncryptionApp>)
	export function unRefTenantThirdPartyEncryptionApp(v:Ref<TenantThirdPartyEncryptionApp>):TenantThirdPartyEncryptionApp
	export function emptyOpenapiLogBuilder():OpenapiLogBuilder
	export function emptyRefOpenapiLogBuilder():Ref<OpenapiLogBuilder>
	export function refOfOpenapiLogBuilder(x:OpenapiLogBuilder,v:Ref<OpenapiLogBuilder>)
	export function unRefOpenapiLogBuilder(v:Ref<OpenapiLogBuilder>):OpenapiLogBuilder
	export function emptyDataArchivingMessageStruct():DataArchivingMessageStruct
	export function emptyRefDataArchivingMessageStruct():Ref<DataArchivingMessageStruct>
	export function refOfDataArchivingMessageStruct(x:DataArchivingMessageStruct,v:Ref<DataArchivingMessageStruct>)
	export function unRefDataArchivingMessageStruct(v:Ref<DataArchivingMessageStruct>):DataArchivingMessageStruct
	export function emptyDataArchivingUser():DataArchivingUser
	export function emptyRefDataArchivingUser():Ref<DataArchivingUser>
	export function refOfDataArchivingUser(x:DataArchivingUser,v:Ref<DataArchivingUser>)
	export function unRefDataArchivingUser(v:Ref<DataArchivingUser>):DataArchivingUser
	export function emptyDlpDetectModeProofContext():DlpDetectModeProofContext
	export function emptyRefDlpDetectModeProofContext():Ref<DlpDetectModeProofContext>
	export function refOfDlpDetectModeProofContext(x:DlpDetectModeProofContext,v:Ref<DlpDetectModeProofContext>)
	export function unRefDlpDetectModeProofContext(v:Ref<DlpDetectModeProofContext>):DlpDetectModeProofContext
	export function emptyDlpEvidenceDetailBuilder():DlpEvidenceDetailBuilder
	export function emptyRefDlpEvidenceDetailBuilder():Ref<DlpEvidenceDetailBuilder>
	export function refOfDlpEvidenceDetailBuilder(x:DlpEvidenceDetailBuilder,v:Ref<DlpEvidenceDetailBuilder>)
	export function unRefDlpEvidenceDetailBuilder(v:Ref<DlpEvidenceDetailBuilder>):DlpEvidenceDetailBuilder
	export function emptyDlpExecuteLogBuilder():DlpExecuteLogBuilder
	export function emptyRefDlpExecuteLogBuilder():Ref<DlpExecuteLogBuilder>
	export function refOfDlpExecuteLogBuilder(x:DlpExecuteLogBuilder,v:Ref<DlpExecuteLogBuilder>)
	export function unRefDlpExecuteLogBuilder(v:Ref<DlpExecuteLogBuilder>):DlpExecuteLogBuilder
	export function emptyDocumentBuilder():DocumentBuilder
	export function emptyRefDocumentBuilder():Ref<DocumentBuilder>
	export function refOfDocumentBuilder(x:DocumentBuilder,v:Ref<DocumentBuilder>)
	export function unRefDocumentBuilder(v:Ref<DocumentBuilder>):DocumentBuilder
	export function emptyAdminLogBuilder():AdminLogBuilder
	export function emptyRefAdminLogBuilder():Ref<AdminLogBuilder>
	export function refOfAdminLogBuilder(x:AdminLogBuilder,v:Ref<AdminLogBuilder>)
	export function unRefAdminLogBuilder(v:Ref<AdminLogBuilder>):AdminLogBuilder
	export function emptyTaskStatus():TaskStatus
	export function emptyRefTaskStatus():Ref<TaskStatus>
	export function refOfTaskStatus(x:TaskStatus,v:Ref<TaskStatus>)
	export function unRefTaskStatus(v:Ref<TaskStatus>):TaskStatus
	export function emptyTenantBuilder():TenantBuilder
	export function emptyRefTenantBuilder():Ref<TenantBuilder>
	export function refOfTenantBuilder(x:TenantBuilder,v:Ref<TenantBuilder>)
	export function unRefTenantBuilder(v:Ref<TenantBuilder>):TenantBuilder
	export function emptyAppDlpExecuteLogBuilder():AppDlpExecuteLogBuilder
	export function emptyRefAppDlpExecuteLogBuilder():Ref<AppDlpExecuteLogBuilder>
	export function refOfAppDlpExecuteLogBuilder(x:AppDlpExecuteLogBuilder,v:Ref<AppDlpExecuteLogBuilder>)
	export function unRefAppDlpExecuteLogBuilder(v:Ref<AppDlpExecuteLogBuilder>):AppDlpExecuteLogBuilder
	export function emptyDeviceApplyRecord():DeviceApplyRecord
	export function emptyRefDeviceApplyRecord():Ref<DeviceApplyRecord>
	export function refOfDeviceApplyRecord(x:DeviceApplyRecord,v:Ref<DeviceApplyRecord>)
	export function unRefDeviceApplyRecord(v:Ref<DeviceApplyRecord>):DeviceApplyRecord
	export function emptyDlpPolicyHitProof():DlpPolicyHitProof
	export function emptyRefDlpPolicyHitProof():Ref<DlpPolicyHitProof>
	export function refOfDlpPolicyHitProof(x:DlpPolicyHitProof,v:Ref<DlpPolicyHitProof>)
	export function unRefDlpPolicyHitProof(v:Ref<DlpPolicyHitProof>):DlpPolicyHitProof
	export function emptyListOpenapiLogRequest():ListOpenapiLogRequest
	export function emptyRefListOpenapiLogRequest():Ref<ListOpenapiLogRequest>
	export function refOfListOpenapiLogRequest(x:ListOpenapiLogRequest,v:Ref<ListOpenapiLogRequest>)
	export function unRefListOpenapiLogRequest(v:Ref<ListOpenapiLogRequest>):ListOpenapiLogRequest
	export function emptyGwCommonBuilder():GwCommonBuilder
	export function emptyRefGwCommonBuilder():Ref<GwCommonBuilder>
	export function refOfGwCommonBuilder(x:GwCommonBuilder,v:Ref<GwCommonBuilder>)
	export function unRefGwCommonBuilder(v:Ref<GwCommonBuilder>):GwCommonBuilder
	export function emptyDataArchivingMessageBuilder():DataArchivingMessageBuilder
	export function emptyRefDataArchivingMessageBuilder():Ref<DataArchivingMessageBuilder>
	export function refOfDataArchivingMessageBuilder(x:DataArchivingMessageBuilder,v:Ref<DataArchivingMessageBuilder>)
	export function unRefDataArchivingMessageBuilder(v:Ref<DataArchivingMessageBuilder>):DataArchivingMessageBuilder
	export function emptyDlpPolicyHitProofBuilder():DlpPolicyHitProofBuilder
	export function emptyRefDlpPolicyHitProofBuilder():Ref<DlpPolicyHitProofBuilder>
	export function refOfDlpPolicyHitProofBuilder(x:DlpPolicyHitProofBuilder,v:Ref<DlpPolicyHitProofBuilder>)
	export function unRefDlpPolicyHitProofBuilder(v:Ref<DlpPolicyHitProofBuilder>):DlpPolicyHitProofBuilder
	export function emptyDlpProofContext():DlpProofContext
	export function emptyRefDlpProofContext():Ref<DlpProofContext>
	export function refOfDlpProofContext(x:DlpProofContext,v:Ref<DlpProofContext>)
	export function unRefDlpProofContext(v:Ref<DlpProofContext>):DlpProofContext
	export function emptyDlpExecuteEvidence():DlpExecuteEvidence
	export function emptyRefDlpExecuteEvidence():Ref<DlpExecuteEvidence>
	export function refOfDlpExecuteEvidence(x:DlpExecuteEvidence,v:Ref<DlpExecuteEvidence>)
	export function unRefDlpExecuteEvidence(v:Ref<DlpExecuteEvidence>):DlpExecuteEvidence
	export function emptyDlpHitPolicy():DlpHitPolicy
	export function emptyRefDlpHitPolicy():Ref<DlpHitPolicy>
	export function refOfDlpHitPolicy(x:DlpHitPolicy,v:Ref<DlpHitPolicy>)
	export function unRefDlpHitPolicy(v:Ref<DlpHitPolicy>):DlpHitPolicy
	export function emptyKeyPersonBuilder():KeyPersonBuilder
	export function emptyRefKeyPersonBuilder():Ref<KeyPersonBuilder>
	export function refOfKeyPersonBuilder(x:KeyPersonBuilder,v:Ref<KeyPersonBuilder>)
	export function unRefKeyPersonBuilder(v:Ref<KeyPersonBuilder>):KeyPersonBuilder
	export function emptyDataArchivingUserStructBuilder():DataArchivingUserStructBuilder
	export function emptyRefDataArchivingUserStructBuilder():Ref<DataArchivingUserStructBuilder>
	export function refOfDataArchivingUserStructBuilder(x:DataArchivingUserStructBuilder,v:Ref<DataArchivingUserStructBuilder>)
	export function unRefDataArchivingUserStructBuilder(v:Ref<DataArchivingUserStructBuilder>):DataArchivingUserStructBuilder
	export function emptyMessage():Message
	export function emptyRefMessage():Ref<Message>
	export function refOfMessage(x:Message,v:Ref<Message>)
	export function unRefMessage(v:Ref<Message>):Message
	export function emptyDeviceRecordBuilder():DeviceRecordBuilder
	export function emptyRefDeviceRecordBuilder():Ref<DeviceRecordBuilder>
	export function refOfDeviceRecordBuilder(x:DeviceRecordBuilder,v:Ref<DeviceRecordBuilder>)
	export function unRefDeviceRecordBuilder(v:Ref<DeviceRecordBuilder>):DeviceRecordBuilder
	export function emptyGwRequest():GwRequest
	export function emptyRefGwRequest():Ref<GwRequest>
	export function refOfGwRequest(x:GwRequest,v:Ref<GwRequest>)
	export function unRefGwRequest(v:Ref<GwRequest>):GwRequest
	export function emptyGwResponse():GwResponse
	export function emptyRefGwResponse():Ref<GwResponse>
	export function refOfGwResponse(x:GwResponse,v:Ref<GwResponse>)
	export function unRefGwResponse(v:Ref<GwResponse>):GwResponse
	export function emptyListDataOpenapiLogResp():ListDataOpenapiLogResp
	export function emptyRefListDataOpenapiLogResp():Ref<ListDataOpenapiLogResp>
	export function refOfListDataOpenapiLogResp(x:ListDataOpenapiLogResp,v:Ref<ListDataOpenapiLogResp>)
	export function unRefListDataOpenapiLogResp(v:Ref<ListDataOpenapiLogResp>):ListDataOpenapiLogResp
	export function emptyNotificationBuilder():NotificationBuilder
	export function emptyRefNotificationBuilder():Ref<NotificationBuilder>
	export function refOfNotificationBuilder(x:NotificationBuilder,v:Ref<NotificationBuilder>)
	export function unRefNotificationBuilder(v:Ref<NotificationBuilder>):NotificationBuilder
	export function emptyUserId():UserId
	export function emptyRefUserId():Ref<UserId>
	export function refOfUserId(x:UserId,v:Ref<UserId>)
	export function unRefUserId(v:Ref<UserId>):UserId
	export function emptyDlpDetectModeProofContextBuilder():DlpDetectModeProofContextBuilder
	export function emptyRefDlpDetectModeProofContextBuilder():Ref<DlpDetectModeProofContextBuilder>
	export function refOfDlpDetectModeProofContextBuilder(x:DlpDetectModeProofContextBuilder,v:Ref<DlpDetectModeProofContextBuilder>)
	export function unRefDlpDetectModeProofContextBuilder(v:Ref<DlpDetectModeProofContextBuilder>):DlpDetectModeProofContextBuilder
	export function emptyParam():Param
	export function emptyRefParam():Ref<Param>
	export function refOfParam(x:Param,v:Ref<Param>)
	export function unRefParam(v:Ref<Param>):Param
	export function emptyDownloadToken():DownloadToken
	export function emptyRefDownloadToken():Ref<DownloadToken>
	export function refOfDownloadToken(x:DownloadToken,v:Ref<DownloadToken>)
	export function unRefDownloadToken(v:Ref<DownloadToken>):DownloadToken
	export function emptyMessageBuilder():MessageBuilder
	export function emptyRefMessageBuilder():Ref<MessageBuilder>
	export function refOfMessageBuilder(x:MessageBuilder,v:Ref<MessageBuilder>)
	export function unRefMessageBuilder(v:Ref<MessageBuilder>):MessageBuilder
	export function emptyUserIdBuilder():UserIdBuilder
	export function emptyRefUserIdBuilder():Ref<UserIdBuilder>
	export function refOfUserIdBuilder(x:UserIdBuilder,v:Ref<UserIdBuilder>)
	export function unRefUserIdBuilder(v:Ref<UserIdBuilder>):UserIdBuilder
	export function emptyDlpExecuteEvidenceBuilder():DlpExecuteEvidenceBuilder
	export function emptyRefDlpExecuteEvidenceBuilder():Ref<DlpExecuteEvidenceBuilder>
	export function refOfDlpExecuteEvidenceBuilder(x:DlpExecuteEvidenceBuilder,v:Ref<DlpExecuteEvidenceBuilder>)
	export function unRefDlpExecuteEvidenceBuilder(v:Ref<DlpExecuteEvidenceBuilder>):DlpExecuteEvidenceBuilder
	export function emptyEmailFilter():EmailFilter
	export function emptyRefEmailFilter():Ref<EmailFilter>
	export function refOfEmailFilter(x:EmailFilter,v:Ref<EmailFilter>)
	export function unRefEmailFilter(v:Ref<EmailFilter>):EmailFilter
	export function emptyVaultExportFile():VaultExportFile
	export function emptyRefVaultExportFile():Ref<VaultExportFile>
	export function refOfVaultExportFile(x:VaultExportFile,v:Ref<VaultExportFile>)
	export function unRefVaultExportFile(v:Ref<VaultExportFile>):VaultExportFile
	export function emptyDataArchivingUserStruct():DataArchivingUserStruct
	export function emptyRefDataArchivingUserStruct():Ref<DataArchivingUserStruct>
	export function refOfDataArchivingUserStruct(x:DataArchivingUserStruct,v:Ref<DataArchivingUserStruct>)
	export function unRefDataArchivingUserStruct(v:Ref<DataArchivingUserStruct>):DataArchivingUserStruct
	export function emptyAppDlpExecuteLog():AppDlpExecuteLog
	export function emptyRefAppDlpExecuteLog():Ref<AppDlpExecuteLog>
	export function refOfAppDlpExecuteLog(x:AppDlpExecuteLog,v:Ref<AppDlpExecuteLog>)
	export function unRefAppDlpExecuteLog(v:Ref<AppDlpExecuteLog>):AppDlpExecuteLog
	export function emptyDepartmentIdBuilder():DepartmentIdBuilder
	export function emptyRefDepartmentIdBuilder():Ref<DepartmentIdBuilder>
	export function refOfDepartmentIdBuilder(x:DepartmentIdBuilder,v:Ref<DepartmentIdBuilder>)
	export function unRefDepartmentIdBuilder(v:Ref<DepartmentIdBuilder>):DepartmentIdBuilder
	export function emptyDlpHitPolicyBuilder():DlpHitPolicyBuilder
	export function emptyRefDlpHitPolicyBuilder():Ref<DlpHitPolicyBuilder>
	export function refOfDlpHitPolicyBuilder(x:DlpHitPolicyBuilder,v:Ref<DlpHitPolicyBuilder>)
	export function unRefDlpHitPolicyBuilder(v:Ref<DlpHitPolicyBuilder>):DlpHitPolicyBuilder
	export function emptyNotification():Notification
	export function emptyRefNotification():Ref<Notification>
	export function refOfNotification(x:Notification,v:Ref<Notification>)
	export function unRefNotification(v:Ref<Notification>):Notification
	export function emptyTenant():Tenant
	export function emptyRefTenant():Ref<Tenant>
	export function refOfTenant(x:Tenant,v:Ref<Tenant>)
	export function unRefTenant(v:Ref<Tenant>):Tenant
	export function emptyTaskStatusBuilder():TaskStatusBuilder
	export function emptyRefTaskStatusBuilder():Ref<TaskStatusBuilder>
	export function refOfTaskStatusBuilder(x:TaskStatusBuilder,v:Ref<TaskStatusBuilder>)
	export function unRefTaskStatusBuilder(v:Ref<TaskStatusBuilder>):TaskStatusBuilder
	export function emptyVaultTaskBuilder():VaultTaskBuilder
	export function emptyRefVaultTaskBuilder():Ref<VaultTaskBuilder>
	export function refOfVaultTaskBuilder(x:VaultTaskBuilder,v:Ref<VaultTaskBuilder>)
	export function unRefVaultTaskBuilder(v:Ref<VaultTaskBuilder>):VaultTaskBuilder
	export function emptyDataArchivingMessageStructBuilder():DataArchivingMessageStructBuilder
	export function emptyRefDataArchivingMessageStructBuilder():Ref<DataArchivingMessageStructBuilder>
	export function refOfDataArchivingMessageStructBuilder(x:DataArchivingMessageStructBuilder,v:Ref<DataArchivingMessageStructBuilder>)
	export function unRefDataArchivingMessageStructBuilder(v:Ref<DataArchivingMessageStructBuilder>):DataArchivingMessageStructBuilder
	export function emptyDataArchivingUserBuilder():DataArchivingUserBuilder
	export function emptyRefDataArchivingUserBuilder():Ref<DataArchivingUserBuilder>
	export function refOfDataArchivingUserBuilder(x:DataArchivingUserBuilder,v:Ref<DataArchivingUserBuilder>)
	export function unRefDataArchivingUserBuilder(v:Ref<DataArchivingUserBuilder>):DataArchivingUserBuilder
	export function emptyDlpProofContextBuilder():DlpProofContextBuilder
	export function emptyRefDlpProofContextBuilder():Ref<DlpProofContextBuilder>
	export function refOfDlpProofContextBuilder(x:DlpProofContextBuilder,v:Ref<DlpProofContextBuilder>)
	export function unRefDlpProofContextBuilder(v:Ref<DlpProofContextBuilder>):DlpProofContextBuilder
	export function emptyGwCommon():GwCommon
	export function emptyRefGwCommon():Ref<GwCommon>
	export function refOfGwCommon(x:GwCommon,v:Ref<GwCommon>)
	export function unRefGwCommon(v:Ref<GwCommon>):GwCommon
	export function emptyOpenapiLogDetail():OpenapiLogDetail
	export function emptyRefOpenapiLogDetail():Ref<OpenapiLogDetail>
	export function refOfOpenapiLogDetail(x:OpenapiLogDetail,v:Ref<OpenapiLogDetail>)
	export function unRefOpenapiLogDetail(v:Ref<OpenapiLogDetail>):OpenapiLogDetail
	export function emptyParamBuilder():ParamBuilder
	export function emptyRefParamBuilder():Ref<ParamBuilder>
	export function refOfParamBuilder(x:ParamBuilder,v:Ref<ParamBuilder>)
	export function unRefParamBuilder(v:Ref<ParamBuilder>):ParamBuilder
	export function emptyMigrationEntityBuilder():MigrationEntityBuilder
	export function emptyRefMigrationEntityBuilder():Ref<MigrationEntityBuilder>
	export function refOfMigrationEntityBuilder(x:MigrationEntityBuilder,v:Ref<MigrationEntityBuilder>)
	export function unRefMigrationEntityBuilder(v:Ref<MigrationEntityBuilder>):MigrationEntityBuilder
	export function emptySecurityLogErrorBuilder():SecurityLogErrorBuilder
	export function emptyRefSecurityLogErrorBuilder():Ref<SecurityLogErrorBuilder>
	export function refOfSecurityLogErrorBuilder(x:SecurityLogErrorBuilder,v:Ref<SecurityLogErrorBuilder>)
	export function unRefSecurityLogErrorBuilder(v:Ref<SecurityLogErrorBuilder>):SecurityLogErrorBuilder
	export function emptyKeyPerson():KeyPerson
	export function emptyRefKeyPerson():Ref<KeyPerson>
	export function refOfKeyPerson(x:KeyPerson,v:Ref<KeyPerson>)
	export function unRefKeyPerson(v:Ref<KeyPerson>):KeyPerson
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyDirectoryItemsBuilder():DirectoryItemsBuilder
	export function emptyRefDirectoryItemsBuilder():Ref<DirectoryItemsBuilder>
	export function refOfDirectoryItemsBuilder(x:DirectoryItemsBuilder,v:Ref<DirectoryItemsBuilder>)
	export function unRefDirectoryItemsBuilder(v:Ref<DirectoryItemsBuilder>):DirectoryItemsBuilder
	export function emptyDownloadTokenBuilder():DownloadTokenBuilder
	export function emptyRefDownloadTokenBuilder():Ref<DownloadTokenBuilder>
	export function refOfDownloadTokenBuilder(x:DownloadTokenBuilder,v:Ref<DownloadTokenBuilder>)
	export function unRefDownloadTokenBuilder(v:Ref<DownloadTokenBuilder>):DownloadTokenBuilder
}