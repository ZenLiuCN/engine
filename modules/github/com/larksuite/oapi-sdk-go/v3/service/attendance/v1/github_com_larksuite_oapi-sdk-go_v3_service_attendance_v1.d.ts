// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/attendance/v1'{

	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import type {map,Ref,int,Struct,error,bool,float64} from 'go'
	export interface ApprovalInfo extends Struct<ApprovalInfo>{

			approvalId:Ref<string>
			approvalType:Ref<string>
			status:Ref<int>
	}
	export interface ApprovalInfoBuilder extends Struct<ApprovalInfoBuilder>{

			approvalId(approvalId:string):Ref<ApprovalInfoBuilder>
			approvalType(approvalType:string):Ref<ApprovalInfoBuilder>
			status(status:int):Ref<ApprovalInfoBuilder>
			build():Ref<ApprovalInfo>
	}
	//2
	export const ApprovalStatusApproved:int
	//3
	export const ApprovalStatusCanceled:int
	//1
	export const ApprovalStatusRejected:int
	//4
	export const ApprovalStatusReverted:int
	//0
	export const ApprovalStatusTodo:int
	export interface ArchiveField extends Struct<ArchiveField>{

			code:Ref<string>
			title:Ref<string>
			upperTitles:string[]
	}
	export interface ArchiveFieldBuilder extends Struct<ArchiveFieldBuilder>{

			code(code:string):Ref<ArchiveFieldBuilder>
			title(title:string):Ref<ArchiveFieldBuilder>
			upperTitles(upperTitles:string[]):Ref<ArchiveFieldBuilder>
			build():Ref<ArchiveField>
	}
	export interface ArchiveFieldData extends Struct<ArchiveFieldData>{

			code:Ref<string>
			value:Ref<string>
	}
	export interface ArchiveFieldDataBuilder extends Struct<ArchiveFieldDataBuilder>{

			code(code:string):Ref<ArchiveFieldDataBuilder>
			value(value:string):Ref<ArchiveFieldDataBuilder>
			build():Ref<ArchiveFieldData>
	}
	export interface ArchiveReportData extends Struct<ArchiveReportData>{

			memberId:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			fieldDatas:Ref<ArchiveFieldData>[]
	}
	export interface ArchiveReportDataBuilder extends Struct<ArchiveReportDataBuilder>{

			memberId(memberId:string):Ref<ArchiveReportDataBuilder>
			startTime(startTime:string):Ref<ArchiveReportDataBuilder>
			endTime(endTime:string):Ref<ArchiveReportDataBuilder>
			fieldDatas(fieldDatas:Ref<ArchiveFieldData>[]):Ref<ArchiveReportDataBuilder>
			build():Ref<ArchiveReportData>
	}
	export interface ArchiveReportMeta extends Struct<ArchiveReportMeta>{

			reportId:Ref<string>
			reportName:Ref<I18nMap>
			archiveRuleId:Ref<string>
			archiveRuleName:Ref<I18nMap>
	}
	export interface ArchiveReportMetaBuilder extends Struct<ArchiveReportMetaBuilder>{

			reportId(reportId:string):Ref<ArchiveReportMetaBuilder>
			reportName(reportName:Ref<I18nMap>):Ref<ArchiveReportMetaBuilder>
			archiveRuleId(archiveRuleId:string):Ref<ArchiveReportMetaBuilder>
			archiveRuleName(archiveRuleName:Ref<I18nMap>):Ref<ArchiveReportMetaBuilder>
			build():Ref<ArchiveReportMeta>
	}
	export interface Area extends Struct<Area>{

			type:Ref<string>
			center:Ref<Coordinate>
			radius:Ref<string>
			coords:Ref<Coordinate>[]
	}
	export interface AreaBuilder extends Struct<AreaBuilder>{

			type(type_:string):Ref<AreaBuilder>
			center(center:Ref<Coordinate>):Ref<AreaBuilder>
			radius(radius:string):Ref<AreaBuilder>
			coords(coords:Ref<Coordinate>[]):Ref<AreaBuilder>
			build():Ref<Area>
	}
	export interface ArrangeShiftGroup extends Struct<ArrangeShiftGroup>{

			shiftGroupId:Ref<string>
			groupId:Ref<string>
			shiftGroupName:Ref<string>
	}
	export interface ArrangeShiftGroupBuilder extends Struct<ArrangeShiftGroupBuilder>{

			shiftGroupId(shiftGroupId:string):Ref<ArrangeShiftGroupBuilder>
			groupId(groupId:string):Ref<ArrangeShiftGroupBuilder>
			shiftGroupName(shiftGroupName:string):Ref<ArrangeShiftGroupBuilder>
			build():Ref<ArrangeShiftGroup>
	}
	export interface BatchCreateUserDailyShiftPathReqBodyBuilder extends Struct<BatchCreateUserDailyShiftPathReqBodyBuilder>{

			userDailyShifts(userDailyShifts:Ref<UserDailyShift>[]):Ref<BatchCreateUserDailyShiftPathReqBodyBuilder>
			operatorId(operatorId:string):Ref<BatchCreateUserDailyShiftPathReqBodyBuilder>
			build():Ref<BatchCreateUserDailyShiftReqBody>
	}
	export interface BatchCreateUserDailyShiftReq extends Struct<BatchCreateUserDailyShiftReq>{

			body:Ref<BatchCreateUserDailyShiftReqBody>
	}
	export interface BatchCreateUserDailyShiftReqBody extends Struct<BatchCreateUserDailyShiftReqBody>{

			userDailyShifts:Ref<UserDailyShift>[]
			operatorId:Ref<string>
	}
	export interface BatchCreateUserDailyShiftReqBodyBuilder extends Struct<BatchCreateUserDailyShiftReqBodyBuilder>{

			userDailyShifts(userDailyShifts:Ref<UserDailyShift>[]):Ref<BatchCreateUserDailyShiftReqBodyBuilder>
			operatorId(operatorId:string):Ref<BatchCreateUserDailyShiftReqBodyBuilder>
			build():Ref<BatchCreateUserDailyShiftReqBody>
	}
	export interface BatchCreateUserDailyShiftReqBuilder extends Struct<BatchCreateUserDailyShiftReqBuilder>{

			employeeType(employeeType:string):Ref<BatchCreateUserDailyShiftReqBuilder>
			body(body:Ref<BatchCreateUserDailyShiftReqBody>):Ref<BatchCreateUserDailyShiftReqBuilder>
			build():Ref<BatchCreateUserDailyShiftReq>
	}
	export interface BatchCreateUserDailyShiftResp extends Struct<BatchCreateUserDailyShiftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchCreateUserDailyShiftRespData>
			success():bool
	}
	export interface BatchCreateUserDailyShiftRespData extends Struct<BatchCreateUserDailyShiftRespData>{

			userDailyShifts:Ref<UserDailyShift>[]
	}
	export interface BatchCreateUserFlowPathReqBodyBuilder extends Struct<BatchCreateUserFlowPathReqBodyBuilder>{

			flowRecords(flowRecords:Ref<UserFlow>[]):Ref<BatchCreateUserFlowPathReqBodyBuilder>
			build():Ref<BatchCreateUserFlowReqBody>
	}
	export interface BatchCreateUserFlowReq extends Struct<BatchCreateUserFlowReq>{

			body:Ref<BatchCreateUserFlowReqBody>
	}
	export interface BatchCreateUserFlowReqBody extends Struct<BatchCreateUserFlowReqBody>{

			flowRecords:Ref<UserFlow>[]
	}
	export interface BatchCreateUserFlowReqBodyBuilder extends Struct<BatchCreateUserFlowReqBodyBuilder>{

			flowRecords(flowRecords:Ref<UserFlow>[]):Ref<BatchCreateUserFlowReqBodyBuilder>
			build():Ref<BatchCreateUserFlowReqBody>
	}
	export interface BatchCreateUserFlowReqBuilder extends Struct<BatchCreateUserFlowReqBuilder>{

			employeeType(employeeType:string):Ref<BatchCreateUserFlowReqBuilder>
			body(body:Ref<BatchCreateUserFlowReqBody>):Ref<BatchCreateUserFlowReqBuilder>
			build():Ref<BatchCreateUserFlowReq>
	}
	export interface BatchCreateUserFlowResp extends Struct<BatchCreateUserFlowResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<BatchCreateUserFlowRespData>
			success():bool
	}
	export interface BatchCreateUserFlowRespData extends Struct<BatchCreateUserFlowRespData>{

			flowRecords:Ref<UserFlow>[]
	}
	//"CreateTime"
	export const CheckDateTypeCreateTime:string
	//"PeriodTime"
	export const CheckDateTypePeriodTime:string
	//"CreateTime"
	export const CheckDateTypeQueryUserTaskRemedyCreateTime:string
	//"PeriodTime"
	export const CheckDateTypeQueryUserTaskRemedyPeriodTime:string
	//"UpdateTime"
	export const CheckDateTypeQueryUserTaskRemedyUpdateTime:string
	//"UpdateTime"
	export const CheckDateTypeUpdateTime:string
	export interface ChildField extends Struct<ChildField>{

			code:Ref<string>
			title:Ref<string>
			timeUnit:Ref<string>
	}
	export interface ChildFieldBuilder extends Struct<ChildFieldBuilder>{

			code(code:string):Ref<ChildFieldBuilder>
			title(title:string):Ref<ChildFieldBuilder>
			timeUnit(timeUnit:string):Ref<ChildFieldBuilder>
			build():Ref<ChildField>
	}
	export interface ChildItem extends Struct<ChildItem>{

			code:Ref<string>
			value:Ref<string>
			title:Ref<string>
			columnType:Ref<int>
			readOnly:Ref<bool>
			minValue:Ref<string>
			maxValue:Ref<string>
	}
	export interface ChildItemBuilder extends Struct<ChildItemBuilder>{

			code(code:string):Ref<ChildItemBuilder>
			value(value:string):Ref<ChildItemBuilder>
			title(title:string):Ref<ChildItemBuilder>
			columnType(columnType:int):Ref<ChildItemBuilder>
			readOnly(readOnly:bool):Ref<ChildItemBuilder>
			minValue(minValue:string):Ref<ChildItemBuilder>
			maxValue(maxValue:string):Ref<ChildItemBuilder>
			build():Ref<ChildItem>
	}
	export interface Coordinate extends Struct<Coordinate>{

			longitude:Ref<float64>
			latitude:Ref<float64>
			accuracy:Ref<float64>
	}
	export interface CoordinateBuilder extends Struct<CoordinateBuilder>{

			longitude(longitude:float64):Ref<CoordinateBuilder>
			latitude(latitude:float64):Ref<CoordinateBuilder>
			accuracy(accuracy:float64):Ref<CoordinateBuilder>
			build():Ref<Coordinate>
	}
	export interface CreateGroupPathReqBodyBuilder extends Struct<CreateGroupPathReqBodyBuilder>{

			group(group:Ref<Group>):Ref<CreateGroupPathReqBodyBuilder>
			operatorId(operatorId:string):Ref<CreateGroupPathReqBodyBuilder>
			build():Ref<CreateGroupReqBody>
	}
	export interface CreateGroupReq extends Struct<CreateGroupReq>{

			body:Ref<CreateGroupReqBody>
	}
	export interface CreateGroupReqBody extends Struct<CreateGroupReqBody>{

			group:Ref<Group>
			operatorId:Ref<string>
	}
	export interface CreateGroupReqBodyBuilder extends Struct<CreateGroupReqBodyBuilder>{

			group(group:Ref<Group>):Ref<CreateGroupReqBodyBuilder>
			operatorId(operatorId:string):Ref<CreateGroupReqBodyBuilder>
			build():Ref<CreateGroupReqBody>
	}
	export interface CreateGroupReqBuilder extends Struct<CreateGroupReqBuilder>{

			employeeType(employeeType:string):Ref<CreateGroupReqBuilder>
			deptType(deptType:string):Ref<CreateGroupReqBuilder>
			body(body:Ref<CreateGroupReqBody>):Ref<CreateGroupReqBuilder>
			build():Ref<CreateGroupReq>
	}
	export interface CreateGroupResp extends Struct<CreateGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateGroupRespData>
			success():bool
	}
	export interface CreateGroupRespData extends Struct<CreateGroupRespData>{

			group:Ref<Group>
	}
	export interface CreateShiftReq extends Struct<CreateShiftReq>{

			shift:Ref<Shift>
	}
	export interface CreateShiftReqBuilder extends Struct<CreateShiftReqBuilder>{

			shift(shift:Ref<Shift>):Ref<CreateShiftReqBuilder>
			build():Ref<CreateShiftReq>
	}
	export interface CreateShiftResp extends Struct<CreateShiftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateShiftRespData>
			success():bool
	}
	export interface CreateShiftRespData extends Struct<CreateShiftRespData>{

			shift:Ref<Shift>
	}
	export interface CreateUserApprovalPathReqBodyBuilder extends Struct<CreateUserApprovalPathReqBodyBuilder>{

			userApproval(userApproval:Ref<UserApproval>):Ref<CreateUserApprovalPathReqBodyBuilder>
			build():Ref<CreateUserApprovalReqBody>
	}
	export interface CreateUserApprovalReq extends Struct<CreateUserApprovalReq>{

			body:Ref<CreateUserApprovalReqBody>
	}
	export interface CreateUserApprovalReqBody extends Struct<CreateUserApprovalReqBody>{

			userApproval:Ref<UserApproval>
	}
	export interface CreateUserApprovalReqBodyBuilder extends Struct<CreateUserApprovalReqBodyBuilder>{

			userApproval(userApproval:Ref<UserApproval>):Ref<CreateUserApprovalReqBodyBuilder>
			build():Ref<CreateUserApprovalReqBody>
	}
	export interface CreateUserApprovalReqBuilder extends Struct<CreateUserApprovalReqBuilder>{

			employeeType(employeeType:string):Ref<CreateUserApprovalReqBuilder>
			body(body:Ref<CreateUserApprovalReqBody>):Ref<CreateUserApprovalReqBuilder>
			build():Ref<CreateUserApprovalReq>
	}
	export interface CreateUserApprovalResp extends Struct<CreateUserApprovalResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateUserApprovalRespData>
			success():bool
	}
	export interface CreateUserApprovalRespData extends Struct<CreateUserApprovalRespData>{

			userApproval:Ref<UserApproval>
	}
	export interface CreateUserTaskRemedyReq extends Struct<CreateUserTaskRemedyReq>{

			userTaskRemedy:Ref<UserTaskRemedy>
	}
	export interface CreateUserTaskRemedyReqBuilder extends Struct<CreateUserTaskRemedyReqBuilder>{

			employeeType(employeeType:string):Ref<CreateUserTaskRemedyReqBuilder>
			userTaskRemedy(userTaskRemedy:Ref<UserTaskRemedy>):Ref<CreateUserTaskRemedyReqBuilder>
			build():Ref<CreateUserTaskRemedyReq>
	}
	export interface CreateUserTaskRemedyResp extends Struct<CreateUserTaskRemedyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateUserTaskRemedyRespData>
			success():bool
	}
	export interface CreateUserTaskRemedyRespData extends Struct<CreateUserTaskRemedyRespData>{

			userRemedy:Ref<UserTaskRemedy>
	}
	export interface DeleteGroupReq extends Struct<DeleteGroupReq>{

	}
	export interface DeleteGroupReqBuilder extends Struct<DeleteGroupReqBuilder>{

			groupId(groupId:string):Ref<DeleteGroupReqBuilder>
			build():Ref<DeleteGroupReq>
	}
	export interface DeleteGroupResp extends Struct<DeleteGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteShiftReq extends Struct<DeleteShiftReq>{

	}
	export interface DeleteShiftReqBuilder extends Struct<DeleteShiftReqBuilder>{

			shiftId(shiftId:string):Ref<DeleteShiftReqBuilder>
			build():Ref<DeleteShiftReq>
	}
	export interface DeleteShiftResp extends Struct<DeleteShiftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	//"open_id"
	export const DeptTypeGetGroupOpenId:string
	//"open_id"
	export const DeptTypeOpenId:string
	export interface DownloadFileReq extends Struct<DownloadFileReq>{

	}
	export interface DownloadFileReqBuilder extends Struct<DownloadFileReqBuilder>{

			fileId(fileId:string):Ref<DownloadFileReqBuilder>
			build():Ref<DownloadFileReq>
	}
	export interface DownloadFileResp extends Struct<DownloadFileResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			file:io.Reader
			fileName:string
			success():bool
			writeFile(fileName:string)/*error*/
	}
	export interface DurationItem extends Struct<DurationItem>{

			date:Ref<string>
			duration:Ref<float64>
			unit:Ref<int>
			settlementType:Ref<int>
	}
	export interface DurationItemBuilder extends Struct<DurationItemBuilder>{

			date(date:string):Ref<DurationItemBuilder>
			duration(duration:float64):Ref<DurationItemBuilder>
			unit(unit:int):Ref<DurationItemBuilder>
			settlementType(settlementType:int):Ref<DurationItemBuilder>
			build():Ref<DurationItem>
	}
	//"employee_id"
	export const EmployeeTypeBatchCreateUserDailyShiftEmployeeId:string
	//"employee_no"
	export const EmployeeTypeBatchCreateUserDailyShiftEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeBatchCreateUserFlowEmployeeId:string
	//"employee_no"
	export const EmployeeTypeBatchCreateUserFlowEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeCreateUserApprovalEmployeeId:string
	//"employee_no"
	export const EmployeeTypeCreateUserApprovalEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeCreateUserTaskRemedyEmployeeId:string
	//"employee_no"
	export const EmployeeTypeCreateUserTaskRemedyEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeEmployeeId:string
	//"employee_no"
	export const EmployeeTypeEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeGetGroupEmployeeId:string
	//"employee_no"
	export const EmployeeTypeGetGroupEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeGetUserFlowEmployeeId:string
	//"employee_no"
	export const EmployeeTypeGetUserFlowEmployeeNo:string
	//"open_id"
	export const EmployeeTypeGetUserFlowOpenId:string
	//"employee_id"
	export const EmployeeTypeModifyUserSettingEmployeeId:string
	//"employee_no"
	export const EmployeeTypeModifyUserSettingEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserAllowedRemedysUserTaskRemedyEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserAllowedRemedysUserTaskRemedyEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserApprovalEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserApprovalEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserDailyShiftEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserDailyShiftEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserFlowEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserFlowEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserSettingEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserSettingEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserStatsDataEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserStatsDataEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserStatsFieldEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserStatsFieldEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserStatsViewEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserStatsViewEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserTaskEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserTaskEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeQueryUserTaskRemedyEmployeeId:string
	//"employee_no"
	export const EmployeeTypeQueryUserTaskRemedyEmployeeNo:string
	//"employee_id"
	export const EmployeeTypeUpdateUserStatsViewEmployeeId:string
	//"employee_no"
	export const EmployeeTypeUpdateUserStatsViewEmployeeNo:string
	export interface Field extends Struct<Field>{

			code:Ref<string>
			title:Ref<string>
			childFields:Ref<ChildField>[]
	}
	export interface FieldBuilder extends Struct<FieldBuilder>{

			code(code:string):Ref<FieldBuilder>
			title(title:string):Ref<FieldBuilder>
			childFields(childFields:Ref<ChildField>[]):Ref<FieldBuilder>
			build():Ref<Field>
	}
	export interface File extends Struct<File>{

			fileId:Ref<string>
	}
	export interface FileBuilder extends Struct<FileBuilder>{

			fileId(fileId:string):Ref<FileBuilder>
			build():Ref<File>
	}
	export interface FilterItem extends Struct<FilterItem>{

			filterType:Ref<string>
			filterIds:string[]
	}
	export interface FilterItemBuilder extends Struct<FilterItemBuilder>{

			filterType(filterType:string):Ref<FilterItemBuilder>
			filterIds(filterIds:string[]):Ref<FilterItemBuilder>
			build():Ref<FilterItem>
	}
	export interface FlexibleRule extends Struct<FlexibleRule>{

			flexibleEarlyMinutes:Ref<int>
			flexibleLateMinutes:Ref<int>
	}
	export interface FlexibleRuleBuilder extends Struct<FlexibleRuleBuilder>{

			flexibleEarlyMinutes(flexibleEarlyMinutes:int):Ref<FlexibleRuleBuilder>
			flexibleLateMinutes(flexibleLateMinutes:int):Ref<FlexibleRuleBuilder>
			build():Ref<FlexibleRule>
	}
	export interface FreePunchCfg extends Struct<FreePunchCfg>{

			freeStartTime:Ref<string>
			freeEndTime:Ref<string>
			punchDay:Ref<int>
			workDayNoPunchAsLack:Ref<bool>
			workHoursDemand:Ref<bool>
			workHours:Ref<int>
	}
	export interface FreePunchCfgBuilder extends Struct<FreePunchCfgBuilder>{

			freeStartTime(freeStartTime:string):Ref<FreePunchCfgBuilder>
			freeEndTime(freeEndTime:string):Ref<FreePunchCfgBuilder>
			punchDay(punchDay:int):Ref<FreePunchCfgBuilder>
			workDayNoPunchAsLack(workDayNoPunchAsLack:bool):Ref<FreePunchCfgBuilder>
			workHoursDemand(workHoursDemand:bool):Ref<FreePunchCfgBuilder>
			workHours(workHours:int):Ref<FreePunchCfgBuilder>
			build():Ref<FreePunchCfg>
	}
	export interface GetGroupReq extends Struct<GetGroupReq>{

	}
	export interface GetGroupReqBuilder extends Struct<GetGroupReqBuilder>{

			groupId(groupId:string):Ref<GetGroupReqBuilder>
			employeeType(employeeType:string):Ref<GetGroupReqBuilder>
			deptType(deptType:string):Ref<GetGroupReqBuilder>
			build():Ref<GetGroupReq>
	}
	export interface GetGroupResp extends Struct<GetGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetGroupRespData>
			success():bool
	}
	export interface GetGroupRespData extends Struct<GetGroupRespData>{

			groupId:Ref<string>
			groupName:Ref<string>
			timeZone:Ref<string>
			bindDeptIds:string[]
			exceptDeptIds:string[]
			bindUserIds:string[]
			exceptUserIds:string[]
			groupLeaderIds:string[]
			subGroupLeaderIds:string[]
			allowOutPunch:Ref<bool>
			outPunchNeedApproval:Ref<bool>
			outPunchNeedPostApproval:Ref<bool>
			outPunchNeedRemark:Ref<bool>
			outPunchNeedPhoto:Ref<bool>
			outPunchAllowedHideAddr:Ref<bool>
			outPunchAllowedAdjustAddr:Ref<bool>
			adjustRange:Ref<int>
			allowPcPunch:Ref<bool>
			allowRemedy:Ref<bool>
			remedyLimit:Ref<bool>
			remedyLimitCount:Ref<int>
			remedyDateLimit:Ref<bool>
			remedyDateNum:Ref<int>
			allowRemedyTypeLack:Ref<bool>
			allowRemedyTypeLate:Ref<bool>
			allowRemedyTypeEarly:Ref<bool>
			allowRemedyTypeNormal:Ref<bool>
			showCumulativeTime:Ref<bool>
			showOverTime:Ref<bool>
			hideStaffPunchTime:Ref<bool>
			facePunch:Ref<bool>
			facePunchCfg:Ref<int>
			faceLiveNeedAction:Ref<bool>
			faceDowngrade:Ref<bool>
			replaceBasicPic:Ref<bool>
			machines:Ref<Machine>[]
			gpsRange:Ref<int>
			locations:Ref<Location>[]
			groupType:Ref<int>
			punchDayShiftIds:string[]
			freePunchCfg:Ref<FreePunchCfg>
			calendarId:Ref<int>
			needPunchSpecialDays:Ref<PunchSpecialDateShift>[]
			noNeedPunchSpecialDays:Ref<PunchSpecialDateShift>[]
			workDayNoPunchAsLack:Ref<bool>
			remedyPeriodType:Ref<int>
			remedyPeriodCustomDate:Ref<int>
			punchType:Ref<int>
			effectTime:Ref<string>
			fixshiftEffectTime:Ref<string>
			memberEffectTime:Ref<string>
			restClockInNeedApproval:Ref<bool>
			clockInNeedPhoto:Ref<bool>
			memberStatusChange:Ref<MemberStatusChange>
			leaveNeedPunch:Ref<bool>
			leaveNeedPunchCfg:Ref<LeaveNeedPunchCfg>
			goOutNeedPunch:Ref<int>
			goOutNeedPunchCfg:Ref<LeaveNeedPunchCfg>
			travelNeedPunch:Ref<int>
			travelNeedPunchCfg:Ref<LeaveNeedPunchCfg>
			needPunchMembers:Ref<PunchMember>[]
			noNeedPunchMembers:Ref<PunchMember>[]
			saveAutoChanges:Ref<bool>
			orgChangeAutoAdjust:Ref<bool>
			bindDefaultDeptIds:string[]
			bindDefaultUserIds:string[]
			overtimeClockCfg:Ref<OvertimeClockCfg>
			newCalendarId:Ref<string>
			allowApplyPunch:Ref<bool>
	}
	export interface GetLeaveEmployExpireRecordPathReqBodyBuilder extends Struct<GetLeaveEmployExpireRecordPathReqBodyBuilder>{

			employmentId(employmentId:string):Ref<GetLeaveEmployExpireRecordPathReqBodyBuilder>
			leaveTypeId(leaveTypeId:string):Ref<GetLeaveEmployExpireRecordPathReqBodyBuilder>
			startExpirationDate(startExpirationDate:string):Ref<GetLeaveEmployExpireRecordPathReqBodyBuilder>
			endExpirationDate(endExpirationDate:string):Ref<GetLeaveEmployExpireRecordPathReqBodyBuilder>
			timeOffset(timeOffset:int):Ref<GetLeaveEmployExpireRecordPathReqBodyBuilder>
			build():Ref<GetLeaveEmployExpireRecordReqBody>
	}
	export interface GetLeaveEmployExpireRecordReq extends Struct<GetLeaveEmployExpireRecordReq>{

			body:Ref<GetLeaveEmployExpireRecordReqBody>
	}
	export interface GetLeaveEmployExpireRecordReqBody extends Struct<GetLeaveEmployExpireRecordReqBody>{

			employmentId:Ref<string>
			leaveTypeId:Ref<string>
			startExpirationDate:Ref<string>
			endExpirationDate:Ref<string>
			timeOffset:Ref<int>
	}
	export interface GetLeaveEmployExpireRecordReqBodyBuilder extends Struct<GetLeaveEmployExpireRecordReqBodyBuilder>{

			employmentId(employmentId:string):Ref<GetLeaveEmployExpireRecordReqBodyBuilder>
			leaveTypeId(leaveTypeId:string):Ref<GetLeaveEmployExpireRecordReqBodyBuilder>
			startExpirationDate(startExpirationDate:string):Ref<GetLeaveEmployExpireRecordReqBodyBuilder>
			endExpirationDate(endExpirationDate:string):Ref<GetLeaveEmployExpireRecordReqBodyBuilder>
			timeOffset(timeOffset:int):Ref<GetLeaveEmployExpireRecordReqBodyBuilder>
			build():Ref<GetLeaveEmployExpireRecordReqBody>
	}
	export interface GetLeaveEmployExpireRecordReqBuilder extends Struct<GetLeaveEmployExpireRecordReqBuilder>{

			leaveId(leaveId:string):Ref<GetLeaveEmployExpireRecordReqBuilder>
			userIdType(userIdType:string):Ref<GetLeaveEmployExpireRecordReqBuilder>
			body(body:Ref<GetLeaveEmployExpireRecordReqBody>):Ref<GetLeaveEmployExpireRecordReqBuilder>
			build():Ref<GetLeaveEmployExpireRecordReq>
	}
	export interface GetLeaveEmployExpireRecordResp extends Struct<GetLeaveEmployExpireRecordResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetLeaveEmployExpireRecordRespData>
			success():bool
	}
	export interface GetLeaveEmployExpireRecordRespData extends Struct<GetLeaveEmployExpireRecordRespData>{

			records:Ref<LeaveEmployExpireRecord>[]
	}
	export interface GetShiftReq extends Struct<GetShiftReq>{

	}
	export interface GetShiftReqBuilder extends Struct<GetShiftReqBuilder>{

			shiftId(shiftId:string):Ref<GetShiftReqBuilder>
			build():Ref<GetShiftReq>
	}
	export interface GetShiftResp extends Struct<GetShiftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetShiftRespData>
			success():bool
	}
	export interface GetShiftRespData extends Struct<GetShiftRespData>{

			shiftId:Ref<string>
			shiftName:Ref<string>
			punchTimes:Ref<int>
			subShiftLeaderIds:string[]
			isFlexible:Ref<bool>
			flexibleMinutes:Ref<int>
			flexibleRule:Ref<FlexibleRule>[]
			noNeedOff:Ref<bool>
			punchTimeRule:Ref<PunchTimeRule>[]
			lateOffLateOnRule:Ref<LateOffLateOnRule>[]
			restTimeRule:Ref<RestRule>[]
			overtimeRule:Ref<OvertimeRule>[]
			dayType:Ref<int>
			overtimeRestTimeRule:Ref<RestRule>[]
			lateMinutesAsSeriousLate:Ref<int>
			shiftMiddleTimeRule:Ref<ShiftMiddleTimeRule>
			lateOffLateOnSetting:Ref<LateOffLateOnSetting>
	}
	export interface GetUserFlowReq extends Struct<GetUserFlowReq>{

	}
	export interface GetUserFlowReqBuilder extends Struct<GetUserFlowReqBuilder>{

			userFlowId(userFlowId:string):Ref<GetUserFlowReqBuilder>
			employeeType(employeeType:string):Ref<GetUserFlowReqBuilder>
			build():Ref<GetUserFlowReq>
	}
	export interface GetUserFlowResp extends Struct<GetUserFlowResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetUserFlowRespData>
			success():bool
	}
	export interface GetUserFlowRespData extends Struct<GetUserFlowRespData>{

			userId:Ref<string>
			creatorId:Ref<string>
			locationName:Ref<string>
			checkTime:Ref<string>
			comment:Ref<string>
			recordId:Ref<string>
			ssid:Ref<string>
			bssid:Ref<string>
			isField:Ref<bool>
			isWifi:Ref<bool>
			type:Ref<int>
			photoUrls:string[]
			deviceId:Ref<string>
			checkResult:Ref<string>
			externalId:Ref<string>
			idempotentId:Ref<string>
	}
	export interface Group extends Struct<Group>{

			groupId:Ref<string>
			groupName:Ref<string>
			timeZone:Ref<string>
			bindDeptIds:string[]
			exceptDeptIds:string[]
			bindUserIds:string[]
			exceptUserIds:string[]
			groupLeaderIds:string[]
			subGroupLeaderIds:string[]
			allowOutPunch:Ref<bool>
			outPunchNeedApproval:Ref<bool>
			outPunchNeedPostApproval:Ref<bool>
			outPunchNeedRemark:Ref<bool>
			outPunchNeedPhoto:Ref<bool>
			outPunchAllowedHideAddr:Ref<bool>
			outPunchAllowedAdjustAddr:Ref<bool>
			adjustRange:Ref<int>
			allowPcPunch:Ref<bool>
			allowRemedy:Ref<bool>
			remedyLimit:Ref<bool>
			remedyLimitCount:Ref<int>
			remedyDateLimit:Ref<bool>
			remedyDateNum:Ref<int>
			allowRemedyTypeLack:Ref<bool>
			allowRemedyTypeLate:Ref<bool>
			allowRemedyTypeEarly:Ref<bool>
			allowRemedyTypeNormal:Ref<bool>
			showCumulativeTime:Ref<bool>
			showOverTime:Ref<bool>
			hideStaffPunchTime:Ref<bool>
			facePunch:Ref<bool>
			facePunchCfg:Ref<int>
			faceLiveNeedAction:Ref<bool>
			faceDowngrade:Ref<bool>
			replaceBasicPic:Ref<bool>
			machines:Ref<Machine>[]
			gpsRange:Ref<int>
			locations:Ref<Location>[]
			groupType:Ref<int>
			punchDayShiftIds:string[]
			freePunchCfg:Ref<FreePunchCfg>
			calendarId:Ref<int>
			needPunchSpecialDays:Ref<PunchSpecialDateShift>[]
			noNeedPunchSpecialDays:Ref<PunchSpecialDateShift>[]
			workDayNoPunchAsLack:Ref<bool>
			effectNow:Ref<bool>
			remedyPeriodType:Ref<int>
			remedyPeriodCustomDate:Ref<int>
			punchType:Ref<int>
			effectTime:Ref<string>
			fixshiftEffectTime:Ref<string>
			memberEffectTime:Ref<string>
			restClockInNeedApproval:Ref<bool>
			clockInNeedPhoto:Ref<bool>
			memberStatusChange:Ref<MemberStatusChange>
			leaveNeedPunch:Ref<bool>
			leaveNeedPunchCfg:Ref<LeaveNeedPunchCfg>
			goOutNeedPunch:Ref<int>
			goOutNeedPunchCfg:Ref<LeaveNeedPunchCfg>
			travelNeedPunch:Ref<int>
			travelNeedPunchCfg:Ref<LeaveNeedPunchCfg>
			needPunchMembers:Ref<PunchMember>[]
			noNeedPunchMembers:Ref<PunchMember>[]
			saveAutoChanges:Ref<bool>
			orgChangeAutoAdjust:Ref<bool>
			bindDefaultDeptIds:string[]
			bindDefaultUserIds:string[]
			overtimeClockCfg:Ref<OvertimeClockCfg>
			newCalendarId:Ref<string>
			allowApplyPunch:Ref<bool>
	}
	export interface GroupBuilder extends Struct<GroupBuilder>{

			groupId(groupId:string):Ref<GroupBuilder>
			groupName(groupName:string):Ref<GroupBuilder>
			timeZone(timeZone:string):Ref<GroupBuilder>
			bindDeptIds(bindDeptIds:string[]):Ref<GroupBuilder>
			exceptDeptIds(exceptDeptIds:string[]):Ref<GroupBuilder>
			bindUserIds(bindUserIds:string[]):Ref<GroupBuilder>
			exceptUserIds(exceptUserIds:string[]):Ref<GroupBuilder>
			groupLeaderIds(groupLeaderIds:string[]):Ref<GroupBuilder>
			subGroupLeaderIds(subGroupLeaderIds:string[]):Ref<GroupBuilder>
			allowOutPunch(allowOutPunch:bool):Ref<GroupBuilder>
			outPunchNeedApproval(outPunchNeedApproval:bool):Ref<GroupBuilder>
			outPunchNeedPostApproval(outPunchNeedPostApproval:bool):Ref<GroupBuilder>
			outPunchNeedRemark(outPunchNeedRemark:bool):Ref<GroupBuilder>
			outPunchNeedPhoto(outPunchNeedPhoto:bool):Ref<GroupBuilder>
			outPunchAllowedHideAddr(outPunchAllowedHideAddr:bool):Ref<GroupBuilder>
			outPunchAllowedAdjustAddr(outPunchAllowedAdjustAddr:bool):Ref<GroupBuilder>
			adjustRange(adjustRange:int):Ref<GroupBuilder>
			allowPcPunch(allowPcPunch:bool):Ref<GroupBuilder>
			allowRemedy(allowRemedy:bool):Ref<GroupBuilder>
			remedyLimit(remedyLimit:bool):Ref<GroupBuilder>
			remedyLimitCount(remedyLimitCount:int):Ref<GroupBuilder>
			remedyDateLimit(remedyDateLimit:bool):Ref<GroupBuilder>
			remedyDateNum(remedyDateNum:int):Ref<GroupBuilder>
			allowRemedyTypeLack(allowRemedyTypeLack:bool):Ref<GroupBuilder>
			allowRemedyTypeLate(allowRemedyTypeLate:bool):Ref<GroupBuilder>
			allowRemedyTypeEarly(allowRemedyTypeEarly:bool):Ref<GroupBuilder>
			allowRemedyTypeNormal(allowRemedyTypeNormal:bool):Ref<GroupBuilder>
			showCumulativeTime(showCumulativeTime:bool):Ref<GroupBuilder>
			showOverTime(showOverTime:bool):Ref<GroupBuilder>
			hideStaffPunchTime(hideStaffPunchTime:bool):Ref<GroupBuilder>
			facePunch(facePunch:bool):Ref<GroupBuilder>
			facePunchCfg(facePunchCfg:int):Ref<GroupBuilder>
			faceLiveNeedAction(faceLiveNeedAction:bool):Ref<GroupBuilder>
			faceDowngrade(faceDowngrade:bool):Ref<GroupBuilder>
			replaceBasicPic(replaceBasicPic:bool):Ref<GroupBuilder>
			machines(machines:Ref<Machine>[]):Ref<GroupBuilder>
			gpsRange(gpsRange:int):Ref<GroupBuilder>
			locations(locations:Ref<Location>[]):Ref<GroupBuilder>
			groupType(groupType:int):Ref<GroupBuilder>
			punchDayShiftIds(punchDayShiftIds:string[]):Ref<GroupBuilder>
			freePunchCfg(freePunchCfg:Ref<FreePunchCfg>):Ref<GroupBuilder>
			calendarId(calendarId:int):Ref<GroupBuilder>
			needPunchSpecialDays(needPunchSpecialDays:Ref<PunchSpecialDateShift>[]):Ref<GroupBuilder>
			noNeedPunchSpecialDays(noNeedPunchSpecialDays:Ref<PunchSpecialDateShift>[]):Ref<GroupBuilder>
			workDayNoPunchAsLack(workDayNoPunchAsLack:bool):Ref<GroupBuilder>
			effectNow(effectNow:bool):Ref<GroupBuilder>
			remedyPeriodType(remedyPeriodType:int):Ref<GroupBuilder>
			remedyPeriodCustomDate(remedyPeriodCustomDate:int):Ref<GroupBuilder>
			punchType(punchType:int):Ref<GroupBuilder>
			effectTime(effectTime:string):Ref<GroupBuilder>
			fixshiftEffectTime(fixshiftEffectTime:string):Ref<GroupBuilder>
			memberEffectTime(memberEffectTime:string):Ref<GroupBuilder>
			restClockInNeedApproval(restClockInNeedApproval:bool):Ref<GroupBuilder>
			clockInNeedPhoto(clockInNeedPhoto:bool):Ref<GroupBuilder>
			memberStatusChange(memberStatusChange:Ref<MemberStatusChange>):Ref<GroupBuilder>
			leaveNeedPunch(leaveNeedPunch:bool):Ref<GroupBuilder>
			leaveNeedPunchCfg(leaveNeedPunchCfg:Ref<LeaveNeedPunchCfg>):Ref<GroupBuilder>
			goOutNeedPunch(goOutNeedPunch:int):Ref<GroupBuilder>
			goOutNeedPunchCfg(goOutNeedPunchCfg:Ref<LeaveNeedPunchCfg>):Ref<GroupBuilder>
			travelNeedPunch(travelNeedPunch:int):Ref<GroupBuilder>
			travelNeedPunchCfg(travelNeedPunchCfg:Ref<LeaveNeedPunchCfg>):Ref<GroupBuilder>
			needPunchMembers(needPunchMembers:Ref<PunchMember>[]):Ref<GroupBuilder>
			noNeedPunchMembers(noNeedPunchMembers:Ref<PunchMember>[]):Ref<GroupBuilder>
			saveAutoChanges(saveAutoChanges:bool):Ref<GroupBuilder>
			orgChangeAutoAdjust(orgChangeAutoAdjust:bool):Ref<GroupBuilder>
			bindDefaultDeptIds(bindDefaultDeptIds:string[]):Ref<GroupBuilder>
			bindDefaultUserIds(bindDefaultUserIds:string[]):Ref<GroupBuilder>
			overtimeClockCfg(overtimeClockCfg:Ref<OvertimeClockCfg>):Ref<GroupBuilder>
			newCalendarId(newCalendarId:string):Ref<GroupBuilder>
			allowApplyPunch(allowApplyPunch:bool):Ref<GroupBuilder>
			build():Ref<Group>
	}
	export interface GroupMeta extends Struct<GroupMeta>{

			groupId:Ref<string>
			groupName:Ref<string>
	}
	export interface GroupMetaBuilder extends Struct<GroupMetaBuilder>{

			groupId(groupId:string):Ref<GroupMetaBuilder>
			groupName(groupName:string):Ref<GroupMetaBuilder>
			build():Ref<GroupMeta>
	}
	export interface I18nMap extends Struct<I18nMap>{

			zh:Ref<string>
			en:Ref<string>
			ja:Ref<string>
	}
	export interface I18nMapBuilder extends Struct<I18nMapBuilder>{

			zh(zh:string):Ref<I18nMapBuilder>
			en(en:string):Ref<I18nMapBuilder>
			ja(ja:string):Ref<I18nMapBuilder>
			build():Ref<I18nMap>
	}
	export interface I18nNames extends Struct<I18nNames>{

			ch:Ref<string>
			en:Ref<string>
			ja:Ref<string>
	}
	export interface I18nNamesBuilder extends Struct<I18nNamesBuilder>{

			ch(ch:string):Ref<I18nNamesBuilder>
			en(en:string):Ref<I18nNamesBuilder>
			ja(ja:string):Ref<I18nNamesBuilder>
			build():Ref<I18nNames>
	}
	export interface Item extends Struct<Item>{

			code:Ref<string>
			title:Ref<string>
			childItems:Ref<ChildItem>[]
	}
	export interface ItemBuilder extends Struct<ItemBuilder>{

			code(code:string):Ref<ItemBuilder>
			title(title:string):Ref<ItemBuilder>
			childItems(childItems:Ref<ChildItem>[]):Ref<ItemBuilder>
			build():Ref<Item>
	}
	export interface LangText extends Struct<LangText>{

			lang:Ref<string>
			value:Ref<string>
	}
	export interface LangTextBuilder extends Struct<LangTextBuilder>{

			lang(lang:string):Ref<LangTextBuilder>
			value(value:string):Ref<LangTextBuilder>
			build():Ref<LangText>
	}
	export interface LateOffLateOnRule extends Struct<LateOffLateOnRule>{

			lateOffMinutes:Ref<int>
			lateOnMinutes:Ref<int>
	}
	export interface LateOffLateOnRuleBuilder extends Struct<LateOffLateOnRuleBuilder>{

			lateOffMinutes(lateOffMinutes:int):Ref<LateOffLateOnRuleBuilder>
			lateOnMinutes(lateOnMinutes:int):Ref<LateOffLateOnRuleBuilder>
			build():Ref<LateOffLateOnRule>
	}
	export interface LateOffLateOnSetting extends Struct<LateOffLateOnSetting>{

			lateOffBaseOnTimeType:Ref<int>
			lateOnBaseOnTimeType:Ref<int>
	}
	export interface LateOffLateOnSettingBuilder extends Struct<LateOffLateOnSettingBuilder>{

			lateOffBaseOnTimeType(lateOffBaseOnTimeType:int):Ref<LateOffLateOnSettingBuilder>
			lateOnBaseOnTimeType(lateOnBaseOnTimeType:int):Ref<LateOffLateOnSettingBuilder>
			build():Ref<LateOffLateOnSetting>
	}
	export interface LeaveAccrualRecord extends Struct<LeaveAccrualRecord>{

			id:Ref<string>
			employmentId:Ref<string>
			leaveTypeId:Ref<string>
			grantingQuantity:Ref<string>
			grantingUnit:Ref<int>
			effectiveDate:Ref<string>
			expirationDate:Ref<string>
			grantedBy:Ref<int>
			reason:Ref<LangText>[]
			createdAt:Ref<string>
			createdBy:Ref<string>
			updatedAt:Ref<string>
			updatedBy:Ref<string>
			sectionType:Ref<int>
	}
	export interface LeaveAccrualRecordBuilder extends Struct<LeaveAccrualRecordBuilder>{

			id(id:string):Ref<LeaveAccrualRecordBuilder>
			employmentId(employmentId:string):Ref<LeaveAccrualRecordBuilder>
			leaveTypeId(leaveTypeId:string):Ref<LeaveAccrualRecordBuilder>
			grantingQuantity(grantingQuantity:string):Ref<LeaveAccrualRecordBuilder>
			grantingUnit(grantingUnit:int):Ref<LeaveAccrualRecordBuilder>
			effectiveDate(effectiveDate:string):Ref<LeaveAccrualRecordBuilder>
			expirationDate(expirationDate:string):Ref<LeaveAccrualRecordBuilder>
			grantedBy(grantedBy:int):Ref<LeaveAccrualRecordBuilder>
			reason(reason:Ref<LangText>[]):Ref<LeaveAccrualRecordBuilder>
			createdAt(createdAt:string):Ref<LeaveAccrualRecordBuilder>
			createdBy(createdBy:string):Ref<LeaveAccrualRecordBuilder>
			updatedAt(updatedAt:string):Ref<LeaveAccrualRecordBuilder>
			updatedBy(updatedBy:string):Ref<LeaveAccrualRecordBuilder>
			sectionType(sectionType:int):Ref<LeaveAccrualRecordBuilder>
			build():Ref<LeaveAccrualRecord>
	}
	export interface LeaveEmployExpireRecord extends Struct<LeaveEmployExpireRecord>{

			id:Ref<string>
			employmentId:Ref<string>
			leaveTypeId:Ref<string>
			grantingQuantity:Ref<string>
			leftGrantingQuantity:Ref<string>
			grantingUnit:Ref<int>
			effectiveDate:Ref<string>
			expirationDate:Ref<string>
			reason:Ref<LangText>[]
			isUpdateByExternal:Ref<bool>
			accrualSource:Ref<int>
			leaveSubTypeId:Ref<string>
			sectionType:Ref<int>
	}
	export interface LeaveEmployExpireRecordBuilder extends Struct<LeaveEmployExpireRecordBuilder>{

			id(id:string):Ref<LeaveEmployExpireRecordBuilder>
			employmentId(employmentId:string):Ref<LeaveEmployExpireRecordBuilder>
			leaveTypeId(leaveTypeId:string):Ref<LeaveEmployExpireRecordBuilder>
			grantingQuantity(grantingQuantity:string):Ref<LeaveEmployExpireRecordBuilder>
			leftGrantingQuantity(leftGrantingQuantity:string):Ref<LeaveEmployExpireRecordBuilder>
			grantingUnit(grantingUnit:int):Ref<LeaveEmployExpireRecordBuilder>
			effectiveDate(effectiveDate:string):Ref<LeaveEmployExpireRecordBuilder>
			expirationDate(expirationDate:string):Ref<LeaveEmployExpireRecordBuilder>
			reason(reason:Ref<LangText>[]):Ref<LeaveEmployExpireRecordBuilder>
			isUpdateByExternal(isUpdateByExternal:bool):Ref<LeaveEmployExpireRecordBuilder>
			accrualSource(accrualSource:int):Ref<LeaveEmployExpireRecordBuilder>
			leaveSubTypeId(leaveSubTypeId:string):Ref<LeaveEmployExpireRecordBuilder>
			sectionType(sectionType:int):Ref<LeaveEmployExpireRecordBuilder>
			build():Ref<LeaveEmployExpireRecord>
	}
	export interface LeaveNeedPunchCfg extends Struct<LeaveNeedPunchCfg>{

			lateMinutesAsLate:Ref<int>
			lateMinutesAsLack:Ref<int>
			earlyMinutesAsEarly:Ref<int>
			earlyMinutesAsLack:Ref<int>
	}
	export interface LeaveNeedPunchCfgBuilder extends Struct<LeaveNeedPunchCfgBuilder>{

			lateMinutesAsLate(lateMinutesAsLate:int):Ref<LeaveNeedPunchCfgBuilder>
			lateMinutesAsLack(lateMinutesAsLack:int):Ref<LeaveNeedPunchCfgBuilder>
			earlyMinutesAsEarly(earlyMinutesAsEarly:int):Ref<LeaveNeedPunchCfgBuilder>
			earlyMinutesAsLack(earlyMinutesAsLack:int):Ref<LeaveNeedPunchCfgBuilder>
			build():Ref<LeaveNeedPunchCfg>
	}
	export interface ListArchiveRuleIterator extends Struct<ListArchiveRuleIterator>{

			next():[bool,Ref<ArchiveReportMeta>]
			nextPageToken():Ref<string>
	}
	export interface ListArchiveRuleReq extends Struct<ListArchiveRuleReq>{

			limit:int
	}
	export interface ListArchiveRuleReqBuilder extends Struct<ListArchiveRuleReqBuilder>{

			limit(limit:int):Ref<ListArchiveRuleReqBuilder>
			pageSize(pageSize:int):Ref<ListArchiveRuleReqBuilder>
			pageToken(pageToken:string):Ref<ListArchiveRuleReqBuilder>
			build():Ref<ListArchiveRuleReq>
	}
	export interface ListArchiveRuleResp extends Struct<ListArchiveRuleResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListArchiveRuleRespData>
			success():bool
	}
	export interface ListArchiveRuleRespData extends Struct<ListArchiveRuleRespData>{

			items:Ref<ArchiveReportMeta>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListGroupIterator extends Struct<ListGroupIterator>{

			next():[bool,Ref<GroupMeta>]
			nextPageToken():Ref<string>
	}
	export interface ListGroupReq extends Struct<ListGroupReq>{

			limit:int
	}
	export interface ListGroupReqBuilder extends Struct<ListGroupReqBuilder>{

			limit(limit:int):Ref<ListGroupReqBuilder>
			pageSize(pageSize:int):Ref<ListGroupReqBuilder>
			pageToken(pageToken:string):Ref<ListGroupReqBuilder>
			build():Ref<ListGroupReq>
	}
	export interface ListGroupResp extends Struct<ListGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListGroupRespData>
			success():bool
	}
	export interface ListGroupRespData extends Struct<ListGroupRespData>{

			groupList:Ref<GroupMeta>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListShiftIterator extends Struct<ListShiftIterator>{

			next():[bool,Ref<Shift>]
			nextPageToken():Ref<string>
	}
	export interface ListShiftReq extends Struct<ListShiftReq>{

			limit:int
	}
	export interface ListShiftReqBuilder extends Struct<ListShiftReqBuilder>{

			limit(limit:int):Ref<ListShiftReqBuilder>
			pageSize(pageSize:int):Ref<ListShiftReqBuilder>
			pageToken(pageToken:string):Ref<ListShiftReqBuilder>
			build():Ref<ListShiftReq>
	}
	export interface ListShiftResp extends Struct<ListShiftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListShiftRespData>
			success():bool
	}
	export interface ListShiftRespData extends Struct<ListShiftRespData>{

			shiftList:Ref<Shift>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	//"en"
	export const LocaleEn:string
	//"ja"
	export const LocaleJa:string
	//"en"
	export const LocaleQueryUserStatsFieldEn:string
	//"ja"
	export const LocaleQueryUserStatsFieldJa:string
	//"zh"
	export const LocaleQueryUserStatsFieldZh:string
	//"en"
	export const LocaleQueryUserStatsViewEn:string
	//"ja"
	export const LocaleQueryUserStatsViewJa:string
	//"zh"
	export const LocaleQueryUserStatsViewZh:string
	//"zh"
	export const LocaleZh:string
	export interface Location extends Struct<Location>{

			locationId:Ref<string>
			locationName:Ref<string>
			locationType:Ref<int>
			latitude:Ref<float64>
			longitude:Ref<float64>
			ssid:Ref<string>
			bssid:Ref<string>
			mapType:Ref<int>
			address:Ref<string>
			ip:Ref<string>
			feature:Ref<string>
			gpsRange:Ref<int>
	}
	export interface LocationBuilder extends Struct<LocationBuilder>{

			locationId(locationId:string):Ref<LocationBuilder>
			locationName(locationName:string):Ref<LocationBuilder>
			locationType(locationType:int):Ref<LocationBuilder>
			latitude(latitude:float64):Ref<LocationBuilder>
			longitude(longitude:float64):Ref<LocationBuilder>
			ssid(ssid:string):Ref<LocationBuilder>
			bssid(bssid:string):Ref<LocationBuilder>
			mapType(mapType:int):Ref<LocationBuilder>
			address(address:string):Ref<LocationBuilder>
			ip(ip:string):Ref<LocationBuilder>
			feature(feature:string):Ref<LocationBuilder>
			gpsRange(gpsRange:int):Ref<LocationBuilder>
			build():Ref<Location>
	}
	export interface LocationInfo extends Struct<LocationInfo>{

			status:Ref<int>
			geofences:Ref<Area>[]
	}
	export interface LocationInfoBuilder extends Struct<LocationInfoBuilder>{

			status(status:int):Ref<LocationInfoBuilder>
			geofences(geofences:Ref<Area>[]):Ref<LocationInfoBuilder>
			build():Ref<LocationInfo>
	}
	export interface LocationInfoEvent extends Struct<LocationInfoEvent>{

			coord:Ref<Coordinate>
	}
	export interface LocationInfoEventBuilder extends Struct<LocationInfoEventBuilder>{

			coord(coord:Ref<Coordinate>):Ref<LocationInfoEventBuilder>
			build():Ref<LocationInfoEvent>
	}
	export interface LocationRecord extends Struct<LocationRecord>{

			userId:Ref<UserId>
			timestamp:Ref<string>
			location:Ref<LocationInfoEvent>
			wifi:Ref<WifiInfoEvent>
			ruleSnapshotId:Ref<string>
			type:Ref<string>
			scanWifiList:Ref<ScanWifiInfo>[]
			deviceId:Ref<string>
			clientInfo:Ref<string>
	}
	export interface LocationRecordBuilder extends Struct<LocationRecordBuilder>{

			userId(userId:Ref<UserId>):Ref<LocationRecordBuilder>
			timestamp(timestamp:string):Ref<LocationRecordBuilder>
			location(location:Ref<LocationInfoEvent>):Ref<LocationRecordBuilder>
			wifi(wifi:Ref<WifiInfoEvent>):Ref<LocationRecordBuilder>
			ruleSnapshotId(ruleSnapshotId:string):Ref<LocationRecordBuilder>
			type(type_:string):Ref<LocationRecordBuilder>
			scanWifiList(scanWifiList:Ref<ScanWifiInfo>[]):Ref<LocationRecordBuilder>
			deviceId(deviceId:string):Ref<LocationRecordBuilder>
			clientInfo(clientInfo:string):Ref<LocationRecordBuilder>
			build():Ref<LocationRecord>
	}
	export interface LocationSetting extends Struct<LocationSetting>{

			location:Ref<LocationInfo>
			wifi:Ref<WifiInfo>
			userId:Ref<string>
	}
	export interface LocationSettingBuilder extends Struct<LocationSettingBuilder>{

			location(location:Ref<LocationInfo>):Ref<LocationSettingBuilder>
			wifi(wifi:Ref<WifiInfo>):Ref<LocationSettingBuilder>
			userId(userId:string):Ref<LocationSettingBuilder>
			build():Ref<LocationSetting>
	}
	export interface Machine extends Struct<Machine>{

			machineSn:Ref<string>
			machineName:Ref<string>
	}
	export interface MachineBuilder extends Struct<MachineBuilder>{

			machineSn(machineSn:string):Ref<MachineBuilder>
			machineName(machineName:string):Ref<MachineBuilder>
			build():Ref<Machine>
	}
	export interface MemberStatusChange extends Struct<MemberStatusChange>{

			onboardingOnNoNeedPunch:Ref<bool>
			onboardingOffNoNeedPunch:Ref<bool>
			offboardingOnNoNeedPunch:Ref<bool>
			offboardingOffNoNeedPunch:Ref<bool>
	}
	export interface MemberStatusChangeBuilder extends Struct<MemberStatusChangeBuilder>{

			onboardingOnNoNeedPunch(onboardingOnNoNeedPunch:bool):Ref<MemberStatusChangeBuilder>
			onboardingOffNoNeedPunch(onboardingOffNoNeedPunch:bool):Ref<MemberStatusChangeBuilder>
			offboardingOnNoNeedPunch(offboardingOnNoNeedPunch:bool):Ref<MemberStatusChangeBuilder>
			offboardingOffNoNeedPunch(offboardingOffNoNeedPunch:bool):Ref<MemberStatusChangeBuilder>
			build():Ref<MemberStatusChange>
	}
	export interface ModifyUserSettingPathReqBodyBuilder extends Struct<ModifyUserSettingPathReqBodyBuilder>{

			userSetting(userSetting:Ref<UserSetting>):Ref<ModifyUserSettingPathReqBodyBuilder>
			build():Ref<ModifyUserSettingReqBody>
	}
	export interface ModifyUserSettingReq extends Struct<ModifyUserSettingReq>{

			body:Ref<ModifyUserSettingReqBody>
	}
	export interface ModifyUserSettingReqBody extends Struct<ModifyUserSettingReqBody>{

			userSetting:Ref<UserSetting>
	}
	export interface ModifyUserSettingReqBodyBuilder extends Struct<ModifyUserSettingReqBodyBuilder>{

			userSetting(userSetting:Ref<UserSetting>):Ref<ModifyUserSettingReqBodyBuilder>
			build():Ref<ModifyUserSettingReqBody>
	}
	export interface ModifyUserSettingReqBuilder extends Struct<ModifyUserSettingReqBuilder>{

			employeeType(employeeType:string):Ref<ModifyUserSettingReqBuilder>
			body(body:Ref<ModifyUserSettingReqBody>):Ref<ModifyUserSettingReqBuilder>
			build():Ref<ModifyUserSettingReq>
	}
	export interface ModifyUserSettingResp extends Struct<ModifyUserSettingResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ModifyUserSettingRespData>
			success():bool
	}
	export interface ModifyUserSettingRespData extends Struct<ModifyUserSettingRespData>{

			userSetting:Ref<UserSetting>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newApprovalInfoBuilder():Ref<ApprovalInfoBuilder>

	export function newArchiveFieldBuilder():Ref<ArchiveFieldBuilder>

	export function newArchiveFieldDataBuilder():Ref<ArchiveFieldDataBuilder>

	export function newArchiveReportDataBuilder():Ref<ArchiveReportDataBuilder>

	export function newArchiveReportMetaBuilder():Ref<ArchiveReportMetaBuilder>

	export function newAreaBuilder():Ref<AreaBuilder>

	export function newArrangeShiftGroupBuilder():Ref<ArrangeShiftGroupBuilder>

	export function newBatchCreateUserDailyShiftPathReqBodyBuilder():Ref<BatchCreateUserDailyShiftPathReqBodyBuilder>

	export function newBatchCreateUserDailyShiftReqBodyBuilder():Ref<BatchCreateUserDailyShiftReqBodyBuilder>

	export function newBatchCreateUserDailyShiftReqBuilder():Ref<BatchCreateUserDailyShiftReqBuilder>

	export function newBatchCreateUserFlowPathReqBodyBuilder():Ref<BatchCreateUserFlowPathReqBodyBuilder>

	export function newBatchCreateUserFlowReqBodyBuilder():Ref<BatchCreateUserFlowReqBodyBuilder>

	export function newBatchCreateUserFlowReqBuilder():Ref<BatchCreateUserFlowReqBuilder>

	export function newChildFieldBuilder():Ref<ChildFieldBuilder>

	export function newChildItemBuilder():Ref<ChildItemBuilder>

	export function newCoordinateBuilder():Ref<CoordinateBuilder>

	export function newCreateGroupPathReqBodyBuilder():Ref<CreateGroupPathReqBodyBuilder>

	export function newCreateGroupReqBodyBuilder():Ref<CreateGroupReqBodyBuilder>

	export function newCreateGroupReqBuilder():Ref<CreateGroupReqBuilder>

	export function newCreateShiftReqBuilder():Ref<CreateShiftReqBuilder>

	export function newCreateUserApprovalPathReqBodyBuilder():Ref<CreateUserApprovalPathReqBodyBuilder>

	export function newCreateUserApprovalReqBodyBuilder():Ref<CreateUserApprovalReqBodyBuilder>

	export function newCreateUserApprovalReqBuilder():Ref<CreateUserApprovalReqBuilder>

	export function newCreateUserTaskRemedyReqBuilder():Ref<CreateUserTaskRemedyReqBuilder>

	export function newDeleteGroupReqBuilder():Ref<DeleteGroupReqBuilder>

	export function newDeleteShiftReqBuilder():Ref<DeleteShiftReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDownloadFileReqBuilder():Ref<DownloadFileReqBuilder>

	export function newDurationItemBuilder():Ref<DurationItemBuilder>

	export function newFieldBuilder():Ref<FieldBuilder>

	export function newFileBuilder():Ref<FileBuilder>

	export function newFilterItemBuilder():Ref<FilterItemBuilder>

	export function newFlexibleRuleBuilder():Ref<FlexibleRuleBuilder>

	export function newFreePunchCfgBuilder():Ref<FreePunchCfgBuilder>

	export function newGetGroupReqBuilder():Ref<GetGroupReqBuilder>

	export function newGetLeaveEmployExpireRecordPathReqBodyBuilder():Ref<GetLeaveEmployExpireRecordPathReqBodyBuilder>

	export function newGetLeaveEmployExpireRecordReqBodyBuilder():Ref<GetLeaveEmployExpireRecordReqBodyBuilder>

	export function newGetLeaveEmployExpireRecordReqBuilder():Ref<GetLeaveEmployExpireRecordReqBuilder>

	export function newGetShiftReqBuilder():Ref<GetShiftReqBuilder>

	export function newGetUserFlowReqBuilder():Ref<GetUserFlowReqBuilder>

	export function newGroupBuilder():Ref<GroupBuilder>

	export function newGroupMetaBuilder():Ref<GroupMetaBuilder>

	export function newI18nMapBuilder():Ref<I18nMapBuilder>

	export function newI18nNamesBuilder():Ref<I18nNamesBuilder>

	export function newItemBuilder():Ref<ItemBuilder>

	export function newLangTextBuilder():Ref<LangTextBuilder>

	export function newLateOffLateOnRuleBuilder():Ref<LateOffLateOnRuleBuilder>

	export function newLateOffLateOnSettingBuilder():Ref<LateOffLateOnSettingBuilder>

	export function newLeaveAccrualRecordBuilder():Ref<LeaveAccrualRecordBuilder>

	export function newLeaveEmployExpireRecordBuilder():Ref<LeaveEmployExpireRecordBuilder>

	export function newLeaveNeedPunchCfgBuilder():Ref<LeaveNeedPunchCfgBuilder>

	export function newListArchiveRuleReqBuilder():Ref<ListArchiveRuleReqBuilder>

	export function newListGroupReqBuilder():Ref<ListGroupReqBuilder>

	export function newListShiftReqBuilder():Ref<ListShiftReqBuilder>

	export function newLocationBuilder():Ref<LocationBuilder>

	export function newLocationInfoBuilder():Ref<LocationInfoBuilder>

	export function newLocationInfoEventBuilder():Ref<LocationInfoEventBuilder>

	export function newLocationRecordBuilder():Ref<LocationRecordBuilder>

	export function newLocationSettingBuilder():Ref<LocationSettingBuilder>

	export function newMachineBuilder():Ref<MachineBuilder>

	export function newMemberStatusChangeBuilder():Ref<MemberStatusChangeBuilder>

	export function newModifyUserSettingPathReqBodyBuilder():Ref<ModifyUserSettingPathReqBodyBuilder>

	export function newModifyUserSettingReqBodyBuilder():Ref<ModifyUserSettingReqBodyBuilder>

	export function newModifyUserSettingReqBuilder():Ref<ModifyUserSettingReqBuilder>

	export function newOpenApplyTimeRangeBuilder():Ref<OpenApplyTimeRangeBuilder>

	export function newOvertimeApplyDetailBuilder():Ref<OvertimeApplyDetailBuilder>

	export function newOvertimeClockCfgBuilder():Ref<OvertimeClockCfgBuilder>

	export function newOvertimeDetailBuilder():Ref<OvertimeDetailBuilder>

	export function newOvertimeRuleBuilder():Ref<OvertimeRuleBuilder>

	export function newOvertimeTimeRangeBuilder():Ref<OvertimeTimeRangeBuilder>

	export function newPatchLeaveAccrualRecordPathReqBodyBuilder():Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>

	export function newPatchLeaveAccrualRecordReqBodyBuilder():Ref<PatchLeaveAccrualRecordReqBodyBuilder>

	export function newPatchLeaveAccrualRecordReqBuilder():Ref<PatchLeaveAccrualRecordReqBuilder>

	export function newProcessApprovalInfoPathReqBodyBuilder():Ref<ProcessApprovalInfoPathReqBodyBuilder>

	export function newProcessApprovalInfoReqBodyBuilder():Ref<ProcessApprovalInfoReqBodyBuilder>

	export function newProcessApprovalInfoReqBuilder():Ref<ProcessApprovalInfoReqBuilder>

	export function newPunchMemberBuilder():Ref<PunchMemberBuilder>

	export function newPunchSpecialDateShiftBuilder():Ref<PunchSpecialDateShiftBuilder>

	export function newPunchTimeRuleBuilder():Ref<PunchTimeRuleBuilder>

	export function newPunchTimeSimpleRuleBuilder():Ref<PunchTimeSimpleRuleBuilder>

	export function newQueryShiftReqBuilder():Ref<QueryShiftReqBuilder>

	export function newQueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder():Ref<QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder>

	export function newQueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder():Ref<QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder>

	export function newQueryUserAllowedRemedysUserTaskRemedyReqBuilder():Ref<QueryUserAllowedRemedysUserTaskRemedyReqBuilder>

	export function newQueryUserApprovalPathReqBodyBuilder():Ref<QueryUserApprovalPathReqBodyBuilder>

	export function newQueryUserApprovalReqBodyBuilder():Ref<QueryUserApprovalReqBodyBuilder>

	export function newQueryUserApprovalReqBuilder():Ref<QueryUserApprovalReqBuilder>

	export function newQueryUserDailyShiftPathReqBodyBuilder():Ref<QueryUserDailyShiftPathReqBodyBuilder>

	export function newQueryUserDailyShiftReqBodyBuilder():Ref<QueryUserDailyShiftReqBodyBuilder>

	export function newQueryUserDailyShiftReqBuilder():Ref<QueryUserDailyShiftReqBuilder>

	export function newQueryUserFlowPathReqBodyBuilder():Ref<QueryUserFlowPathReqBodyBuilder>

	export function newQueryUserFlowReqBodyBuilder():Ref<QueryUserFlowReqBodyBuilder>

	export function newQueryUserFlowReqBuilder():Ref<QueryUserFlowReqBuilder>

	export function newQueryUserSettingPathReqBodyBuilder():Ref<QueryUserSettingPathReqBodyBuilder>

	export function newQueryUserSettingReqBodyBuilder():Ref<QueryUserSettingReqBodyBuilder>

	export function newQueryUserSettingReqBuilder():Ref<QueryUserSettingReqBuilder>

	export function newQueryUserStatsDataPathReqBodyBuilder():Ref<QueryUserStatsDataPathReqBodyBuilder>

	export function newQueryUserStatsDataReqBodyBuilder():Ref<QueryUserStatsDataReqBodyBuilder>

	export function newQueryUserStatsDataReqBuilder():Ref<QueryUserStatsDataReqBuilder>

	export function newQueryUserStatsFieldPathReqBodyBuilder():Ref<QueryUserStatsFieldPathReqBodyBuilder>

	export function newQueryUserStatsFieldReqBodyBuilder():Ref<QueryUserStatsFieldReqBodyBuilder>

	export function newQueryUserStatsFieldReqBuilder():Ref<QueryUserStatsFieldReqBuilder>

	export function newQueryUserStatsViewPathReqBodyBuilder():Ref<QueryUserStatsViewPathReqBodyBuilder>

	export function newQueryUserStatsViewReqBodyBuilder():Ref<QueryUserStatsViewReqBodyBuilder>

	export function newQueryUserStatsViewReqBuilder():Ref<QueryUserStatsViewReqBuilder>

	export function newQueryUserTaskPathReqBodyBuilder():Ref<QueryUserTaskPathReqBodyBuilder>

	export function newQueryUserTaskRemedyPathReqBodyBuilder():Ref<QueryUserTaskRemedyPathReqBodyBuilder>

	export function newQueryUserTaskRemedyReqBodyBuilder():Ref<QueryUserTaskRemedyReqBodyBuilder>

	export function newQueryUserTaskRemedyReqBuilder():Ref<QueryUserTaskRemedyReqBuilder>

	export function newQueryUserTaskReqBodyBuilder():Ref<QueryUserTaskReqBodyBuilder>

	export function newQueryUserTaskReqBuilder():Ref<QueryUserTaskReqBuilder>

	export function newReportDataBuilder():Ref<ReportDataBuilder>

	export function newReportValueBuilder():Ref<ReportValueBuilder>

	export function newRestRuleBuilder():Ref<RestRuleBuilder>

	export function newScanWifiInfoBuilder():Ref<ScanWifiInfoBuilder>

	export function newScheduleBuilder():Ref<ScheduleBuilder>

	export function newScopeGroupBuilder():Ref<ScopeGroupBuilder>

	export function newScopeValueBuilder():Ref<ScopeValueBuilder>

	export function newSearchGroupPathReqBodyBuilder():Ref<SearchGroupPathReqBodyBuilder>

	export function newSearchGroupReqBodyBuilder():Ref<SearchGroupReqBodyBuilder>

	export function newSearchGroupReqBuilder():Ref<SearchGroupReqBuilder>

	export function newShiftBuilder():Ref<ShiftBuilder>

	export function newShiftGroupUserBuilder():Ref<ShiftGroupUserBuilder>

	export function newShiftMiddleTimeRuleBuilder():Ref<ShiftMiddleTimeRuleBuilder>

	export function newStatisticsFieldBuilder():Ref<StatisticsFieldBuilder>

	export function newStatusChangeBuilder():Ref<StatusChangeBuilder>

	export function newTaskResultBuilder():Ref<TaskResultBuilder>

	export function newUpdateUserStatsViewPathReqBodyBuilder():Ref<UpdateUserStatsViewPathReqBodyBuilder>

	export function newUpdateUserStatsViewReqBodyBuilder():Ref<UpdateUserStatsViewReqBodyBuilder>

	export function newUpdateUserStatsViewReqBuilder():Ref<UpdateUserStatsViewReqBuilder>

	export function newUploadFilePathReqBodyBuilder():Ref<UploadFilePathReqBodyBuilder>

	export function newUploadFileReqBodyBuilder():Ref<UploadFileReqBodyBuilder>

	export function newUploadFileReqBuilder():Ref<UploadFileReqBuilder>

	export function newUserAllowedRemedyBuilder():Ref<UserAllowedRemedyBuilder>

	export function newUserApprovalBuilder():Ref<UserApprovalBuilder>

	export function newUserArrangeShiftGroupBuilder():Ref<UserArrangeShiftGroupBuilder>

	export function newUserDailyShiftBuilder():Ref<UserDailyShiftBuilder>

	export function newUserFlowBuilder():Ref<UserFlowBuilder>

	export function newUserIdBuilder():Ref<UserIdBuilder>

	export function newUserLeaveBuilder():Ref<UserLeaveBuilder>

	export function newUserOutBuilder():Ref<UserOutBuilder>

	export function newUserOvertimeWorkBuilder():Ref<UserOvertimeWorkBuilder>

	export function newUserSettingBuilder():Ref<UserSettingBuilder>

	export function newUserShiftGroupsListBuilder():Ref<UserShiftGroupsListBuilder>

	export function newUserStatsDataBuilder():Ref<UserStatsDataBuilder>

	export function newUserStatsDataCellBuilder():Ref<UserStatsDataCellBuilder>

	export function newUserStatsDataDurationBuilder():Ref<UserStatsDataDurationBuilder>

	export function newUserStatsDataFeatureBuilder():Ref<UserStatsDataFeatureBuilder>

	export function newUserStatsFieldBuilder():Ref<UserStatsFieldBuilder>

	export function newUserStatsFieldsQueryArchiveRulePathReqBodyBuilder():Ref<UserStatsFieldsQueryArchiveRulePathReqBodyBuilder>

	export function newUserStatsFieldsQueryArchiveRuleReqBodyBuilder():Ref<UserStatsFieldsQueryArchiveRuleReqBodyBuilder>

	export function newUserStatsFieldsQueryArchiveRuleReqBuilder():Ref<UserStatsFieldsQueryArchiveRuleReqBuilder>

	export function newUserStatsViewBuilder():Ref<UserStatsViewBuilder>

	export function newUserTaskBuilder():Ref<UserTaskBuilder>

	export function newUserTaskRemedyBuilder():Ref<UserTaskRemedyBuilder>

	export function newUserTmpDailyShiftBuilder():Ref<UserTmpDailyShiftBuilder>

	export function newUserTripBuilder():Ref<UserTripBuilder>

	export function newWifiInfoBuilder():Ref<WifiInfoBuilder>

	export function newWifiInfoEventBuilder():Ref<WifiInfoEventBuilder>

	export interface OpenApplyTimeRange extends Struct<OpenApplyTimeRange>{

			overtimeAttributionDate:Ref<string>
			timeRange:Ref<OvertimeTimeRange>
	}
	export interface OpenApplyTimeRangeBuilder extends Struct<OpenApplyTimeRangeBuilder>{

			overtimeAttributionDate(overtimeAttributionDate:string):Ref<OpenApplyTimeRangeBuilder>
			timeRange(timeRange:Ref<OvertimeTimeRange>):Ref<OpenApplyTimeRangeBuilder>
			build():Ref<OpenApplyTimeRange>
	}
	export interface OvertimeApplyDetail extends Struct<OvertimeApplyDetail>{

			userId:Ref<string>
			date:Ref<string>
			dateType:Ref<int>
			duration:Ref<string>
			unit:Ref<int>
			isTimeBank:Ref<bool>
			updateTime:Ref<string>
	}
	export interface OvertimeApplyDetailBuilder extends Struct<OvertimeApplyDetailBuilder>{

			userId(userId:string):Ref<OvertimeApplyDetailBuilder>
			date(date:string):Ref<OvertimeApplyDetailBuilder>
			dateType(dateType:int):Ref<OvertimeApplyDetailBuilder>
			duration(duration:string):Ref<OvertimeApplyDetailBuilder>
			unit(unit:int):Ref<OvertimeApplyDetailBuilder>
			isTimeBank(isTimeBank:bool):Ref<OvertimeApplyDetailBuilder>
			updateTime(updateTime:string):Ref<OvertimeApplyDetailBuilder>
			build():Ref<OvertimeApplyDetail>
	}
	export interface OvertimeClockCfg extends Struct<OvertimeClockCfg>{

			allowPunchApproval:Ref<bool>
			needClockOverTimeStartAndEnd:Ref<bool>
	}
	export interface OvertimeClockCfgBuilder extends Struct<OvertimeClockCfgBuilder>{

			allowPunchApproval(allowPunchApproval:bool):Ref<OvertimeClockCfgBuilder>
			needClockOverTimeStartAndEnd(needClockOverTimeStartAndEnd:bool):Ref<OvertimeClockCfgBuilder>
			build():Ref<OvertimeClockCfg>
	}
	export interface OvertimeDetail extends Struct<OvertimeDetail>{

			id:Ref<string>
			userId:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			duration:Ref<string>
			unit:Ref<int>
			dateType:Ref<int>
			settleType:Ref<int>
			effectiveTime:Ref<string>
			progressStartTime:Ref<string>
			date:Ref<string>
			updateTime:Ref<string>
			isTimeBank:Ref<bool>
			instanceId:Ref<string>
	}
	export interface OvertimeDetailBuilder extends Struct<OvertimeDetailBuilder>{

			id(id:string):Ref<OvertimeDetailBuilder>
			userId(userId:string):Ref<OvertimeDetailBuilder>
			startTime(startTime:string):Ref<OvertimeDetailBuilder>
			endTime(endTime:string):Ref<OvertimeDetailBuilder>
			duration(duration:string):Ref<OvertimeDetailBuilder>
			unit(unit:int):Ref<OvertimeDetailBuilder>
			dateType(dateType:int):Ref<OvertimeDetailBuilder>
			settleType(settleType:int):Ref<OvertimeDetailBuilder>
			effectiveTime(effectiveTime:string):Ref<OvertimeDetailBuilder>
			progressStartTime(progressStartTime:string):Ref<OvertimeDetailBuilder>
			date(date:string):Ref<OvertimeDetailBuilder>
			updateTime(updateTime:string):Ref<OvertimeDetailBuilder>
			isTimeBank(isTimeBank:bool):Ref<OvertimeDetailBuilder>
			instanceId(instanceId:string):Ref<OvertimeDetailBuilder>
			build():Ref<OvertimeDetail>
	}
	export interface OvertimeRule extends Struct<OvertimeRule>{

			onOvertime:Ref<string>
			offOvertime:Ref<string>
	}
	export interface OvertimeRuleBuilder extends Struct<OvertimeRuleBuilder>{

			onOvertime(onOvertime:string):Ref<OvertimeRuleBuilder>
			offOvertime(offOvertime:string):Ref<OvertimeRuleBuilder>
			build():Ref<OvertimeRule>
	}
	export interface OvertimeTimeRange extends Struct<OvertimeTimeRange>{

			startTime:Ref<string>
			endTime:Ref<string>
	}
	export interface OvertimeTimeRangeBuilder extends Struct<OvertimeTimeRangeBuilder>{

			startTime(startTime:string):Ref<OvertimeTimeRangeBuilder>
			endTime(endTime:string):Ref<OvertimeTimeRangeBuilder>
			build():Ref<OvertimeTimeRange>
	}
	export interface PatchLeaveAccrualRecordPathReqBodyBuilder extends Struct<PatchLeaveAccrualRecordPathReqBodyBuilder>{

			leaveGrantingRecordId(leaveGrantingRecordId:string):Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>
			employmentId(employmentId:string):Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>
			leaveTypeId(leaveTypeId:string):Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>
			reason(reason:Ref<LangText>[]):Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>
			timeOffset(timeOffset:int):Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>
			expirationDate(expirationDate:string):Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>
			quantity(quantity:string):Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>
			sectionType(sectionType:int):Ref<PatchLeaveAccrualRecordPathReqBodyBuilder>
			build():Ref<PatchLeaveAccrualRecordReqBody>
	}
	export interface PatchLeaveAccrualRecordReq extends Struct<PatchLeaveAccrualRecordReq>{

			body:Ref<PatchLeaveAccrualRecordReqBody>
	}
	export interface PatchLeaveAccrualRecordReqBody extends Struct<PatchLeaveAccrualRecordReqBody>{

			leaveGrantingRecordId:Ref<string>
			employmentId:Ref<string>
			leaveTypeId:Ref<string>
			reason:Ref<LangText>[]
			timeOffset:Ref<int>
			expirationDate:Ref<string>
			quantity:Ref<string>
			sectionType:Ref<int>
	}
	export interface PatchLeaveAccrualRecordReqBodyBuilder extends Struct<PatchLeaveAccrualRecordReqBodyBuilder>{

			leaveGrantingRecordId(leaveGrantingRecordId:string):Ref<PatchLeaveAccrualRecordReqBodyBuilder>
			employmentId(employmentId:string):Ref<PatchLeaveAccrualRecordReqBodyBuilder>
			leaveTypeId(leaveTypeId:string):Ref<PatchLeaveAccrualRecordReqBodyBuilder>
			reason(reason:Ref<LangText>[]):Ref<PatchLeaveAccrualRecordReqBodyBuilder>
			timeOffset(timeOffset:int):Ref<PatchLeaveAccrualRecordReqBodyBuilder>
			expirationDate(expirationDate:string):Ref<PatchLeaveAccrualRecordReqBodyBuilder>
			quantity(quantity:string):Ref<PatchLeaveAccrualRecordReqBodyBuilder>
			sectionType(sectionType:int):Ref<PatchLeaveAccrualRecordReqBodyBuilder>
			build():Ref<PatchLeaveAccrualRecordReqBody>
	}
	export interface PatchLeaveAccrualRecordReqBuilder extends Struct<PatchLeaveAccrualRecordReqBuilder>{

			leaveId(leaveId:string):Ref<PatchLeaveAccrualRecordReqBuilder>
			userIdType(userIdType:string):Ref<PatchLeaveAccrualRecordReqBuilder>
			body(body:Ref<PatchLeaveAccrualRecordReqBody>):Ref<PatchLeaveAccrualRecordReqBuilder>
			build():Ref<PatchLeaveAccrualRecordReq>
	}
	export interface PatchLeaveAccrualRecordResp extends Struct<PatchLeaveAccrualRecordResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchLeaveAccrualRecordRespData>
			success():bool
	}
	export interface PatchLeaveAccrualRecordRespData extends Struct<PatchLeaveAccrualRecordRespData>{

			record:Ref<LeaveAccrualRecord>
	}
	export interface ProcessApprovalInfoPathReqBodyBuilder extends Struct<ProcessApprovalInfoPathReqBodyBuilder>{

			approvalId(approvalId:string):Ref<ProcessApprovalInfoPathReqBodyBuilder>
			approvalType(approvalType:string):Ref<ProcessApprovalInfoPathReqBodyBuilder>
			status(status:int):Ref<ProcessApprovalInfoPathReqBodyBuilder>
			build():Ref<ProcessApprovalInfoReqBody>
	}
	export interface ProcessApprovalInfoReq extends Struct<ProcessApprovalInfoReq>{

			body:Ref<ProcessApprovalInfoReqBody>
	}
	export interface ProcessApprovalInfoReqBody extends Struct<ProcessApprovalInfoReqBody>{

			approvalId:Ref<string>
			approvalType:Ref<string>
			status:Ref<int>
	}
	export interface ProcessApprovalInfoReqBodyBuilder extends Struct<ProcessApprovalInfoReqBodyBuilder>{

			approvalId(approvalId:string):Ref<ProcessApprovalInfoReqBodyBuilder>
			approvalType(approvalType:string):Ref<ProcessApprovalInfoReqBodyBuilder>
			status(status:int):Ref<ProcessApprovalInfoReqBodyBuilder>
			build():Ref<ProcessApprovalInfoReqBody>
	}
	export interface ProcessApprovalInfoReqBuilder extends Struct<ProcessApprovalInfoReqBuilder>{

			body(body:Ref<ProcessApprovalInfoReqBody>):Ref<ProcessApprovalInfoReqBuilder>
			build():Ref<ProcessApprovalInfoReq>
	}
	export interface ProcessApprovalInfoResp extends Struct<ProcessApprovalInfoResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ProcessApprovalInfoRespData>
			success():bool
	}
	export interface ProcessApprovalInfoRespData extends Struct<ProcessApprovalInfoRespData>{

			approvalInfo:Ref<ApprovalInfo>
	}
	export interface PunchMember extends Struct<PunchMember>{

			ruleScopeType:Ref<int>
			scopeGroupList:Ref<ScopeGroup>
	}
	export interface PunchMemberBuilder extends Struct<PunchMemberBuilder>{

			ruleScopeType(ruleScopeType:int):Ref<PunchMemberBuilder>
			scopeGroupList(scopeGroupList:Ref<ScopeGroup>):Ref<PunchMemberBuilder>
			build():Ref<PunchMember>
	}
	export interface PunchSpecialDateShift extends Struct<PunchSpecialDateShift>{

			punchDay:Ref<int>
			shiftId:Ref<string>
	}
	export interface PunchSpecialDateShiftBuilder extends Struct<PunchSpecialDateShiftBuilder>{

			punchDay(punchDay:int):Ref<PunchSpecialDateShiftBuilder>
			shiftId(shiftId:string):Ref<PunchSpecialDateShiftBuilder>
			build():Ref<PunchSpecialDateShift>
	}
	export interface PunchTimeRule extends Struct<PunchTimeRule>{

			onTime:Ref<string>
			offTime:Ref<string>
			lateMinutesAsLate:Ref<int>
			lateMinutesAsLack:Ref<int>
			onAdvanceMinutes:Ref<int>
			earlyMinutesAsEarly:Ref<int>
			earlyMinutesAsLack:Ref<int>
			offDelayMinutes:Ref<int>
			lateMinutesAsSeriousLate:Ref<int>
			noNeedOn:Ref<bool>
			noNeedOff:Ref<bool>
	}
	export interface PunchTimeRuleBuilder extends Struct<PunchTimeRuleBuilder>{

			onTime(onTime:string):Ref<PunchTimeRuleBuilder>
			offTime(offTime:string):Ref<PunchTimeRuleBuilder>
			lateMinutesAsLate(lateMinutesAsLate:int):Ref<PunchTimeRuleBuilder>
			lateMinutesAsLack(lateMinutesAsLack:int):Ref<PunchTimeRuleBuilder>
			onAdvanceMinutes(onAdvanceMinutes:int):Ref<PunchTimeRuleBuilder>
			earlyMinutesAsEarly(earlyMinutesAsEarly:int):Ref<PunchTimeRuleBuilder>
			earlyMinutesAsLack(earlyMinutesAsLack:int):Ref<PunchTimeRuleBuilder>
			offDelayMinutes(offDelayMinutes:int):Ref<PunchTimeRuleBuilder>
			lateMinutesAsSeriousLate(lateMinutesAsSeriousLate:int):Ref<PunchTimeRuleBuilder>
			noNeedOn(noNeedOn:bool):Ref<PunchTimeRuleBuilder>
			noNeedOff(noNeedOff:bool):Ref<PunchTimeRuleBuilder>
			build():Ref<PunchTimeRule>
	}
	export interface PunchTimeSimpleRule extends Struct<PunchTimeSimpleRule>{

			onTime:Ref<string>
			offTime:Ref<string>
	}
	export interface PunchTimeSimpleRuleBuilder extends Struct<PunchTimeSimpleRuleBuilder>{

			onTime(onTime:string):Ref<PunchTimeSimpleRuleBuilder>
			offTime(offTime:string):Ref<PunchTimeSimpleRuleBuilder>
			build():Ref<PunchTimeSimpleRule>
	}
	export interface QueryShiftReq extends Struct<QueryShiftReq>{

	}
	export interface QueryShiftReqBuilder extends Struct<QueryShiftReqBuilder>{

			shiftName(shiftName:string):Ref<QueryShiftReqBuilder>
			build():Ref<QueryShiftReq>
	}
	export interface QueryShiftResp extends Struct<QueryShiftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryShiftRespData>
			success():bool
	}
	export interface QueryShiftRespData extends Struct<QueryShiftRespData>{

			shiftId:Ref<string>
			shiftName:Ref<string>
			punchTimes:Ref<int>
			subShiftLeaderIds:string[]
			isFlexible:Ref<bool>
			flexibleMinutes:Ref<int>
			flexibleRule:Ref<FlexibleRule>[]
			noNeedOff:Ref<bool>
			punchTimeRule:Ref<PunchTimeRule>[]
			lateOffLateOnRule:Ref<LateOffLateOnRule>[]
			restTimeRule:Ref<RestRule>[]
			overtimeRule:Ref<OvertimeRule>[]
			dayType:Ref<int>
			overtimeRestTimeRule:Ref<RestRule>[]
			lateMinutesAsSeriousLate:Ref<int>
			shiftMiddleTimeRule:Ref<ShiftMiddleTimeRule>
			lateOffLateOnSetting:Ref<LateOffLateOnSetting>
	}
	export interface QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder extends Struct<QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder>{

			userId(userId:string):Ref<QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder>
			remedyDate(remedyDate:int):Ref<QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder>
			build():Ref<QueryUserAllowedRemedysUserTaskRemedyReqBody>
	}
	export interface QueryUserAllowedRemedysUserTaskRemedyReq extends Struct<QueryUserAllowedRemedysUserTaskRemedyReq>{

			body:Ref<QueryUserAllowedRemedysUserTaskRemedyReqBody>
	}
	export interface QueryUserAllowedRemedysUserTaskRemedyReqBody extends Struct<QueryUserAllowedRemedysUserTaskRemedyReqBody>{

			userId:Ref<string>
			remedyDate:Ref<int>
	}
	export interface QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder extends Struct<QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder>{

			userId(userId:string):Ref<QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder>
			remedyDate(remedyDate:int):Ref<QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder>
			build():Ref<QueryUserAllowedRemedysUserTaskRemedyReqBody>
	}
	export interface QueryUserAllowedRemedysUserTaskRemedyReqBuilder extends Struct<QueryUserAllowedRemedysUserTaskRemedyReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserAllowedRemedysUserTaskRemedyReqBuilder>
			body(body:Ref<QueryUserAllowedRemedysUserTaskRemedyReqBody>):Ref<QueryUserAllowedRemedysUserTaskRemedyReqBuilder>
			build():Ref<QueryUserAllowedRemedysUserTaskRemedyReq>
	}
	export interface QueryUserAllowedRemedysUserTaskRemedyResp extends Struct<QueryUserAllowedRemedysUserTaskRemedyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserAllowedRemedysUserTaskRemedyRespData>
			success():bool
	}
	export interface QueryUserAllowedRemedysUserTaskRemedyRespData extends Struct<QueryUserAllowedRemedysUserTaskRemedyRespData>{

			userAllowedRemedys:Ref<UserAllowedRemedy>[]
	}
	export interface QueryUserApprovalPathReqBodyBuilder extends Struct<QueryUserApprovalPathReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserApprovalPathReqBodyBuilder>
			checkDateFrom(checkDateFrom:int):Ref<QueryUserApprovalPathReqBodyBuilder>
			checkDateTo(checkDateTo:int):Ref<QueryUserApprovalPathReqBodyBuilder>
			checkDateType(checkDateType:string):Ref<QueryUserApprovalPathReqBodyBuilder>
			status(status:int):Ref<QueryUserApprovalPathReqBodyBuilder>
			checkTimeFrom(checkTimeFrom:string):Ref<QueryUserApprovalPathReqBodyBuilder>
			checkTimeTo(checkTimeTo:string):Ref<QueryUserApprovalPathReqBodyBuilder>
			build():Ref<QueryUserApprovalReqBody>
	}
	export interface QueryUserApprovalReq extends Struct<QueryUserApprovalReq>{

			body:Ref<QueryUserApprovalReqBody>
	}
	export interface QueryUserApprovalReqBody extends Struct<QueryUserApprovalReqBody>{

			userIds:string[]
			checkDateFrom:Ref<int>
			checkDateTo:Ref<int>
			checkDateType:Ref<string>
			status:Ref<int>
			checkTimeFrom:Ref<string>
			checkTimeTo:Ref<string>
	}
	export interface QueryUserApprovalReqBodyBuilder extends Struct<QueryUserApprovalReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserApprovalReqBodyBuilder>
			checkDateFrom(checkDateFrom:int):Ref<QueryUserApprovalReqBodyBuilder>
			checkDateTo(checkDateTo:int):Ref<QueryUserApprovalReqBodyBuilder>
			checkDateType(checkDateType:string):Ref<QueryUserApprovalReqBodyBuilder>
			status(status:int):Ref<QueryUserApprovalReqBodyBuilder>
			checkTimeFrom(checkTimeFrom:string):Ref<QueryUserApprovalReqBodyBuilder>
			checkTimeTo(checkTimeTo:string):Ref<QueryUserApprovalReqBodyBuilder>
			build():Ref<QueryUserApprovalReqBody>
	}
	export interface QueryUserApprovalReqBuilder extends Struct<QueryUserApprovalReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserApprovalReqBuilder>
			body(body:Ref<QueryUserApprovalReqBody>):Ref<QueryUserApprovalReqBuilder>
			build():Ref<QueryUserApprovalReq>
	}
	export interface QueryUserApprovalResp extends Struct<QueryUserApprovalResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserApprovalRespData>
			success():bool
	}
	export interface QueryUserApprovalRespData extends Struct<QueryUserApprovalRespData>{

			userApprovals:Ref<UserApproval>[]
	}
	export interface QueryUserDailyShiftPathReqBodyBuilder extends Struct<QueryUserDailyShiftPathReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserDailyShiftPathReqBodyBuilder>
			checkDateFrom(checkDateFrom:int):Ref<QueryUserDailyShiftPathReqBodyBuilder>
			checkDateTo(checkDateTo:int):Ref<QueryUserDailyShiftPathReqBodyBuilder>
			build():Ref<QueryUserDailyShiftReqBody>
	}
	export interface QueryUserDailyShiftReq extends Struct<QueryUserDailyShiftReq>{

			body:Ref<QueryUserDailyShiftReqBody>
	}
	export interface QueryUserDailyShiftReqBody extends Struct<QueryUserDailyShiftReqBody>{

			userIds:string[]
			checkDateFrom:Ref<int>
			checkDateTo:Ref<int>
	}
	export interface QueryUserDailyShiftReqBodyBuilder extends Struct<QueryUserDailyShiftReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserDailyShiftReqBodyBuilder>
			checkDateFrom(checkDateFrom:int):Ref<QueryUserDailyShiftReqBodyBuilder>
			checkDateTo(checkDateTo:int):Ref<QueryUserDailyShiftReqBodyBuilder>
			build():Ref<QueryUserDailyShiftReqBody>
	}
	export interface QueryUserDailyShiftReqBuilder extends Struct<QueryUserDailyShiftReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserDailyShiftReqBuilder>
			body(body:Ref<QueryUserDailyShiftReqBody>):Ref<QueryUserDailyShiftReqBuilder>
			build():Ref<QueryUserDailyShiftReq>
	}
	export interface QueryUserDailyShiftResp extends Struct<QueryUserDailyShiftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserDailyShiftRespData>
			success():bool
	}
	export interface QueryUserDailyShiftRespData extends Struct<QueryUserDailyShiftRespData>{

			userDailyShifts:Ref<UserDailyShift>[]
	}
	export interface QueryUserFlowPathReqBodyBuilder extends Struct<QueryUserFlowPathReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserFlowPathReqBodyBuilder>
			checkTimeFrom(checkTimeFrom:string):Ref<QueryUserFlowPathReqBodyBuilder>
			checkTimeTo(checkTimeTo:string):Ref<QueryUserFlowPathReqBodyBuilder>
			build():Ref<QueryUserFlowReqBody>
	}
	export interface QueryUserFlowReq extends Struct<QueryUserFlowReq>{

			body:Ref<QueryUserFlowReqBody>
	}
	export interface QueryUserFlowReqBody extends Struct<QueryUserFlowReqBody>{

			userIds:string[]
			checkTimeFrom:Ref<string>
			checkTimeTo:Ref<string>
	}
	export interface QueryUserFlowReqBodyBuilder extends Struct<QueryUserFlowReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserFlowReqBodyBuilder>
			checkTimeFrom(checkTimeFrom:string):Ref<QueryUserFlowReqBodyBuilder>
			checkTimeTo(checkTimeTo:string):Ref<QueryUserFlowReqBodyBuilder>
			build():Ref<QueryUserFlowReqBody>
	}
	export interface QueryUserFlowReqBuilder extends Struct<QueryUserFlowReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserFlowReqBuilder>
			includeTerminatedUser(includeTerminatedUser:bool):Ref<QueryUserFlowReqBuilder>
			body(body:Ref<QueryUserFlowReqBody>):Ref<QueryUserFlowReqBuilder>
			build():Ref<QueryUserFlowReq>
	}
	export interface QueryUserFlowResp extends Struct<QueryUserFlowResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserFlowRespData>
			success():bool
	}
	export interface QueryUserFlowRespData extends Struct<QueryUserFlowRespData>{

			userFlowResults:Ref<UserFlow>[]
	}
	export interface QueryUserSettingPathReqBodyBuilder extends Struct<QueryUserSettingPathReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserSettingPathReqBodyBuilder>
			build():Ref<QueryUserSettingReqBody>
	}
	export interface QueryUserSettingReq extends Struct<QueryUserSettingReq>{

			body:Ref<QueryUserSettingReqBody>
	}
	export interface QueryUserSettingReqBody extends Struct<QueryUserSettingReqBody>{

			userIds:string[]
	}
	export interface QueryUserSettingReqBodyBuilder extends Struct<QueryUserSettingReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserSettingReqBodyBuilder>
			build():Ref<QueryUserSettingReqBody>
	}
	export interface QueryUserSettingReqBuilder extends Struct<QueryUserSettingReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserSettingReqBuilder>
			body(body:Ref<QueryUserSettingReqBody>):Ref<QueryUserSettingReqBuilder>
			build():Ref<QueryUserSettingReq>
	}
	export interface QueryUserSettingResp extends Struct<QueryUserSettingResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserSettingRespData>
			success():bool
	}
	export interface QueryUserSettingRespData extends Struct<QueryUserSettingRespData>{

			userSettings:Ref<UserSetting>[]
	}
	export interface QueryUserStatsDataPathReqBodyBuilder extends Struct<QueryUserStatsDataPathReqBodyBuilder>{

			locale(locale:string):Ref<QueryUserStatsDataPathReqBodyBuilder>
			statsType(statsType:string):Ref<QueryUserStatsDataPathReqBodyBuilder>
			startDate(startDate:int):Ref<QueryUserStatsDataPathReqBodyBuilder>
			endDate(endDate:int):Ref<QueryUserStatsDataPathReqBodyBuilder>
			userIds(userIds:string[]):Ref<QueryUserStatsDataPathReqBodyBuilder>
			needHistory(needHistory:bool):Ref<QueryUserStatsDataPathReqBodyBuilder>
			currentGroupOnly(currentGroupOnly:bool):Ref<QueryUserStatsDataPathReqBodyBuilder>
			userId(userId:string):Ref<QueryUserStatsDataPathReqBodyBuilder>
			build():Ref<QueryUserStatsDataReqBody>
	}
	export interface QueryUserStatsDataReq extends Struct<QueryUserStatsDataReq>{

			body:Ref<QueryUserStatsDataReqBody>
	}
	export interface QueryUserStatsDataReqBody extends Struct<QueryUserStatsDataReqBody>{

			locale:Ref<string>
			statsType:Ref<string>
			startDate:Ref<int>
			endDate:Ref<int>
			userIds:string[]
			needHistory:Ref<bool>
			currentGroupOnly:Ref<bool>
			userId:Ref<string>
	}
	export interface QueryUserStatsDataReqBodyBuilder extends Struct<QueryUserStatsDataReqBodyBuilder>{

			locale(locale:string):Ref<QueryUserStatsDataReqBodyBuilder>
			statsType(statsType:string):Ref<QueryUserStatsDataReqBodyBuilder>
			startDate(startDate:int):Ref<QueryUserStatsDataReqBodyBuilder>
			endDate(endDate:int):Ref<QueryUserStatsDataReqBodyBuilder>
			userIds(userIds:string[]):Ref<QueryUserStatsDataReqBodyBuilder>
			needHistory(needHistory:bool):Ref<QueryUserStatsDataReqBodyBuilder>
			currentGroupOnly(currentGroupOnly:bool):Ref<QueryUserStatsDataReqBodyBuilder>
			userId(userId:string):Ref<QueryUserStatsDataReqBodyBuilder>
			build():Ref<QueryUserStatsDataReqBody>
	}
	export interface QueryUserStatsDataReqBuilder extends Struct<QueryUserStatsDataReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserStatsDataReqBuilder>
			body(body:Ref<QueryUserStatsDataReqBody>):Ref<QueryUserStatsDataReqBuilder>
			build():Ref<QueryUserStatsDataReq>
	}
	export interface QueryUserStatsDataResp extends Struct<QueryUserStatsDataResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserStatsDataRespData>
			success():bool
	}
	export interface QueryUserStatsDataRespData extends Struct<QueryUserStatsDataRespData>{

			userDatas:Ref<UserStatsData>[]
			invalidUserList:string[]
	}
	export interface QueryUserStatsFieldPathReqBodyBuilder extends Struct<QueryUserStatsFieldPathReqBodyBuilder>{

			locale(locale:string):Ref<QueryUserStatsFieldPathReqBodyBuilder>
			statsType(statsType:string):Ref<QueryUserStatsFieldPathReqBodyBuilder>
			startDate(startDate:int):Ref<QueryUserStatsFieldPathReqBodyBuilder>
			endDate(endDate:int):Ref<QueryUserStatsFieldPathReqBodyBuilder>
			build():Ref<QueryUserStatsFieldReqBody>
	}
	export interface QueryUserStatsFieldReq extends Struct<QueryUserStatsFieldReq>{

			body:Ref<QueryUserStatsFieldReqBody>
	}
	export interface QueryUserStatsFieldReqBody extends Struct<QueryUserStatsFieldReqBody>{

			locale:Ref<string>
			statsType:Ref<string>
			startDate:Ref<int>
			endDate:Ref<int>
	}
	export interface QueryUserStatsFieldReqBodyBuilder extends Struct<QueryUserStatsFieldReqBodyBuilder>{

			locale(locale:string):Ref<QueryUserStatsFieldReqBodyBuilder>
			statsType(statsType:string):Ref<QueryUserStatsFieldReqBodyBuilder>
			startDate(startDate:int):Ref<QueryUserStatsFieldReqBodyBuilder>
			endDate(endDate:int):Ref<QueryUserStatsFieldReqBodyBuilder>
			build():Ref<QueryUserStatsFieldReqBody>
	}
	export interface QueryUserStatsFieldReqBuilder extends Struct<QueryUserStatsFieldReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserStatsFieldReqBuilder>
			body(body:Ref<QueryUserStatsFieldReqBody>):Ref<QueryUserStatsFieldReqBuilder>
			build():Ref<QueryUserStatsFieldReq>
	}
	export interface QueryUserStatsFieldResp extends Struct<QueryUserStatsFieldResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserStatsFieldRespData>
			success():bool
	}
	export interface QueryUserStatsFieldRespData extends Struct<QueryUserStatsFieldRespData>{

			userStatsField:Ref<UserStatsField>
	}
	export interface QueryUserStatsViewPathReqBodyBuilder extends Struct<QueryUserStatsViewPathReqBodyBuilder>{

			locale(locale:string):Ref<QueryUserStatsViewPathReqBodyBuilder>
			statsType(statsType:string):Ref<QueryUserStatsViewPathReqBodyBuilder>
			userId(userId:string):Ref<QueryUserStatsViewPathReqBodyBuilder>
			build():Ref<QueryUserStatsViewReqBody>
	}
	export interface QueryUserStatsViewReq extends Struct<QueryUserStatsViewReq>{

			body:Ref<QueryUserStatsViewReqBody>
	}
	export interface QueryUserStatsViewReqBody extends Struct<QueryUserStatsViewReqBody>{

			locale:Ref<string>
			statsType:Ref<string>
			userId:Ref<string>
	}
	export interface QueryUserStatsViewReqBodyBuilder extends Struct<QueryUserStatsViewReqBodyBuilder>{

			locale(locale:string):Ref<QueryUserStatsViewReqBodyBuilder>
			statsType(statsType:string):Ref<QueryUserStatsViewReqBodyBuilder>
			userId(userId:string):Ref<QueryUserStatsViewReqBodyBuilder>
			build():Ref<QueryUserStatsViewReqBody>
	}
	export interface QueryUserStatsViewReqBuilder extends Struct<QueryUserStatsViewReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserStatsViewReqBuilder>
			body(body:Ref<QueryUserStatsViewReqBody>):Ref<QueryUserStatsViewReqBuilder>
			build():Ref<QueryUserStatsViewReq>
	}
	export interface QueryUserStatsViewResp extends Struct<QueryUserStatsViewResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserStatsViewRespData>
			success():bool
	}
	export interface QueryUserStatsViewRespData extends Struct<QueryUserStatsViewRespData>{

			view:Ref<UserStatsView>
	}
	export interface QueryUserTaskPathReqBodyBuilder extends Struct<QueryUserTaskPathReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserTaskPathReqBodyBuilder>
			checkDateFrom(checkDateFrom:int):Ref<QueryUserTaskPathReqBodyBuilder>
			checkDateTo(checkDateTo:int):Ref<QueryUserTaskPathReqBodyBuilder>
			needOvertimeResult(needOvertimeResult:bool):Ref<QueryUserTaskPathReqBodyBuilder>
			build():Ref<QueryUserTaskReqBody>
	}
	export interface QueryUserTaskRemedyPathReqBodyBuilder extends Struct<QueryUserTaskRemedyPathReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserTaskRemedyPathReqBodyBuilder>
			checkTimeFrom(checkTimeFrom:string):Ref<QueryUserTaskRemedyPathReqBodyBuilder>
			checkTimeTo(checkTimeTo:string):Ref<QueryUserTaskRemedyPathReqBodyBuilder>
			checkDateType(checkDateType:string):Ref<QueryUserTaskRemedyPathReqBodyBuilder>
			status(status:int):Ref<QueryUserTaskRemedyPathReqBodyBuilder>
			build():Ref<QueryUserTaskRemedyReqBody>
	}
	export interface QueryUserTaskRemedyReq extends Struct<QueryUserTaskRemedyReq>{

			body:Ref<QueryUserTaskRemedyReqBody>
	}
	export interface QueryUserTaskRemedyReqBody extends Struct<QueryUserTaskRemedyReqBody>{

			userIds:string[]
			checkTimeFrom:Ref<string>
			checkTimeTo:Ref<string>
			checkDateType:Ref<string>
			status:Ref<int>
	}
	export interface QueryUserTaskRemedyReqBodyBuilder extends Struct<QueryUserTaskRemedyReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserTaskRemedyReqBodyBuilder>
			checkTimeFrom(checkTimeFrom:string):Ref<QueryUserTaskRemedyReqBodyBuilder>
			checkTimeTo(checkTimeTo:string):Ref<QueryUserTaskRemedyReqBodyBuilder>
			checkDateType(checkDateType:string):Ref<QueryUserTaskRemedyReqBodyBuilder>
			status(status:int):Ref<QueryUserTaskRemedyReqBodyBuilder>
			build():Ref<QueryUserTaskRemedyReqBody>
	}
	export interface QueryUserTaskRemedyReqBuilder extends Struct<QueryUserTaskRemedyReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserTaskRemedyReqBuilder>
			body(body:Ref<QueryUserTaskRemedyReqBody>):Ref<QueryUserTaskRemedyReqBuilder>
			build():Ref<QueryUserTaskRemedyReq>
	}
	export interface QueryUserTaskRemedyResp extends Struct<QueryUserTaskRemedyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserTaskRemedyRespData>
			success():bool
	}
	export interface QueryUserTaskRemedyRespData extends Struct<QueryUserTaskRemedyRespData>{

			userRemedys:Ref<UserTaskRemedy>[]
	}
	export interface QueryUserTaskReq extends Struct<QueryUserTaskReq>{

			body:Ref<QueryUserTaskReqBody>
	}
	export interface QueryUserTaskReqBody extends Struct<QueryUserTaskReqBody>{

			userIds:string[]
			checkDateFrom:Ref<int>
			checkDateTo:Ref<int>
			needOvertimeResult:Ref<bool>
	}
	export interface QueryUserTaskReqBodyBuilder extends Struct<QueryUserTaskReqBodyBuilder>{

			userIds(userIds:string[]):Ref<QueryUserTaskReqBodyBuilder>
			checkDateFrom(checkDateFrom:int):Ref<QueryUserTaskReqBodyBuilder>
			checkDateTo(checkDateTo:int):Ref<QueryUserTaskReqBodyBuilder>
			needOvertimeResult(needOvertimeResult:bool):Ref<QueryUserTaskReqBodyBuilder>
			build():Ref<QueryUserTaskReqBody>
	}
	export interface QueryUserTaskReqBuilder extends Struct<QueryUserTaskReqBuilder>{

			employeeType(employeeType:string):Ref<QueryUserTaskReqBuilder>
			ignoreInvalidUsers(ignoreInvalidUsers:bool):Ref<QueryUserTaskReqBuilder>
			includeTerminatedUser(includeTerminatedUser:bool):Ref<QueryUserTaskReqBuilder>
			body(body:Ref<QueryUserTaskReqBody>):Ref<QueryUserTaskReqBuilder>
			build():Ref<QueryUserTaskReq>
	}
	export interface QueryUserTaskResp extends Struct<QueryUserTaskResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryUserTaskRespData>
			success():bool
	}
	export interface QueryUserTaskRespData extends Struct<QueryUserTaskRespData>{

			userTaskResults:Ref<UserTask>[]
			invalidUserIds:string[]
			unauthorizedUserIds:string[]
	}
	//3
	export const RemedyStatusCancel:int
	//2
	export const RemedyStatusPass:int
	//0
	export const RemedyStatusPending:int
	//1
	export const RemedyStatusRejected:int
	//4
	export const RemedyStatusWithdraw:int
	export interface ReportData extends Struct<ReportData>{

			userId:Ref<string>
			fieldData:map<string,Ref<ReportValue>>
	}
	export interface ReportDataBuilder extends Struct<ReportDataBuilder>{

			userId(userId:string):Ref<ReportDataBuilder>
			fieldData(fieldData:map<string,Ref<ReportValue>>):Ref<ReportDataBuilder>
			build():Ref<ReportData>
	}
	export interface ReportValue extends Struct<ReportValue>{

			value:Ref<string>
			fieldId:Ref<string>
	}
	export interface ReportValueBuilder extends Struct<ReportValueBuilder>{

			value(value:string):Ref<ReportValueBuilder>
			fieldId(fieldId:string):Ref<ReportValueBuilder>
			build():Ref<ReportValue>
	}
	export interface RestRule extends Struct<RestRule>{

			restBeginTime:Ref<string>
			restEndTime:Ref<string>
	}
	export interface RestRuleBuilder extends Struct<RestRuleBuilder>{

			restBeginTime(restBeginTime:string):Ref<RestRuleBuilder>
			restEndTime(restEndTime:string):Ref<RestRuleBuilder>
			build():Ref<RestRule>
	}
	export interface ScanWifiInfo extends Struct<ScanWifiInfo>{

			ssid:Ref<string>
			bssid:Ref<string>
	}
	export interface ScanWifiInfoBuilder extends Struct<ScanWifiInfoBuilder>{

			ssid(ssid:string):Ref<ScanWifiInfoBuilder>
			bssid(bssid:string):Ref<ScanWifiInfoBuilder>
			build():Ref<ScanWifiInfo>
	}
	export interface Schedule extends Struct<Schedule>{

			groupId:Ref<string>
			shifts:string[]
	}
	export interface ScheduleBuilder extends Struct<ScheduleBuilder>{

			groupId(groupId:string):Ref<ScheduleBuilder>
			shifts(shifts:string[]):Ref<ScheduleBuilder>
			build():Ref<Schedule>
	}
	export interface ScopeGroup extends Struct<ScopeGroup>{

			scopeValueType:Ref<int>
			operationType:Ref<int>
			right:Ref<ScopeValue>[]
			memberIds:string[]
			customFieldID:Ref<string>
			customFieldObjType:Ref<string>
	}
	export interface ScopeGroupBuilder extends Struct<ScopeGroupBuilder>{

			scopeValueType(scopeValueType:int):Ref<ScopeGroupBuilder>
			operationType(operationType:int):Ref<ScopeGroupBuilder>
			right(right:Ref<ScopeValue>[]):Ref<ScopeGroupBuilder>
			memberIds(memberIds:string[]):Ref<ScopeGroupBuilder>
			customFieldID(customFieldID:string):Ref<ScopeGroupBuilder>
			customFieldObjType(customFieldObjType:string):Ref<ScopeGroupBuilder>
			build():Ref<ScopeGroup>
	}
	export interface ScopeValue extends Struct<ScopeValue>{

			key:Ref<string>
			name:Ref<string>
	}
	export interface ScopeValueBuilder extends Struct<ScopeValueBuilder>{

			key(key:string):Ref<ScopeValueBuilder>
			name(name:string):Ref<ScopeValueBuilder>
			build():Ref<ScopeValue>
	}
	export interface SearchGroupPathReqBodyBuilder extends Struct<SearchGroupPathReqBodyBuilder>{

			groupName(groupName:string):Ref<SearchGroupPathReqBodyBuilder>
			build():Ref<SearchGroupReqBody>
	}
	export interface SearchGroupReq extends Struct<SearchGroupReq>{

			body:Ref<SearchGroupReqBody>
	}
	export interface SearchGroupReqBody extends Struct<SearchGroupReqBody>{

			groupName:Ref<string>
	}
	export interface SearchGroupReqBodyBuilder extends Struct<SearchGroupReqBodyBuilder>{

			groupName(groupName:string):Ref<SearchGroupReqBodyBuilder>
			build():Ref<SearchGroupReqBody>
	}
	export interface SearchGroupReqBuilder extends Struct<SearchGroupReqBuilder>{

			body(body:Ref<SearchGroupReqBody>):Ref<SearchGroupReqBuilder>
			build():Ref<SearchGroupReq>
	}
	export interface SearchGroupResp extends Struct<SearchGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SearchGroupRespData>
			success():bool
	}
	export interface SearchGroupRespData extends Struct<SearchGroupRespData>{

			groupList:Ref<GroupMeta>[]
	}
	export interface Shift extends Struct<Shift>{

			shiftId:Ref<string>
			shiftName:Ref<string>
			punchTimes:Ref<int>
			subShiftLeaderIds:string[]
			isFlexible:Ref<bool>
			flexibleMinutes:Ref<int>
			flexibleRule:Ref<FlexibleRule>[]
			noNeedOff:Ref<bool>
			punchTimeRule:Ref<PunchTimeRule>[]
			lateOffLateOnRule:Ref<LateOffLateOnRule>[]
			restTimeRule:Ref<RestRule>[]
			overtimeRule:Ref<OvertimeRule>[]
			dayType:Ref<int>
			overtimeRestTimeRule:Ref<RestRule>[]
			lateMinutesAsSeriousLate:Ref<int>
			shiftMiddleTimeRule:Ref<ShiftMiddleTimeRule>
			lateOffLateOnSetting:Ref<LateOffLateOnSetting>
	}
	export interface ShiftBuilder extends Struct<ShiftBuilder>{

			shiftId(shiftId:string):Ref<ShiftBuilder>
			shiftName(shiftName:string):Ref<ShiftBuilder>
			punchTimes(punchTimes:int):Ref<ShiftBuilder>
			subShiftLeaderIds(subShiftLeaderIds:string[]):Ref<ShiftBuilder>
			isFlexible(isFlexible:bool):Ref<ShiftBuilder>
			flexibleMinutes(flexibleMinutes:int):Ref<ShiftBuilder>
			flexibleRule(flexibleRule:Ref<FlexibleRule>[]):Ref<ShiftBuilder>
			noNeedOff(noNeedOff:bool):Ref<ShiftBuilder>
			punchTimeRule(punchTimeRule:Ref<PunchTimeRule>[]):Ref<ShiftBuilder>
			lateOffLateOnRule(lateOffLateOnRule:Ref<LateOffLateOnRule>[]):Ref<ShiftBuilder>
			restTimeRule(restTimeRule:Ref<RestRule>[]):Ref<ShiftBuilder>
			overtimeRule(overtimeRule:Ref<OvertimeRule>[]):Ref<ShiftBuilder>
			dayType(dayType:int):Ref<ShiftBuilder>
			overtimeRestTimeRule(overtimeRestTimeRule:Ref<RestRule>[]):Ref<ShiftBuilder>
			lateMinutesAsSeriousLate(lateMinutesAsSeriousLate:int):Ref<ShiftBuilder>
			shiftMiddleTimeRule(shiftMiddleTimeRule:Ref<ShiftMiddleTimeRule>):Ref<ShiftBuilder>
			lateOffLateOnSetting(lateOffLateOnSetting:Ref<LateOffLateOnSetting>):Ref<ShiftBuilder>
			build():Ref<Shift>
	}
	export interface ShiftGroupUser extends Struct<ShiftGroupUser>{

			shiftGroupId:Ref<string>
			userId:Ref<string>
	}
	export interface ShiftGroupUserBuilder extends Struct<ShiftGroupUserBuilder>{

			shiftGroupId(shiftGroupId:string):Ref<ShiftGroupUserBuilder>
			userId(userId:string):Ref<ShiftGroupUserBuilder>
			build():Ref<ShiftGroupUser>
	}
	export interface ShiftMiddleTimeRule extends Struct<ShiftMiddleTimeRule>{

			middleTimeType:Ref<int>
			fixedMiddleTime:Ref<string>
	}
	export interface ShiftMiddleTimeRuleBuilder extends Struct<ShiftMiddleTimeRuleBuilder>{

			middleTimeType(middleTimeType:int):Ref<ShiftMiddleTimeRuleBuilder>
			fixedMiddleTime(fixedMiddleTime:string):Ref<ShiftMiddleTimeRuleBuilder>
			build():Ref<ShiftMiddleTimeRule>
	}
	export interface StatisticsField extends Struct<StatisticsField>{

			fieldId:Ref<string>
			fieldContent:Ref<string>
			title:Ref<string>
			fieldDesc:Ref<string>
	}
	export interface StatisticsFieldBuilder extends Struct<StatisticsFieldBuilder>{

			fieldId(fieldId:string):Ref<StatisticsFieldBuilder>
			fieldContent(fieldContent:string):Ref<StatisticsFieldBuilder>
			title(title:string):Ref<StatisticsFieldBuilder>
			fieldDesc(fieldDesc:string):Ref<StatisticsFieldBuilder>
			build():Ref<StatisticsField>
	}
	//"daily"
	export const StatsTypeDaily:string
	//"month"
	export const StatsTypeMonth:string
	//"daily"
	export const StatsTypeQueryUserStatsFieldDaily:string
	//"month"
	export const StatsTypeQueryUserStatsFieldMonth:string
	//"daily"
	export const StatsTypeQueryUserStatsViewDaily:string
	//"month"
	export const StatsTypeQueryUserStatsViewMonth:string
	export interface StatusChange extends Struct<StatusChange>{

			index:Ref<int>
			beforeStatus:Ref<string>
			currentStatus:Ref<string>
			beforeSupplement:Ref<string>
			currentSupplement:Ref<string>
			workType:Ref<string>
	}
	export interface StatusChangeBuilder extends Struct<StatusChangeBuilder>{

			index(index:int):Ref<StatusChangeBuilder>
			beforeStatus(beforeStatus:string):Ref<StatusChangeBuilder>
			currentStatus(currentStatus:string):Ref<StatusChangeBuilder>
			beforeSupplement(beforeSupplement:string):Ref<StatusChangeBuilder>
			currentSupplement(currentSupplement:string):Ref<StatusChangeBuilder>
			workType(workType:string):Ref<StatusChangeBuilder>
			build():Ref<StatusChange>
	}
	export interface TaskResult extends Struct<TaskResult>{

			checkInRecordId:Ref<string>
			checkInRecord:Ref<UserFlow>
			checkOutRecordId:Ref<string>
			checkOutRecord:Ref<UserFlow>
			checkInResult:Ref<string>
			checkOutResult:Ref<string>
			checkInResultSupplement:Ref<string>
			checkOutResultSupplement:Ref<string>
			checkInShiftTime:Ref<string>
			checkOutShiftTime:Ref<string>
			taskShiftType:Ref<int>
	}
	export interface TaskResultBuilder extends Struct<TaskResultBuilder>{

			checkInRecordId(checkInRecordId:string):Ref<TaskResultBuilder>
			checkInRecord(checkInRecord:Ref<UserFlow>):Ref<TaskResultBuilder>
			checkOutRecordId(checkOutRecordId:string):Ref<TaskResultBuilder>
			checkOutRecord(checkOutRecord:Ref<UserFlow>):Ref<TaskResultBuilder>
			checkInResult(checkInResult:string):Ref<TaskResultBuilder>
			checkOutResult(checkOutResult:string):Ref<TaskResultBuilder>
			checkInResultSupplement(checkInResultSupplement:string):Ref<TaskResultBuilder>
			checkOutResultSupplement(checkOutResultSupplement:string):Ref<TaskResultBuilder>
			checkInShiftTime(checkInShiftTime:string):Ref<TaskResultBuilder>
			checkOutShiftTime(checkOutShiftTime:string):Ref<TaskResultBuilder>
			taskShiftType(taskShiftType:int):Ref<TaskResultBuilder>
			build():Ref<TaskResult>
	}
	export interface UpdateUserStatsViewPathReqBodyBuilder extends Struct<UpdateUserStatsViewPathReqBodyBuilder>{

			view(view:Ref<UserStatsView>):Ref<UpdateUserStatsViewPathReqBodyBuilder>
			build():Ref<UpdateUserStatsViewReqBody>
	}
	export interface UpdateUserStatsViewReq extends Struct<UpdateUserStatsViewReq>{

			body:Ref<UpdateUserStatsViewReqBody>
	}
	export interface UpdateUserStatsViewReqBody extends Struct<UpdateUserStatsViewReqBody>{

			view:Ref<UserStatsView>
	}
	export interface UpdateUserStatsViewReqBodyBuilder extends Struct<UpdateUserStatsViewReqBodyBuilder>{

			view(view:Ref<UserStatsView>):Ref<UpdateUserStatsViewReqBodyBuilder>
			build():Ref<UpdateUserStatsViewReqBody>
	}
	export interface UpdateUserStatsViewReqBuilder extends Struct<UpdateUserStatsViewReqBuilder>{

			userStatsViewId(userStatsViewId:string):Ref<UpdateUserStatsViewReqBuilder>
			employeeType(employeeType:string):Ref<UpdateUserStatsViewReqBuilder>
			body(body:Ref<UpdateUserStatsViewReqBody>):Ref<UpdateUserStatsViewReqBuilder>
			build():Ref<UpdateUserStatsViewReq>
	}
	export interface UpdateUserStatsViewResp extends Struct<UpdateUserStatsViewResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateUserStatsViewRespData>
			success():bool
	}
	export interface UpdateUserStatsViewRespData extends Struct<UpdateUserStatsViewRespData>{

			view:Ref<UserStatsView>
	}
	export interface UploadFilePathReqBodyBuilder extends Struct<UploadFilePathReqBodyBuilder>{

			filePath(filePath:string):Ref<UploadFilePathReqBodyBuilder>
			build():Ref<UploadFileReqBody>
	}
	export interface UploadFileReq extends Struct<UploadFileReq>{

			body:Ref<UploadFileReqBody>
	}
	export interface UploadFileReqBody extends Struct<UploadFileReqBody>{

			file:io.Reader
	}
	export interface UploadFileReqBodyBuilder extends Struct<UploadFileReqBodyBuilder>{

			file(file:io.Reader):Ref<UploadFileReqBodyBuilder>
			build():Ref<UploadFileReqBody>
	}
	export interface UploadFileReqBuilder extends Struct<UploadFileReqBuilder>{

			fileName(fileName:string):Ref<UploadFileReqBuilder>
			body(body:Ref<UploadFileReqBody>):Ref<UploadFileReqBuilder>
			build():Ref<UploadFileReq>
	}
	export interface UploadFileResp extends Struct<UploadFileResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UploadFileRespData>
			success():bool
	}
	export interface UploadFileRespData extends Struct<UploadFileRespData>{

			file:Ref<File>
	}
	export interface UserAllowedRemedy extends Struct<UserAllowedRemedy>{

			userId:Ref<string>
			remedyDate:Ref<int>
			isFreePunch:Ref<bool>
			punchNo:Ref<int>
			workType:Ref<int>
			punchStatus:Ref<string>
			normalPunchTime:Ref<string>
			remedyStartTime:Ref<string>
			remedyEndTime:Ref<string>
	}
	export interface UserAllowedRemedyBuilder extends Struct<UserAllowedRemedyBuilder>{

			userId(userId:string):Ref<UserAllowedRemedyBuilder>
			remedyDate(remedyDate:int):Ref<UserAllowedRemedyBuilder>
			isFreePunch(isFreePunch:bool):Ref<UserAllowedRemedyBuilder>
			punchNo(punchNo:int):Ref<UserAllowedRemedyBuilder>
			workType(workType:int):Ref<UserAllowedRemedyBuilder>
			punchStatus(punchStatus:string):Ref<UserAllowedRemedyBuilder>
			normalPunchTime(normalPunchTime:string):Ref<UserAllowedRemedyBuilder>
			remedyStartTime(remedyStartTime:string):Ref<UserAllowedRemedyBuilder>
			remedyEndTime(remedyEndTime:string):Ref<UserAllowedRemedyBuilder>
			build():Ref<UserAllowedRemedy>
	}
	export interface UserApproval extends Struct<UserApproval>{

			userId:Ref<string>
			date:Ref<string>
			outs:Ref<UserOut>[]
			leaves:Ref<UserLeave>[]
			overtimeWorks:Ref<UserOvertimeWork>[]
			trips:Ref<UserTrip>[]
			timeZone:Ref<string>
	}
	export interface UserApprovalBuilder extends Struct<UserApprovalBuilder>{

			userId(userId:string):Ref<UserApprovalBuilder>
			date(date:string):Ref<UserApprovalBuilder>
			outs(outs:Ref<UserOut>[]):Ref<UserApprovalBuilder>
			leaves(leaves:Ref<UserLeave>[]):Ref<UserApprovalBuilder>
			overtimeWorks(overtimeWorks:Ref<UserOvertimeWork>[]):Ref<UserApprovalBuilder>
			trips(trips:Ref<UserTrip>[]):Ref<UserApprovalBuilder>
			timeZone(timeZone:string):Ref<UserApprovalBuilder>
			build():Ref<UserApproval>
	}
	export interface UserArrangeShiftGroup extends Struct<UserArrangeShiftGroup>{

			userId:Ref<string>
			shiftGroup:Ref<ArrangeShiftGroup>
	}
	export interface UserArrangeShiftGroupBuilder extends Struct<UserArrangeShiftGroupBuilder>{

			userId(userId:string):Ref<UserArrangeShiftGroupBuilder>
			shiftGroup(shiftGroup:Ref<ArrangeShiftGroup>):Ref<UserArrangeShiftGroupBuilder>
			build():Ref<UserArrangeShiftGroup>
	}
	export interface UserDailyShift extends Struct<UserDailyShift>{

			groupId:Ref<string>
			shiftId:Ref<string>
			month:Ref<int>
			userId:Ref<string>
			dayNo:Ref<int>
	}
	export interface UserDailyShiftBuilder extends Struct<UserDailyShiftBuilder>{

			groupId(groupId:string):Ref<UserDailyShiftBuilder>
			shiftId(shiftId:string):Ref<UserDailyShiftBuilder>
			month(month:int):Ref<UserDailyShiftBuilder>
			userId(userId:string):Ref<UserDailyShiftBuilder>
			dayNo(dayNo:int):Ref<UserDailyShiftBuilder>
			build():Ref<UserDailyShift>
	}
	export interface UserFlow extends Struct<UserFlow>{

			userId:Ref<string>
			creatorId:Ref<string>
			locationName:Ref<string>
			checkTime:Ref<string>
			comment:Ref<string>
			recordId:Ref<string>
			ssid:Ref<string>
			bssid:Ref<string>
			isField:Ref<bool>
			isWifi:Ref<bool>
			type:Ref<int>
			photoUrls:string[]
			deviceId:Ref<string>
			checkResult:Ref<string>
			externalId:Ref<string>
			idempotentId:Ref<string>
	}
	export interface UserFlowBuilder extends Struct<UserFlowBuilder>{

			userId(userId:string):Ref<UserFlowBuilder>
			creatorId(creatorId:string):Ref<UserFlowBuilder>
			locationName(locationName:string):Ref<UserFlowBuilder>
			checkTime(checkTime:string):Ref<UserFlowBuilder>
			comment(comment:string):Ref<UserFlowBuilder>
			recordId(recordId:string):Ref<UserFlowBuilder>
			ssid(ssid:string):Ref<UserFlowBuilder>
			bssid(bssid:string):Ref<UserFlowBuilder>
			isField(isField:bool):Ref<UserFlowBuilder>
			isWifi(isWifi:bool):Ref<UserFlowBuilder>
			type(type_:int):Ref<UserFlowBuilder>
			photoUrls(photoUrls:string[]):Ref<UserFlowBuilder>
			deviceId(deviceId:string):Ref<UserFlowBuilder>
			checkResult(checkResult:string):Ref<UserFlowBuilder>
			externalId(externalId:string):Ref<UserFlowBuilder>
			idempotentId(idempotentId:string):Ref<UserFlowBuilder>
			build():Ref<UserFlow>
	}
	export interface UserId extends Struct<UserId>{

			userId:Ref<string>
			openId:Ref<string>
			unionId:Ref<string>
	}
	export interface UserIdBuilder extends Struct<UserIdBuilder>{

			userId(userId:string):Ref<UserIdBuilder>
			openId(openId:string):Ref<UserIdBuilder>
			unionId(unionId:string):Ref<UserIdBuilder>
			build():Ref<UserId>
	}
	//"open_id"
	export const UserIdTypeGetLeaveEmployExpireRecordLeaveBalancesLeaveUserIDTypeOpenID:string
	//"people_corehr_id"
	export const UserIdTypeGetLeaveEmployExpireRecordLeaveBalancesLeaveUserIDTypePeopleCorehrID:string
	//"union_id"
	export const UserIdTypeGetLeaveEmployExpireRecordLeaveBalancesLeaveUserIDTypeUnionID:string
	//"user_id"
	export const UserIdTypeGetLeaveEmployExpireRecordLeaveBalancesLeaveUserIDTypeUserID:string
	//"open_id"
	export const UserIdTypeLeaveBalancesLeaveUserIDTypeOpenID:string
	//"people_corehr_id"
	export const UserIdTypeLeaveBalancesLeaveUserIDTypePeopleCorehrID:string
	//"union_id"
	export const UserIdTypeLeaveBalancesLeaveUserIDTypeUnionID:string
	//"user_id"
	export const UserIdTypeLeaveBalancesLeaveUserIDTypeUserID:string
	export interface UserLeave extends Struct<UserLeave>{

			approvalId:Ref<string>
			uniqId:Ref<string>
			unit:Ref<int>
			interval:Ref<int>
			startTime:Ref<string>
			endTime:Ref<string>
			i18nNames:Ref<I18nNames>
			defaultLocale:Ref<string>
			reason:Ref<string>
			approvePassTime:Ref<string>
			approveApplyTime:Ref<string>
			idempotentId:Ref<string>
	}
	export interface UserLeaveBuilder extends Struct<UserLeaveBuilder>{

			approvalId(approvalId:string):Ref<UserLeaveBuilder>
			uniqId(uniqId:string):Ref<UserLeaveBuilder>
			unit(unit:int):Ref<UserLeaveBuilder>
			interval(interval:int):Ref<UserLeaveBuilder>
			startTime(startTime:string):Ref<UserLeaveBuilder>
			endTime(endTime:string):Ref<UserLeaveBuilder>
			i18nNames(i18nNames:Ref<I18nNames>):Ref<UserLeaveBuilder>
			defaultLocale(defaultLocale:string):Ref<UserLeaveBuilder>
			reason(reason:string):Ref<UserLeaveBuilder>
			approvePassTime(approvePassTime:string):Ref<UserLeaveBuilder>
			approveApplyTime(approveApplyTime:string):Ref<UserLeaveBuilder>
			idempotentId(idempotentId:string):Ref<UserLeaveBuilder>
			build():Ref<UserLeave>
	}
	export interface UserOut extends Struct<UserOut>{

			approvalId:Ref<string>
			uniqId:Ref<string>
			unit:Ref<int>
			interval:Ref<int>
			startTime:Ref<string>
			endTime:Ref<string>
			i18nNames:Ref<I18nNames>
			defaultLocale:Ref<string>
			reason:Ref<string>
			approvePassTime:Ref<string>
			approveApplyTime:Ref<string>
			idempotentId:Ref<string>
	}
	export interface UserOutBuilder extends Struct<UserOutBuilder>{

			approvalId(approvalId:string):Ref<UserOutBuilder>
			uniqId(uniqId:string):Ref<UserOutBuilder>
			unit(unit:int):Ref<UserOutBuilder>
			interval(interval:int):Ref<UserOutBuilder>
			startTime(startTime:string):Ref<UserOutBuilder>
			endTime(endTime:string):Ref<UserOutBuilder>
			i18nNames(i18nNames:Ref<I18nNames>):Ref<UserOutBuilder>
			defaultLocale(defaultLocale:string):Ref<UserOutBuilder>
			reason(reason:string):Ref<UserOutBuilder>
			approvePassTime(approvePassTime:string):Ref<UserOutBuilder>
			approveApplyTime(approveApplyTime:string):Ref<UserOutBuilder>
			idempotentId(idempotentId:string):Ref<UserOutBuilder>
			build():Ref<UserOut>
	}
	export interface UserOvertimeWork extends Struct<UserOvertimeWork>{

			approvalId:Ref<string>
			duration:Ref<float64>
			unit:Ref<int>
			category:Ref<int>
			type:Ref<int>
			startTime:Ref<string>
			endTime:Ref<string>
			reason:Ref<string>
			idempotentId:Ref<string>
	}
	export interface UserOvertimeWorkBuilder extends Struct<UserOvertimeWorkBuilder>{

			approvalId(approvalId:string):Ref<UserOvertimeWorkBuilder>
			duration(duration:float64):Ref<UserOvertimeWorkBuilder>
			unit(unit:int):Ref<UserOvertimeWorkBuilder>
			category(category:int):Ref<UserOvertimeWorkBuilder>
			type(type_:int):Ref<UserOvertimeWorkBuilder>
			startTime(startTime:string):Ref<UserOvertimeWorkBuilder>
			endTime(endTime:string):Ref<UserOvertimeWorkBuilder>
			reason(reason:string):Ref<UserOvertimeWorkBuilder>
			idempotentId(idempotentId:string):Ref<UserOvertimeWorkBuilder>
			build():Ref<UserOvertimeWork>
	}
	export interface UserSetting extends Struct<UserSetting>{

			userId:Ref<string>
			faceKey:Ref<string>
			faceKeyUpdateTime:Ref<string>
	}
	export interface UserSettingBuilder extends Struct<UserSettingBuilder>{

			userId(userId:string):Ref<UserSettingBuilder>
			faceKey(faceKey:string):Ref<UserSettingBuilder>
			faceKeyUpdateTime(faceKeyUpdateTime:string):Ref<UserSettingBuilder>
			build():Ref<UserSetting>
	}
	export interface UserShiftGroupsList extends Struct<UserShiftGroupsList>{

			shiftGroupId:Ref<string>
			shiftGroupName:Ref<string>
			groupId:Ref<string>
			updateTime:Ref<string>
	}
	export interface UserShiftGroupsListBuilder extends Struct<UserShiftGroupsListBuilder>{

			shiftGroupId(shiftGroupId:string):Ref<UserShiftGroupsListBuilder>
			shiftGroupName(shiftGroupName:string):Ref<UserShiftGroupsListBuilder>
			groupId(groupId:string):Ref<UserShiftGroupsListBuilder>
			updateTime(updateTime:string):Ref<UserShiftGroupsListBuilder>
			build():Ref<UserShiftGroupsList>
	}
	export interface UserStatsData extends Struct<UserStatsData>{

			name:Ref<string>
			userId:Ref<string>
			datas:Ref<UserStatsDataCell>[]
	}
	export interface UserStatsDataBuilder extends Struct<UserStatsDataBuilder>{

			name(name:string):Ref<UserStatsDataBuilder>
			userId(userId:string):Ref<UserStatsDataBuilder>
			datas(datas:Ref<UserStatsDataCell>[]):Ref<UserStatsDataBuilder>
			build():Ref<UserStatsData>
	}
	export interface UserStatsDataCell extends Struct<UserStatsDataCell>{

			code:Ref<string>
			value:Ref<string>
			features:Ref<UserStatsDataFeature>[]
			title:Ref<string>
			durationNum:Ref<UserStatsDataDuration>
	}
	export interface UserStatsDataCellBuilder extends Struct<UserStatsDataCellBuilder>{

			code(code:string):Ref<UserStatsDataCellBuilder>
			value(value:string):Ref<UserStatsDataCellBuilder>
			features(features:Ref<UserStatsDataFeature>[]):Ref<UserStatsDataCellBuilder>
			title(title:string):Ref<UserStatsDataCellBuilder>
			durationNum(durationNum:Ref<UserStatsDataDuration>):Ref<UserStatsDataCellBuilder>
			build():Ref<UserStatsDataCell>
	}
	export interface UserStatsDataDuration extends Struct<UserStatsDataDuration>{

			day:Ref<string>
			halfDay:Ref<string>
			hour:Ref<string>
			halfHour:Ref<string>
			minute:Ref<string>
	}
	export interface UserStatsDataDurationBuilder extends Struct<UserStatsDataDurationBuilder>{

			day(day:string):Ref<UserStatsDataDurationBuilder>
			halfDay(halfDay:string):Ref<UserStatsDataDurationBuilder>
			hour(hour:string):Ref<UserStatsDataDurationBuilder>
			halfHour(halfHour:string):Ref<UserStatsDataDurationBuilder>
			minute(minute:string):Ref<UserStatsDataDurationBuilder>
			build():Ref<UserStatsDataDuration>
	}
	export interface UserStatsDataFeature extends Struct<UserStatsDataFeature>{

			key:Ref<string>
			value:Ref<string>
	}
	export interface UserStatsDataFeatureBuilder extends Struct<UserStatsDataFeatureBuilder>{

			key(key:string):Ref<UserStatsDataFeatureBuilder>
			value(value:string):Ref<UserStatsDataFeatureBuilder>
			build():Ref<UserStatsDataFeature>
	}
	export interface UserStatsField extends Struct<UserStatsField>{

			statsType:Ref<string>
			userId:Ref<string>
			fields:Ref<Field>[]
	}
	export interface UserStatsFieldBuilder extends Struct<UserStatsFieldBuilder>{

			statsType(statsType:string):Ref<UserStatsFieldBuilder>
			userId(userId:string):Ref<UserStatsFieldBuilder>
			fields(fields:Ref<Field>[]):Ref<UserStatsFieldBuilder>
			build():Ref<UserStatsField>
	}
	export interface UserStatsFieldsQueryArchiveRulePathReqBodyBuilder extends Struct<UserStatsFieldsQueryArchiveRulePathReqBodyBuilder>{

			locale(locale:string):Ref<UserStatsFieldsQueryArchiveRulePathReqBodyBuilder>
			month(month:string):Ref<UserStatsFieldsQueryArchiveRulePathReqBodyBuilder>
			archiveRuleId(archiveRuleId:string):Ref<UserStatsFieldsQueryArchiveRulePathReqBodyBuilder>
			operatorId(operatorId:string):Ref<UserStatsFieldsQueryArchiveRulePathReqBodyBuilder>
			build():Ref<UserStatsFieldsQueryArchiveRuleReqBody>
	}
	export interface UserStatsFieldsQueryArchiveRuleReq extends Struct<UserStatsFieldsQueryArchiveRuleReq>{

			body:Ref<UserStatsFieldsQueryArchiveRuleReqBody>
	}
	export interface UserStatsFieldsQueryArchiveRuleReqBody extends Struct<UserStatsFieldsQueryArchiveRuleReqBody>{

			locale:Ref<string>
			month:Ref<string>
			archiveRuleId:Ref<string>
			operatorId:Ref<string>
	}
	export interface UserStatsFieldsQueryArchiveRuleReqBodyBuilder extends Struct<UserStatsFieldsQueryArchiveRuleReqBodyBuilder>{

			locale(locale:string):Ref<UserStatsFieldsQueryArchiveRuleReqBodyBuilder>
			month(month:string):Ref<UserStatsFieldsQueryArchiveRuleReqBodyBuilder>
			archiveRuleId(archiveRuleId:string):Ref<UserStatsFieldsQueryArchiveRuleReqBodyBuilder>
			operatorId(operatorId:string):Ref<UserStatsFieldsQueryArchiveRuleReqBodyBuilder>
			build():Ref<UserStatsFieldsQueryArchiveRuleReqBody>
	}
	export interface UserStatsFieldsQueryArchiveRuleReqBuilder extends Struct<UserStatsFieldsQueryArchiveRuleReqBuilder>{

			employeeType(employeeType:string):Ref<UserStatsFieldsQueryArchiveRuleReqBuilder>
			body(body:Ref<UserStatsFieldsQueryArchiveRuleReqBody>):Ref<UserStatsFieldsQueryArchiveRuleReqBuilder>
			build():Ref<UserStatsFieldsQueryArchiveRuleReq>
	}
	export interface UserStatsFieldsQueryArchiveRuleResp extends Struct<UserStatsFieldsQueryArchiveRuleResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UserStatsFieldsQueryArchiveRuleRespData>
			success():bool
	}
	export interface UserStatsFieldsQueryArchiveRuleRespData extends Struct<UserStatsFieldsQueryArchiveRuleRespData>{

			archiveReportFields:Ref<ArchiveField>[]
	}
	export interface UserStatsView extends Struct<UserStatsView>{

			viewId:Ref<string>
			statsType:Ref<string>
			userId:Ref<string>
			items:Ref<Item>[]
	}
	export interface UserStatsViewBuilder extends Struct<UserStatsViewBuilder>{

			viewId(viewId:string):Ref<UserStatsViewBuilder>
			statsType(statsType:string):Ref<UserStatsViewBuilder>
			userId(userId:string):Ref<UserStatsViewBuilder>
			items(items:Ref<Item>[]):Ref<UserStatsViewBuilder>
			build():Ref<UserStatsView>
	}
	export interface UserTask extends Struct<UserTask>{

			resultId:Ref<string>
			userId:Ref<string>
			employeeName:Ref<string>
			day:Ref<int>
			groupId:Ref<string>
			shiftId:Ref<string>
			records:Ref<TaskResult>[]
	}
	export interface UserTaskBuilder extends Struct<UserTaskBuilder>{

			resultId(resultId:string):Ref<UserTaskBuilder>
			userId(userId:string):Ref<UserTaskBuilder>
			employeeName(employeeName:string):Ref<UserTaskBuilder>
			day(day:int):Ref<UserTaskBuilder>
			groupId(groupId:string):Ref<UserTaskBuilder>
			shiftId(shiftId:string):Ref<UserTaskBuilder>
			records(records:Ref<TaskResult>[]):Ref<UserTaskBuilder>
			build():Ref<UserTask>
	}
	export interface UserTaskRemedy extends Struct<UserTaskRemedy>{

			userId:Ref<string>
			remedyDate:Ref<int>
			punchNo:Ref<int>
			workType:Ref<int>
			approvalId:Ref<string>
			remedyTime:Ref<string>
			status:Ref<int>
			reason:Ref<string>
			time:Ref<string>
			timeZone:Ref<string>
			createTime:Ref<string>
			updateTime:Ref<string>
	}
	export interface UserTaskRemedyBuilder extends Struct<UserTaskRemedyBuilder>{

			userId(userId:string):Ref<UserTaskRemedyBuilder>
			remedyDate(remedyDate:int):Ref<UserTaskRemedyBuilder>
			punchNo(punchNo:int):Ref<UserTaskRemedyBuilder>
			workType(workType:int):Ref<UserTaskRemedyBuilder>
			approvalId(approvalId:string):Ref<UserTaskRemedyBuilder>
			remedyTime(remedyTime:string):Ref<UserTaskRemedyBuilder>
			status(status:int):Ref<UserTaskRemedyBuilder>
			reason(reason:string):Ref<UserTaskRemedyBuilder>
			time(time:string):Ref<UserTaskRemedyBuilder>
			timeZone(timeZone:string):Ref<UserTaskRemedyBuilder>
			createTime(createTime:string):Ref<UserTaskRemedyBuilder>
			updateTime(updateTime:string):Ref<UserTaskRemedyBuilder>
			build():Ref<UserTaskRemedy>
	}
	export interface UserTmpDailyShift extends Struct<UserTmpDailyShift>{

			groupId:Ref<string>
			userId:Ref<string>
			date:Ref<int>
			shiftName:Ref<string>
			punchTimeSimpleRules:Ref<PunchTimeSimpleRule>[]
	}
	export interface UserTmpDailyShiftBuilder extends Struct<UserTmpDailyShiftBuilder>{

			groupId(groupId:string):Ref<UserTmpDailyShiftBuilder>
			userId(userId:string):Ref<UserTmpDailyShiftBuilder>
			date(date:int):Ref<UserTmpDailyShiftBuilder>
			shiftName(shiftName:string):Ref<UserTmpDailyShiftBuilder>
			punchTimeSimpleRules(punchTimeSimpleRules:Ref<PunchTimeSimpleRule>[]):Ref<UserTmpDailyShiftBuilder>
			build():Ref<UserTmpDailyShift>
	}
	export interface UserTrip extends Struct<UserTrip>{

			approvalId:Ref<string>
			startTime:Ref<string>
			endTime:Ref<string>
			reason:Ref<string>
			approvePassTime:Ref<string>
			approveApplyTime:Ref<string>
			idempotentId:Ref<string>
	}
	export interface UserTripBuilder extends Struct<UserTripBuilder>{

			approvalId(approvalId:string):Ref<UserTripBuilder>
			startTime(startTime:string):Ref<UserTripBuilder>
			endTime(endTime:string):Ref<UserTripBuilder>
			reason(reason:string):Ref<UserTripBuilder>
			approvePassTime(approvePassTime:string):Ref<UserTripBuilder>
			approveApplyTime(approveApplyTime:string):Ref<UserTripBuilder>
			idempotentId(idempotentId:string):Ref<UserTripBuilder>
			build():Ref<UserTrip>
	}
	export interface V1 extends Struct<V1>{

			approvalInfo:Ref<{
			
				process(ctx:context.Context,req:Ref<ProcessApprovalInfoReq>,...options:larkcore.RequestOptionFunc[]):Ref<ProcessApprovalInfoResp>
			}>
			archiveRule:Ref<{
			
				list(ctx:context.Context,req:Ref<ListArchiveRuleReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListArchiveRuleResp>
				listByIterator(ctx:context.Context,req:Ref<ListArchiveRuleReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListArchiveRuleIterator>
				userStatsFieldsQuery(ctx:context.Context,req:Ref<UserStatsFieldsQueryArchiveRuleReq>,...options:larkcore.RequestOptionFunc[]):Ref<UserStatsFieldsQueryArchiveRuleResp>
			}>
			file:Ref<{
			
				download(ctx:context.Context,req:Ref<DownloadFileReq>,...options:larkcore.RequestOptionFunc[]):Ref<DownloadFileResp>
				upload(ctx:context.Context,req:Ref<UploadFileReq>,...options:larkcore.RequestOptionFunc[]):Ref<UploadFileResp>
			}>
			group:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateGroupResp>
				delete(ctx:context.Context,req:Ref<DeleteGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteGroupResp>
				get(ctx:context.Context,req:Ref<GetGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetGroupResp>
				list(ctx:context.Context,req:Ref<ListGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListGroupResp>
				listByIterator(ctx:context.Context,req:Ref<ListGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListGroupIterator>
				search(ctx:context.Context,req:Ref<SearchGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchGroupResp>
			}>
			leaveAccrualRecord:Ref<{
			
				patch(ctx:context.Context,req:Ref<PatchLeaveAccrualRecordReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchLeaveAccrualRecordResp>
			}>
			leaveEmployExpireRecord:Ref<{
			
				get(ctx:context.Context,req:Ref<GetLeaveEmployExpireRecordReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetLeaveEmployExpireRecordResp>
			}>
			shift:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateShiftReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateShiftResp>
				delete(ctx:context.Context,req:Ref<DeleteShiftReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteShiftResp>
				get(ctx:context.Context,req:Ref<GetShiftReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetShiftResp>
				list(ctx:context.Context,req:Ref<ListShiftReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListShiftResp>
				listByIterator(ctx:context.Context,req:Ref<ListShiftReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListShiftIterator>
				query(ctx:context.Context,req:Ref<QueryShiftReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryShiftResp>
			}>
			userApproval:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateUserApprovalReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateUserApprovalResp>
				query(ctx:context.Context,req:Ref<QueryUserApprovalReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserApprovalResp>
			}>
			userDailyShift:Ref<{
			
				batchCreate(ctx:context.Context,req:Ref<BatchCreateUserDailyShiftReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchCreateUserDailyShiftResp>
				query(ctx:context.Context,req:Ref<QueryUserDailyShiftReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserDailyShiftResp>
			}>
			userFlow:Ref<{
			
				batchCreate(ctx:context.Context,req:Ref<BatchCreateUserFlowReq>,...options:larkcore.RequestOptionFunc[]):Ref<BatchCreateUserFlowResp>
				get(ctx:context.Context,req:Ref<GetUserFlowReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetUserFlowResp>
				query(ctx:context.Context,req:Ref<QueryUserFlowReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserFlowResp>
			}>
			userSetting:Ref<{
			
				modify(ctx:context.Context,req:Ref<ModifyUserSettingReq>,...options:larkcore.RequestOptionFunc[]):Ref<ModifyUserSettingResp>
				query(ctx:context.Context,req:Ref<QueryUserSettingReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserSettingResp>
			}>
			userStatsData:Ref<{
			
				query(ctx:context.Context,req:Ref<QueryUserStatsDataReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserStatsDataResp>
			}>
			userStatsField:Ref<{
			
				query(ctx:context.Context,req:Ref<QueryUserStatsFieldReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserStatsFieldResp>
			}>
			userStatsView:Ref<{
			
				query(ctx:context.Context,req:Ref<QueryUserStatsViewReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserStatsViewResp>
				update(ctx:context.Context,req:Ref<UpdateUserStatsViewReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateUserStatsViewResp>
			}>
			userTask:Ref<{
			
				query(ctx:context.Context,req:Ref<QueryUserTaskReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserTaskResp>
			}>
			userTaskRemedy:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateUserTaskRemedyReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateUserTaskRemedyResp>
				query(ctx:context.Context,req:Ref<QueryUserTaskRemedyReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserTaskRemedyResp>
				queryUserAllowedRemedys(ctx:context.Context,req:Ref<QueryUserAllowedRemedysUserTaskRemedyReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryUserAllowedRemedysUserTaskRemedyResp>
			}>
	}
	export interface WifiInfo extends Struct<WifiInfo>{

			status:Ref<int>
	}
	export interface WifiInfoBuilder extends Struct<WifiInfoBuilder>{

			status(status:int):Ref<WifiInfoBuilder>
			build():Ref<WifiInfo>
	}
	export interface WifiInfoEvent extends Struct<WifiInfoEvent>{

			ssid:Ref<string>
			bssid:Ref<string>
			lastssid:Ref<string>
			lastbssid:Ref<string>
	}
	export interface WifiInfoEventBuilder extends Struct<WifiInfoEventBuilder>{

			ssid(ssid:string):Ref<WifiInfoEventBuilder>
			bssid(bssid:string):Ref<WifiInfoEventBuilder>
			lastssid(lastssid:string):Ref<WifiInfoEventBuilder>
			lastbssid(lastbssid:string):Ref<WifiInfoEventBuilder>
			build():Ref<WifiInfoEvent>
	}
	export function emptyArchiveFieldData():ArchiveFieldData
	export function emptyRefArchiveFieldData():Ref<ArchiveFieldData>
	export function refOfArchiveFieldData(x:ArchiveFieldData,v:Ref<ArchiveFieldData>)
	export function unRefArchiveFieldData(v:Ref<ArchiveFieldData>):ArchiveFieldData
	export function emptyLocationInfoEvent():LocationInfoEvent
	export function emptyRefLocationInfoEvent():Ref<LocationInfoEvent>
	export function refOfLocationInfoEvent(x:LocationInfoEvent,v:Ref<LocationInfoEvent>)
	export function unRefLocationInfoEvent(v:Ref<LocationInfoEvent>):LocationInfoEvent
	export function emptyPatchLeaveAccrualRecordReqBody():PatchLeaveAccrualRecordReqBody
	export function emptyRefPatchLeaveAccrualRecordReqBody():Ref<PatchLeaveAccrualRecordReqBody>
	export function refOfPatchLeaveAccrualRecordReqBody(x:PatchLeaveAccrualRecordReqBody,v:Ref<PatchLeaveAccrualRecordReqBody>)
	export function unRefPatchLeaveAccrualRecordReqBody(v:Ref<PatchLeaveAccrualRecordReqBody>):PatchLeaveAccrualRecordReqBody
	export function emptyQueryUserStatsFieldReq():QueryUserStatsFieldReq
	export function emptyRefQueryUserStatsFieldReq():Ref<QueryUserStatsFieldReq>
	export function refOfQueryUserStatsFieldReq(x:QueryUserStatsFieldReq,v:Ref<QueryUserStatsFieldReq>)
	export function unRefQueryUserStatsFieldReq(v:Ref<QueryUserStatsFieldReq>):QueryUserStatsFieldReq
	export function emptyArchiveField():ArchiveField
	export function emptyRefArchiveField():Ref<ArchiveField>
	export function refOfArchiveField(x:ArchiveField,v:Ref<ArchiveField>)
	export function unRefArchiveField(v:Ref<ArchiveField>):ArchiveField
	export function emptyDeleteShiftResp():DeleteShiftResp
	export function emptyRefDeleteShiftResp():Ref<DeleteShiftResp>
	export function refOfDeleteShiftResp(x:DeleteShiftResp,v:Ref<DeleteShiftResp>)
	export function unRefDeleteShiftResp(v:Ref<DeleteShiftResp>):DeleteShiftResp
	export function emptyGetUserFlowRespData():GetUserFlowRespData
	export function emptyRefGetUserFlowRespData():Ref<GetUserFlowRespData>
	export function refOfGetUserFlowRespData(x:GetUserFlowRespData,v:Ref<GetUserFlowRespData>)
	export function unRefGetUserFlowRespData(v:Ref<GetUserFlowRespData>):GetUserFlowRespData
	export function emptyQueryShiftResp():QueryShiftResp
	export function emptyRefQueryShiftResp():Ref<QueryShiftResp>
	export function refOfQueryShiftResp(x:QueryShiftResp,v:Ref<QueryShiftResp>)
	export function unRefQueryShiftResp(v:Ref<QueryShiftResp>):QueryShiftResp
	export function emptyQueryUserTaskRespData():QueryUserTaskRespData
	export function emptyRefQueryUserTaskRespData():Ref<QueryUserTaskRespData>
	export function refOfQueryUserTaskRespData(x:QueryUserTaskRespData,v:Ref<QueryUserTaskRespData>)
	export function unRefQueryUserTaskRespData(v:Ref<QueryUserTaskRespData>):QueryUserTaskRespData
	export function emptyUserFlow():UserFlow
	export function emptyRefUserFlow():Ref<UserFlow>
	export function refOfUserFlow(x:UserFlow,v:Ref<UserFlow>)
	export function unRefUserFlow(v:Ref<UserFlow>):UserFlow
	export function emptyFile():File
	export function emptyRefFile():Ref<File>
	export function refOfFile(x:File,v:Ref<File>)
	export function unRefFile(v:Ref<File>):File
	export function emptyGetLeaveEmployExpireRecordReq():GetLeaveEmployExpireRecordReq
	export function emptyRefGetLeaveEmployExpireRecordReq():Ref<GetLeaveEmployExpireRecordReq>
	export function refOfGetLeaveEmployExpireRecordReq(x:GetLeaveEmployExpireRecordReq,v:Ref<GetLeaveEmployExpireRecordReq>)
	export function unRefGetLeaveEmployExpireRecordReq(v:Ref<GetLeaveEmployExpireRecordReq>):GetLeaveEmployExpireRecordReq
	export function emptyListShiftRespData():ListShiftRespData
	export function emptyRefListShiftRespData():Ref<ListShiftRespData>
	export function refOfListShiftRespData(x:ListShiftRespData,v:Ref<ListShiftRespData>)
	export function unRefListShiftRespData(v:Ref<ListShiftRespData>):ListShiftRespData
	export function emptyModifyUserSettingReq():ModifyUserSettingReq
	export function emptyRefModifyUserSettingReq():Ref<ModifyUserSettingReq>
	export function refOfModifyUserSettingReq(x:ModifyUserSettingReq,v:Ref<ModifyUserSettingReq>)
	export function unRefModifyUserSettingReq(v:Ref<ModifyUserSettingReq>):ModifyUserSettingReq
	export function emptyModifyUserSettingReqBody():ModifyUserSettingReqBody
	export function emptyRefModifyUserSettingReqBody():Ref<ModifyUserSettingReqBody>
	export function refOfModifyUserSettingReqBody(x:ModifyUserSettingReqBody,v:Ref<ModifyUserSettingReqBody>)
	export function unRefModifyUserSettingReqBody(v:Ref<ModifyUserSettingReqBody>):ModifyUserSettingReqBody
	export function emptyQueryUserApprovalReqBody():QueryUserApprovalReqBody
	export function emptyRefQueryUserApprovalReqBody():Ref<QueryUserApprovalReqBody>
	export function refOfQueryUserApprovalReqBody(x:QueryUserApprovalReqBody,v:Ref<QueryUserApprovalReqBody>)
	export function unRefQueryUserApprovalReqBody(v:Ref<QueryUserApprovalReqBody>):QueryUserApprovalReqBody
	export function emptyUserId():UserId
	export function emptyRefUserId():Ref<UserId>
	export function refOfUserId(x:UserId,v:Ref<UserId>)
	export function unRefUserId(v:Ref<UserId>):UserId
	export function emptyScopeGroup():ScopeGroup
	export function emptyRefScopeGroup():Ref<ScopeGroup>
	export function refOfScopeGroup(x:ScopeGroup,v:Ref<ScopeGroup>)
	export function unRefScopeGroup(v:Ref<ScopeGroup>):ScopeGroup
	export function emptyUserLeave():UserLeave
	export function emptyRefUserLeave():Ref<UserLeave>
	export function refOfUserLeave(x:UserLeave,v:Ref<UserLeave>)
	export function unRefUserLeave(v:Ref<UserLeave>):UserLeave
	export function emptyWifiInfo():WifiInfo
	export function emptyRefWifiInfo():Ref<WifiInfo>
	export function refOfWifiInfo(x:WifiInfo,v:Ref<WifiInfo>)
	export function unRefWifiInfo(v:Ref<WifiInfo>):WifiInfo
	export function emptyBatchCreateUserFlowRespData():BatchCreateUserFlowRespData
	export function emptyRefBatchCreateUserFlowRespData():Ref<BatchCreateUserFlowRespData>
	export function refOfBatchCreateUserFlowRespData(x:BatchCreateUserFlowRespData,v:Ref<BatchCreateUserFlowRespData>)
	export function unRefBatchCreateUserFlowRespData(v:Ref<BatchCreateUserFlowRespData>):BatchCreateUserFlowRespData
	export function emptySearchGroupRespData():SearchGroupRespData
	export function emptyRefSearchGroupRespData():Ref<SearchGroupRespData>
	export function refOfSearchGroupRespData(x:SearchGroupRespData,v:Ref<SearchGroupRespData>)
	export function unRefSearchGroupRespData(v:Ref<SearchGroupRespData>):SearchGroupRespData
	export function emptyUserApproval():UserApproval
	export function emptyRefUserApproval():Ref<UserApproval>
	export function refOfUserApproval(x:UserApproval,v:Ref<UserApproval>)
	export function unRefUserApproval(v:Ref<UserApproval>):UserApproval
	export function emptySearchGroupReq():SearchGroupReq
	export function emptyRefSearchGroupReq():Ref<SearchGroupReq>
	export function refOfSearchGroupReq(x:SearchGroupReq,v:Ref<SearchGroupReq>)
	export function unRefSearchGroupReq(v:Ref<SearchGroupReq>):SearchGroupReq
	export function emptyLeaveEmployExpireRecord():LeaveEmployExpireRecord
	export function emptyRefLeaveEmployExpireRecord():Ref<LeaveEmployExpireRecord>
	export function refOfLeaveEmployExpireRecord(x:LeaveEmployExpireRecord,v:Ref<LeaveEmployExpireRecord>)
	export function unRefLeaveEmployExpireRecord(v:Ref<LeaveEmployExpireRecord>):LeaveEmployExpireRecord
	export function emptyLeaveNeedPunchCfg():LeaveNeedPunchCfg
	export function emptyRefLeaveNeedPunchCfg():Ref<LeaveNeedPunchCfg>
	export function refOfLeaveNeedPunchCfg(x:LeaveNeedPunchCfg,v:Ref<LeaveNeedPunchCfg>)
	export function unRefLeaveNeedPunchCfg(v:Ref<LeaveNeedPunchCfg>):LeaveNeedPunchCfg
	export function emptyPatchLeaveAccrualRecordReq():PatchLeaveAccrualRecordReq
	export function emptyRefPatchLeaveAccrualRecordReq():Ref<PatchLeaveAccrualRecordReq>
	export function refOfPatchLeaveAccrualRecordReq(x:PatchLeaveAccrualRecordReq,v:Ref<PatchLeaveAccrualRecordReq>)
	export function unRefPatchLeaveAccrualRecordReq(v:Ref<PatchLeaveAccrualRecordReq>):PatchLeaveAccrualRecordReq
	export function emptyQueryUserFlowRespData():QueryUserFlowRespData
	export function emptyRefQueryUserFlowRespData():Ref<QueryUserFlowRespData>
	export function refOfQueryUserFlowRespData(x:QueryUserFlowRespData,v:Ref<QueryUserFlowRespData>)
	export function unRefQueryUserFlowRespData(v:Ref<QueryUserFlowRespData>):QueryUserFlowRespData
	export function emptyStatusChange():StatusChange
	export function emptyRefStatusChange():Ref<StatusChange>
	export function refOfStatusChange(x:StatusChange,v:Ref<StatusChange>)
	export function unRefStatusChange(v:Ref<StatusChange>):StatusChange
	export function emptyUserOvertimeWork():UserOvertimeWork
	export function emptyRefUserOvertimeWork():Ref<UserOvertimeWork>
	export function refOfUserOvertimeWork(x:UserOvertimeWork,v:Ref<UserOvertimeWork>)
	export function unRefUserOvertimeWork(v:Ref<UserOvertimeWork>):UserOvertimeWork
	export function emptyCoordinate():Coordinate
	export function emptyRefCoordinate():Ref<Coordinate>
	export function refOfCoordinate(x:Coordinate,v:Ref<Coordinate>)
	export function unRefCoordinate(v:Ref<Coordinate>):Coordinate
	export function emptyLateOffLateOnSetting():LateOffLateOnSetting
	export function emptyRefLateOffLateOnSetting():Ref<LateOffLateOnSetting>
	export function refOfLateOffLateOnSetting(x:LateOffLateOnSetting,v:Ref<LateOffLateOnSetting>)
	export function unRefLateOffLateOnSetting(v:Ref<LateOffLateOnSetting>):LateOffLateOnSetting
	export function emptyListShiftResp():ListShiftResp
	export function emptyRefListShiftResp():Ref<ListShiftResp>
	export function refOfListShiftResp(x:ListShiftResp,v:Ref<ListShiftResp>)
	export function unRefListShiftResp(v:Ref<ListShiftResp>):ListShiftResp
	export function emptyQueryUserStatsViewReqBody():QueryUserStatsViewReqBody
	export function emptyRefQueryUserStatsViewReqBody():Ref<QueryUserStatsViewReqBody>
	export function refOfQueryUserStatsViewReqBody(x:QueryUserStatsViewReqBody,v:Ref<QueryUserStatsViewReqBody>)
	export function unRefQueryUserStatsViewReqBody(v:Ref<QueryUserStatsViewReqBody>):QueryUserStatsViewReqBody
	export function emptyBatchCreateUserDailyShiftReq():BatchCreateUserDailyShiftReq
	export function emptyRefBatchCreateUserDailyShiftReq():Ref<BatchCreateUserDailyShiftReq>
	export function refOfBatchCreateUserDailyShiftReq(x:BatchCreateUserDailyShiftReq,v:Ref<BatchCreateUserDailyShiftReq>)
	export function unRefBatchCreateUserDailyShiftReq(v:Ref<BatchCreateUserDailyShiftReq>):BatchCreateUserDailyShiftReq
	export function emptyCreateShiftRespData():CreateShiftRespData
	export function emptyRefCreateShiftRespData():Ref<CreateShiftRespData>
	export function refOfCreateShiftRespData(x:CreateShiftRespData,v:Ref<CreateShiftRespData>)
	export function unRefCreateShiftRespData(v:Ref<CreateShiftRespData>):CreateShiftRespData
	export function emptyGetLeaveEmployExpireRecordResp():GetLeaveEmployExpireRecordResp
	export function emptyRefGetLeaveEmployExpireRecordResp():Ref<GetLeaveEmployExpireRecordResp>
	export function refOfGetLeaveEmployExpireRecordResp(x:GetLeaveEmployExpireRecordResp,v:Ref<GetLeaveEmployExpireRecordResp>)
	export function unRefGetLeaveEmployExpireRecordResp(v:Ref<GetLeaveEmployExpireRecordResp>):GetLeaveEmployExpireRecordResp
	export function emptyPunchMember():PunchMember
	export function emptyRefPunchMember():Ref<PunchMember>
	export function refOfPunchMember(x:PunchMember,v:Ref<PunchMember>)
	export function unRefPunchMember(v:Ref<PunchMember>):PunchMember
	export function emptySchedule():Schedule
	export function emptyRefSchedule():Ref<Schedule>
	export function refOfSchedule(x:Schedule,v:Ref<Schedule>)
	export function unRefSchedule(v:Ref<Schedule>):Schedule
	export function emptyQueryUserStatsViewReq():QueryUserStatsViewReq
	export function emptyRefQueryUserStatsViewReq():Ref<QueryUserStatsViewReq>
	export function refOfQueryUserStatsViewReq(x:QueryUserStatsViewReq,v:Ref<QueryUserStatsViewReq>)
	export function unRefQueryUserStatsViewReq(v:Ref<QueryUserStatsViewReq>):QueryUserStatsViewReq
	export function emptyReportData():ReportData
	export function emptyRefReportData():Ref<ReportData>
	export function refOfReportData(x:ReportData,v:Ref<ReportData>)
	export function unRefReportData(v:Ref<ReportData>):ReportData
	export function emptyUserTask():UserTask
	export function emptyRefUserTask():Ref<UserTask>
	export function refOfUserTask(x:UserTask,v:Ref<UserTask>)
	export function unRefUserTask(v:Ref<UserTask>):UserTask
	export function emptyUserTaskRemedy():UserTaskRemedy
	export function emptyRefUserTaskRemedy():Ref<UserTaskRemedy>
	export function refOfUserTaskRemedy(x:UserTaskRemedy,v:Ref<UserTaskRemedy>)
	export function unRefUserTaskRemedy(v:Ref<UserTaskRemedy>):UserTaskRemedy
	export function emptyCreateUserTaskRemedyRespData():CreateUserTaskRemedyRespData
	export function emptyRefCreateUserTaskRemedyRespData():Ref<CreateUserTaskRemedyRespData>
	export function refOfCreateUserTaskRemedyRespData(x:CreateUserTaskRemedyRespData,v:Ref<CreateUserTaskRemedyRespData>)
	export function unRefCreateUserTaskRemedyRespData(v:Ref<CreateUserTaskRemedyRespData>):CreateUserTaskRemedyRespData
	export function emptyListArchiveRuleRespData():ListArchiveRuleRespData
	export function emptyRefListArchiveRuleRespData():Ref<ListArchiveRuleRespData>
	export function refOfListArchiveRuleRespData(x:ListArchiveRuleRespData,v:Ref<ListArchiveRuleRespData>)
	export function unRefListArchiveRuleRespData(v:Ref<ListArchiveRuleRespData>):ListArchiveRuleRespData
	export function emptyQueryUserAllowedRemedysUserTaskRemedyResp():QueryUserAllowedRemedysUserTaskRemedyResp
	export function emptyRefQueryUserAllowedRemedysUserTaskRemedyResp():Ref<QueryUserAllowedRemedysUserTaskRemedyResp>
	export function refOfQueryUserAllowedRemedysUserTaskRemedyResp(x:QueryUserAllowedRemedysUserTaskRemedyResp,v:Ref<QueryUserAllowedRemedysUserTaskRemedyResp>)
	export function unRefQueryUserAllowedRemedysUserTaskRemedyResp(v:Ref<QueryUserAllowedRemedysUserTaskRemedyResp>):QueryUserAllowedRemedysUserTaskRemedyResp
	export function emptyShiftGroupUser():ShiftGroupUser
	export function emptyRefShiftGroupUser():Ref<ShiftGroupUser>
	export function refOfShiftGroupUser(x:ShiftGroupUser,v:Ref<ShiftGroupUser>)
	export function unRefShiftGroupUser(v:Ref<ShiftGroupUser>):ShiftGroupUser
	export function emptyQueryUserSettingReq():QueryUserSettingReq
	export function emptyRefQueryUserSettingReq():Ref<QueryUserSettingReq>
	export function refOfQueryUserSettingReq(x:QueryUserSettingReq,v:Ref<QueryUserSettingReq>)
	export function unRefQueryUserSettingReq(v:Ref<QueryUserSettingReq>):QueryUserSettingReq
	export function emptyQueryUserStatsDataReqBody():QueryUserStatsDataReqBody
	export function emptyRefQueryUserStatsDataReqBody():Ref<QueryUserStatsDataReqBody>
	export function refOfQueryUserStatsDataReqBody(x:QueryUserStatsDataReqBody,v:Ref<QueryUserStatsDataReqBody>)
	export function unRefQueryUserStatsDataReqBody(v:Ref<QueryUserStatsDataReqBody>):QueryUserStatsDataReqBody
	export function emptyQueryUserTaskRemedyResp():QueryUserTaskRemedyResp
	export function emptyRefQueryUserTaskRemedyResp():Ref<QueryUserTaskRemedyResp>
	export function refOfQueryUserTaskRemedyResp(x:QueryUserTaskRemedyResp,v:Ref<QueryUserTaskRemedyResp>)
	export function unRefQueryUserTaskRemedyResp(v:Ref<QueryUserTaskRemedyResp>):QueryUserTaskRemedyResp
	export function emptyStatisticsField():StatisticsField
	export function emptyRefStatisticsField():Ref<StatisticsField>
	export function refOfStatisticsField(x:StatisticsField,v:Ref<StatisticsField>)
	export function unRefStatisticsField(v:Ref<StatisticsField>):StatisticsField
	export function emptyBatchCreateUserDailyShiftReqBody():BatchCreateUserDailyShiftReqBody
	export function emptyRefBatchCreateUserDailyShiftReqBody():Ref<BatchCreateUserDailyShiftReqBody>
	export function refOfBatchCreateUserDailyShiftReqBody(x:BatchCreateUserDailyShiftReqBody,v:Ref<BatchCreateUserDailyShiftReqBody>)
	export function unRefBatchCreateUserDailyShiftReqBody(v:Ref<BatchCreateUserDailyShiftReqBody>):BatchCreateUserDailyShiftReqBody
	export function emptyListArchiveRuleResp():ListArchiveRuleResp
	export function emptyRefListArchiveRuleResp():Ref<ListArchiveRuleResp>
	export function refOfListArchiveRuleResp(x:ListArchiveRuleResp,v:Ref<ListArchiveRuleResp>)
	export function unRefListArchiveRuleResp(v:Ref<ListArchiveRuleResp>):ListArchiveRuleResp
	export function emptyQueryUserAllowedRemedysUserTaskRemedyReq():QueryUserAllowedRemedysUserTaskRemedyReq
	export function emptyRefQueryUserAllowedRemedysUserTaskRemedyReq():Ref<QueryUserAllowedRemedysUserTaskRemedyReq>
	export function refOfQueryUserAllowedRemedysUserTaskRemedyReq(x:QueryUserAllowedRemedysUserTaskRemedyReq,v:Ref<QueryUserAllowedRemedysUserTaskRemedyReq>)
	export function unRefQueryUserAllowedRemedysUserTaskRemedyReq(v:Ref<QueryUserAllowedRemedysUserTaskRemedyReq>):QueryUserAllowedRemedysUserTaskRemedyReq
	export function emptyQueryUserAllowedRemedysUserTaskRemedyRespData():QueryUserAllowedRemedysUserTaskRemedyRespData
	export function emptyRefQueryUserAllowedRemedysUserTaskRemedyRespData():Ref<QueryUserAllowedRemedysUserTaskRemedyRespData>
	export function refOfQueryUserAllowedRemedysUserTaskRemedyRespData(x:QueryUserAllowedRemedysUserTaskRemedyRespData,v:Ref<QueryUserAllowedRemedysUserTaskRemedyRespData>)
	export function unRefQueryUserAllowedRemedysUserTaskRemedyRespData(v:Ref<QueryUserAllowedRemedysUserTaskRemedyRespData>):QueryUserAllowedRemedysUserTaskRemedyRespData
	export function emptyUserStatsDataFeature():UserStatsDataFeature
	export function emptyRefUserStatsDataFeature():Ref<UserStatsDataFeature>
	export function refOfUserStatsDataFeature(x:UserStatsDataFeature,v:Ref<UserStatsDataFeature>)
	export function unRefUserStatsDataFeature(v:Ref<UserStatsDataFeature>):UserStatsDataFeature
	export function emptyQueryShiftReq():QueryShiftReq
	export function emptyRefQueryShiftReq():Ref<QueryShiftReq>
	export function refOfQueryShiftReq(x:QueryShiftReq,v:Ref<QueryShiftReq>)
	export function unRefQueryShiftReq(v:Ref<QueryShiftReq>):QueryShiftReq
	export function emptyUserStatsDataCell():UserStatsDataCell
	export function emptyRefUserStatsDataCell():Ref<UserStatsDataCell>
	export function refOfUserStatsDataCell(x:UserStatsDataCell,v:Ref<UserStatsDataCell>)
	export function unRefUserStatsDataCell(v:Ref<UserStatsDataCell>):UserStatsDataCell
	export function emptyUserStatsField():UserStatsField
	export function emptyRefUserStatsField():Ref<UserStatsField>
	export function refOfUserStatsField(x:UserStatsField,v:Ref<UserStatsField>)
	export function unRefUserStatsField(v:Ref<UserStatsField>):UserStatsField
	export function emptyCreateUserTaskRemedyReq():CreateUserTaskRemedyReq
	export function emptyRefCreateUserTaskRemedyReq():Ref<CreateUserTaskRemedyReq>
	export function refOfCreateUserTaskRemedyReq(x:CreateUserTaskRemedyReq,v:Ref<CreateUserTaskRemedyReq>)
	export function unRefCreateUserTaskRemedyReq(v:Ref<CreateUserTaskRemedyReq>):CreateUserTaskRemedyReq
	export function emptyCreateUserTaskRemedyResp():CreateUserTaskRemedyResp
	export function emptyRefCreateUserTaskRemedyResp():Ref<CreateUserTaskRemedyResp>
	export function refOfCreateUserTaskRemedyResp(x:CreateUserTaskRemedyResp,v:Ref<CreateUserTaskRemedyResp>)
	export function unRefCreateUserTaskRemedyResp(v:Ref<CreateUserTaskRemedyResp>):CreateUserTaskRemedyResp
	export function emptyLeaveAccrualRecord():LeaveAccrualRecord
	export function emptyRefLeaveAccrualRecord():Ref<LeaveAccrualRecord>
	export function refOfLeaveAccrualRecord(x:LeaveAccrualRecord,v:Ref<LeaveAccrualRecord>)
	export function unRefLeaveAccrualRecord(v:Ref<LeaveAccrualRecord>):LeaveAccrualRecord
	export function emptyQueryUserStatsFieldRespData():QueryUserStatsFieldRespData
	export function emptyRefQueryUserStatsFieldRespData():Ref<QueryUserStatsFieldRespData>
	export function refOfQueryUserStatsFieldRespData(x:QueryUserStatsFieldRespData,v:Ref<QueryUserStatsFieldRespData>)
	export function unRefQueryUserStatsFieldRespData(v:Ref<QueryUserStatsFieldRespData>):QueryUserStatsFieldRespData
	export function emptyQueryUserStatsViewRespData():QueryUserStatsViewRespData
	export function emptyRefQueryUserStatsViewRespData():Ref<QueryUserStatsViewRespData>
	export function refOfQueryUserStatsViewRespData(x:QueryUserStatsViewRespData,v:Ref<QueryUserStatsViewRespData>)
	export function unRefQueryUserStatsViewRespData(v:Ref<QueryUserStatsViewRespData>):QueryUserStatsViewRespData
	export function emptyDeleteGroupReq():DeleteGroupReq
	export function emptyRefDeleteGroupReq():Ref<DeleteGroupReq>
	export function refOfDeleteGroupReq(x:DeleteGroupReq,v:Ref<DeleteGroupReq>)
	export function unRefDeleteGroupReq(v:Ref<DeleteGroupReq>):DeleteGroupReq
	export function emptyLocation():Location
	export function emptyRefLocation():Ref<Location>
	export function refOfLocation(x:Location,v:Ref<Location>)
	export function unRefLocation(v:Ref<Location>):Location
	export function emptyQueryUserFlowResp():QueryUserFlowResp
	export function emptyRefQueryUserFlowResp():Ref<QueryUserFlowResp>
	export function refOfQueryUserFlowResp(x:QueryUserFlowResp,v:Ref<QueryUserFlowResp>)
	export function unRefQueryUserFlowResp(v:Ref<QueryUserFlowResp>):QueryUserFlowResp
	export function emptyUserStatsFieldsQueryArchiveRuleReq():UserStatsFieldsQueryArchiveRuleReq
	export function emptyRefUserStatsFieldsQueryArchiveRuleReq():Ref<UserStatsFieldsQueryArchiveRuleReq>
	export function refOfUserStatsFieldsQueryArchiveRuleReq(x:UserStatsFieldsQueryArchiveRuleReq,v:Ref<UserStatsFieldsQueryArchiveRuleReq>)
	export function unRefUserStatsFieldsQueryArchiveRuleReq(v:Ref<UserStatsFieldsQueryArchiveRuleReq>):UserStatsFieldsQueryArchiveRuleReq
	export function emptyUserShiftGroupsList():UserShiftGroupsList
	export function emptyRefUserShiftGroupsList():Ref<UserShiftGroupsList>
	export function refOfUserShiftGroupsList(x:UserShiftGroupsList,v:Ref<UserShiftGroupsList>)
	export function unRefUserShiftGroupsList(v:Ref<UserShiftGroupsList>):UserShiftGroupsList
	export function emptyDeleteShiftReq():DeleteShiftReq
	export function emptyRefDeleteShiftReq():Ref<DeleteShiftReq>
	export function refOfDeleteShiftReq(x:DeleteShiftReq,v:Ref<DeleteShiftReq>)
	export function unRefDeleteShiftReq(v:Ref<DeleteShiftReq>):DeleteShiftReq
	export function emptyLangText():LangText
	export function emptyRefLangText():Ref<LangText>
	export function refOfLangText(x:LangText,v:Ref<LangText>)
	export function unRefLangText(v:Ref<LangText>):LangText
	export function emptyMemberStatusChange():MemberStatusChange
	export function emptyRefMemberStatusChange():Ref<MemberStatusChange>
	export function refOfMemberStatusChange(x:MemberStatusChange,v:Ref<MemberStatusChange>)
	export function unRefMemberStatusChange(v:Ref<MemberStatusChange>):MemberStatusChange
	export function emptyPunchSpecialDateShift():PunchSpecialDateShift
	export function emptyRefPunchSpecialDateShift():Ref<PunchSpecialDateShift>
	export function refOfPunchSpecialDateShift(x:PunchSpecialDateShift,v:Ref<PunchSpecialDateShift>)
	export function unRefPunchSpecialDateShift(v:Ref<PunchSpecialDateShift>):PunchSpecialDateShift
	export function emptyQueryUserSettingResp():QueryUserSettingResp
	export function emptyRefQueryUserSettingResp():Ref<QueryUserSettingResp>
	export function refOfQueryUserSettingResp(x:QueryUserSettingResp,v:Ref<QueryUserSettingResp>)
	export function unRefQueryUserSettingResp(v:Ref<QueryUserSettingResp>):QueryUserSettingResp
	export function emptySearchGroupReqBody():SearchGroupReqBody
	export function emptyRefSearchGroupReqBody():Ref<SearchGroupReqBody>
	export function refOfSearchGroupReqBody(x:SearchGroupReqBody,v:Ref<SearchGroupReqBody>)
	export function unRefSearchGroupReqBody(v:Ref<SearchGroupReqBody>):SearchGroupReqBody
	export function emptyQueryShiftRespData():QueryShiftRespData
	export function emptyRefQueryShiftRespData():Ref<QueryShiftRespData>
	export function refOfQueryShiftRespData(x:QueryShiftRespData,v:Ref<QueryShiftRespData>)
	export function unRefQueryShiftRespData(v:Ref<QueryShiftRespData>):QueryShiftRespData
	export function emptyWifiInfoEvent():WifiInfoEvent
	export function emptyRefWifiInfoEvent():Ref<WifiInfoEvent>
	export function refOfWifiInfoEvent(x:WifiInfoEvent,v:Ref<WifiInfoEvent>)
	export function unRefWifiInfoEvent(v:Ref<WifiInfoEvent>):WifiInfoEvent
	export function emptyItem():Item
	export function emptyRefItem():Ref<Item>
	export function refOfItem(x:Item,v:Ref<Item>)
	export function unRefItem(v:Ref<Item>):Item
	export function emptyDownloadFileReq():DownloadFileReq
	export function emptyRefDownloadFileReq():Ref<DownloadFileReq>
	export function refOfDownloadFileReq(x:DownloadFileReq,v:Ref<DownloadFileReq>)
	export function unRefDownloadFileReq(v:Ref<DownloadFileReq>):DownloadFileReq
	export function emptyGetShiftResp():GetShiftResp
	export function emptyRefGetShiftResp():Ref<GetShiftResp>
	export function refOfGetShiftResp(x:GetShiftResp,v:Ref<GetShiftResp>)
	export function unRefGetShiftResp(v:Ref<GetShiftResp>):GetShiftResp
	export function emptyBatchCreateUserFlowReqBody():BatchCreateUserFlowReqBody
	export function emptyRefBatchCreateUserFlowReqBody():Ref<BatchCreateUserFlowReqBody>
	export function refOfBatchCreateUserFlowReqBody(x:BatchCreateUserFlowReqBody,v:Ref<BatchCreateUserFlowReqBody>)
	export function unRefBatchCreateUserFlowReqBody(v:Ref<BatchCreateUserFlowReqBody>):BatchCreateUserFlowReqBody
	export function emptyCreateShiftReq():CreateShiftReq
	export function emptyRefCreateShiftReq():Ref<CreateShiftReq>
	export function refOfCreateShiftReq(x:CreateShiftReq,v:Ref<CreateShiftReq>)
	export function unRefCreateShiftReq(v:Ref<CreateShiftReq>):CreateShiftReq
	export function emptyUpdateUserStatsViewResp():UpdateUserStatsViewResp
	export function emptyRefUpdateUserStatsViewResp():Ref<UpdateUserStatsViewResp>
	export function refOfUpdateUserStatsViewResp(x:UpdateUserStatsViewResp,v:Ref<UpdateUserStatsViewResp>)
	export function unRefUpdateUserStatsViewResp(v:Ref<UpdateUserStatsViewResp>):UpdateUserStatsViewResp
	export function emptyI18nMap():I18nMap
	export function emptyRefI18nMap():Ref<I18nMap>
	export function refOfI18nMap(x:I18nMap,v:Ref<I18nMap>)
	export function unRefI18nMap(v:Ref<I18nMap>):I18nMap
	export function emptyListShiftIterator():ListShiftIterator
	export function emptyRefListShiftIterator():Ref<ListShiftIterator>
	export function refOfListShiftIterator(x:ListShiftIterator,v:Ref<ListShiftIterator>)
	export function unRefListShiftIterator(v:Ref<ListShiftIterator>):ListShiftIterator
	export function emptyOpenApplyTimeRange():OpenApplyTimeRange
	export function emptyRefOpenApplyTimeRange():Ref<OpenApplyTimeRange>
	export function refOfOpenApplyTimeRange(x:OpenApplyTimeRange,v:Ref<OpenApplyTimeRange>)
	export function unRefOpenApplyTimeRange(v:Ref<OpenApplyTimeRange>):OpenApplyTimeRange
	export function emptyPatchLeaveAccrualRecordRespData():PatchLeaveAccrualRecordRespData
	export function emptyRefPatchLeaveAccrualRecordRespData():Ref<PatchLeaveAccrualRecordRespData>
	export function refOfPatchLeaveAccrualRecordRespData(x:PatchLeaveAccrualRecordRespData,v:Ref<PatchLeaveAccrualRecordRespData>)
	export function unRefPatchLeaveAccrualRecordRespData(v:Ref<PatchLeaveAccrualRecordRespData>):PatchLeaveAccrualRecordRespData
	export function emptyUserStatsView():UserStatsView
	export function emptyRefUserStatsView():Ref<UserStatsView>
	export function refOfUserStatsView(x:UserStatsView,v:Ref<UserStatsView>)
	export function unRefUserStatsView(v:Ref<UserStatsView>):UserStatsView
	export function emptyBatchCreateUserFlowReq():BatchCreateUserFlowReq
	export function emptyRefBatchCreateUserFlowReq():Ref<BatchCreateUserFlowReq>
	export function refOfBatchCreateUserFlowReq(x:BatchCreateUserFlowReq,v:Ref<BatchCreateUserFlowReq>)
	export function unRefBatchCreateUserFlowReq(v:Ref<BatchCreateUserFlowReq>):BatchCreateUserFlowReq
	export function emptyDownloadFileResp():DownloadFileResp
	export function emptyRefDownloadFileResp():Ref<DownloadFileResp>
	export function refOfDownloadFileResp(x:DownloadFileResp,v:Ref<DownloadFileResp>)
	export function unRefDownloadFileResp(v:Ref<DownloadFileResp>):DownloadFileResp
	export function emptyLateOffLateOnRule():LateOffLateOnRule
	export function emptyRefLateOffLateOnRule():Ref<LateOffLateOnRule>
	export function refOfLateOffLateOnRule(x:LateOffLateOnRule,v:Ref<LateOffLateOnRule>)
	export function unRefLateOffLateOnRule(v:Ref<LateOffLateOnRule>):LateOffLateOnRule
	export function emptyListGroupIterator():ListGroupIterator
	export function emptyRefListGroupIterator():Ref<ListGroupIterator>
	export function refOfListGroupIterator(x:ListGroupIterator,v:Ref<ListGroupIterator>)
	export function unRefListGroupIterator(v:Ref<ListGroupIterator>):ListGroupIterator
	export function emptyCreateGroupResp():CreateGroupResp
	export function emptyRefCreateGroupResp():Ref<CreateGroupResp>
	export function refOfCreateGroupResp(x:CreateGroupResp,v:Ref<CreateGroupResp>)
	export function unRefCreateGroupResp(v:Ref<CreateGroupResp>):CreateGroupResp
	export function emptyI18nNames():I18nNames
	export function emptyRefI18nNames():Ref<I18nNames>
	export function refOfI18nNames(x:I18nNames,v:Ref<I18nNames>)
	export function unRefI18nNames(v:Ref<I18nNames>):I18nNames
	export function emptyUpdateUserStatsViewRespData():UpdateUserStatsViewRespData
	export function emptyRefUpdateUserStatsViewRespData():Ref<UpdateUserStatsViewRespData>
	export function refOfUpdateUserStatsViewRespData(x:UpdateUserStatsViewRespData,v:Ref<UpdateUserStatsViewRespData>)
	export function unRefUpdateUserStatsViewRespData(v:Ref<UpdateUserStatsViewRespData>):UpdateUserStatsViewRespData
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyProcessApprovalInfoReqBody():ProcessApprovalInfoReqBody
	export function emptyRefProcessApprovalInfoReqBody():Ref<ProcessApprovalInfoReqBody>
	export function refOfProcessApprovalInfoReqBody(x:ProcessApprovalInfoReqBody,v:Ref<ProcessApprovalInfoReqBody>)
	export function unRefProcessApprovalInfoReqBody(v:Ref<ProcessApprovalInfoReqBody>):ProcessApprovalInfoReqBody
	export function emptyArea():Area
	export function emptyRefArea():Ref<Area>
	export function refOfArea(x:Area,v:Ref<Area>)
	export function unRefArea(v:Ref<Area>):Area
	export function emptyProcessApprovalInfoRespData():ProcessApprovalInfoRespData
	export function emptyRefProcessApprovalInfoRespData():Ref<ProcessApprovalInfoRespData>
	export function refOfProcessApprovalInfoRespData(x:ProcessApprovalInfoRespData,v:Ref<ProcessApprovalInfoRespData>)
	export function unRefProcessApprovalInfoRespData(v:Ref<ProcessApprovalInfoRespData>):ProcessApprovalInfoRespData
	export function emptyQueryUserStatsFieldResp():QueryUserStatsFieldResp
	export function emptyRefQueryUserStatsFieldResp():Ref<QueryUserStatsFieldResp>
	export function refOfQueryUserStatsFieldResp(x:QueryUserStatsFieldResp,v:Ref<QueryUserStatsFieldResp>)
	export function unRefQueryUserStatsFieldResp(v:Ref<QueryUserStatsFieldResp>):QueryUserStatsFieldResp
	export function emptyCreateGroupReq():CreateGroupReq
	export function emptyRefCreateGroupReq():Ref<CreateGroupReq>
	export function refOfCreateGroupReq(x:CreateGroupReq,v:Ref<CreateGroupReq>)
	export function unRefCreateGroupReq(v:Ref<CreateGroupReq>):CreateGroupReq
	export function emptyListShiftReq():ListShiftReq
	export function emptyRefListShiftReq():Ref<ListShiftReq>
	export function refOfListShiftReq(x:ListShiftReq,v:Ref<ListShiftReq>)
	export function unRefListShiftReq(v:Ref<ListShiftReq>):ListShiftReq
	export function emptyCreateUserApprovalResp():CreateUserApprovalResp
	export function emptyRefCreateUserApprovalResp():Ref<CreateUserApprovalResp>
	export function refOfCreateUserApprovalResp(x:CreateUserApprovalResp,v:Ref<CreateUserApprovalResp>)
	export function unRefCreateUserApprovalResp(v:Ref<CreateUserApprovalResp>):CreateUserApprovalResp
	export function emptyCreateUserApprovalRespData():CreateUserApprovalRespData
	export function emptyRefCreateUserApprovalRespData():Ref<CreateUserApprovalRespData>
	export function refOfCreateUserApprovalRespData(x:CreateUserApprovalRespData,v:Ref<CreateUserApprovalRespData>)
	export function unRefCreateUserApprovalRespData(v:Ref<CreateUserApprovalRespData>):CreateUserApprovalRespData
	export function emptyFlexibleRule():FlexibleRule
	export function emptyRefFlexibleRule():Ref<FlexibleRule>
	export function refOfFlexibleRule(x:FlexibleRule,v:Ref<FlexibleRule>)
	export function unRefFlexibleRule(v:Ref<FlexibleRule>):FlexibleRule
	export function emptyFreePunchCfg():FreePunchCfg
	export function emptyRefFreePunchCfg():Ref<FreePunchCfg>
	export function refOfFreePunchCfg(x:FreePunchCfg,v:Ref<FreePunchCfg>)
	export function unRefFreePunchCfg(v:Ref<FreePunchCfg>):FreePunchCfg
	export function emptyProcessApprovalInfoResp():ProcessApprovalInfoResp
	export function emptyRefProcessApprovalInfoResp():Ref<ProcessApprovalInfoResp>
	export function refOfProcessApprovalInfoResp(x:ProcessApprovalInfoResp,v:Ref<ProcessApprovalInfoResp>)
	export function unRefProcessApprovalInfoResp(v:Ref<ProcessApprovalInfoResp>):ProcessApprovalInfoResp
	export function emptyRestRule():RestRule
	export function emptyRefRestRule():Ref<RestRule>
	export function refOfRestRule(x:RestRule,v:Ref<RestRule>)
	export function unRefRestRule(v:Ref<RestRule>):RestRule
	export function emptyQueryUserApprovalRespData():QueryUserApprovalRespData
	export function emptyRefQueryUserApprovalRespData():Ref<QueryUserApprovalRespData>
	export function refOfQueryUserApprovalRespData(x:QueryUserApprovalRespData,v:Ref<QueryUserApprovalRespData>)
	export function unRefQueryUserApprovalRespData(v:Ref<QueryUserApprovalRespData>):QueryUserApprovalRespData
	export function emptyUserSetting():UserSetting
	export function emptyRefUserSetting():Ref<UserSetting>
	export function refOfUserSetting(x:UserSetting,v:Ref<UserSetting>)
	export function unRefUserSetting(v:Ref<UserSetting>):UserSetting
	export function emptyScopeValue():ScopeValue
	export function emptyRefScopeValue():Ref<ScopeValue>
	export function refOfScopeValue(x:ScopeValue,v:Ref<ScopeValue>)
	export function unRefScopeValue(v:Ref<ScopeValue>):ScopeValue
	export function emptyDurationItem():DurationItem
	export function emptyRefDurationItem():Ref<DurationItem>
	export function refOfDurationItem(x:DurationItem,v:Ref<DurationItem>)
	export function unRefDurationItem(v:Ref<DurationItem>):DurationItem
	export function emptyQueryUserApprovalReq():QueryUserApprovalReq
	export function emptyRefQueryUserApprovalReq():Ref<QueryUserApprovalReq>
	export function refOfQueryUserApprovalReq(x:QueryUserApprovalReq,v:Ref<QueryUserApprovalReq>)
	export function unRefQueryUserApprovalReq(v:Ref<QueryUserApprovalReq>):QueryUserApprovalReq
	export function emptyQueryUserTaskRemedyReqBody():QueryUserTaskRemedyReqBody
	export function emptyRefQueryUserTaskRemedyReqBody():Ref<QueryUserTaskRemedyReqBody>
	export function refOfQueryUserTaskRemedyReqBody(x:QueryUserTaskRemedyReqBody,v:Ref<QueryUserTaskRemedyReqBody>)
	export function unRefQueryUserTaskRemedyReqBody(v:Ref<QueryUserTaskRemedyReqBody>):QueryUserTaskRemedyReqBody
	export function emptyQueryUserTaskRemedyRespData():QueryUserTaskRemedyRespData
	export function emptyRefQueryUserTaskRemedyRespData():Ref<QueryUserTaskRemedyRespData>
	export function refOfQueryUserTaskRemedyRespData(x:QueryUserTaskRemedyRespData,v:Ref<QueryUserTaskRemedyRespData>)
	export function unRefQueryUserTaskRemedyRespData(v:Ref<QueryUserTaskRemedyRespData>):QueryUserTaskRemedyRespData
	export function emptyArchiveReportMeta():ArchiveReportMeta
	export function emptyRefArchiveReportMeta():Ref<ArchiveReportMeta>
	export function refOfArchiveReportMeta(x:ArchiveReportMeta,v:Ref<ArchiveReportMeta>)
	export function unRefArchiveReportMeta(v:Ref<ArchiveReportMeta>):ArchiveReportMeta
	export function emptyFilterItem():FilterItem
	export function emptyRefFilterItem():Ref<FilterItem>
	export function refOfFilterItem(x:FilterItem,v:Ref<FilterItem>)
	export function unRefFilterItem(v:Ref<FilterItem>):FilterItem
	export function emptyGroupMeta():GroupMeta
	export function emptyRefGroupMeta():Ref<GroupMeta>
	export function refOfGroupMeta(x:GroupMeta,v:Ref<GroupMeta>)
	export function unRefGroupMeta(v:Ref<GroupMeta>):GroupMeta
	export function emptyShift():Shift
	export function emptyRefShift():Ref<Shift>
	export function refOfShift(x:Shift,v:Ref<Shift>)
	export function unRefShift(v:Ref<Shift>):Shift
	export function emptyUserOut():UserOut
	export function emptyRefUserOut():Ref<UserOut>
	export function refOfUserOut(x:UserOut,v:Ref<UserOut>)
	export function unRefUserOut(v:Ref<UserOut>):UserOut
	export function emptyModifyUserSettingRespData():ModifyUserSettingRespData
	export function emptyRefModifyUserSettingRespData():Ref<ModifyUserSettingRespData>
	export function refOfModifyUserSettingRespData(x:ModifyUserSettingRespData,v:Ref<ModifyUserSettingRespData>)
	export function unRefModifyUserSettingRespData(v:Ref<ModifyUserSettingRespData>):ModifyUserSettingRespData
	export function emptyTaskResult():TaskResult
	export function emptyRefTaskResult():Ref<TaskResult>
	export function refOfTaskResult(x:TaskResult,v:Ref<TaskResult>)
	export function unRefTaskResult(v:Ref<TaskResult>):TaskResult
	export function emptyLocationInfo():LocationInfo
	export function emptyRefLocationInfo():Ref<LocationInfo>
	export function refOfLocationInfo(x:LocationInfo,v:Ref<LocationInfo>)
	export function unRefLocationInfo(v:Ref<LocationInfo>):LocationInfo
	export function emptyQueryUserDailyShiftRespData():QueryUserDailyShiftRespData
	export function emptyRefQueryUserDailyShiftRespData():Ref<QueryUserDailyShiftRespData>
	export function refOfQueryUserDailyShiftRespData(x:QueryUserDailyShiftRespData,v:Ref<QueryUserDailyShiftRespData>)
	export function unRefQueryUserDailyShiftRespData(v:Ref<QueryUserDailyShiftRespData>):QueryUserDailyShiftRespData
	export function emptyListGroupRespData():ListGroupRespData
	export function emptyRefListGroupRespData():Ref<ListGroupRespData>
	export function refOfListGroupRespData(x:ListGroupRespData,v:Ref<ListGroupRespData>)
	export function unRefListGroupRespData(v:Ref<ListGroupRespData>):ListGroupRespData
	export function emptyQueryUserApprovalResp():QueryUserApprovalResp
	export function emptyRefQueryUserApprovalResp():Ref<QueryUserApprovalResp>
	export function refOfQueryUserApprovalResp(x:QueryUserApprovalResp,v:Ref<QueryUserApprovalResp>)
	export function unRefQueryUserApprovalResp(v:Ref<QueryUserApprovalResp>):QueryUserApprovalResp
	export function emptyQueryUserDailyShiftResp():QueryUserDailyShiftResp
	export function emptyRefQueryUserDailyShiftResp():Ref<QueryUserDailyShiftResp>
	export function refOfQueryUserDailyShiftResp(x:QueryUserDailyShiftResp,v:Ref<QueryUserDailyShiftResp>)
	export function unRefQueryUserDailyShiftResp(v:Ref<QueryUserDailyShiftResp>):QueryUserDailyShiftResp
	export function emptyQueryUserTaskRemedyReq():QueryUserTaskRemedyReq
	export function emptyRefQueryUserTaskRemedyReq():Ref<QueryUserTaskRemedyReq>
	export function refOfQueryUserTaskRemedyReq(x:QueryUserTaskRemedyReq,v:Ref<QueryUserTaskRemedyReq>)
	export function unRefQueryUserTaskRemedyReq(v:Ref<QueryUserTaskRemedyReq>):QueryUserTaskRemedyReq
	export function emptyUserTrip():UserTrip
	export function emptyRefUserTrip():Ref<UserTrip>
	export function refOfUserTrip(x:UserTrip,v:Ref<UserTrip>)
	export function unRefUserTrip(v:Ref<UserTrip>):UserTrip
	export function emptyListArchiveRuleIterator():ListArchiveRuleIterator
	export function emptyRefListArchiveRuleIterator():Ref<ListArchiveRuleIterator>
	export function refOfListArchiveRuleIterator(x:ListArchiveRuleIterator,v:Ref<ListArchiveRuleIterator>)
	export function unRefListArchiveRuleIterator(v:Ref<ListArchiveRuleIterator>):ListArchiveRuleIterator
	export function emptyQueryUserStatsDataRespData():QueryUserStatsDataRespData
	export function emptyRefQueryUserStatsDataRespData():Ref<QueryUserStatsDataRespData>
	export function refOfQueryUserStatsDataRespData(x:QueryUserStatsDataRespData,v:Ref<QueryUserStatsDataRespData>)
	export function unRefQueryUserStatsDataRespData(v:Ref<QueryUserStatsDataRespData>):QueryUserStatsDataRespData
	export function emptySearchGroupResp():SearchGroupResp
	export function emptyRefSearchGroupResp():Ref<SearchGroupResp>
	export function refOfSearchGroupResp(x:SearchGroupResp,v:Ref<SearchGroupResp>)
	export function unRefSearchGroupResp(v:Ref<SearchGroupResp>):SearchGroupResp
	export function emptyUserTmpDailyShift():UserTmpDailyShift
	export function emptyRefUserTmpDailyShift():Ref<UserTmpDailyShift>
	export function refOfUserTmpDailyShift(x:UserTmpDailyShift,v:Ref<UserTmpDailyShift>)
	export function unRefUserTmpDailyShift(v:Ref<UserTmpDailyShift>):UserTmpDailyShift
	export function emptyUpdateUserStatsViewReq():UpdateUserStatsViewReq
	export function emptyRefUpdateUserStatsViewReq():Ref<UpdateUserStatsViewReq>
	export function refOfUpdateUserStatsViewReq(x:UpdateUserStatsViewReq,v:Ref<UpdateUserStatsViewReq>)
	export function unRefUpdateUserStatsViewReq(v:Ref<UpdateUserStatsViewReq>):UpdateUserStatsViewReq
	export function emptyUploadFileReqBody():UploadFileReqBody
	export function emptyRefUploadFileReqBody():Ref<UploadFileReqBody>
	export function refOfUploadFileReqBody(x:UploadFileReqBody,v:Ref<UploadFileReqBody>)
	export function unRefUploadFileReqBody(v:Ref<UploadFileReqBody>):UploadFileReqBody
	export function emptyBatchCreateUserDailyShiftRespData():BatchCreateUserDailyShiftRespData
	export function emptyRefBatchCreateUserDailyShiftRespData():Ref<BatchCreateUserDailyShiftRespData>
	export function refOfBatchCreateUserDailyShiftRespData(x:BatchCreateUserDailyShiftRespData,v:Ref<BatchCreateUserDailyShiftRespData>)
	export function unRefBatchCreateUserDailyShiftRespData(v:Ref<BatchCreateUserDailyShiftRespData>):BatchCreateUserDailyShiftRespData
	export function emptyCreateShiftResp():CreateShiftResp
	export function emptyRefCreateShiftResp():Ref<CreateShiftResp>
	export function refOfCreateShiftResp(x:CreateShiftResp,v:Ref<CreateShiftResp>)
	export function unRefCreateShiftResp(v:Ref<CreateShiftResp>):CreateShiftResp
	export function emptyField():Field
	export function emptyRefField():Ref<Field>
	export function refOfField(x:Field,v:Ref<Field>)
	export function unRefField(v:Ref<Field>):Field
	export function emptyQueryUserTaskResp():QueryUserTaskResp
	export function emptyRefQueryUserTaskResp():Ref<QueryUserTaskResp>
	export function refOfQueryUserTaskResp(x:QueryUserTaskResp,v:Ref<QueryUserTaskResp>)
	export function unRefQueryUserTaskResp(v:Ref<QueryUserTaskResp>):QueryUserTaskResp
	export function emptyBatchCreateUserFlowResp():BatchCreateUserFlowResp
	export function emptyRefBatchCreateUserFlowResp():Ref<BatchCreateUserFlowResp>
	export function refOfBatchCreateUserFlowResp(x:BatchCreateUserFlowResp,v:Ref<BatchCreateUserFlowResp>)
	export function unRefBatchCreateUserFlowResp(v:Ref<BatchCreateUserFlowResp>):BatchCreateUserFlowResp
	export function emptyChildItem():ChildItem
	export function emptyRefChildItem():Ref<ChildItem>
	export function refOfChildItem(x:ChildItem,v:Ref<ChildItem>)
	export function unRefChildItem(v:Ref<ChildItem>):ChildItem
	export function emptyCreateGroupReqBody():CreateGroupReqBody
	export function emptyRefCreateGroupReqBody():Ref<CreateGroupReqBody>
	export function refOfCreateGroupReqBody(x:CreateGroupReqBody,v:Ref<CreateGroupReqBody>)
	export function unRefCreateGroupReqBody(v:Ref<CreateGroupReqBody>):CreateGroupReqBody
	export function emptyCreateUserApprovalReqBody():CreateUserApprovalReqBody
	export function emptyRefCreateUserApprovalReqBody():Ref<CreateUserApprovalReqBody>
	export function refOfCreateUserApprovalReqBody(x:CreateUserApprovalReqBody,v:Ref<CreateUserApprovalReqBody>)
	export function unRefCreateUserApprovalReqBody(v:Ref<CreateUserApprovalReqBody>):CreateUserApprovalReqBody
	export function emptyPatchLeaveAccrualRecordResp():PatchLeaveAccrualRecordResp
	export function emptyRefPatchLeaveAccrualRecordResp():Ref<PatchLeaveAccrualRecordResp>
	export function refOfPatchLeaveAccrualRecordResp(x:PatchLeaveAccrualRecordResp,v:Ref<PatchLeaveAccrualRecordResp>)
	export function unRefPatchLeaveAccrualRecordResp(v:Ref<PatchLeaveAccrualRecordResp>):PatchLeaveAccrualRecordResp
	export function emptyQueryUserStatsViewResp():QueryUserStatsViewResp
	export function emptyRefQueryUserStatsViewResp():Ref<QueryUserStatsViewResp>
	export function refOfQueryUserStatsViewResp(x:QueryUserStatsViewResp,v:Ref<QueryUserStatsViewResp>)
	export function unRefQueryUserStatsViewResp(v:Ref<QueryUserStatsViewResp>):QueryUserStatsViewResp
	export function emptyPunchTimeRule():PunchTimeRule
	export function emptyRefPunchTimeRule():Ref<PunchTimeRule>
	export function refOfPunchTimeRule(x:PunchTimeRule,v:Ref<PunchTimeRule>)
	export function unRefPunchTimeRule(v:Ref<PunchTimeRule>):PunchTimeRule
	export function emptyGetGroupResp():GetGroupResp
	export function emptyRefGetGroupResp():Ref<GetGroupResp>
	export function refOfGetGroupResp(x:GetGroupResp,v:Ref<GetGroupResp>)
	export function unRefGetGroupResp(v:Ref<GetGroupResp>):GetGroupResp
	export function emptyQueryUserStatsDataResp():QueryUserStatsDataResp
	export function emptyRefQueryUserStatsDataResp():Ref<QueryUserStatsDataResp>
	export function refOfQueryUserStatsDataResp(x:QueryUserStatsDataResp,v:Ref<QueryUserStatsDataResp>)
	export function unRefQueryUserStatsDataResp(v:Ref<QueryUserStatsDataResp>):QueryUserStatsDataResp
	export function emptyQueryUserTaskReq():QueryUserTaskReq
	export function emptyRefQueryUserTaskReq():Ref<QueryUserTaskReq>
	export function refOfQueryUserTaskReq(x:QueryUserTaskReq,v:Ref<QueryUserTaskReq>)
	export function unRefQueryUserTaskReq(v:Ref<QueryUserTaskReq>):QueryUserTaskReq
	export function emptyQueryUserTaskReqBody():QueryUserTaskReqBody
	export function emptyRefQueryUserTaskReqBody():Ref<QueryUserTaskReqBody>
	export function refOfQueryUserTaskReqBody(x:QueryUserTaskReqBody,v:Ref<QueryUserTaskReqBody>)
	export function unRefQueryUserTaskReqBody(v:Ref<QueryUserTaskReqBody>):QueryUserTaskReqBody
	export function emptyQueryUserDailyShiftReqBody():QueryUserDailyShiftReqBody
	export function emptyRefQueryUserDailyShiftReqBody():Ref<QueryUserDailyShiftReqBody>
	export function refOfQueryUserDailyShiftReqBody(x:QueryUserDailyShiftReqBody,v:Ref<QueryUserDailyShiftReqBody>)
	export function unRefQueryUserDailyShiftReqBody(v:Ref<QueryUserDailyShiftReqBody>):QueryUserDailyShiftReqBody
	export function emptyQueryUserSettingReqBody():QueryUserSettingReqBody
	export function emptyRefQueryUserSettingReqBody():Ref<QueryUserSettingReqBody>
	export function refOfQueryUserSettingReqBody(x:QueryUserSettingReqBody,v:Ref<QueryUserSettingReqBody>)
	export function unRefQueryUserSettingReqBody(v:Ref<QueryUserSettingReqBody>):QueryUserSettingReqBody
	export function emptyUploadFileRespData():UploadFileRespData
	export function emptyRefUploadFileRespData():Ref<UploadFileRespData>
	export function refOfUploadFileRespData(x:UploadFileRespData,v:Ref<UploadFileRespData>)
	export function unRefUploadFileRespData(v:Ref<UploadFileRespData>):UploadFileRespData
	export function emptyArrangeShiftGroup():ArrangeShiftGroup
	export function emptyRefArrangeShiftGroup():Ref<ArrangeShiftGroup>
	export function refOfArrangeShiftGroup(x:ArrangeShiftGroup,v:Ref<ArrangeShiftGroup>)
	export function unRefArrangeShiftGroup(v:Ref<ArrangeShiftGroup>):ArrangeShiftGroup
	export function emptyGetUserFlowReq():GetUserFlowReq
	export function emptyRefGetUserFlowReq():Ref<GetUserFlowReq>
	export function refOfGetUserFlowReq(x:GetUserFlowReq,v:Ref<GetUserFlowReq>)
	export function unRefGetUserFlowReq(v:Ref<GetUserFlowReq>):GetUserFlowReq
	export function emptyLocationRecord():LocationRecord
	export function emptyRefLocationRecord():Ref<LocationRecord>
	export function refOfLocationRecord(x:LocationRecord,v:Ref<LocationRecord>)
	export function unRefLocationRecord(v:Ref<LocationRecord>):LocationRecord
	export function emptyPunchTimeSimpleRule():PunchTimeSimpleRule
	export function emptyRefPunchTimeSimpleRule():Ref<PunchTimeSimpleRule>
	export function refOfPunchTimeSimpleRule(x:PunchTimeSimpleRule,v:Ref<PunchTimeSimpleRule>)
	export function unRefPunchTimeSimpleRule(v:Ref<PunchTimeSimpleRule>):PunchTimeSimpleRule
	export function emptyQueryUserAllowedRemedysUserTaskRemedyReqBody():QueryUserAllowedRemedysUserTaskRemedyReqBody
	export function emptyRefQueryUserAllowedRemedysUserTaskRemedyReqBody():Ref<QueryUserAllowedRemedysUserTaskRemedyReqBody>
	export function refOfQueryUserAllowedRemedysUserTaskRemedyReqBody(x:QueryUserAllowedRemedysUserTaskRemedyReqBody,v:Ref<QueryUserAllowedRemedysUserTaskRemedyReqBody>)
	export function unRefQueryUserAllowedRemedysUserTaskRemedyReqBody(v:Ref<QueryUserAllowedRemedysUserTaskRemedyReqBody>):QueryUserAllowedRemedysUserTaskRemedyReqBody
	export function emptyChildField():ChildField
	export function emptyRefChildField():Ref<ChildField>
	export function refOfChildField(x:ChildField,v:Ref<ChildField>)
	export function unRefChildField(v:Ref<ChildField>):ChildField
	export function emptyCreateGroupRespData():CreateGroupRespData
	export function emptyRefCreateGroupRespData():Ref<CreateGroupRespData>
	export function refOfCreateGroupRespData(x:CreateGroupRespData,v:Ref<CreateGroupRespData>)
	export function unRefCreateGroupRespData(v:Ref<CreateGroupRespData>):CreateGroupRespData
	export function emptyDeleteGroupResp():DeleteGroupResp
	export function emptyRefDeleteGroupResp():Ref<DeleteGroupResp>
	export function refOfDeleteGroupResp(x:DeleteGroupResp,v:Ref<DeleteGroupResp>)
	export function unRefDeleteGroupResp(v:Ref<DeleteGroupResp>):DeleteGroupResp
	export function emptyListArchiveRuleReq():ListArchiveRuleReq
	export function emptyRefListArchiveRuleReq():Ref<ListArchiveRuleReq>
	export function refOfListArchiveRuleReq(x:ListArchiveRuleReq,v:Ref<ListArchiveRuleReq>)
	export function unRefListArchiveRuleReq(v:Ref<ListArchiveRuleReq>):ListArchiveRuleReq
	export function emptyQueryUserStatsDataReq():QueryUserStatsDataReq
	export function emptyRefQueryUserStatsDataReq():Ref<QueryUserStatsDataReq>
	export function refOfQueryUserStatsDataReq(x:QueryUserStatsDataReq,v:Ref<QueryUserStatsDataReq>)
	export function unRefQueryUserStatsDataReq(v:Ref<QueryUserStatsDataReq>):QueryUserStatsDataReq
	export function emptyQueryUserStatsFieldReqBody():QueryUserStatsFieldReqBody
	export function emptyRefQueryUserStatsFieldReqBody():Ref<QueryUserStatsFieldReqBody>
	export function refOfQueryUserStatsFieldReqBody(x:QueryUserStatsFieldReqBody,v:Ref<QueryUserStatsFieldReqBody>)
	export function unRefQueryUserStatsFieldReqBody(v:Ref<QueryUserStatsFieldReqBody>):QueryUserStatsFieldReqBody
	export function emptyUserStatsFieldsQueryArchiveRuleReqBody():UserStatsFieldsQueryArchiveRuleReqBody
	export function emptyRefUserStatsFieldsQueryArchiveRuleReqBody():Ref<UserStatsFieldsQueryArchiveRuleReqBody>
	export function refOfUserStatsFieldsQueryArchiveRuleReqBody(x:UserStatsFieldsQueryArchiveRuleReqBody,v:Ref<UserStatsFieldsQueryArchiveRuleReqBody>)
	export function unRefUserStatsFieldsQueryArchiveRuleReqBody(v:Ref<UserStatsFieldsQueryArchiveRuleReqBody>):UserStatsFieldsQueryArchiveRuleReqBody
	export function emptyUserStatsFieldsQueryArchiveRuleResp():UserStatsFieldsQueryArchiveRuleResp
	export function emptyRefUserStatsFieldsQueryArchiveRuleResp():Ref<UserStatsFieldsQueryArchiveRuleResp>
	export function refOfUserStatsFieldsQueryArchiveRuleResp(x:UserStatsFieldsQueryArchiveRuleResp,v:Ref<UserStatsFieldsQueryArchiveRuleResp>)
	export function unRefUserStatsFieldsQueryArchiveRuleResp(v:Ref<UserStatsFieldsQueryArchiveRuleResp>):UserStatsFieldsQueryArchiveRuleResp
	export function emptyUserDailyShift():UserDailyShift
	export function emptyRefUserDailyShift():Ref<UserDailyShift>
	export function refOfUserDailyShift(x:UserDailyShift,v:Ref<UserDailyShift>)
	export function unRefUserDailyShift(v:Ref<UserDailyShift>):UserDailyShift
	export function emptyArchiveReportData():ArchiveReportData
	export function emptyRefArchiveReportData():Ref<ArchiveReportData>
	export function refOfArchiveReportData(x:ArchiveReportData,v:Ref<ArchiveReportData>)
	export function unRefArchiveReportData(v:Ref<ArchiveReportData>):ArchiveReportData
	export function emptyCreateUserApprovalReq():CreateUserApprovalReq
	export function emptyRefCreateUserApprovalReq():Ref<CreateUserApprovalReq>
	export function refOfCreateUserApprovalReq(x:CreateUserApprovalReq,v:Ref<CreateUserApprovalReq>)
	export function unRefCreateUserApprovalReq(v:Ref<CreateUserApprovalReq>):CreateUserApprovalReq
	export function emptyShiftMiddleTimeRule():ShiftMiddleTimeRule
	export function emptyRefShiftMiddleTimeRule():Ref<ShiftMiddleTimeRule>
	export function refOfShiftMiddleTimeRule(x:ShiftMiddleTimeRule,v:Ref<ShiftMiddleTimeRule>)
	export function unRefShiftMiddleTimeRule(v:Ref<ShiftMiddleTimeRule>):ShiftMiddleTimeRule
	export function emptyGetGroupReq():GetGroupReq
	export function emptyRefGetGroupReq():Ref<GetGroupReq>
	export function refOfGetGroupReq(x:GetGroupReq,v:Ref<GetGroupReq>)
	export function unRefGetGroupReq(v:Ref<GetGroupReq>):GetGroupReq
	export function emptyUpdateUserStatsViewReqBody():UpdateUserStatsViewReqBody
	export function emptyRefUpdateUserStatsViewReqBody():Ref<UpdateUserStatsViewReqBody>
	export function refOfUpdateUserStatsViewReqBody(x:UpdateUserStatsViewReqBody,v:Ref<UpdateUserStatsViewReqBody>)
	export function unRefUpdateUserStatsViewReqBody(v:Ref<UpdateUserStatsViewReqBody>):UpdateUserStatsViewReqBody
	export function emptyGetUserFlowResp():GetUserFlowResp
	export function emptyRefGetUserFlowResp():Ref<GetUserFlowResp>
	export function refOfGetUserFlowResp(x:GetUserFlowResp,v:Ref<GetUserFlowResp>)
	export function unRefGetUserFlowResp(v:Ref<GetUserFlowResp>):GetUserFlowResp
	export function emptyLocationSetting():LocationSetting
	export function emptyRefLocationSetting():Ref<LocationSetting>
	export function refOfLocationSetting(x:LocationSetting,v:Ref<LocationSetting>)
	export function unRefLocationSetting(v:Ref<LocationSetting>):LocationSetting
	export function emptyOvertimeApplyDetail():OvertimeApplyDetail
	export function emptyRefOvertimeApplyDetail():Ref<OvertimeApplyDetail>
	export function refOfOvertimeApplyDetail(x:OvertimeApplyDetail,v:Ref<OvertimeApplyDetail>)
	export function unRefOvertimeApplyDetail(v:Ref<OvertimeApplyDetail>):OvertimeApplyDetail
	export function emptyApprovalInfo():ApprovalInfo
	export function emptyRefApprovalInfo():Ref<ApprovalInfo>
	export function refOfApprovalInfo(x:ApprovalInfo,v:Ref<ApprovalInfo>)
	export function unRefApprovalInfo(v:Ref<ApprovalInfo>):ApprovalInfo
	export function emptyGroup():Group
	export function emptyRefGroup():Ref<Group>
	export function refOfGroup(x:Group,v:Ref<Group>)
	export function unRefGroup(v:Ref<Group>):Group
	export function emptyListGroupResp():ListGroupResp
	export function emptyRefListGroupResp():Ref<ListGroupResp>
	export function refOfListGroupResp(x:ListGroupResp,v:Ref<ListGroupResp>)
	export function unRefListGroupResp(v:Ref<ListGroupResp>):ListGroupResp
	export function emptyUploadFileResp():UploadFileResp
	export function emptyRefUploadFileResp():Ref<UploadFileResp>
	export function refOfUploadFileResp(x:UploadFileResp,v:Ref<UploadFileResp>)
	export function unRefUploadFileResp(v:Ref<UploadFileResp>):UploadFileResp
	export function emptyOvertimeTimeRange():OvertimeTimeRange
	export function emptyRefOvertimeTimeRange():Ref<OvertimeTimeRange>
	export function refOfOvertimeTimeRange(x:OvertimeTimeRange,v:Ref<OvertimeTimeRange>)
	export function unRefOvertimeTimeRange(v:Ref<OvertimeTimeRange>):OvertimeTimeRange
	export function emptyQueryUserDailyShiftReq():QueryUserDailyShiftReq
	export function emptyRefQueryUserDailyShiftReq():Ref<QueryUserDailyShiftReq>
	export function refOfQueryUserDailyShiftReq(x:QueryUserDailyShiftReq,v:Ref<QueryUserDailyShiftReq>)
	export function unRefQueryUserDailyShiftReq(v:Ref<QueryUserDailyShiftReq>):QueryUserDailyShiftReq
	export function emptyQueryUserFlowReqBody():QueryUserFlowReqBody
	export function emptyRefQueryUserFlowReqBody():Ref<QueryUserFlowReqBody>
	export function refOfQueryUserFlowReqBody(x:QueryUserFlowReqBody,v:Ref<QueryUserFlowReqBody>)
	export function unRefQueryUserFlowReqBody(v:Ref<QueryUserFlowReqBody>):QueryUserFlowReqBody
	export function emptyReportValue():ReportValue
	export function emptyRefReportValue():Ref<ReportValue>
	export function refOfReportValue(x:ReportValue,v:Ref<ReportValue>)
	export function unRefReportValue(v:Ref<ReportValue>):ReportValue
	export function emptyUserStatsDataDuration():UserStatsDataDuration
	export function emptyRefUserStatsDataDuration():Ref<UserStatsDataDuration>
	export function refOfUserStatsDataDuration(x:UserStatsDataDuration,v:Ref<UserStatsDataDuration>)
	export function unRefUserStatsDataDuration(v:Ref<UserStatsDataDuration>):UserStatsDataDuration
	export function emptyGetShiftRespData():GetShiftRespData
	export function emptyRefGetShiftRespData():Ref<GetShiftRespData>
	export function refOfGetShiftRespData(x:GetShiftRespData,v:Ref<GetShiftRespData>)
	export function unRefGetShiftRespData(v:Ref<GetShiftRespData>):GetShiftRespData
	export function emptyGetLeaveEmployExpireRecordRespData():GetLeaveEmployExpireRecordRespData
	export function emptyRefGetLeaveEmployExpireRecordRespData():Ref<GetLeaveEmployExpireRecordRespData>
	export function refOfGetLeaveEmployExpireRecordRespData(x:GetLeaveEmployExpireRecordRespData,v:Ref<GetLeaveEmployExpireRecordRespData>)
	export function unRefGetLeaveEmployExpireRecordRespData(v:Ref<GetLeaveEmployExpireRecordRespData>):GetLeaveEmployExpireRecordRespData
	export function emptyOvertimeDetail():OvertimeDetail
	export function emptyRefOvertimeDetail():Ref<OvertimeDetail>
	export function refOfOvertimeDetail(x:OvertimeDetail,v:Ref<OvertimeDetail>)
	export function unRefOvertimeDetail(v:Ref<OvertimeDetail>):OvertimeDetail
	export function emptyMachine():Machine
	export function emptyRefMachine():Ref<Machine>
	export function refOfMachine(x:Machine,v:Ref<Machine>)
	export function unRefMachine(v:Ref<Machine>):Machine
	export function emptyOvertimeRule():OvertimeRule
	export function emptyRefOvertimeRule():Ref<OvertimeRule>
	export function refOfOvertimeRule(x:OvertimeRule,v:Ref<OvertimeRule>)
	export function unRefOvertimeRule(v:Ref<OvertimeRule>):OvertimeRule
	export function emptyQueryUserFlowReq():QueryUserFlowReq
	export function emptyRefQueryUserFlowReq():Ref<QueryUserFlowReq>
	export function refOfQueryUserFlowReq(x:QueryUserFlowReq,v:Ref<QueryUserFlowReq>)
	export function unRefQueryUserFlowReq(v:Ref<QueryUserFlowReq>):QueryUserFlowReq
	export function emptyQueryUserSettingRespData():QueryUserSettingRespData
	export function emptyRefQueryUserSettingRespData():Ref<QueryUserSettingRespData>
	export function refOfQueryUserSettingRespData(x:QueryUserSettingRespData,v:Ref<QueryUserSettingRespData>)
	export function unRefQueryUserSettingRespData(v:Ref<QueryUserSettingRespData>):QueryUserSettingRespData
	export function emptyUserAllowedRemedy():UserAllowedRemedy
	export function emptyRefUserAllowedRemedy():Ref<UserAllowedRemedy>
	export function refOfUserAllowedRemedy(x:UserAllowedRemedy,v:Ref<UserAllowedRemedy>)
	export function unRefUserAllowedRemedy(v:Ref<UserAllowedRemedy>):UserAllowedRemedy
	export function emptyGetShiftReq():GetShiftReq
	export function emptyRefGetShiftReq():Ref<GetShiftReq>
	export function refOfGetShiftReq(x:GetShiftReq,v:Ref<GetShiftReq>)
	export function unRefGetShiftReq(v:Ref<GetShiftReq>):GetShiftReq
	export function emptyBatchCreateUserDailyShiftResp():BatchCreateUserDailyShiftResp
	export function emptyRefBatchCreateUserDailyShiftResp():Ref<BatchCreateUserDailyShiftResp>
	export function refOfBatchCreateUserDailyShiftResp(x:BatchCreateUserDailyShiftResp,v:Ref<BatchCreateUserDailyShiftResp>)
	export function unRefBatchCreateUserDailyShiftResp(v:Ref<BatchCreateUserDailyShiftResp>):BatchCreateUserDailyShiftResp
	export function emptyUserStatsFieldsQueryArchiveRuleRespData():UserStatsFieldsQueryArchiveRuleRespData
	export function emptyRefUserStatsFieldsQueryArchiveRuleRespData():Ref<UserStatsFieldsQueryArchiveRuleRespData>
	export function refOfUserStatsFieldsQueryArchiveRuleRespData(x:UserStatsFieldsQueryArchiveRuleRespData,v:Ref<UserStatsFieldsQueryArchiveRuleRespData>)
	export function unRefUserStatsFieldsQueryArchiveRuleRespData(v:Ref<UserStatsFieldsQueryArchiveRuleRespData>):UserStatsFieldsQueryArchiveRuleRespData
	export function emptyUserArrangeShiftGroup():UserArrangeShiftGroup
	export function emptyRefUserArrangeShiftGroup():Ref<UserArrangeShiftGroup>
	export function refOfUserArrangeShiftGroup(x:UserArrangeShiftGroup,v:Ref<UserArrangeShiftGroup>)
	export function unRefUserArrangeShiftGroup(v:Ref<UserArrangeShiftGroup>):UserArrangeShiftGroup
	export function emptyModifyUserSettingResp():ModifyUserSettingResp
	export function emptyRefModifyUserSettingResp():Ref<ModifyUserSettingResp>
	export function refOfModifyUserSettingResp(x:ModifyUserSettingResp,v:Ref<ModifyUserSettingResp>)
	export function unRefModifyUserSettingResp(v:Ref<ModifyUserSettingResp>):ModifyUserSettingResp
	export function emptyOvertimeClockCfg():OvertimeClockCfg
	export function emptyRefOvertimeClockCfg():Ref<OvertimeClockCfg>
	export function refOfOvertimeClockCfg(x:OvertimeClockCfg,v:Ref<OvertimeClockCfg>)
	export function unRefOvertimeClockCfg(v:Ref<OvertimeClockCfg>):OvertimeClockCfg
	export function emptyProcessApprovalInfoReq():ProcessApprovalInfoReq
	export function emptyRefProcessApprovalInfoReq():Ref<ProcessApprovalInfoReq>
	export function refOfProcessApprovalInfoReq(x:ProcessApprovalInfoReq,v:Ref<ProcessApprovalInfoReq>)
	export function unRefProcessApprovalInfoReq(v:Ref<ProcessApprovalInfoReq>):ProcessApprovalInfoReq
	export function emptyUploadFileReq():UploadFileReq
	export function emptyRefUploadFileReq():Ref<UploadFileReq>
	export function refOfUploadFileReq(x:UploadFileReq,v:Ref<UploadFileReq>)
	export function unRefUploadFileReq(v:Ref<UploadFileReq>):UploadFileReq
	export function emptyUserStatsData():UserStatsData
	export function emptyRefUserStatsData():Ref<UserStatsData>
	export function refOfUserStatsData(x:UserStatsData,v:Ref<UserStatsData>)
	export function unRefUserStatsData(v:Ref<UserStatsData>):UserStatsData
	export function emptyGetGroupRespData():GetGroupRespData
	export function emptyRefGetGroupRespData():Ref<GetGroupRespData>
	export function refOfGetGroupRespData(x:GetGroupRespData,v:Ref<GetGroupRespData>)
	export function unRefGetGroupRespData(v:Ref<GetGroupRespData>):GetGroupRespData
	export function emptyGetLeaveEmployExpireRecordReqBody():GetLeaveEmployExpireRecordReqBody
	export function emptyRefGetLeaveEmployExpireRecordReqBody():Ref<GetLeaveEmployExpireRecordReqBody>
	export function refOfGetLeaveEmployExpireRecordReqBody(x:GetLeaveEmployExpireRecordReqBody,v:Ref<GetLeaveEmployExpireRecordReqBody>)
	export function unRefGetLeaveEmployExpireRecordReqBody(v:Ref<GetLeaveEmployExpireRecordReqBody>):GetLeaveEmployExpireRecordReqBody
	export function emptyListGroupReq():ListGroupReq
	export function emptyRefListGroupReq():Ref<ListGroupReq>
	export function refOfListGroupReq(x:ListGroupReq,v:Ref<ListGroupReq>)
	export function unRefListGroupReq(v:Ref<ListGroupReq>):ListGroupReq
	export function emptyScanWifiInfo():ScanWifiInfo
	export function emptyRefScanWifiInfo():Ref<ScanWifiInfo>
	export function refOfScanWifiInfo(x:ScanWifiInfo,v:Ref<ScanWifiInfo>)
	export function unRefScanWifiInfo(v:Ref<ScanWifiInfo>):ScanWifiInfo
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
}