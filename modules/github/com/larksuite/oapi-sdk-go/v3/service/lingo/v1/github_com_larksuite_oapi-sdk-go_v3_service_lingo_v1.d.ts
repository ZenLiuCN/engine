// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/lingo/v1'{

	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Nothing,error,float64,Ref,Struct,bool,int,Alias} from 'go'
	export interface Abbreviation extends Struct<Abbreviation>{

			id:Ref<string>
	}
	export interface AbbreviationBuilder extends Struct<AbbreviationBuilder>{

			id(id:string):Ref<AbbreviationBuilder>
			build():Ref<Abbreviation>
	}
	export interface AigcConfig extends Struct<AigcConfig>{

			needReview:Ref<bool>
			repoId:Ref<string>
	}
	export interface AigcConfigBuilder extends Struct<AigcConfigBuilder>{

			needReview(needReview:bool):Ref<AigcConfigBuilder>
			repoId(repoId:string):Ref<AigcConfigBuilder>
			build():Ref<AigcConfig>
	}
	export interface BaikeImage extends Struct<BaikeImage>{

			token:Ref<string>
	}
	export interface BaikeImageBuilder extends Struct<BaikeImageBuilder>{

			token(token:string):Ref<BaikeImageBuilder>
			build():Ref<BaikeImage>
	}
	export interface Classification extends Struct<Classification>{

			id:Ref<string>
			name:Ref<string>
			fatherId:Ref<string>
			i18nNames:Ref<I18nClsName>[]
	}
	export interface ClassificationBuilder extends Struct<ClassificationBuilder>{

			id(id:string):Ref<ClassificationBuilder>
			name(name:string):Ref<ClassificationBuilder>
			fatherId(fatherId:string):Ref<ClassificationBuilder>
			i18nNames(i18nNames:Ref<I18nClsName>[]):Ref<ClassificationBuilder>
			build():Ref<Classification>
	}
	export interface ClassificationFilter extends Struct<ClassificationFilter>{

			include:string[]
			exclude:string[]
	}
	export interface ClassificationFilterBuilder extends Struct<ClassificationFilterBuilder>{

			include(include:string[]):Ref<ClassificationFilterBuilder>
			exclude(exclude:string[]):Ref<ClassificationFilterBuilder>
			build():Ref<ClassificationFilter>
	}
	export interface CorrectError extends Error,Struct<CorrectError>{

			type:Ref<int>
			total:Ref<int>
			correctPairs:Ref<CorrectPair>[]
	}
	export interface CorrectErrorBuilder extends Struct<CorrectErrorBuilder>,Error{

			type(type_:int):Ref<CorrectErrorBuilder>
			total(total:int):Ref<CorrectErrorBuilder>
			correctPairs(correctPairs:Ref<CorrectPair>[]):Ref<CorrectErrorBuilder>
			build():Ref<CorrectError>
	}
	export interface CorrectInfo extends Struct<CorrectInfo>{

			correctTotal:Ref<int>
			eachdayCorrect:int[]
			grammarError:Ref<CorrectError>
			spellError:Ref<CorrectError>
			nounError:Ref<CorrectError>
			verbTenseError:Ref<CorrectError>
	}
	export interface CorrectInfoBuilder extends Struct<CorrectInfoBuilder>{

			correctTotal(correctTotal:int):Ref<CorrectInfoBuilder>
			eachdayCorrect(eachdayCorrect:int[]):Ref<CorrectInfoBuilder>
			grammarError(grammarError:Ref<CorrectError>):Ref<CorrectInfoBuilder>
			spellError(spellError:Ref<CorrectError>):Ref<CorrectInfoBuilder>
			nounError(nounError:Ref<CorrectError>):Ref<CorrectInfoBuilder>
			verbTenseError(verbTenseError:Ref<CorrectError>):Ref<CorrectInfoBuilder>
			build():Ref<CorrectInfo>
	}
	export interface CorrectPair extends Struct<CorrectPair>{

			sourceText:Ref<string>
			targetText:Ref<string>
			total:Ref<int>
	}
	export interface CorrectPairBuilder extends Struct<CorrectPairBuilder>{

			sourceText(sourceText:string):Ref<CorrectPairBuilder>
			targetText(targetText:string):Ref<CorrectPairBuilder>
			total(total:int):Ref<CorrectPairBuilder>
			build():Ref<CorrectPair>
	}
	export interface CreateDraftReq extends Struct<CreateDraftReq>{

			entity:Ref<Entity>
	}
	export interface CreateDraftReqBuilder extends Struct<CreateDraftReqBuilder>{

			repoId(repoId:string):Ref<CreateDraftReqBuilder>
			userIdType(userIdType:string):Ref<CreateDraftReqBuilder>
			entity(entity:Ref<Entity>):Ref<CreateDraftReqBuilder>
			build():Ref<CreateDraftReq>
	}
	export interface CreateDraftResp extends Struct<CreateDraftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateDraftRespData>
			success():bool
	}
	export interface CreateDraftRespData extends Struct<CreateDraftRespData>{

			draft:Ref<Draft>
	}
	export interface CreateEntityReq extends Struct<CreateEntityReq>{

			entity:Ref<Entity>
	}
	export interface CreateEntityReqBuilder extends Struct<CreateEntityReqBuilder>{

			repoId(repoId:string):Ref<CreateEntityReqBuilder>
			userIdType(userIdType:string):Ref<CreateEntityReqBuilder>
			entity(entity:Ref<Entity>):Ref<CreateEntityReqBuilder>
			build():Ref<CreateEntityReq>
	}
	export interface CreateEntityResp extends Struct<CreateEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateEntityRespData>
			success():bool
	}
	export interface CreateEntityRespData extends Struct<CreateEntityRespData>{

			entity:Ref<Entity>
	}
	export interface DeleteEntityReq extends Struct<DeleteEntityReq>{

	}
	export interface DeleteEntityReqBuilder extends Struct<DeleteEntityReqBuilder>{

			entityId(entityId:string):Ref<DeleteEntityReqBuilder>
			provider(provider:string):Ref<DeleteEntityReqBuilder>
			outerId(outerId:string):Ref<DeleteEntityReqBuilder>
			build():Ref<DeleteEntityReq>
	}
	export interface DeleteEntityResp extends Struct<DeleteEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface DisplayStatus extends Struct<DisplayStatus>{

			allowHighlight:Ref<bool>
			allowSearch:Ref<bool>
	}
	export interface DisplayStatusBuilder extends Struct<DisplayStatusBuilder>{

			allowHighlight(allowHighlight:bool):Ref<DisplayStatusBuilder>
			allowSearch(allowSearch:bool):Ref<DisplayStatusBuilder>
			build():Ref<DisplayStatus>
	}
	export interface DocBullet extends Struct<DocBullet>{

			text:Ref<string>
	}
	export interface DocBulletBuilder extends Struct<DocBulletBuilder>{

			text(text:string):Ref<DocBulletBuilder>
			build():Ref<DocBullet>
	}
	export interface DocCode extends Struct<DocCode>{

			text:Ref<string>
	}
	export interface DocCodeBuilder extends Struct<DocCodeBuilder>{

			text(text:string):Ref<DocCodeBuilder>
			build():Ref<DocCode>
	}
	export interface DocContainer extends Alias<Nothing>{

	}
	export interface DocContent extends Struct<DocContent>{

			id:Ref<string>
			children:string[]
			contentType:Ref<int>
			text:Ref<DocText>
			heading:Ref<DocHeading>
			bullet:Ref<DocBullet>
			ordered:Ref<DocRodered>
			code:Ref<DocCode>
			link:Ref<DocLink>
			image:Ref<DocImage>
			user:Ref<DocUser>
			divider:Ref<DocDivider>
			container:Ref<DocContainer>
	}
	export interface DocContentBuilder extends Struct<DocContentBuilder>{

			id(id:string):Ref<DocContentBuilder>
			children(children:string[]):Ref<DocContentBuilder>
			contentType(contentType:int):Ref<DocContentBuilder>
			text(text:Ref<DocText>):Ref<DocContentBuilder>
			heading(heading:Ref<DocHeading>):Ref<DocContentBuilder>
			bullet(bullet:Ref<DocBullet>):Ref<DocContentBuilder>
			ordered(ordered:Ref<DocRodered>):Ref<DocContentBuilder>
			code(code:Ref<DocCode>):Ref<DocContentBuilder>
			link(link:Ref<DocLink>):Ref<DocContentBuilder>
			image(image:Ref<DocImage>):Ref<DocContentBuilder>
			user(user:Ref<DocUser>):Ref<DocContentBuilder>
			divider(divider:Ref<DocDivider>):Ref<DocContentBuilder>
			container(container:Ref<DocContainer>):Ref<DocContentBuilder>
			build():Ref<DocContent>
	}
	export interface DocData extends Struct<DocData>{

			docToken:Ref<string>
			createdAt:Ref<string>
			updatedAt:Ref<string>
			docContents:Ref<DocContent>[]
			rootContentId:Ref<string>
	}
	export interface DocDataBuilder extends Struct<DocDataBuilder>{

			docToken(docToken:string):Ref<DocDataBuilder>
			createdAt(createdAt:string):Ref<DocDataBuilder>
			updatedAt(updatedAt:string):Ref<DocDataBuilder>
			docContents(docContents:Ref<DocContent>[]):Ref<DocDataBuilder>
			rootContentId(rootContentId:string):Ref<DocDataBuilder>
			build():Ref<DocData>
	}
	export interface DocDivider extends Alias<Nothing>{

	}
	export interface DocHeading extends Struct<DocHeading>{

			text:Ref<string>
			headingLevel:Ref<int>
	}
	export interface DocHeadingBuilder extends Struct<DocHeadingBuilder>{

			text(text:string):Ref<DocHeadingBuilder>
			headingLevel(headingLevel:int):Ref<DocHeadingBuilder>
			build():Ref<DocHeading>
	}
	export interface DocImage extends Struct<DocImage>{

			imageKey:Ref<string>
	}
	export interface DocImageBuilder extends Struct<DocImageBuilder>{

			imageKey(imageKey:string):Ref<DocImageBuilder>
			build():Ref<DocImage>
	}
	export interface DocLink extends Struct<DocLink>{

			title:Ref<string>
			url:Ref<string>
	}
	export interface DocLinkBuilder extends Struct<DocLinkBuilder>{

			title(title:string):Ref<DocLinkBuilder>
			url(url:string):Ref<DocLinkBuilder>
			build():Ref<DocLink>
	}
	export interface DocRodered extends Struct<DocRodered>{

			text:Ref<string>
	}
	export interface DocRoderedBuilder extends Struct<DocRoderedBuilder>{

			text(text:string):Ref<DocRoderedBuilder>
			build():Ref<DocRodered>
	}
	export interface DocText extends Struct<DocText>{

			text:Ref<string>
	}
	export interface DocTextBuilder extends Struct<DocTextBuilder>{

			text(text:string):Ref<DocTextBuilder>
			build():Ref<DocText>
	}
	export interface DocUser extends Struct<DocUser>{

			userId:Ref<string>
	}
	export interface DocUserBuilder extends Struct<DocUserBuilder>{

			userId(userId:string):Ref<DocUserBuilder>
			build():Ref<DocUser>
	}
	export interface DownloadFileReq extends Struct<DownloadFileReq>{

	}
	export interface DownloadFileReqBuilder extends Struct<DownloadFileReqBuilder>{

			fileToken(fileToken:string):Ref<DownloadFileReqBuilder>
			build():Ref<DownloadFileReq>
	}
	export interface DownloadFileResp extends Struct<DownloadFileResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			file:io.Reader
			fileName:string
			success():bool
			writeFile(fileName:string)/*error*/
	}
	export interface Draft extends Struct<Draft>{

			draftId:Ref<string>
			entity:Ref<Entity>
	}
	export interface DraftBuilder extends Struct<DraftBuilder>{

			draftId(draftId:string):Ref<DraftBuilder>
			entity(entity:Ref<Entity>):Ref<DraftBuilder>
			build():Ref<Draft>
	}
	export interface Entity extends Struct<Entity>{

			id:Ref<string>
			mainKeys:Ref<Term>[]
			aliases:Ref<Term>[]
			description:Ref<string>
			creator:Ref<string>
			createTime:Ref<string>
			updater:Ref<string>
			updateTime:Ref<string>
			relatedMeta:Ref<RelatedMeta>
			statistics:Ref<Statistics>
			outerInfo:Ref<OuterInfo>
			richText:Ref<string>
			source:Ref<int>
			i18nDescs:Ref<I18nEntryDesc>[]
	}
	export interface EntityBuilder extends Struct<EntityBuilder>{

			id(id:string):Ref<EntityBuilder>
			mainKeys(mainKeys:Ref<Term>[]):Ref<EntityBuilder>
			aliases(aliases:Ref<Term>[]):Ref<EntityBuilder>
			description(description:string):Ref<EntityBuilder>
			creator(creator:string):Ref<EntityBuilder>
			createTime(createTime:string):Ref<EntityBuilder>
			updater(updater:string):Ref<EntityBuilder>
			updateTime(updateTime:string):Ref<EntityBuilder>
			relatedMeta(relatedMeta:Ref<RelatedMeta>):Ref<EntityBuilder>
			statistics(statistics:Ref<Statistics>):Ref<EntityBuilder>
			outerInfo(outerInfo:Ref<OuterInfo>):Ref<EntityBuilder>
			richText(richText:string):Ref<EntityBuilder>
			source(source:int):Ref<EntityBuilder>
			i18nDescs(i18nDescs:Ref<I18nEntryDesc>[]):Ref<EntityBuilder>
			build():Ref<Entity>
	}
	export interface EntityCardData extends Struct<EntityCardData>{

			card:Ref<string>
			id:Ref<string>
			key:Ref<string>
			cardType:Ref<int>
			templateName:Ref<string>
	}
	export interface EntityCardDataBuilder extends Struct<EntityCardDataBuilder>{

			card(card:string):Ref<EntityCardDataBuilder>
			id(id:string):Ref<EntityCardDataBuilder>
			key(key:string):Ref<EntityCardDataBuilder>
			cardType(cardType:int):Ref<EntityCardDataBuilder>
			templateName(templateName:string):Ref<EntityCardDataBuilder>
			build():Ref<EntityCardData>
	}
	export interface EntityWord extends Struct<EntityWord>{

			name:Ref<string>
			aliases:string[]
	}
	export interface EntityWordBuilder extends Struct<EntityWordBuilder>{

			name(name:string):Ref<EntityWordBuilder>
			aliases(aliases:string[]):Ref<EntityWordBuilder>
			build():Ref<EntityWord>
	}
	export interface File extends Struct<File>{

			name:Ref<string>
			file:io.Reader
	}
	export interface FileBuilder extends Struct<FileBuilder>{

			name(name:string):Ref<FileBuilder>
			file(file:io.Reader):Ref<FileBuilder>
			build():Ref<File>
	}
	export interface GetEntityReq extends Struct<GetEntityReq>{

	}
	export interface GetEntityReqBuilder extends Struct<GetEntityReqBuilder>{

			entityId(entityId:string):Ref<GetEntityReqBuilder>
			provider(provider:string):Ref<GetEntityReqBuilder>
			outerId(outerId:string):Ref<GetEntityReqBuilder>
			userIdType(userIdType:string):Ref<GetEntityReqBuilder>
			build():Ref<GetEntityReq>
	}
	export interface GetEntityResp extends Struct<GetEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetEntityRespData>
			success():bool
	}
	export interface GetEntityRespData extends Struct<GetEntityRespData>{

			entity:Ref<Entity>
	}
	export interface HighlightEntityPathReqBodyBuilder extends Struct<HighlightEntityPathReqBodyBuilder>{

			text(text:string):Ref<HighlightEntityPathReqBodyBuilder>
			build():Ref<HighlightEntityReqBody>
	}
	export interface HighlightEntityReq extends Struct<HighlightEntityReq>{

			body:Ref<HighlightEntityReqBody>
	}
	export interface HighlightEntityReqBody extends Struct<HighlightEntityReqBody>{

			text:Ref<string>
	}
	export interface HighlightEntityReqBodyBuilder extends Struct<HighlightEntityReqBodyBuilder>{

			text(text:string):Ref<HighlightEntityReqBodyBuilder>
			build():Ref<HighlightEntityReqBody>
	}
	export interface HighlightEntityReqBuilder extends Struct<HighlightEntityReqBuilder>{

			body(body:Ref<HighlightEntityReqBody>):Ref<HighlightEntityReqBuilder>
			build():Ref<HighlightEntityReq>
	}
	export interface HighlightEntityResp extends Struct<HighlightEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<HighlightEntityRespData>
			success():bool
	}
	export interface HighlightEntityRespData extends Struct<HighlightEntityRespData>{

			phrases:Ref<Phrase>[]
	}
	export interface I18nClsName extends Struct<I18nClsName>{

			language:Ref<int>
			name:Ref<string>
	}
	export interface I18nClsNameBuilder extends Struct<I18nClsNameBuilder>{

			language(language:int):Ref<I18nClsNameBuilder>
			name(name:string):Ref<I18nClsNameBuilder>
			build():Ref<I18nClsName>
	}
	export interface I18nEntryDesc extends Struct<I18nEntryDesc>{

			language:Ref<int>
			description:Ref<string>
			richText:Ref<string>
	}
	export interface I18nEntryDescBuilder extends Struct<I18nEntryDescBuilder>{

			language(language:int):Ref<I18nEntryDescBuilder>
			description(description:string):Ref<I18nEntryDescBuilder>
			richText(richText:string):Ref<I18nEntryDescBuilder>
			build():Ref<I18nEntryDesc>
	}
	export interface ListClassificationIterator extends Struct<ListClassificationIterator>{

			next():[bool,Ref<Classification>]
			nextPageToken():Ref<string>
	}
	export interface ListClassificationReq extends Struct<ListClassificationReq>{

			limit:int
	}
	export interface ListClassificationReqBuilder extends Struct<ListClassificationReqBuilder>{

			limit(limit:int):Ref<ListClassificationReqBuilder>
			pageSize(pageSize:int):Ref<ListClassificationReqBuilder>
			pageToken(pageToken:string):Ref<ListClassificationReqBuilder>
			repoId(repoId:string):Ref<ListClassificationReqBuilder>
			build():Ref<ListClassificationReq>
	}
	export interface ListClassificationResp extends Struct<ListClassificationResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListClassificationRespData>
			success():bool
	}
	export interface ListClassificationRespData extends Struct<ListClassificationRespData>{

			items:Ref<Classification>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListEntityIterator extends Struct<ListEntityIterator>{

			next():[bool,Ref<Entity>]
			nextPageToken():Ref<string>
	}
	export interface ListEntityReq extends Struct<ListEntityReq>{

			limit:int
	}
	export interface ListEntityReqBuilder extends Struct<ListEntityReqBuilder>{

			limit(limit:int):Ref<ListEntityReqBuilder>
			pageSize(pageSize:int):Ref<ListEntityReqBuilder>
			pageToken(pageToken:string):Ref<ListEntityReqBuilder>
			provider(provider:string):Ref<ListEntityReqBuilder>
			repoId(repoId:string):Ref<ListEntityReqBuilder>
			userIdType(userIdType:string):Ref<ListEntityReqBuilder>
			build():Ref<ListEntityReq>
	}
	export interface ListEntityResp extends Struct<ListEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListEntityRespData>
			success():bool
	}
	export interface ListEntityRespData extends Struct<ListEntityRespData>{

			entities:Ref<Entity>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListRepoResp extends Struct<ListRepoResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListRepoRespData>
			success():bool
	}
	export interface ListRepoRespData extends Struct<ListRepoRespData>{

			items:Ref<Repo>[]
	}
	export interface MatchEntityPathReqBodyBuilder extends Struct<MatchEntityPathReqBodyBuilder>{

			word(word:string):Ref<MatchEntityPathReqBodyBuilder>
			build():Ref<MatchEntityReqBody>
	}
	export interface MatchEntityReq extends Struct<MatchEntityReq>{

			body:Ref<MatchEntityReqBody>
	}
	export interface MatchEntityReqBody extends Struct<MatchEntityReqBody>{

			word:Ref<string>
	}
	export interface MatchEntityReqBodyBuilder extends Struct<MatchEntityReqBodyBuilder>{

			word(word:string):Ref<MatchEntityReqBodyBuilder>
			build():Ref<MatchEntityReqBody>
	}
	export interface MatchEntityReqBuilder extends Struct<MatchEntityReqBuilder>{

			repoId(repoId:string):Ref<MatchEntityReqBuilder>
			body(body:Ref<MatchEntityReqBody>):Ref<MatchEntityReqBuilder>
			build():Ref<MatchEntityReq>
	}
	export interface MatchEntityResp extends Struct<MatchEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<MatchEntityRespData>
			success():bool
	}
	export interface MatchEntityRespData extends Struct<MatchEntityRespData>{

			results:Ref<MatchInfo>[]
	}
	export interface MatchInfo extends Struct<MatchInfo>{

			entityId:Ref<string>
			type:Ref<int>
	}
	export interface MatchInfoBuilder extends Struct<MatchInfoBuilder>{

			entityId(entityId:string):Ref<MatchInfoBuilder>
			type(type_:int):Ref<MatchInfoBuilder>
			build():Ref<MatchInfo>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAbbreviationBuilder():Ref<AbbreviationBuilder>

	export function newAigcConfigBuilder():Ref<AigcConfigBuilder>

	export function newBaikeImageBuilder():Ref<BaikeImageBuilder>

	export function newClassificationBuilder():Ref<ClassificationBuilder>

	export function newClassificationFilterBuilder():Ref<ClassificationFilterBuilder>

	export function newCorrectErrorBuilder():Ref<CorrectErrorBuilder>

	export function newCorrectInfoBuilder():Ref<CorrectInfoBuilder>

	export function newCorrectPairBuilder():Ref<CorrectPairBuilder>

	export function newCreateDraftReqBuilder():Ref<CreateDraftReqBuilder>

	export function newCreateEntityReqBuilder():Ref<CreateEntityReqBuilder>

	export function newDeleteEntityReqBuilder():Ref<DeleteEntityReqBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDisplayStatusBuilder():Ref<DisplayStatusBuilder>

	export function newDocBulletBuilder():Ref<DocBulletBuilder>

	export function newDocCodeBuilder():Ref<DocCodeBuilder>

	export function newDocContentBuilder():Ref<DocContentBuilder>

	export function newDocDataBuilder():Ref<DocDataBuilder>

	export function newDocHeadingBuilder():Ref<DocHeadingBuilder>

	export function newDocImageBuilder():Ref<DocImageBuilder>

	export function newDocLinkBuilder():Ref<DocLinkBuilder>

	export function newDocRoderedBuilder():Ref<DocRoderedBuilder>

	export function newDocTextBuilder():Ref<DocTextBuilder>

	export function newDocUserBuilder():Ref<DocUserBuilder>

	export function newDownloadFileReqBuilder():Ref<DownloadFileReqBuilder>

	export function newDraftBuilder():Ref<DraftBuilder>

	export function newEntityBuilder():Ref<EntityBuilder>

	export function newEntityCardDataBuilder():Ref<EntityCardDataBuilder>

	export function newEntityWordBuilder():Ref<EntityWordBuilder>

	export function newFileBuilder():Ref<FileBuilder>

	export function newGetEntityReqBuilder():Ref<GetEntityReqBuilder>

	export function newHighlightEntityPathReqBodyBuilder():Ref<HighlightEntityPathReqBodyBuilder>

	export function newHighlightEntityReqBodyBuilder():Ref<HighlightEntityReqBodyBuilder>

	export function newHighlightEntityReqBuilder():Ref<HighlightEntityReqBuilder>

	export function newI18nClsNameBuilder():Ref<I18nClsNameBuilder>

	export function newI18nEntryDescBuilder():Ref<I18nEntryDescBuilder>

	export function newListClassificationReqBuilder():Ref<ListClassificationReqBuilder>

	export function newListEntityReqBuilder():Ref<ListEntityReqBuilder>

	export function newMatchEntityPathReqBodyBuilder():Ref<MatchEntityPathReqBodyBuilder>

	export function newMatchEntityReqBodyBuilder():Ref<MatchEntityReqBodyBuilder>

	export function newMatchEntityReqBuilder():Ref<MatchEntityReqBuilder>

	export function newMatchInfoBuilder():Ref<MatchInfoBuilder>

	export function newOuterInfoBuilder():Ref<OuterInfoBuilder>

	export function newPhraseBuilder():Ref<PhraseBuilder>

	export function newRefererBuilder():Ref<RefererBuilder>

	export function newRelatedMetaBuilder():Ref<RelatedMetaBuilder>

	export function newRepoBuilder():Ref<RepoBuilder>

	export function newSearchEntityPathReqBodyBuilder():Ref<SearchEntityPathReqBodyBuilder>

	export function newSearchEntityReqBodyBuilder():Ref<SearchEntityReqBodyBuilder>

	export function newSearchEntityReqBuilder():Ref<SearchEntityReqBuilder>

	export function newSpanBuilder():Ref<SpanBuilder>

	export function newStatisticalReportBuilder():Ref<StatisticalReportBuilder>

	export function newStatisticsBuilder():Ref<StatisticsBuilder>

	export function newTermBuilder():Ref<TermBuilder>

	export function newUpdateDraftReqBuilder():Ref<UpdateDraftReqBuilder>

	export function newUpdateEntityReqBuilder():Ref<UpdateEntityReqBuilder>

	export function newUploadFileReqBuilder():Ref<UploadFileReqBuilder>

	export function newWordInfoBuilder():Ref<WordInfoBuilder>

	export interface OuterInfo extends Struct<OuterInfo>{

			provider:Ref<string>
			outerId:Ref<string>
	}
	export interface OuterInfoBuilder extends Struct<OuterInfoBuilder>{

			provider(provider:string):Ref<OuterInfoBuilder>
			outerId(outerId:string):Ref<OuterInfoBuilder>
			build():Ref<OuterInfo>
	}
	export interface Phrase extends Struct<Phrase>{

			name:Ref<string>
			entityIds:string[]
			span:Ref<Span>
	}
	export interface PhraseBuilder extends Struct<PhraseBuilder>{

			name(name:string):Ref<PhraseBuilder>
			entityIds(entityIds:string[]):Ref<PhraseBuilder>
			span(span:Ref<Span>):Ref<PhraseBuilder>
			build():Ref<Phrase>
	}
	export interface Referer extends Struct<Referer>{

			id:Ref<string>
			title:Ref<string>
			url:Ref<string>
	}
	export interface RefererBuilder extends Struct<RefererBuilder>{

			id(id:string):Ref<RefererBuilder>
			title(title:string):Ref<RefererBuilder>
			url(url:string):Ref<RefererBuilder>
			build():Ref<Referer>
	}
	export interface RelatedMeta extends Struct<RelatedMeta>{

			users:Ref<Referer>[]
			chats:Ref<Referer>[]
			docs:Ref<Referer>[]
			oncalls:Ref<Referer>[]
			links:Ref<Referer>[]
			abbreviations:Ref<Abbreviation>[]
			classifications:Ref<Classification>[]
			images:Ref<BaikeImage>[]
	}
	export interface RelatedMetaBuilder extends Struct<RelatedMetaBuilder>{

			users(users:Ref<Referer>[]):Ref<RelatedMetaBuilder>
			chats(chats:Ref<Referer>[]):Ref<RelatedMetaBuilder>
			docs(docs:Ref<Referer>[]):Ref<RelatedMetaBuilder>
			oncalls(oncalls:Ref<Referer>[]):Ref<RelatedMetaBuilder>
			links(links:Ref<Referer>[]):Ref<RelatedMetaBuilder>
			abbreviations(abbreviations:Ref<Abbreviation>[]):Ref<RelatedMetaBuilder>
			classifications(classifications:Ref<Classification>[]):Ref<RelatedMetaBuilder>
			images(images:Ref<BaikeImage>[]):Ref<RelatedMetaBuilder>
			build():Ref<RelatedMeta>
	}
	export interface Repo extends Struct<Repo>{

			id:Ref<string>
			name:Ref<string>
	}
	export interface RepoBuilder extends Struct<RepoBuilder>{

			id(id:string):Ref<RepoBuilder>
			name(name:string):Ref<RepoBuilder>
			build():Ref<Repo>
	}
	export interface SearchEntityIterator extends Struct<SearchEntityIterator>{

			next():[bool,Ref<Entity>]
			nextPageToken():Ref<string>
	}
	export interface SearchEntityPathReqBodyBuilder extends Struct<SearchEntityPathReqBodyBuilder>{

			query(query:string):Ref<SearchEntityPathReqBodyBuilder>
			classificationFilter(classificationFilter:Ref<ClassificationFilter>):Ref<SearchEntityPathReqBodyBuilder>
			sources(sources:int[]):Ref<SearchEntityPathReqBodyBuilder>
			creators(creators:string[]):Ref<SearchEntityPathReqBodyBuilder>
			build():Ref<SearchEntityReqBody>
	}
	export interface SearchEntityReq extends Struct<SearchEntityReq>{

			body:Ref<SearchEntityReqBody>
			limit:int
	}
	export interface SearchEntityReqBody extends Struct<SearchEntityReqBody>{

			query:Ref<string>
			classificationFilter:Ref<ClassificationFilter>
			sources:int[]
			creators:string[]
	}
	export interface SearchEntityReqBodyBuilder extends Struct<SearchEntityReqBodyBuilder>{

			query(query:string):Ref<SearchEntityReqBodyBuilder>
			classificationFilter(classificationFilter:Ref<ClassificationFilter>):Ref<SearchEntityReqBodyBuilder>
			sources(sources:int[]):Ref<SearchEntityReqBodyBuilder>
			creators(creators:string[]):Ref<SearchEntityReqBodyBuilder>
			build():Ref<SearchEntityReqBody>
	}
	export interface SearchEntityReqBuilder extends Struct<SearchEntityReqBuilder>{

			limit(limit:int):Ref<SearchEntityReqBuilder>
			pageSize(pageSize:int):Ref<SearchEntityReqBuilder>
			pageToken(pageToken:string):Ref<SearchEntityReqBuilder>
			repoId(repoId:string):Ref<SearchEntityReqBuilder>
			userIdType(userIdType:string):Ref<SearchEntityReqBuilder>
			body(body:Ref<SearchEntityReqBody>):Ref<SearchEntityReqBuilder>
			build():Ref<SearchEntityReq>
	}
	export interface SearchEntityResp extends Struct<SearchEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SearchEntityRespData>
			success():bool
	}
	export interface SearchEntityRespData extends Struct<SearchEntityRespData>{

			entities:Ref<Entity>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface Span extends Struct<Span>{

			start:Ref<int>
			end:Ref<int>
	}
	export interface SpanBuilder extends Struct<SpanBuilder>{

			start(start:int):Ref<SpanBuilder>
			end(end:int):Ref<SpanBuilder>
			build():Ref<Span>
	}
	export interface StatisticalReport extends Struct<StatisticalReport>{

			dateInterval:Ref<int>
			wordInfo:Ref<WordInfo>
			correctInfo:Ref<CorrectInfo>
			updateDate:Ref<string>
	}
	export interface StatisticalReportBuilder extends Struct<StatisticalReportBuilder>{

			dateInterval(dateInterval:int):Ref<StatisticalReportBuilder>
			wordInfo(wordInfo:Ref<WordInfo>):Ref<StatisticalReportBuilder>
			correctInfo(correctInfo:Ref<CorrectInfo>):Ref<StatisticalReportBuilder>
			updateDate(updateDate:string):Ref<StatisticalReportBuilder>
			build():Ref<StatisticalReport>
	}
	export interface Statistics extends Struct<Statistics>{

			likeCount:Ref<int>
			dislikeCount:Ref<int>
	}
	export interface StatisticsBuilder extends Struct<StatisticsBuilder>{

			likeCount(likeCount:int):Ref<StatisticsBuilder>
			dislikeCount(dislikeCount:int):Ref<StatisticsBuilder>
			build():Ref<Statistics>
	}
	export interface Term extends Struct<Term>{

			key:Ref<string>
			displayStatus:Ref<DisplayStatus>
	}
	export interface TermBuilder extends Struct<TermBuilder>{

			key(key:string):Ref<TermBuilder>
			displayStatus(displayStatus:Ref<DisplayStatus>):Ref<TermBuilder>
			build():Ref<Term>
	}
	export interface UpdateDraftReq extends Struct<UpdateDraftReq>{

			entity:Ref<Entity>
	}
	export interface UpdateDraftReqBuilder extends Struct<UpdateDraftReqBuilder>{

			draftId(draftId:string):Ref<UpdateDraftReqBuilder>
			userIdType(userIdType:string):Ref<UpdateDraftReqBuilder>
			entity(entity:Ref<Entity>):Ref<UpdateDraftReqBuilder>
			build():Ref<UpdateDraftReq>
	}
	export interface UpdateDraftResp extends Struct<UpdateDraftResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateDraftRespData>
			success():bool
	}
	export interface UpdateDraftRespData extends Struct<UpdateDraftRespData>{

			draft:Ref<Draft>
	}
	export interface UpdateEntityReq extends Struct<UpdateEntityReq>{

			entity:Ref<Entity>
	}
	export interface UpdateEntityReqBuilder extends Struct<UpdateEntityReqBuilder>{

			entityId(entityId:string):Ref<UpdateEntityReqBuilder>
			userIdType(userIdType:string):Ref<UpdateEntityReqBuilder>
			entity(entity:Ref<Entity>):Ref<UpdateEntityReqBuilder>
			build():Ref<UpdateEntityReq>
	}
	export interface UpdateEntityResp extends Struct<UpdateEntityResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UpdateEntityRespData>
			success():bool
	}
	export interface UpdateEntityRespData extends Struct<UpdateEntityRespData>{

			entity:Ref<Entity>
	}
	export interface UploadFileReq extends Struct<UploadFileReq>{

			file:Ref<File>
	}
	export interface UploadFileReqBuilder extends Struct<UploadFileReqBuilder>{

			file(file:Ref<File>):Ref<UploadFileReqBuilder>
			build():Ref<UploadFileReq>
	}
	export interface UploadFileResp extends Struct<UploadFileResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UploadFileRespData>
			success():bool
	}
	export interface UploadFileRespData extends Struct<UploadFileRespData>{

			fileToken:Ref<string>
	}
	//"open_id"
	export const UserIdTypeCreateEntityOpenId:string
	//"union_id"
	export const UserIdTypeCreateEntityUnionId:string
	//"user_id"
	export const UserIdTypeCreateEntityUserId:string
	//"open_id"
	export const UserIdTypeGetEntityOpenId:string
	//"union_id"
	export const UserIdTypeGetEntityUnionId:string
	//"user_id"
	export const UserIdTypeGetEntityUserId:string
	//"open_id"
	export const UserIdTypeListEntityOpenId:string
	//"union_id"
	export const UserIdTypeListEntityUnionId:string
	//"user_id"
	export const UserIdTypeListEntityUserId:string
	//"open_id"
	export const UserIdTypeOpenId:string
	//"open_id"
	export const UserIdTypeSearchEntityOpenId:string
	//"union_id"
	export const UserIdTypeSearchEntityUnionId:string
	//"user_id"
	export const UserIdTypeSearchEntityUserId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"open_id"
	export const UserIdTypeUpdateDraftOpenId:string
	//"union_id"
	export const UserIdTypeUpdateDraftUnionId:string
	//"user_id"
	export const UserIdTypeUpdateDraftUserId:string
	//"open_id"
	export const UserIdTypeUpdateEntityOpenId:string
	//"union_id"
	export const UserIdTypeUpdateEntityUnionId:string
	//"user_id"
	export const UserIdTypeUpdateEntityUserId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V1 extends Struct<V1>{

			classification:Ref<{
			
				list(ctx:context.Context,req:Ref<ListClassificationReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListClassificationResp>
				listByIterator(ctx:context.Context,req:Ref<ListClassificationReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListClassificationIterator>
			}>
			draft:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateDraftReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateDraftResp>
				update(ctx:context.Context,req:Ref<UpdateDraftReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateDraftResp>
			}>
			entity:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateEntityResp>
				delete(ctx:context.Context,req:Ref<DeleteEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteEntityResp>
				get(ctx:context.Context,req:Ref<GetEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetEntityResp>
				highlight(ctx:context.Context,req:Ref<HighlightEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<HighlightEntityResp>
				list(ctx:context.Context,req:Ref<ListEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListEntityResp>
				listByIterator(ctx:context.Context,req:Ref<ListEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListEntityIterator>
				match(ctx:context.Context,req:Ref<MatchEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<MatchEntityResp>
				search(ctx:context.Context,req:Ref<SearchEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchEntityResp>
				searchByIterator(ctx:context.Context,req:Ref<SearchEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchEntityIterator>
				update(ctx:context.Context,req:Ref<UpdateEntityReq>,...options:larkcore.RequestOptionFunc[]):Ref<UpdateEntityResp>
			}>
			file:Ref<{
			
				download(ctx:context.Context,req:Ref<DownloadFileReq>,...options:larkcore.RequestOptionFunc[]):Ref<DownloadFileResp>
				upload(ctx:context.Context,req:Ref<UploadFileReq>,...options:larkcore.RequestOptionFunc[]):Ref<UploadFileResp>
			}>
			repo:Ref<{
			
				list(ctx:context.Context,...options:larkcore.RequestOptionFunc[]):Ref<ListRepoResp>
			}>
	}
	export interface WordInfo extends Struct<WordInfo>{

			inputTotal:Ref<int>
			dedupInputTotal:Ref<int>
			eachdayInput:int[]
			eachdayDedupInput:int[]
			sendMessageTotal:Ref<int>
			sendEnMessageTotal:Ref<int>
			receiveMessageTotal:Ref<int>
			receiveEnMessageTotal:Ref<int>
			historyWordsTotal:Ref<int>
			newWordsTotal:Ref<int>
			eachdaySendEnMessage:int[]
			eachdaySendMessage:int[]
			eachdayReceiveEnMessage:int[]
			eachdayReceiveMessage:int[]
			sendEngMessageRateRingGrowth:Ref<float64>
			sendEngWordsRingGrowth:Ref<int>
	}
	export interface WordInfoBuilder extends Struct<WordInfoBuilder>{

			inputTotal(inputTotal:int):Ref<WordInfoBuilder>
			dedupInputTotal(dedupInputTotal:int):Ref<WordInfoBuilder>
			eachdayInput(eachdayInput:int[]):Ref<WordInfoBuilder>
			eachdayDedupInput(eachdayDedupInput:int[]):Ref<WordInfoBuilder>
			sendMessageTotal(sendMessageTotal:int):Ref<WordInfoBuilder>
			sendEnMessageTotal(sendEnMessageTotal:int):Ref<WordInfoBuilder>
			receiveMessageTotal(receiveMessageTotal:int):Ref<WordInfoBuilder>
			receiveEnMessageTotal(receiveEnMessageTotal:int):Ref<WordInfoBuilder>
			historyWordsTotal(historyWordsTotal:int):Ref<WordInfoBuilder>
			newWordsTotal(newWordsTotal:int):Ref<WordInfoBuilder>
			eachdaySendEnMessage(eachdaySendEnMessage:int[]):Ref<WordInfoBuilder>
			eachdaySendMessage(eachdaySendMessage:int[]):Ref<WordInfoBuilder>
			eachdayReceiveEnMessage(eachdayReceiveEnMessage:int[]):Ref<WordInfoBuilder>
			eachdayReceiveMessage(eachdayReceiveMessage:int[]):Ref<WordInfoBuilder>
			sendEngMessageRateRingGrowth(sendEngMessageRateRingGrowth:float64):Ref<WordInfoBuilder>
			sendEngWordsRingGrowth(sendEngWordsRingGrowth:int):Ref<WordInfoBuilder>
			build():Ref<WordInfo>
	}
	export function emptySpan():Span
	export function emptyRefSpan():Ref<Span>
	export function refOfSpan(x:Span,v:Ref<Span>)
	export function unRefSpan(v:Ref<Span>):Span
	export function emptyStatistics():Statistics
	export function emptyRefStatistics():Ref<Statistics>
	export function refOfStatistics(x:Statistics,v:Ref<Statistics>)
	export function unRefStatistics(v:Ref<Statistics>):Statistics
	export function emptyCorrectPair():CorrectPair
	export function emptyRefCorrectPair():Ref<CorrectPair>
	export function refOfCorrectPair(x:CorrectPair,v:Ref<CorrectPair>)
	export function unRefCorrectPair(v:Ref<CorrectPair>):CorrectPair
	export function emptyDocImage():DocImage
	export function emptyRefDocImage():Ref<DocImage>
	export function refOfDocImage(x:DocImage,v:Ref<DocImage>)
	export function unRefDocImage(v:Ref<DocImage>):DocImage
	export function emptyDocUser():DocUser
	export function emptyRefDocUser():Ref<DocUser>
	export function refOfDocUser(x:DocUser,v:Ref<DocUser>)
	export function unRefDocUser(v:Ref<DocUser>):DocUser
	export function emptyStatisticalReport():StatisticalReport
	export function emptyRefStatisticalReport():Ref<StatisticalReport>
	export function refOfStatisticalReport(x:StatisticalReport,v:Ref<StatisticalReport>)
	export function unRefStatisticalReport(v:Ref<StatisticalReport>):StatisticalReport
	export function emptyCorrectInfo():CorrectInfo
	export function emptyRefCorrectInfo():Ref<CorrectInfo>
	export function refOfCorrectInfo(x:CorrectInfo,v:Ref<CorrectInfo>)
	export function unRefCorrectInfo(v:Ref<CorrectInfo>):CorrectInfo
	export function emptyPhrase():Phrase
	export function emptyRefPhrase():Ref<Phrase>
	export function refOfPhrase(x:Phrase,v:Ref<Phrase>)
	export function unRefPhrase(v:Ref<Phrase>):Phrase
	export function emptyI18nClsName():I18nClsName
	export function emptyRefI18nClsName():Ref<I18nClsName>
	export function refOfI18nClsName(x:I18nClsName,v:Ref<I18nClsName>)
	export function unRefI18nClsName(v:Ref<I18nClsName>):I18nClsName
	export function emptyDownloadFileResp():DownloadFileResp
	export function emptyRefDownloadFileResp():Ref<DownloadFileResp>
	export function refOfDownloadFileResp(x:DownloadFileResp,v:Ref<DownloadFileResp>)
	export function unRefDownloadFileResp(v:Ref<DownloadFileResp>):DownloadFileResp
	export function emptyListClassificationIterator():ListClassificationIterator
	export function emptyRefListClassificationIterator():Ref<ListClassificationIterator>
	export function refOfListClassificationIterator(x:ListClassificationIterator,v:Ref<ListClassificationIterator>)
	export function unRefListClassificationIterator(v:Ref<ListClassificationIterator>):ListClassificationIterator
	export function emptyListEntityIterator():ListEntityIterator
	export function emptyRefListEntityIterator():Ref<ListEntityIterator>
	export function refOfListEntityIterator(x:ListEntityIterator,v:Ref<ListEntityIterator>)
	export function unRefListEntityIterator(v:Ref<ListEntityIterator>):ListEntityIterator
	export function emptyMatchEntityRespData():MatchEntityRespData
	export function emptyRefMatchEntityRespData():Ref<MatchEntityRespData>
	export function refOfMatchEntityRespData(x:MatchEntityRespData,v:Ref<MatchEntityRespData>)
	export function unRefMatchEntityRespData(v:Ref<MatchEntityRespData>):MatchEntityRespData
	export function emptyUploadFileResp():UploadFileResp
	export function emptyRefUploadFileResp():Ref<UploadFileResp>
	export function refOfUploadFileResp(x:UploadFileResp,v:Ref<UploadFileResp>)
	export function unRefUploadFileResp(v:Ref<UploadFileResp>):UploadFileResp
	export function emptyHighlightEntityReq():HighlightEntityReq
	export function emptyRefHighlightEntityReq():Ref<HighlightEntityReq>
	export function refOfHighlightEntityReq(x:HighlightEntityReq,v:Ref<HighlightEntityReq>)
	export function unRefHighlightEntityReq(v:Ref<HighlightEntityReq>):HighlightEntityReq
	export function emptyUpdateDraftResp():UpdateDraftResp
	export function emptyRefUpdateDraftResp():Ref<UpdateDraftResp>
	export function refOfUpdateDraftResp(x:UpdateDraftResp,v:Ref<UpdateDraftResp>)
	export function unRefUpdateDraftResp(v:Ref<UpdateDraftResp>):UpdateDraftResp
	export function emptyBaikeImage():BaikeImage
	export function emptyRefBaikeImage():Ref<BaikeImage>
	export function refOfBaikeImage(x:BaikeImage,v:Ref<BaikeImage>)
	export function unRefBaikeImage(v:Ref<BaikeImage>):BaikeImage
	export function emptyEntityCardData():EntityCardData
	export function emptyRefEntityCardData():Ref<EntityCardData>
	export function refOfEntityCardData(x:EntityCardData,v:Ref<EntityCardData>)
	export function unRefEntityCardData(v:Ref<EntityCardData>):EntityCardData
	export function emptyMatchEntityReq():MatchEntityReq
	export function emptyRefMatchEntityReq():Ref<MatchEntityReq>
	export function refOfMatchEntityReq(x:MatchEntityReq,v:Ref<MatchEntityReq>)
	export function unRefMatchEntityReq(v:Ref<MatchEntityReq>):MatchEntityReq
	export function emptyMatchEntityReqBody():MatchEntityReqBody
	export function emptyRefMatchEntityReqBody():Ref<MatchEntityReqBody>
	export function refOfMatchEntityReqBody(x:MatchEntityReqBody,v:Ref<MatchEntityReqBody>)
	export function unRefMatchEntityReqBody(v:Ref<MatchEntityReqBody>):MatchEntityReqBody
	export function emptyAbbreviation():Abbreviation
	export function emptyRefAbbreviation():Ref<Abbreviation>
	export function refOfAbbreviation(x:Abbreviation,v:Ref<Abbreviation>)
	export function unRefAbbreviation(v:Ref<Abbreviation>):Abbreviation
	export function emptyListRepoRespData():ListRepoRespData
	export function emptyRefListRepoRespData():Ref<ListRepoRespData>
	export function refOfListRepoRespData(x:ListRepoRespData,v:Ref<ListRepoRespData>)
	export function unRefListRepoRespData(v:Ref<ListRepoRespData>):ListRepoRespData
	export function emptySearchEntityResp():SearchEntityResp
	export function emptyRefSearchEntityResp():Ref<SearchEntityResp>
	export function refOfSearchEntityResp(x:SearchEntityResp,v:Ref<SearchEntityResp>)
	export function unRefSearchEntityResp(v:Ref<SearchEntityResp>):SearchEntityResp
	export function emptySearchEntityReqBody():SearchEntityReqBody
	export function emptyRefSearchEntityReqBody():Ref<SearchEntityReqBody>
	export function refOfSearchEntityReqBody(x:SearchEntityReqBody,v:Ref<SearchEntityReqBody>)
	export function unRefSearchEntityReqBody(v:Ref<SearchEntityReqBody>):SearchEntityReqBody
	export function emptyUpdateDraftRespData():UpdateDraftRespData
	export function emptyRefUpdateDraftRespData():Ref<UpdateDraftRespData>
	export function refOfUpdateDraftRespData(x:UpdateDraftRespData,v:Ref<UpdateDraftRespData>)
	export function unRefUpdateDraftRespData(v:Ref<UpdateDraftRespData>):UpdateDraftRespData
	export function emptySearchEntityIterator():SearchEntityIterator
	export function emptyRefSearchEntityIterator():Ref<SearchEntityIterator>
	export function refOfSearchEntityIterator(x:SearchEntityIterator,v:Ref<SearchEntityIterator>)
	export function unRefSearchEntityIterator(v:Ref<SearchEntityIterator>):SearchEntityIterator
	export function emptyDocText():DocText
	export function emptyRefDocText():Ref<DocText>
	export function refOfDocText(x:DocText,v:Ref<DocText>)
	export function unRefDocText(v:Ref<DocText>):DocText
	export function emptyI18nEntryDesc():I18nEntryDesc
	export function emptyRefI18nEntryDesc():Ref<I18nEntryDesc>
	export function refOfI18nEntryDesc(x:I18nEntryDesc,v:Ref<I18nEntryDesc>)
	export function unRefI18nEntryDesc(v:Ref<I18nEntryDesc>):I18nEntryDesc
	export function emptyClassificationFilter():ClassificationFilter
	export function emptyRefClassificationFilter():Ref<ClassificationFilter>
	export function refOfClassificationFilter(x:ClassificationFilter,v:Ref<ClassificationFilter>)
	export function unRefClassificationFilter(v:Ref<ClassificationFilter>):ClassificationFilter
	export function emptyDocCode():DocCode
	export function emptyRefDocCode():Ref<DocCode>
	export function refOfDocCode(x:DocCode,v:Ref<DocCode>)
	export function unRefDocCode(v:Ref<DocCode>):DocCode
	export function emptyHighlightEntityRespData():HighlightEntityRespData
	export function emptyRefHighlightEntityRespData():Ref<HighlightEntityRespData>
	export function refOfHighlightEntityRespData(x:HighlightEntityRespData,v:Ref<HighlightEntityRespData>)
	export function unRefHighlightEntityRespData(v:Ref<HighlightEntityRespData>):HighlightEntityRespData
	export function emptyListClassificationResp():ListClassificationResp
	export function emptyRefListClassificationResp():Ref<ListClassificationResp>
	export function refOfListClassificationResp(x:ListClassificationResp,v:Ref<ListClassificationResp>)
	export function unRefListClassificationResp(v:Ref<ListClassificationResp>):ListClassificationResp
	export function emptyListClassificationRespData():ListClassificationRespData
	export function emptyRefListClassificationRespData():Ref<ListClassificationRespData>
	export function refOfListClassificationRespData(x:ListClassificationRespData,v:Ref<ListClassificationRespData>)
	export function unRefListClassificationRespData(v:Ref<ListClassificationRespData>):ListClassificationRespData
	export function emptyMatchEntityResp():MatchEntityResp
	export function emptyRefMatchEntityResp():Ref<MatchEntityResp>
	export function refOfMatchEntityResp(x:MatchEntityResp,v:Ref<MatchEntityResp>)
	export function unRefMatchEntityResp(v:Ref<MatchEntityResp>):MatchEntityResp
	export function emptyRepo():Repo
	export function emptyRefRepo():Ref<Repo>
	export function refOfRepo(x:Repo,v:Ref<Repo>)
	export function unRefRepo(v:Ref<Repo>):Repo
	export function emptyDocRodered():DocRodered
	export function emptyRefDocRodered():Ref<DocRodered>
	export function refOfDocRodered(x:DocRodered,v:Ref<DocRodered>)
	export function unRefDocRodered(v:Ref<DocRodered>):DocRodered
	export function emptyGetEntityReq():GetEntityReq
	export function emptyRefGetEntityReq():Ref<GetEntityReq>
	export function refOfGetEntityReq(x:GetEntityReq,v:Ref<GetEntityReq>)
	export function unRefGetEntityReq(v:Ref<GetEntityReq>):GetEntityReq
	export function emptyListEntityRespData():ListEntityRespData
	export function emptyRefListEntityRespData():Ref<ListEntityRespData>
	export function refOfListEntityRespData(x:ListEntityRespData,v:Ref<ListEntityRespData>)
	export function unRefListEntityRespData(v:Ref<ListEntityRespData>):ListEntityRespData
	export function emptyClassification():Classification
	export function emptyRefClassification():Ref<Classification>
	export function refOfClassification(x:Classification,v:Ref<Classification>)
	export function unRefClassification(v:Ref<Classification>):Classification
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyUploadFileReq():UploadFileReq
	export function emptyRefUploadFileReq():Ref<UploadFileReq>
	export function refOfUploadFileReq(x:UploadFileReq,v:Ref<UploadFileReq>)
	export function unRefUploadFileReq(v:Ref<UploadFileReq>):UploadFileReq
	export function emptyDownloadFileReq():DownloadFileReq
	export function emptyRefDownloadFileReq():Ref<DownloadFileReq>
	export function refOfDownloadFileReq(x:DownloadFileReq,v:Ref<DownloadFileReq>)
	export function unRefDownloadFileReq(v:Ref<DownloadFileReq>):DownloadFileReq
	export function emptyDocData():DocData
	export function emptyRefDocData():Ref<DocData>
	export function refOfDocData(x:DocData,v:Ref<DocData>)
	export function unRefDocData(v:Ref<DocData>):DocData
	export function emptyGetEntityResp():GetEntityResp
	export function emptyRefGetEntityResp():Ref<GetEntityResp>
	export function refOfGetEntityResp(x:GetEntityResp,v:Ref<GetEntityResp>)
	export function unRefGetEntityResp(v:Ref<GetEntityResp>):GetEntityResp
	export function emptyGetEntityRespData():GetEntityRespData
	export function emptyRefGetEntityRespData():Ref<GetEntityRespData>
	export function refOfGetEntityRespData(x:GetEntityRespData,v:Ref<GetEntityRespData>)
	export function unRefGetEntityRespData(v:Ref<GetEntityRespData>):GetEntityRespData
	export function emptyDisplayStatus():DisplayStatus
	export function emptyRefDisplayStatus():Ref<DisplayStatus>
	export function refOfDisplayStatus(x:DisplayStatus,v:Ref<DisplayStatus>)
	export function unRefDisplayStatus(v:Ref<DisplayStatus>):DisplayStatus
	export function emptyDeleteEntityResp():DeleteEntityResp
	export function emptyRefDeleteEntityResp():Ref<DeleteEntityResp>
	export function refOfDeleteEntityResp(x:DeleteEntityResp,v:Ref<DeleteEntityResp>)
	export function unRefDeleteEntityResp(v:Ref<DeleteEntityResp>):DeleteEntityResp
	export function emptyListEntityReq():ListEntityReq
	export function emptyRefListEntityReq():Ref<ListEntityReq>
	export function refOfListEntityReq(x:ListEntityReq,v:Ref<ListEntityReq>)
	export function unRefListEntityReq(v:Ref<ListEntityReq>):ListEntityReq
	export function emptyReferer():Referer
	export function emptyRefReferer():Ref<Referer>
	export function refOfReferer(x:Referer,v:Ref<Referer>)
	export function unRefReferer(v:Ref<Referer>):Referer
	export function emptySearchEntityReq():SearchEntityReq
	export function emptyRefSearchEntityReq():Ref<SearchEntityReq>
	export function refOfSearchEntityReq(x:SearchEntityReq,v:Ref<SearchEntityReq>)
	export function unRefSearchEntityReq(v:Ref<SearchEntityReq>):SearchEntityReq
	export function emptyCreateEntityResp():CreateEntityResp
	export function emptyRefCreateEntityResp():Ref<CreateEntityResp>
	export function refOfCreateEntityResp(x:CreateEntityResp,v:Ref<CreateEntityResp>)
	export function unRefCreateEntityResp(v:Ref<CreateEntityResp>):CreateEntityResp
	export function emptySearchEntityRespData():SearchEntityRespData
	export function emptyRefSearchEntityRespData():Ref<SearchEntityRespData>
	export function refOfSearchEntityRespData(x:SearchEntityRespData,v:Ref<SearchEntityRespData>)
	export function unRefSearchEntityRespData(v:Ref<SearchEntityRespData>):SearchEntityRespData
	export function emptyDocContent():DocContent
	export function emptyRefDocContent():Ref<DocContent>
	export function refOfDocContent(x:DocContent,v:Ref<DocContent>)
	export function unRefDocContent(v:Ref<DocContent>):DocContent
	export function emptyEntity():Entity
	export function emptyRefEntity():Ref<Entity>
	export function refOfEntity(x:Entity,v:Ref<Entity>)
	export function unRefEntity(v:Ref<Entity>):Entity
	export function emptyAigcConfig():AigcConfig
	export function emptyRefAigcConfig():Ref<AigcConfig>
	export function refOfAigcConfig(x:AigcConfig,v:Ref<AigcConfig>)
	export function unRefAigcConfig(v:Ref<AigcConfig>):AigcConfig
	export function emptyUpdateEntityReq():UpdateEntityReq
	export function emptyRefUpdateEntityReq():Ref<UpdateEntityReq>
	export function refOfUpdateEntityReq(x:UpdateEntityReq,v:Ref<UpdateEntityReq>)
	export function unRefUpdateEntityReq(v:Ref<UpdateEntityReq>):UpdateEntityReq
	export function emptyCreateEntityRespData():CreateEntityRespData
	export function emptyRefCreateEntityRespData():Ref<CreateEntityRespData>
	export function refOfCreateEntityRespData(x:CreateEntityRespData,v:Ref<CreateEntityRespData>)
	export function unRefCreateEntityRespData(v:Ref<CreateEntityRespData>):CreateEntityRespData
	export function emptyEntityWord():EntityWord
	export function emptyRefEntityWord():Ref<EntityWord>
	export function refOfEntityWord(x:EntityWord,v:Ref<EntityWord>)
	export function unRefEntityWord(v:Ref<EntityWord>):EntityWord
	export function emptyUpdateEntityResp():UpdateEntityResp
	export function emptyRefUpdateEntityResp():Ref<UpdateEntityResp>
	export function refOfUpdateEntityResp(x:UpdateEntityResp,v:Ref<UpdateEntityResp>)
	export function unRefUpdateEntityResp(v:Ref<UpdateEntityResp>):UpdateEntityResp
	export function emptyCreateDraftRespData():CreateDraftRespData
	export function emptyRefCreateDraftRespData():Ref<CreateDraftRespData>
	export function refOfCreateDraftRespData(x:CreateDraftRespData,v:Ref<CreateDraftRespData>)
	export function unRefCreateDraftRespData(v:Ref<CreateDraftRespData>):CreateDraftRespData
	export function emptyDeleteEntityReq():DeleteEntityReq
	export function emptyRefDeleteEntityReq():Ref<DeleteEntityReq>
	export function refOfDeleteEntityReq(x:DeleteEntityReq,v:Ref<DeleteEntityReq>)
	export function unRefDeleteEntityReq(v:Ref<DeleteEntityReq>):DeleteEntityReq
	export function emptyDocLink():DocLink
	export function emptyRefDocLink():Ref<DocLink>
	export function refOfDocLink(x:DocLink,v:Ref<DocLink>)
	export function unRefDocLink(v:Ref<DocLink>):DocLink
	export function emptyUpdateDraftReq():UpdateDraftReq
	export function emptyRefUpdateDraftReq():Ref<UpdateDraftReq>
	export function refOfUpdateDraftReq(x:UpdateDraftReq,v:Ref<UpdateDraftReq>)
	export function unRefUpdateDraftReq(v:Ref<UpdateDraftReq>):UpdateDraftReq
	export function emptyCreateDraftReq():CreateDraftReq
	export function emptyRefCreateDraftReq():Ref<CreateDraftReq>
	export function refOfCreateDraftReq(x:CreateDraftReq,v:Ref<CreateDraftReq>)
	export function unRefCreateDraftReq(v:Ref<CreateDraftReq>):CreateDraftReq
	export function emptyListEntityResp():ListEntityResp
	export function emptyRefListEntityResp():Ref<ListEntityResp>
	export function refOfListEntityResp(x:ListEntityResp,v:Ref<ListEntityResp>)
	export function unRefListEntityResp(v:Ref<ListEntityResp>):ListEntityResp
	export function emptyRelatedMeta():RelatedMeta
	export function emptyRefRelatedMeta():Ref<RelatedMeta>
	export function refOfRelatedMeta(x:RelatedMeta,v:Ref<RelatedMeta>)
	export function unRefRelatedMeta(v:Ref<RelatedMeta>):RelatedMeta
	export function emptyFile():File
	export function emptyRefFile():Ref<File>
	export function refOfFile(x:File,v:Ref<File>)
	export function unRefFile(v:Ref<File>):File
	export function emptyListClassificationReq():ListClassificationReq
	export function emptyRefListClassificationReq():Ref<ListClassificationReq>
	export function refOfListClassificationReq(x:ListClassificationReq,v:Ref<ListClassificationReq>)
	export function unRefListClassificationReq(v:Ref<ListClassificationReq>):ListClassificationReq
	export function emptyUpdateEntityRespData():UpdateEntityRespData
	export function emptyRefUpdateEntityRespData():Ref<UpdateEntityRespData>
	export function refOfUpdateEntityRespData(x:UpdateEntityRespData,v:Ref<UpdateEntityRespData>)
	export function unRefUpdateEntityRespData(v:Ref<UpdateEntityRespData>):UpdateEntityRespData
	export function emptyCreateDraftResp():CreateDraftResp
	export function emptyRefCreateDraftResp():Ref<CreateDraftResp>
	export function refOfCreateDraftResp(x:CreateDraftResp,v:Ref<CreateDraftResp>)
	export function unRefCreateDraftResp(v:Ref<CreateDraftResp>):CreateDraftResp
	export function emptyDocHeading():DocHeading
	export function emptyRefDocHeading():Ref<DocHeading>
	export function refOfDocHeading(x:DocHeading,v:Ref<DocHeading>)
	export function unRefDocHeading(v:Ref<DocHeading>):DocHeading
	export function emptyDocBullet():DocBullet
	export function emptyRefDocBullet():Ref<DocBullet>
	export function refOfDocBullet(x:DocBullet,v:Ref<DocBullet>)
	export function unRefDocBullet(v:Ref<DocBullet>):DocBullet
	export function emptyListRepoResp():ListRepoResp
	export function emptyRefListRepoResp():Ref<ListRepoResp>
	export function refOfListRepoResp(x:ListRepoResp,v:Ref<ListRepoResp>)
	export function unRefListRepoResp(v:Ref<ListRepoResp>):ListRepoResp
	export function emptyMatchInfo():MatchInfo
	export function emptyRefMatchInfo():Ref<MatchInfo>
	export function refOfMatchInfo(x:MatchInfo,v:Ref<MatchInfo>)
	export function unRefMatchInfo(v:Ref<MatchInfo>):MatchInfo
	export function emptyTerm():Term
	export function emptyRefTerm():Ref<Term>
	export function refOfTerm(x:Term,v:Ref<Term>)
	export function unRefTerm(v:Ref<Term>):Term
	export function emptyUploadFileRespData():UploadFileRespData
	export function emptyRefUploadFileRespData():Ref<UploadFileRespData>
	export function refOfUploadFileRespData(x:UploadFileRespData,v:Ref<UploadFileRespData>)
	export function unRefUploadFileRespData(v:Ref<UploadFileRespData>):UploadFileRespData
	export function emptyDraft():Draft
	export function emptyRefDraft():Ref<Draft>
	export function refOfDraft(x:Draft,v:Ref<Draft>)
	export function unRefDraft(v:Ref<Draft>):Draft
	export function emptyHighlightEntityReqBody():HighlightEntityReqBody
	export function emptyRefHighlightEntityReqBody():Ref<HighlightEntityReqBody>
	export function refOfHighlightEntityReqBody(x:HighlightEntityReqBody,v:Ref<HighlightEntityReqBody>)
	export function unRefHighlightEntityReqBody(v:Ref<HighlightEntityReqBody>):HighlightEntityReqBody
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyOuterInfo():OuterInfo
	export function emptyRefOuterInfo():Ref<OuterInfo>
	export function refOfOuterInfo(x:OuterInfo,v:Ref<OuterInfo>)
	export function unRefOuterInfo(v:Ref<OuterInfo>):OuterInfo
	export function emptyCreateEntityReq():CreateEntityReq
	export function emptyRefCreateEntityReq():Ref<CreateEntityReq>
	export function refOfCreateEntityReq(x:CreateEntityReq,v:Ref<CreateEntityReq>)
	export function unRefCreateEntityReq(v:Ref<CreateEntityReq>):CreateEntityReq
	export function emptyWordInfo():WordInfo
	export function emptyRefWordInfo():Ref<WordInfo>
	export function refOfWordInfo(x:WordInfo,v:Ref<WordInfo>)
	export function unRefWordInfo(v:Ref<WordInfo>):WordInfo
	export function emptyHighlightEntityResp():HighlightEntityResp
	export function emptyRefHighlightEntityResp():Ref<HighlightEntityResp>
	export function refOfHighlightEntityResp(x:HighlightEntityResp,v:Ref<HighlightEntityResp>)
	export function unRefHighlightEntityResp(v:Ref<HighlightEntityResp>):HighlightEntityResp
}