// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/corehr/v1'{

	// @ts-ignore
	import * as larkevent from 'github.com/larksuite/oapi-sdk-go/v3/event'
	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Nothing,float64,Ref,bool,Struct,int,error,Alias} from 'go'
	export interface Address extends Struct<Address>{

			fullAddressLocalScript:Ref<string>
			fullAddressWesternScript:Ref<string>
			id:Ref<string>
			countryRegionId:Ref<string>
			regionId:Ref<string>
			cityId:Ref<string>
			distinctId:Ref<string>
			cityIdV2:Ref<string>
			districtIdV2:Ref<string>
			localAddressLine1:Ref<string>
			localAddressLine2:Ref<string>
			localAddressLine3:Ref<string>
			localAddressLine4:Ref<string>
			localAddressLine5:Ref<string>
			localAddressLine6:Ref<string>
			localAddressLine7:Ref<string>
			localAddressLine8:Ref<string>
			localAddressLine9:Ref<string>
			postalCode:Ref<string>
			addressTypeList:Ref<Enum>[]
			isPrimary:Ref<bool>
			isPublic:Ref<bool>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface AddressBuilder extends Struct<AddressBuilder>{

			fullAddressLocalScript(fullAddressLocalScript:string):Ref<AddressBuilder>
			fullAddressWesternScript(fullAddressWesternScript:string):Ref<AddressBuilder>
			id(id:string):Ref<AddressBuilder>
			countryRegionId(countryRegionId:string):Ref<AddressBuilder>
			regionId(regionId:string):Ref<AddressBuilder>
			cityId(cityId:string):Ref<AddressBuilder>
			distinctId(distinctId:string):Ref<AddressBuilder>
			cityIdV2(cityIdV2:string):Ref<AddressBuilder>
			districtIdV2(districtIdV2:string):Ref<AddressBuilder>
			localAddressLine1(localAddressLine1:string):Ref<AddressBuilder>
			localAddressLine2(localAddressLine2:string):Ref<AddressBuilder>
			localAddressLine3(localAddressLine3:string):Ref<AddressBuilder>
			localAddressLine4(localAddressLine4:string):Ref<AddressBuilder>
			localAddressLine5(localAddressLine5:string):Ref<AddressBuilder>
			localAddressLine6(localAddressLine6:string):Ref<AddressBuilder>
			localAddressLine7(localAddressLine7:string):Ref<AddressBuilder>
			localAddressLine8(localAddressLine8:string):Ref<AddressBuilder>
			localAddressLine9(localAddressLine9:string):Ref<AddressBuilder>
			postalCode(postalCode:string):Ref<AddressBuilder>
			addressTypeList(addressTypeList:Ref<Enum>[]):Ref<AddressBuilder>
			isPrimary(isPrimary:bool):Ref<AddressBuilder>
			isPublic(isPublic:bool):Ref<AddressBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<AddressBuilder>
			build():Ref<Address>
	}
	export interface ApplicationInfo extends Struct<ApplicationInfo>{

			applyInitiatorId:Ref<string>
			applyInitiatingTime:Ref<string>
			applyFinishTime:Ref<string>
			processId:Ref<string>
	}
	export interface ApplicationInfoBuilder extends Struct<ApplicationInfoBuilder>{

			applyInitiatorId(applyInitiatorId:string):Ref<ApplicationInfoBuilder>
			applyInitiatingTime(applyInitiatingTime:string):Ref<ApplicationInfoBuilder>
			applyFinishTime(applyFinishTime:string):Ref<ApplicationInfoBuilder>
			processId(processId:string):Ref<ApplicationInfoBuilder>
			build():Ref<ApplicationInfo>
	}
	export interface AssignedOrganization extends Struct<AssignedOrganization>{

			orgKey:Ref<string>
			orgName:Ref<Name>
			orgIdList:string[]
	}
	export interface AssignedOrganizationBuilder extends Struct<AssignedOrganizationBuilder>{

			orgKey(orgKey:string):Ref<AssignedOrganizationBuilder>
			orgName(orgName:Ref<Name>):Ref<AssignedOrganizationBuilder>
			orgIdList(orgIdList:string[]):Ref<AssignedOrganizationBuilder>
			build():Ref<AssignedOrganization>
	}
	export interface AssignedOrganizationWithCode extends Struct<AssignedOrganizationWithCode>{

			orgKey:Ref<string>
			orgIds:string[]
			orgCodes:string[]
	}
	export interface AssignedOrganizationWithCodeBuilder extends Struct<AssignedOrganizationWithCodeBuilder>{

			orgKey(orgKey:string):Ref<AssignedOrganizationWithCodeBuilder>
			orgIds(orgIds:string[]):Ref<AssignedOrganizationWithCodeBuilder>
			orgCodes(orgCodes:string[]):Ref<AssignedOrganizationWithCodeBuilder>
			build():Ref<AssignedOrganizationWithCode>
	}
	export interface AttachmentFieldSetting extends Struct<AttachmentFieldSetting>{

			isMultiple:Ref<bool>
			fileType:Ref<int>
	}
	export interface AttachmentFieldSettingBuilder extends Struct<AttachmentFieldSettingBuilder>{

			isMultiple(isMultiple:bool):Ref<AttachmentFieldSettingBuilder>
			fileType(fileType:int):Ref<AttachmentFieldSettingBuilder>
			build():Ref<AttachmentFieldSetting>
	}
	export interface BackgroundCheck extends Struct<BackgroundCheck>{

			id:Ref<string>
			package:Ref<int>
			status:Ref<int>
			createdTime:Ref<string>
			modifiedTime:Ref<string>
			targetId:Ref<string>
			outcome:Ref<int>
			report:Ref<BackgroundCheckReportObject>
	}
	export interface BackgroundCheckBuilder extends Struct<BackgroundCheckBuilder>{

			id(id:string):Ref<BackgroundCheckBuilder>
			package(package_:int):Ref<BackgroundCheckBuilder>
			status(status:int):Ref<BackgroundCheckBuilder>
			createdTime(createdTime:string):Ref<BackgroundCheckBuilder>
			modifiedTime(modifiedTime:string):Ref<BackgroundCheckBuilder>
			targetId(targetId:string):Ref<BackgroundCheckBuilder>
			outcome(outcome:int):Ref<BackgroundCheckBuilder>
			report(report:Ref<BackgroundCheckReportObject>):Ref<BackgroundCheckBuilder>
			build():Ref<BackgroundCheck>
	}
	export interface BackgroundCheckCity extends Struct<BackgroundCheckCity>{

			zhCn:Ref<string>
			enUs:Ref<string>
	}
	export interface BackgroundCheckCityBuilder extends Struct<BackgroundCheckCityBuilder>{

			zhCn(zhCn:string):Ref<BackgroundCheckCityBuilder>
			enUs(enUs:string):Ref<BackgroundCheckCityBuilder>
			build():Ref<BackgroundCheckCity>
	}
	export interface BackgroundCheckCountry extends Struct<BackgroundCheckCountry>{

			zhCn:Ref<string>
			enUs:Ref<string>
	}
	export interface BackgroundCheckCountryBuilder extends Struct<BackgroundCheckCountryBuilder>{

			zhCn(zhCn:string):Ref<BackgroundCheckCountryBuilder>
			enUs(enUs:string):Ref<BackgroundCheckCountryBuilder>
			build():Ref<BackgroundCheckCountry>
	}
	export interface BackgroundCheckReportObject extends Struct<BackgroundCheckReportObject>{

			url:Ref<string>
	}
	export interface BackgroundCheckReportObjectBuilder extends Struct<BackgroundCheckReportObjectBuilder>{

			url(url:string):Ref<BackgroundCheckReportObjectBuilder>
			build():Ref<BackgroundCheckReportObject>
	}
	export interface BackgroundCheckTarget extends Struct<BackgroundCheckTarget>{

			id:Ref<string>
			firstName:Ref<string>
			lastName:Ref<string>
			email:Ref<string>
			workCountry:Ref<BackgroundCheckCountry>
			workCity:Ref<BackgroundCheckCity>
			jobTitle:Ref<string>
			offerHrEmail:Ref<string>
			bizUnit:Ref<string>
			offerHrDepartmentId:Ref<string>
	}
	export interface BackgroundCheckTargetBuilder extends Struct<BackgroundCheckTargetBuilder>{

			id(id:string):Ref<BackgroundCheckTargetBuilder>
			firstName(firstName:string):Ref<BackgroundCheckTargetBuilder>
			lastName(lastName:string):Ref<BackgroundCheckTargetBuilder>
			email(email:string):Ref<BackgroundCheckTargetBuilder>
			workCountry(workCountry:Ref<BackgroundCheckCountry>):Ref<BackgroundCheckTargetBuilder>
			workCity(workCity:Ref<BackgroundCheckCity>):Ref<BackgroundCheckTargetBuilder>
			jobTitle(jobTitle:string):Ref<BackgroundCheckTargetBuilder>
			offerHrEmail(offerHrEmail:string):Ref<BackgroundCheckTargetBuilder>
			bizUnit(bizUnit:string):Ref<BackgroundCheckTargetBuilder>
			offerHrDepartmentId(offerHrDepartmentId:string):Ref<BackgroundCheckTargetBuilder>
			build():Ref<BackgroundCheckTarget>
	}
	export interface BankAccount extends Struct<BankAccount>{

			bankName:Ref<string>
			bankAccountNumber:Ref<string>
			accountHolder:Ref<string>
			bank:Ref<Enum>
			branchName:Ref<string>
			bankIdV2:Ref<string>
			branchIdV2:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			countryRegionId:Ref<string>
			bankAccountUsage:Ref<Enum>[]
			bankAccountType:Ref<Enum>
			currencyId:Ref<string>
	}
	export interface BankAccountBuilder extends Struct<BankAccountBuilder>{

			bankName(bankName:string):Ref<BankAccountBuilder>
			bankAccountNumber(bankAccountNumber:string):Ref<BankAccountBuilder>
			accountHolder(accountHolder:string):Ref<BankAccountBuilder>
			bank(bank:Ref<Enum>):Ref<BankAccountBuilder>
			branchName(branchName:string):Ref<BankAccountBuilder>
			bankIdV2(bankIdV2:string):Ref<BankAccountBuilder>
			branchIdV2(branchIdV2:string):Ref<BankAccountBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<BankAccountBuilder>
			countryRegionId(countryRegionId:string):Ref<BankAccountBuilder>
			bankAccountUsage(bankAccountUsage:Ref<Enum>[]):Ref<BankAccountBuilder>
			bankAccountType(bankAccountType:Ref<Enum>):Ref<BankAccountBuilder>
			currencyId(currencyId:string):Ref<BankAccountBuilder>
			build():Ref<BankAccount>
	}
	export interface BpRoleOrganization extends Struct<BpRoleOrganization>{

			roleKey:Ref<string>
			departmentId:Ref<string>
			workLocationId:Ref<string>
	}
	export interface BpRoleOrganizationBuilder extends Struct<BpRoleOrganizationBuilder>{

			roleKey(roleKey:string):Ref<BpRoleOrganizationBuilder>
			departmentId(departmentId:string):Ref<BpRoleOrganizationBuilder>
			workLocationId(workLocationId:string):Ref<BpRoleOrganizationBuilder>
			build():Ref<BpRoleOrganization>
	}
	export interface BpmDataengineI18n extends Struct<BpmDataengineI18n>{

			zhCn:Ref<string>
			enUs:Ref<string>
	}
	export interface BpmDataengineI18nBuilder extends Struct<BpmDataengineI18nBuilder>{

			zhCn(zhCn:string):Ref<BpmDataengineI18nBuilder>
			enUs(enUs:string):Ref<BpmDataengineI18nBuilder>
			build():Ref<BpmDataengineI18n>
	}
	export interface CommonSchemaConfig extends Struct<CommonSchemaConfig>{

			textFieldSetting:Ref<TextFieldSetting>
			numberFieldSetting:Ref<NumberFieldSetting>
			enumFieldSetting:Ref<EnumFieldSetting>
			lookupFieldSetting:Ref<LookupFieldSetting>
			dateTimeFieldSetting:Ref<DateTimeFieldSetting>
			attachmentFieldSetting:Ref<AttachmentFieldSetting>
			imageFieldSetting:Ref<ImageFieldSetting>
	}
	export interface CommonSchemaConfigBuilder extends Struct<CommonSchemaConfigBuilder>{

			textFieldSetting(textFieldSetting:Ref<TextFieldSetting>):Ref<CommonSchemaConfigBuilder>
			numberFieldSetting(numberFieldSetting:Ref<NumberFieldSetting>):Ref<CommonSchemaConfigBuilder>
			enumFieldSetting(enumFieldSetting:Ref<EnumFieldSetting>):Ref<CommonSchemaConfigBuilder>
			lookupFieldSetting(lookupFieldSetting:Ref<LookupFieldSetting>):Ref<CommonSchemaConfigBuilder>
			dateTimeFieldSetting(dateTimeFieldSetting:Ref<DateTimeFieldSetting>):Ref<CommonSchemaConfigBuilder>
			attachmentFieldSetting(attachmentFieldSetting:Ref<AttachmentFieldSetting>):Ref<CommonSchemaConfigBuilder>
			imageFieldSetting(imageFieldSetting:Ref<ImageFieldSetting>):Ref<CommonSchemaConfigBuilder>
			build():Ref<CommonSchemaConfig>
	}
	export interface CommonSchemaOption extends Struct<CommonSchemaOption>{

			apiName:Ref<string>
			name:Ref<Name>
			description:Ref<Name>
			isOpen:Ref<bool>
	}
	export interface CommonSchemaOptionBuilder extends Struct<CommonSchemaOptionBuilder>{

			apiName(apiName:string):Ref<CommonSchemaOptionBuilder>
			name(name:Ref<Name>):Ref<CommonSchemaOptionBuilder>
			description(description:Ref<Name>):Ref<CommonSchemaOptionBuilder>
			isOpen(isOpen:bool):Ref<CommonSchemaOptionBuilder>
			build():Ref<CommonSchemaOption>
	}
	export interface Company extends Struct<Company>{

			id:Ref<string>
			hiberarchyCommon:Ref<HiberarchyCommon>
			type:Ref<Enum>
			industryList:Ref<Enum>[]
			legalRepresentative:Ref<I18n>[]
			postCode:Ref<string>
			taxPayerId:Ref<string>
			confidential:Ref<bool>
			subTypeList:Ref<Enum>[]
			branchCompany:Ref<bool>
			primaryManager:Ref<I18n>[]
			customFields:Ref<ObjectFieldData>[]
			currency:Ref<Currency>
			phone:Ref<PhoneNumberAndAreaCode>
			fax:Ref<PhoneNumberAndAreaCode>
			registeredOfficeAddress:Ref<I18n>[]
			officeAddress:Ref<I18n>[]
			registeredOfficeAddressInfo:Ref<Address>
			officeAddressInfo:Ref<Address>
	}
	export interface CompanyBuilder extends Struct<CompanyBuilder>{

			id(id:string):Ref<CompanyBuilder>
			hiberarchyCommon(hiberarchyCommon:Ref<HiberarchyCommon>):Ref<CompanyBuilder>
			type(type_:Ref<Enum>):Ref<CompanyBuilder>
			industryList(industryList:Ref<Enum>[]):Ref<CompanyBuilder>
			legalRepresentative(legalRepresentative:Ref<I18n>[]):Ref<CompanyBuilder>
			postCode(postCode:string):Ref<CompanyBuilder>
			taxPayerId(taxPayerId:string):Ref<CompanyBuilder>
			confidential(confidential:bool):Ref<CompanyBuilder>
			subTypeList(subTypeList:Ref<Enum>[]):Ref<CompanyBuilder>
			branchCompany(branchCompany:bool):Ref<CompanyBuilder>
			primaryManager(primaryManager:Ref<I18n>[]):Ref<CompanyBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<CompanyBuilder>
			currency(currency:Ref<Currency>):Ref<CompanyBuilder>
			phone(phone:Ref<PhoneNumberAndAreaCode>):Ref<CompanyBuilder>
			fax(fax:Ref<PhoneNumberAndAreaCode>):Ref<CompanyBuilder>
			registeredOfficeAddress(registeredOfficeAddress:Ref<I18n>[]):Ref<CompanyBuilder>
			officeAddress(officeAddress:Ref<I18n>[]):Ref<CompanyBuilder>
			registeredOfficeAddressInfo(registeredOfficeAddressInfo:Ref<Address>):Ref<CompanyBuilder>
			officeAddressInfo(officeAddressInfo:Ref<Address>):Ref<CompanyBuilder>
			build():Ref<Company>
	}
	export interface Contract extends Struct<Contract>{

			id:Ref<string>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			employmentId:Ref<string>
			contractType:Ref<Enum>
			firstPartyCompanyId:Ref<string>
			personId:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			durationType:Ref<Enum>
			contractEndDate:Ref<string>
			contractNumber:Ref<string>
			signingType:Ref<Enum>
	}
	export interface ContractBuilder extends Struct<ContractBuilder>{

			id(id:string):Ref<ContractBuilder>
			effectiveTime(effectiveTime:string):Ref<ContractBuilder>
			expirationTime(expirationTime:string):Ref<ContractBuilder>
			employmentId(employmentId:string):Ref<ContractBuilder>
			contractType(contractType:Ref<Enum>):Ref<ContractBuilder>
			firstPartyCompanyId(firstPartyCompanyId:string):Ref<ContractBuilder>
			personId(personId:string):Ref<ContractBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<ContractBuilder>
			durationType(durationType:Ref<Enum>):Ref<ContractBuilder>
			contractEndDate(contractEndDate:string):Ref<ContractBuilder>
			contractNumber(contractNumber:string):Ref<ContractBuilder>
			signingType(signingType:Ref<Enum>):Ref<ContractBuilder>
			build():Ref<Contract>
	}
	export interface ConvertCommonDataIdPathReqBodyBuilder extends Struct<ConvertCommonDataIdPathReqBodyBuilder>{

			ids(ids:string[]):Ref<ConvertCommonDataIdPathReqBodyBuilder>
			build():Ref<ConvertCommonDataIdReqBody>
	}
	export interface ConvertCommonDataIdReq extends Struct<ConvertCommonDataIdReq>{

			body:Ref<ConvertCommonDataIdReqBody>
	}
	export interface ConvertCommonDataIdReqBody extends Struct<ConvertCommonDataIdReqBody>{

			ids:string[]
	}
	export interface ConvertCommonDataIdReqBodyBuilder extends Struct<ConvertCommonDataIdReqBodyBuilder>{

			ids(ids:string[]):Ref<ConvertCommonDataIdReqBodyBuilder>
			build():Ref<ConvertCommonDataIdReqBody>
	}
	export interface ConvertCommonDataIdReqBuilder extends Struct<ConvertCommonDataIdReqBuilder>{

			idTransformType(idTransformType:int):Ref<ConvertCommonDataIdReqBuilder>
			idType(idType:string):Ref<ConvertCommonDataIdReqBuilder>
			feishuUserIdType(feishuUserIdType:string):Ref<ConvertCommonDataIdReqBuilder>
			feishuDepartmentIdType(feishuDepartmentIdType:string):Ref<ConvertCommonDataIdReqBuilder>
			body(body:Ref<ConvertCommonDataIdReqBody>):Ref<ConvertCommonDataIdReqBuilder>
			build():Ref<ConvertCommonDataIdReq>
	}
	export interface ConvertCommonDataIdResp extends Struct<ConvertCommonDataIdResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ConvertCommonDataIdRespData>
			success():bool
	}
	export interface ConvertCommonDataIdRespData extends Struct<ConvertCommonDataIdRespData>{

			items:Ref<IdInfo>[]
	}
	export interface CostCenter extends Struct<CostCenter>{

			isAutogenerate:Ref<bool>
			id:Ref<string>
			name:Ref<I18n>[]
			active:Ref<bool>
			code:Ref<string>
			description:Ref<I18n>[]
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			managers:string[]
			parent:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			employmentId:Ref<string>
			rate:Ref<int>
			supportCostCenter:Ref<SupportCostCenterItem>[]
	}
	export interface CostCenterBuilder extends Struct<CostCenterBuilder>{

			isAutogenerate(isAutogenerate:bool):Ref<CostCenterBuilder>
			id(id:string):Ref<CostCenterBuilder>
			name(name:Ref<I18n>[]):Ref<CostCenterBuilder>
			active(active:bool):Ref<CostCenterBuilder>
			code(code:string):Ref<CostCenterBuilder>
			description(description:Ref<I18n>[]):Ref<CostCenterBuilder>
			effectiveTime(effectiveTime:string):Ref<CostCenterBuilder>
			expirationTime(expirationTime:string):Ref<CostCenterBuilder>
			managers(managers:string[]):Ref<CostCenterBuilder>
			parent(parent:string):Ref<CostCenterBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<CostCenterBuilder>
			employmentId(employmentId:string):Ref<CostCenterBuilder>
			rate(rate:int):Ref<CostCenterBuilder>
			supportCostCenter(supportCostCenter:Ref<SupportCostCenterItem>[]):Ref<CostCenterBuilder>
			build():Ref<CostCenter>
	}
	export interface CostCenterQuery extends Struct<CostCenterQuery>{

			isAutogenerate:Ref<bool>
			id:Ref<string>
			name:Ref<I18n>[]
			active:Ref<bool>
			code:Ref<string>
			description:Ref<I18n>[]
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			managers:string[]
			parent:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			employmentId:Ref<string>
			rate:Ref<int>
			supportCostCenter:Ref<SupportCostCenterItem>[]
	}
	export interface CostCenterQueryBuilder extends Struct<CostCenterQueryBuilder>{

			isAutogenerate(isAutogenerate:bool):Ref<CostCenterQueryBuilder>
			id(id:string):Ref<CostCenterQueryBuilder>
			name(name:Ref<I18n>[]):Ref<CostCenterQueryBuilder>
			active(active:bool):Ref<CostCenterQueryBuilder>
			code(code:string):Ref<CostCenterQueryBuilder>
			description(description:Ref<I18n>[]):Ref<CostCenterQueryBuilder>
			effectiveTime(effectiveTime:string):Ref<CostCenterQueryBuilder>
			expirationTime(expirationTime:string):Ref<CostCenterQueryBuilder>
			managers(managers:string[]):Ref<CostCenterQueryBuilder>
			parent(parent:string):Ref<CostCenterQueryBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<CostCenterQueryBuilder>
			employmentId(employmentId:string):Ref<CostCenterQueryBuilder>
			rate(rate:int):Ref<CostCenterQueryBuilder>
			supportCostCenter(supportCostCenter:Ref<SupportCostCenterItem>[]):Ref<CostCenterQueryBuilder>
			build():Ref<CostCenterQuery>
	}
	export interface CountryRegion extends Struct<CountryRegion>{

			id:Ref<string>
			name:Ref<I18n>[]
			alpha3Code:Ref<string>
			alpha2Code:Ref<string>
	}
	export interface CountryRegionBuilder extends Struct<CountryRegionBuilder>{

			id(id:string):Ref<CountryRegionBuilder>
			name(name:Ref<I18n>[]):Ref<CountryRegionBuilder>
			alpha3Code(alpha3Code:string):Ref<CountryRegionBuilder>
			alpha2Code(alpha2Code:string):Ref<CountryRegionBuilder>
			build():Ref<CountryRegion>
	}
	export interface CpstBandWidth extends Struct<CpstBandWidth>{

			upperLimit:Ref<string>
			lowerLimit:Ref<string>
	}
	export interface CpstBandWidthBuilder extends Struct<CpstBandWidthBuilder>{

			upperLimit(upperLimit:string):Ref<CpstBandWidthBuilder>
			lowerLimit(lowerLimit:string):Ref<CpstBandWidthBuilder>
			build():Ref<CpstBandWidth>
	}
	export interface CpstCurrency extends Struct<CpstCurrency>{

			currencyId:Ref<string>
			code:Ref<string>
			name:Ref<CpstI18n>
	}
	export interface CpstCurrencyBuilder extends Struct<CpstCurrencyBuilder>{

			currencyId(currencyId:string):Ref<CpstCurrencyBuilder>
			code(code:string):Ref<CpstCurrencyBuilder>
			name(name:Ref<CpstI18n>):Ref<CpstCurrencyBuilder>
			build():Ref<CpstCurrency>
	}
	export interface CpstGrade extends Struct<CpstGrade>{

			gradeId:Ref<string>
			gradeTid:Ref<string>
			gradeStandardValue:Ref<CpstGradeStandardValue>
			currency:Ref<CpstCurrency>
			description:Ref<CpstI18n>
	}
	export interface CpstGradeBuilder extends Struct<CpstGradeBuilder>{

			gradeId(gradeId:string):Ref<CpstGradeBuilder>
			gradeTid(gradeTid:string):Ref<CpstGradeBuilder>
			gradeStandardValue(gradeStandardValue:Ref<CpstGradeStandardValue>):Ref<CpstGradeBuilder>
			currency(currency:Ref<CpstCurrency>):Ref<CpstGradeBuilder>
			description(description:Ref<CpstI18n>):Ref<CpstGradeBuilder>
			build():Ref<CpstGrade>
	}
	export interface CpstGradeStandardValue extends Struct<CpstGradeStandardValue>{

			referenceObject:Ref<ReferenceObject>
			standardType:Ref<CpstStandardType>
			bandWidth:Ref<CpstBandWidth>
			standardValue:Ref<string>
	}
	export interface CpstGradeStandardValueBuilder extends Struct<CpstGradeStandardValueBuilder>{

			referenceObject(referenceObject:Ref<ReferenceObject>):Ref<CpstGradeStandardValueBuilder>
			standardType(standardType:Ref<CpstStandardType>):Ref<CpstGradeStandardValueBuilder>
			bandWidth(bandWidth:Ref<CpstBandWidth>):Ref<CpstGradeStandardValueBuilder>
			standardValue(standardValue:string):Ref<CpstGradeStandardValueBuilder>
			build():Ref<CpstGradeStandardValue>
	}
	export interface CpstI18n extends Struct<CpstI18n>{

			zhCn:Ref<string>
			enUs:Ref<string>
	}
	export interface CpstI18nBuilder extends Struct<CpstI18nBuilder>{

			zhCn(zhCn:string):Ref<CpstI18nBuilder>
			enUs(enUs:string):Ref<CpstI18nBuilder>
			build():Ref<CpstI18n>
	}
	export interface CpstMatchItem extends Struct<CpstMatchItem>{

			standardId:Ref<string>
			grade:Ref<CpstGrade>
			effectiveTime:Ref<string>
	}
	export interface CpstMatchItemBuilder extends Struct<CpstMatchItemBuilder>{

			standardId(standardId:string):Ref<CpstMatchItemBuilder>
			grade(grade:Ref<CpstGrade>):Ref<CpstMatchItemBuilder>
			effectiveTime(effectiveTime:string):Ref<CpstMatchItemBuilder>
			build():Ref<CpstMatchItem>
	}
	export interface CpstStandardType extends Struct<CpstStandardType>{

			apiName:Ref<string>
	}
	export interface CpstStandardTypeBuilder extends Struct<CpstStandardTypeBuilder>{

			apiName(apiName:string):Ref<CpstStandardTypeBuilder>
			build():Ref<CpstStandardType>
	}
	export interface CreateCompanyReq extends Struct<CreateCompanyReq>{

			company:Ref<Company>
	}
	export interface CreateCompanyReqBuilder extends Struct<CreateCompanyReqBuilder>{

			clientToken(clientToken:string):Ref<CreateCompanyReqBuilder>
			company(company:Ref<Company>):Ref<CreateCompanyReqBuilder>
			build():Ref<CreateCompanyReq>
	}
	export interface CreateCompanyResp extends Struct<CreateCompanyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateCompanyRespData>
			success():bool
	}
	export interface CreateCompanyRespData extends Struct<CreateCompanyRespData>{

			company:Ref<Company>
	}
	export interface CreateContractReq extends Struct<CreateContractReq>{

			contract:Ref<Contract>
	}
	export interface CreateContractReqBuilder extends Struct<CreateContractReqBuilder>{

			clientToken(clientToken:string):Ref<CreateContractReqBuilder>
			contract(contract:Ref<Contract>):Ref<CreateContractReqBuilder>
			build():Ref<CreateContractReq>
	}
	export interface CreateContractResp extends Struct<CreateContractResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateContractRespData>
			success():bool
	}
	export interface CreateContractRespData extends Struct<CreateContractRespData>{

			contract:Ref<Contract>
	}
	export interface CreateDepartmentReq extends Struct<CreateDepartmentReq>{

			departmentCreate:Ref<DepartmentCreate>
	}
	export interface CreateDepartmentReqBuilder extends Struct<CreateDepartmentReqBuilder>{

			clientToken(clientToken:string):Ref<CreateDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<CreateDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<CreateDepartmentReqBuilder>
			departmentCreate(departmentCreate:Ref<DepartmentCreate>):Ref<CreateDepartmentReqBuilder>
			build():Ref<CreateDepartmentReq>
	}
	export interface CreateDepartmentResp extends Struct<CreateDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateDepartmentRespData>
			success():bool
	}
	export interface CreateDepartmentRespData extends Struct<CreateDepartmentRespData>{

			department:Ref<DepartmentCreate>
	}
	export interface CreateEmployeeTypeReq extends Struct<CreateEmployeeTypeReq>{

			employeeType:Ref<EmployeeType>
	}
	export interface CreateEmployeeTypeReqBuilder extends Struct<CreateEmployeeTypeReqBuilder>{

			clientToken(clientToken:string):Ref<CreateEmployeeTypeReqBuilder>
			employeeType(employeeType:Ref<EmployeeType>):Ref<CreateEmployeeTypeReqBuilder>
			build():Ref<CreateEmployeeTypeReq>
	}
	export interface CreateEmployeeTypeResp extends Struct<CreateEmployeeTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateEmployeeTypeRespData>
			success():bool
	}
	export interface CreateEmployeeTypeRespData extends Struct<CreateEmployeeTypeRespData>{

			employeeType:Ref<EmployeeType>
	}
	export interface CreateEmploymentReq extends Struct<CreateEmploymentReq>{

			employmentCreate:Ref<EmploymentCreate>
	}
	export interface CreateEmploymentReqBuilder extends Struct<CreateEmploymentReqBuilder>{

			clientToken(clientToken:string):Ref<CreateEmploymentReqBuilder>
			employmentCreate(employmentCreate:Ref<EmploymentCreate>):Ref<CreateEmploymentReqBuilder>
			build():Ref<CreateEmploymentReq>
	}
	export interface CreateEmploymentResp extends Struct<CreateEmploymentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateEmploymentRespData>
			success():bool
	}
	export interface CreateEmploymentRespData extends Struct<CreateEmploymentRespData>{

			employment:Ref<EmploymentCreate>
	}
	export interface CreateJobChangePathReqBodyBuilder extends Struct<CreateJobChangePathReqBodyBuilder>{

			transferMode(transferMode:int):Ref<CreateJobChangePathReqBodyBuilder>
			employmentId(employmentId:string):Ref<CreateJobChangePathReqBodyBuilder>
			transferTypeUniqueIdentifier(transferTypeUniqueIdentifier:string):Ref<CreateJobChangePathReqBodyBuilder>
			flowId(flowId:string):Ref<CreateJobChangePathReqBodyBuilder>
			effectiveDate(effectiveDate:string):Ref<CreateJobChangePathReqBodyBuilder>
			transferInfo(transferInfo:Ref<TransferInfo>):Ref<CreateJobChangePathReqBodyBuilder>
			transferKey(transferKey:string):Ref<CreateJobChangePathReqBodyBuilder>
			initiatorId(initiatorId:string):Ref<CreateJobChangePathReqBodyBuilder>
			build():Ref<CreateJobChangeReqBody>
	}
	export interface CreateJobChangeReq extends Struct<CreateJobChangeReq>{

			body:Ref<CreateJobChangeReqBody>
	}
	export interface CreateJobChangeReqBody extends Struct<CreateJobChangeReqBody>{

			transferMode:Ref<int>
			employmentId:Ref<string>
			transferTypeUniqueIdentifier:Ref<string>
			flowId:Ref<string>
			effectiveDate:Ref<string>
			transferInfo:Ref<TransferInfo>
			transferKey:Ref<string>
			initiatorId:Ref<string>
	}
	export interface CreateJobChangeReqBodyBuilder extends Struct<CreateJobChangeReqBodyBuilder>{

			transferMode(transferMode:int):Ref<CreateJobChangeReqBodyBuilder>
			employmentId(employmentId:string):Ref<CreateJobChangeReqBodyBuilder>
			transferTypeUniqueIdentifier(transferTypeUniqueIdentifier:string):Ref<CreateJobChangeReqBodyBuilder>
			flowId(flowId:string):Ref<CreateJobChangeReqBodyBuilder>
			effectiveDate(effectiveDate:string):Ref<CreateJobChangeReqBodyBuilder>
			transferInfo(transferInfo:Ref<TransferInfo>):Ref<CreateJobChangeReqBodyBuilder>
			transferKey(transferKey:string):Ref<CreateJobChangeReqBodyBuilder>
			initiatorId(initiatorId:string):Ref<CreateJobChangeReqBodyBuilder>
			build():Ref<CreateJobChangeReqBody>
	}
	export interface CreateJobChangeReqBuilder extends Struct<CreateJobChangeReqBuilder>{

			userIdType(userIdType:string):Ref<CreateJobChangeReqBuilder>
			departmentIdType(departmentIdType:string):Ref<CreateJobChangeReqBuilder>
			body(body:Ref<CreateJobChangeReqBody>):Ref<CreateJobChangeReqBuilder>
			build():Ref<CreateJobChangeReq>
	}
	export interface CreateJobChangeResp extends Struct<CreateJobChangeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateJobChangeRespData>
			success():bool
	}
	export interface CreateJobChangeRespData extends Struct<CreateJobChangeRespData>{

			jobChangeId:Ref<string>
			employmentId:Ref<string>
			status:Ref<string>
			transferTypeUniqueIdentifier:Ref<string>
			transferReasonUniqueIdentifier:Ref<string>
			processId:Ref<string>
			effectiveDate:Ref<string>
			createdTime:Ref<string>
			transferInfo:Ref<TransferInfo>
	}
	export interface CreateJobDataReq extends Struct<CreateJobDataReq>{

			jobData:Ref<JobData>
	}
	export interface CreateJobDataReqBuilder extends Struct<CreateJobDataReqBuilder>{

			clientToken(clientToken:string):Ref<CreateJobDataReqBuilder>
			userIdType(userIdType:string):Ref<CreateJobDataReqBuilder>
			departmentIdType(departmentIdType:string):Ref<CreateJobDataReqBuilder>
			jobData(jobData:Ref<JobData>):Ref<CreateJobDataReqBuilder>
			build():Ref<CreateJobDataReq>
	}
	export interface CreateJobDataResp extends Struct<CreateJobDataResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateJobDataRespData>
			success():bool
	}
	export interface CreateJobDataRespData extends Struct<CreateJobDataRespData>{

			jobData:Ref<JobData>
	}
	export interface CreateJobFamilyReq extends Struct<CreateJobFamilyReq>{

			jobFamily:Ref<JobFamily>
	}
	export interface CreateJobFamilyReqBuilder extends Struct<CreateJobFamilyReqBuilder>{

			clientToken(clientToken:string):Ref<CreateJobFamilyReqBuilder>
			jobFamily(jobFamily:Ref<JobFamily>):Ref<CreateJobFamilyReqBuilder>
			build():Ref<CreateJobFamilyReq>
	}
	export interface CreateJobFamilyResp extends Struct<CreateJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateJobFamilyRespData>
			success():bool
	}
	export interface CreateJobFamilyRespData extends Struct<CreateJobFamilyRespData>{

			jobFamily:Ref<JobFamily>
	}
	export interface CreateJobLevelReq extends Struct<CreateJobLevelReq>{

			jobLevel:Ref<JobLevel>
	}
	export interface CreateJobLevelReqBuilder extends Struct<CreateJobLevelReqBuilder>{

			clientToken(clientToken:string):Ref<CreateJobLevelReqBuilder>
			jobLevel(jobLevel:Ref<JobLevel>):Ref<CreateJobLevelReqBuilder>
			build():Ref<CreateJobLevelReq>
	}
	export interface CreateJobLevelResp extends Struct<CreateJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateJobLevelRespData>
			success():bool
	}
	export interface CreateJobLevelRespData extends Struct<CreateJobLevelRespData>{

			jobLevel:Ref<JobLevel>
	}
	export interface CreateJobReq extends Struct<CreateJobReq>{

			job:Ref<Job>
	}
	export interface CreateJobReqBuilder extends Struct<CreateJobReqBuilder>{

			clientToken(clientToken:string):Ref<CreateJobReqBuilder>
			job(job:Ref<Job>):Ref<CreateJobReqBuilder>
			build():Ref<CreateJobReq>
	}
	export interface CreateJobResp extends Struct<CreateJobResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateJobRespData>
			success():bool
	}
	export interface CreateJobRespData extends Struct<CreateJobRespData>{

			job:Ref<Job>
	}
	export interface CreateLeaveGrantingRecordPathReqBodyBuilder extends Struct<CreateLeaveGrantingRecordPathReqBodyBuilder>{

			leaveTypeId(leaveTypeId:string):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			employmentId(employmentId:string):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			grantingQuantity(grantingQuantity:string):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			grantingUnit(grantingUnit:int):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			effectiveDate(effectiveDate:string):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			expirationDate(expirationDate:string):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			sectionType(sectionType:int):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			reason(reason:Ref<I18n>[]):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			externalId(externalId:string):Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>
			build():Ref<CreateLeaveGrantingRecordReqBody>
	}
	export interface CreateLeaveGrantingRecordReq extends Struct<CreateLeaveGrantingRecordReq>{

			body:Ref<CreateLeaveGrantingRecordReqBody>
	}
	export interface CreateLeaveGrantingRecordReqBody extends Struct<CreateLeaveGrantingRecordReqBody>{

			leaveTypeId:Ref<string>
			employmentId:Ref<string>
			grantingQuantity:Ref<string>
			grantingUnit:Ref<int>
			effectiveDate:Ref<string>
			expirationDate:Ref<string>
			sectionType:Ref<int>
			reason:Ref<I18n>[]
			externalId:Ref<string>
	}
	export interface CreateLeaveGrantingRecordReqBodyBuilder extends Struct<CreateLeaveGrantingRecordReqBodyBuilder>{

			leaveTypeId(leaveTypeId:string):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			employmentId(employmentId:string):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			grantingQuantity(grantingQuantity:string):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			grantingUnit(grantingUnit:int):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			effectiveDate(effectiveDate:string):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			expirationDate(expirationDate:string):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			sectionType(sectionType:int):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			reason(reason:Ref<I18n>[]):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			externalId(externalId:string):Ref<CreateLeaveGrantingRecordReqBodyBuilder>
			build():Ref<CreateLeaveGrantingRecordReqBody>
	}
	export interface CreateLeaveGrantingRecordReqBuilder extends Struct<CreateLeaveGrantingRecordReqBuilder>{

			userIdType(userIdType:string):Ref<CreateLeaveGrantingRecordReqBuilder>
			body(body:Ref<CreateLeaveGrantingRecordReqBody>):Ref<CreateLeaveGrantingRecordReqBuilder>
			build():Ref<CreateLeaveGrantingRecordReq>
	}
	export interface CreateLeaveGrantingRecordResp extends Struct<CreateLeaveGrantingRecordResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateLeaveGrantingRecordRespData>
			success():bool
	}
	export interface CreateLeaveGrantingRecordRespData extends Struct<CreateLeaveGrantingRecordRespData>{

			leaveGrantingRecord:Ref<LeaveGrantingRecord>
	}
	export interface CreateLocationReq extends Struct<CreateLocationReq>{

			location:Ref<Location>
	}
	export interface CreateLocationReqBuilder extends Struct<CreateLocationReqBuilder>{

			clientToken(clientToken:string):Ref<CreateLocationReqBuilder>
			location(location:Ref<Location>):Ref<CreateLocationReqBuilder>
			build():Ref<CreateLocationReq>
	}
	export interface CreateLocationResp extends Struct<CreateLocationResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateLocationRespData>
			success():bool
	}
	export interface CreateLocationRespData extends Struct<CreateLocationRespData>{

			location:Ref<Location>
	}
	export interface CreateNationalIdTypeReq extends Struct<CreateNationalIdTypeReq>{

			nationalIdType:Ref<NationalIdType>
	}
	export interface CreateNationalIdTypeReqBuilder extends Struct<CreateNationalIdTypeReqBuilder>{

			clientToken(clientToken:string):Ref<CreateNationalIdTypeReqBuilder>
			nationalIdType(nationalIdType:Ref<NationalIdType>):Ref<CreateNationalIdTypeReqBuilder>
			build():Ref<CreateNationalIdTypeReq>
	}
	export interface CreateNationalIdTypeResp extends Struct<CreateNationalIdTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateNationalIdTypeRespData>
			success():bool
	}
	export interface CreateNationalIdTypeRespData extends Struct<CreateNationalIdTypeRespData>{

			nationalIdType:Ref<NationalIdType>
	}
	export interface CreateWorkingHoursTypeReq extends Struct<CreateWorkingHoursTypeReq>{

			workingHoursType:Ref<WorkingHoursType>
	}
	export interface CreateWorkingHoursTypeReqBuilder extends Struct<CreateWorkingHoursTypeReqBuilder>{

			clientToken(clientToken:string):Ref<CreateWorkingHoursTypeReqBuilder>
			workingHoursType(workingHoursType:Ref<WorkingHoursType>):Ref<CreateWorkingHoursTypeReqBuilder>
			build():Ref<CreateWorkingHoursTypeReq>
	}
	export interface CreateWorkingHoursTypeResp extends Struct<CreateWorkingHoursTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<CreateWorkingHoursTypeRespData>
			success():bool
	}
	export interface CreateWorkingHoursTypeRespData extends Struct<CreateWorkingHoursTypeRespData>{

			workingHoursType:Ref<WorkingHoursType>
	}
	export interface Currency extends Struct<Currency>{

			id:Ref<string>
			countryRegionId:Ref<string>
			currencyName:Ref<I18n>[]
			numericCode:Ref<int>
			currencyAlpha3Code:Ref<string>
	}
	export interface CurrencyBuilder extends Struct<CurrencyBuilder>{

			id(id:string):Ref<CurrencyBuilder>
			countryRegionId(countryRegionId:string):Ref<CurrencyBuilder>
			currencyName(currencyName:Ref<I18n>[]):Ref<CurrencyBuilder>
			numericCode(numericCode:int):Ref<CurrencyBuilder>
			currencyAlpha3Code(currencyAlpha3Code:string):Ref<CurrencyBuilder>
			build():Ref<Currency>
	}
	export interface CustomField extends Struct<CustomField>{

			customApiName:Ref<string>
			name:Ref<Name>
			description:Ref<Name>
			isOpen:Ref<bool>
			isRequired:Ref<bool>
			isUnique:Ref<bool>
			objectApiName:Ref<string>
			type:Ref<int>
			commonSchemaConfig:Ref<CommonSchemaConfig>
			createTime:Ref<string>
			updateTime:Ref<string>
	}
	export interface CustomFieldBuilder extends Struct<CustomFieldBuilder>{

			customApiName(customApiName:string):Ref<CustomFieldBuilder>
			name(name:Ref<Name>):Ref<CustomFieldBuilder>
			description(description:Ref<Name>):Ref<CustomFieldBuilder>
			isOpen(isOpen:bool):Ref<CustomFieldBuilder>
			isRequired(isRequired:bool):Ref<CustomFieldBuilder>
			isUnique(isUnique:bool):Ref<CustomFieldBuilder>
			objectApiName(objectApiName:string):Ref<CustomFieldBuilder>
			type(type_:int):Ref<CustomFieldBuilder>
			commonSchemaConfig(commonSchemaConfig:Ref<CommonSchemaConfig>):Ref<CustomFieldBuilder>
			createTime(createTime:string):Ref<CustomFieldBuilder>
			updateTime(updateTime:string):Ref<CustomFieldBuilder>
			build():Ref<CustomField>
	}
	export interface CustomFieldData extends Struct<CustomFieldData>{

			customApiName:Ref<string>
			name:Ref<CustomName>
			type:Ref<int>
			value:Ref<string>
	}
	export interface CustomFieldDataBuilder extends Struct<CustomFieldDataBuilder>{

			customApiName(customApiName:string):Ref<CustomFieldDataBuilder>
			name(name:Ref<CustomName>):Ref<CustomFieldDataBuilder>
			type(type_:int):Ref<CustomFieldDataBuilder>
			value(value:string):Ref<CustomFieldDataBuilder>
			build():Ref<CustomFieldData>
	}
	export interface CustomName extends Struct<CustomName>{

			zhCn:Ref<string>
			enUs:Ref<string>
	}
	export interface CustomNameBuilder extends Struct<CustomNameBuilder>{

			zhCn(zhCn:string):Ref<CustomNameBuilder>
			enUs(enUs:string):Ref<CustomNameBuilder>
			build():Ref<CustomName>
	}
	export interface DateTimeFieldSetting extends Struct<DateTimeFieldSetting>{

			dateTimeType:Ref<int>
	}
	export interface DateTimeFieldSettingBuilder extends Struct<DateTimeFieldSettingBuilder>{

			dateTimeType(dateTimeType:int):Ref<DateTimeFieldSettingBuilder>
			build():Ref<DateTimeFieldSetting>
	}
	export interface DeleteCompanyReq extends Struct<DeleteCompanyReq>{

	}
	export interface DeleteCompanyReqBuilder extends Struct<DeleteCompanyReqBuilder>{

			companyId(companyId:string):Ref<DeleteCompanyReqBuilder>
			build():Ref<DeleteCompanyReq>
	}
	export interface DeleteCompanyResp extends Struct<DeleteCompanyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteContractReq extends Struct<DeleteContractReq>{

	}
	export interface DeleteContractReqBuilder extends Struct<DeleteContractReqBuilder>{

			contractId(contractId:string):Ref<DeleteContractReqBuilder>
			build():Ref<DeleteContractReq>
	}
	export interface DeleteContractResp extends Struct<DeleteContractResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteDepartmentReq extends Struct<DeleteDepartmentReq>{

	}
	export interface DeleteDepartmentReqBuilder extends Struct<DeleteDepartmentReqBuilder>{

			departmentId(departmentId:string):Ref<DeleteDepartmentReqBuilder>
			build():Ref<DeleteDepartmentReq>
	}
	export interface DeleteDepartmentResp extends Struct<DeleteDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteEmployeeTypeReq extends Struct<DeleteEmployeeTypeReq>{

	}
	export interface DeleteEmployeeTypeReqBuilder extends Struct<DeleteEmployeeTypeReqBuilder>{

			employeeTypeId(employeeTypeId:string):Ref<DeleteEmployeeTypeReqBuilder>
			build():Ref<DeleteEmployeeTypeReq>
	}
	export interface DeleteEmployeeTypeResp extends Struct<DeleteEmployeeTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteEmploymentReq extends Struct<DeleteEmploymentReq>{

	}
	export interface DeleteEmploymentReqBuilder extends Struct<DeleteEmploymentReqBuilder>{

			employmentId(employmentId:string):Ref<DeleteEmploymentReqBuilder>
			userIdType(userIdType:string):Ref<DeleteEmploymentReqBuilder>
			build():Ref<DeleteEmploymentReq>
	}
	export interface DeleteEmploymentResp extends Struct<DeleteEmploymentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteJobDataReq extends Struct<DeleteJobDataReq>{

	}
	export interface DeleteJobDataReqBuilder extends Struct<DeleteJobDataReqBuilder>{

			jobDataId(jobDataId:string):Ref<DeleteJobDataReqBuilder>
			build():Ref<DeleteJobDataReq>
	}
	export interface DeleteJobDataResp extends Struct<DeleteJobDataResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteJobFamilyReq extends Struct<DeleteJobFamilyReq>{

	}
	export interface DeleteJobFamilyReqBuilder extends Struct<DeleteJobFamilyReqBuilder>{

			jobFamilyId(jobFamilyId:string):Ref<DeleteJobFamilyReqBuilder>
			build():Ref<DeleteJobFamilyReq>
	}
	export interface DeleteJobFamilyResp extends Struct<DeleteJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteJobLevelReq extends Struct<DeleteJobLevelReq>{

	}
	export interface DeleteJobLevelReqBuilder extends Struct<DeleteJobLevelReqBuilder>{

			jobLevelId(jobLevelId:string):Ref<DeleteJobLevelReqBuilder>
			build():Ref<DeleteJobLevelReq>
	}
	export interface DeleteJobLevelResp extends Struct<DeleteJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteJobReq extends Struct<DeleteJobReq>{

	}
	export interface DeleteJobReqBuilder extends Struct<DeleteJobReqBuilder>{

			jobId(jobId:string):Ref<DeleteJobReqBuilder>
			build():Ref<DeleteJobReq>
	}
	export interface DeleteJobResp extends Struct<DeleteJobResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteLeaveGrantingRecordReq extends Struct<DeleteLeaveGrantingRecordReq>{

	}
	export interface DeleteLeaveGrantingRecordReqBuilder extends Struct<DeleteLeaveGrantingRecordReqBuilder>{

			leaveGrantingRecordId(leaveGrantingRecordId:string):Ref<DeleteLeaveGrantingRecordReqBuilder>
			build():Ref<DeleteLeaveGrantingRecordReq>
	}
	export interface DeleteLeaveGrantingRecordResp extends Struct<DeleteLeaveGrantingRecordResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteLocationReq extends Struct<DeleteLocationReq>{

	}
	export interface DeleteLocationReqBuilder extends Struct<DeleteLocationReqBuilder>{

			locationId(locationId:string):Ref<DeleteLocationReqBuilder>
			build():Ref<DeleteLocationReq>
	}
	export interface DeleteLocationResp extends Struct<DeleteLocationResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteNationalIdTypeReq extends Struct<DeleteNationalIdTypeReq>{

	}
	export interface DeleteNationalIdTypeReqBuilder extends Struct<DeleteNationalIdTypeReqBuilder>{

			nationalIdTypeId(nationalIdTypeId:string):Ref<DeleteNationalIdTypeReqBuilder>
			build():Ref<DeleteNationalIdTypeReq>
	}
	export interface DeleteNationalIdTypeResp extends Struct<DeleteNationalIdTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeletePersonReq extends Struct<DeletePersonReq>{

	}
	export interface DeletePersonReqBuilder extends Struct<DeletePersonReqBuilder>{

			personId(personId:string):Ref<DeletePersonReqBuilder>
			build():Ref<DeletePersonReq>
	}
	export interface DeletePersonResp extends Struct<DeletePersonResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeletePreHireReq extends Struct<DeletePreHireReq>{

	}
	export interface DeletePreHireReqBuilder extends Struct<DeletePreHireReqBuilder>{

			preHireId(preHireId:string):Ref<DeletePreHireReqBuilder>
			build():Ref<DeletePreHireReq>
	}
	export interface DeletePreHireResp extends Struct<DeletePreHireResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface DeleteWorkingHoursTypeReq extends Struct<DeleteWorkingHoursTypeReq>{

	}
	export interface DeleteWorkingHoursTypeReqBuilder extends Struct<DeleteWorkingHoursTypeReqBuilder>{

			workingHoursTypeId(workingHoursTypeId:string):Ref<DeleteWorkingHoursTypeReqBuilder>
			build():Ref<DeleteWorkingHoursTypeReq>
	}
	export interface DeleteWorkingHoursTypeResp extends Struct<DeleteWorkingHoursTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			success():bool
	}
	export interface Department extends Struct<Department>{

			id:Ref<string>
			subType:Ref<Enum>
			manager:Ref<string>
			isConfidential:Ref<bool>
			hiberarchyCommon:Ref<HiberarchyCommon>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			costCenterId:Ref<string>
			staffingModel:Ref<Enum>
	}
	export interface DepartmentBuilder extends Struct<DepartmentBuilder>{

			id(id:string):Ref<DepartmentBuilder>
			subType(subType:Ref<Enum>):Ref<DepartmentBuilder>
			manager(manager:string):Ref<DepartmentBuilder>
			isConfidential(isConfidential:bool):Ref<DepartmentBuilder>
			hiberarchyCommon(hiberarchyCommon:Ref<HiberarchyCommon>):Ref<DepartmentBuilder>
			effectiveTime(effectiveTime:string):Ref<DepartmentBuilder>
			expirationTime(expirationTime:string):Ref<DepartmentBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<DepartmentBuilder>
			costCenterId(costCenterId:string):Ref<DepartmentBuilder>
			staffingModel(staffingModel:Ref<Enum>):Ref<DepartmentBuilder>
			build():Ref<Department>
	}
	export interface DepartmentCreate extends Struct<DepartmentCreate>{

			id:Ref<string>
			subType:Ref<Enum>
			manager:Ref<string>
			isConfidential:Ref<bool>
			hiberarchyCommon:Ref<HiberarchyCommon>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			costCenterId:Ref<string>
			staffingModel:Ref<Enum>
	}
	export interface DepartmentCreateBuilder extends Struct<DepartmentCreateBuilder>{

			id(id:string):Ref<DepartmentCreateBuilder>
			subType(subType:Ref<Enum>):Ref<DepartmentCreateBuilder>
			manager(manager:string):Ref<DepartmentCreateBuilder>
			isConfidential(isConfidential:bool):Ref<DepartmentCreateBuilder>
			hiberarchyCommon(hiberarchyCommon:Ref<HiberarchyCommon>):Ref<DepartmentCreateBuilder>
			effectiveTime(effectiveTime:string):Ref<DepartmentCreateBuilder>
			expirationTime(expirationTime:string):Ref<DepartmentCreateBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<DepartmentCreateBuilder>
			costCenterId(costCenterId:string):Ref<DepartmentCreateBuilder>
			staffingModel(staffingModel:Ref<Enum>):Ref<DepartmentCreateBuilder>
			build():Ref<DepartmentCreate>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	//"department_id"
	export const DepartmentIdTypeCreateDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeCreateDepartmentOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypeCreateDepartmentPeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeCreateJobChangeDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeCreateJobChangeOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypeCreateJobChangePeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeCreateJobDataDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeCreateJobDataOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypeCreateJobDataPeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeGetDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeGetDepartmentOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypeGetDepartmentPeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeGetJobDataDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeGetJobDataOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypeGetJobDataPeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeListDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeListDepartmentOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypeListDepartmentPeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeListJobDataDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeListJobDataOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypeListJobDataPeopleCorehrDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeOpenDepartmentId:string
	//"department_id"
	export const DepartmentIdTypePatchDepartmentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypePatchDepartmentOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypePatchDepartmentPeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypePatchEmploymentDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypePatchEmploymentOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypePatchEmploymentPeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypePatchJobDataDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypePatchJobDataOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypePatchJobDataPeopleCorehrDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypePeopleCorehrDepartmentId:string
	//"department_id"
	export const DepartmentIdTypeQuerySecurityGroupDepartmentId:string
	//"open_department_id"
	export const DepartmentIdTypeQuerySecurityGroupOpenDepartmentId:string
	//"people_corehr_department_id"
	export const DepartmentIdTypeQuerySecurityGroupPeopleCorehrDepartmentId:string
	export interface Dependent extends Struct<Dependent>{

			name:Ref<PersonName>
			relationship:Ref<Enum>
			gender:Ref<Enum>
			dateOfBirth:Ref<string>
			nationalityId:Ref<string>
			nationalityIdV2:Ref<string>
			nationalIdList:Ref<NationalId>[]
			spousesWorkingStatus:Ref<Enum>
			isThisPersonCoveredByHealthInsurance:Ref<bool>
			isThisPersonAllowedForTaxDeduction:Ref<bool>
			customFields:Ref<ObjectFieldData>[]
			dependentName:Ref<string>
			employer:Ref<string>
			job:Ref<string>
			phone:Ref<Phone>
			address:Ref<Address>
			birthCertificateOfChild:Ref<File>[]
	}
	export interface DependentBuilder extends Struct<DependentBuilder>{

			name(name:Ref<PersonName>):Ref<DependentBuilder>
			relationship(relationship:Ref<Enum>):Ref<DependentBuilder>
			gender(gender:Ref<Enum>):Ref<DependentBuilder>
			dateOfBirth(dateOfBirth:string):Ref<DependentBuilder>
			nationalityId(nationalityId:string):Ref<DependentBuilder>
			nationalityIdV2(nationalityIdV2:string):Ref<DependentBuilder>
			nationalIdList(nationalIdList:Ref<NationalId>[]):Ref<DependentBuilder>
			spousesWorkingStatus(spousesWorkingStatus:Ref<Enum>):Ref<DependentBuilder>
			isThisPersonCoveredByHealthInsurance(isThisPersonCoveredByHealthInsurance:bool):Ref<DependentBuilder>
			isThisPersonAllowedForTaxDeduction(isThisPersonAllowedForTaxDeduction:bool):Ref<DependentBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<DependentBuilder>
			dependentName(dependentName:string):Ref<DependentBuilder>
			employer(employer:string):Ref<DependentBuilder>
			job(job:string):Ref<DependentBuilder>
			phone(phone:Ref<Phone>):Ref<DependentBuilder>
			address(address:Ref<Address>):Ref<DependentBuilder>
			birthCertificateOfChild(birthCertificateOfChild:Ref<File>[]):Ref<DependentBuilder>
			build():Ref<Dependent>
	}
	export interface DimensionValue extends Struct<DimensionValue>{

			apiName:Ref<string>
			valueList:string[]
	}
	export interface DimensionValueBuilder extends Struct<DimensionValueBuilder>{

			apiName(apiName:string):Ref<DimensionValueBuilder>
			valueList(valueList:string[]):Ref<DimensionValueBuilder>
			build():Ref<DimensionValue>
	}
	export interface Education extends Struct<Education>{

			school:Ref<I18n>[]
			levelOfEducation:Ref<Enum>
			startDate:Ref<string>
			endDate:Ref<string>
			fieldOfStudy:Ref<I18n>[]
			degree:Ref<Enum>
			schoolName:Ref<Enum>
			fieldOfStudyName:Ref<Enum>
			countryRegionId:Ref<string>
			expectedEndDate:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface EducationBuilder extends Struct<EducationBuilder>{

			school(school:Ref<I18n>[]):Ref<EducationBuilder>
			levelOfEducation(levelOfEducation:Ref<Enum>):Ref<EducationBuilder>
			startDate(startDate:string):Ref<EducationBuilder>
			endDate(endDate:string):Ref<EducationBuilder>
			fieldOfStudy(fieldOfStudy:Ref<I18n>[]):Ref<EducationBuilder>
			degree(degree:Ref<Enum>):Ref<EducationBuilder>
			schoolName(schoolName:Ref<Enum>):Ref<EducationBuilder>
			fieldOfStudyName(fieldOfStudyName:Ref<Enum>):Ref<EducationBuilder>
			countryRegionId(countryRegionId:string):Ref<EducationBuilder>
			expectedEndDate(expectedEndDate:string):Ref<EducationBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<EducationBuilder>
			build():Ref<Education>
	}
	export interface Email extends Struct<Email>{

			email:Ref<string>
			isPrimary:Ref<bool>
			isPublic:Ref<bool>
			emailUsage:Ref<Enum>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface EmailBuilder extends Struct<EmailBuilder>{

			email(email:string):Ref<EmailBuilder>
			isPrimary(isPrimary:bool):Ref<EmailBuilder>
			isPublic(isPublic:bool):Ref<EmailBuilder>
			emailUsage(emailUsage:Ref<Enum>):Ref<EmailBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<EmailBuilder>
			build():Ref<Email>
	}
	export interface EmergencyContact extends Struct<EmergencyContact>{

			name:Ref<PersonName>
			relationship:Ref<Enum>
			phoneIst:Ref<Phone>[]
			customFields:Ref<ObjectFieldData>[]
			legalName:Ref<string>
	}
	export interface EmergencyContactBuilder extends Struct<EmergencyContactBuilder>{

			name(name:Ref<PersonName>):Ref<EmergencyContactBuilder>
			relationship(relationship:Ref<Enum>):Ref<EmergencyContactBuilder>
			phoneIst(phoneIst:Ref<Phone>[]):Ref<EmergencyContactBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<EmergencyContactBuilder>
			legalName(legalName:string):Ref<EmergencyContactBuilder>
			build():Ref<EmergencyContact>
	}
	export interface EmployeeDateType extends Struct<EmployeeDateType>{

			date:Ref<string>
			dateType:Ref<int>
	}
	export interface EmployeeDateTypeBuilder extends Struct<EmployeeDateTypeBuilder>{

			date(date:string):Ref<EmployeeDateTypeBuilder>
			dateType(dateType:int):Ref<EmployeeDateTypeBuilder>
			build():Ref<EmployeeDateType>
	}
	export interface EmployeeType extends Struct<EmployeeType>{

			id:Ref<string>
			name:Ref<I18n>[]
			defaultEmployeeType:Ref<bool>
			active:Ref<bool>
			code:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface EmployeeTypeBuilder extends Struct<EmployeeTypeBuilder>{

			id(id:string):Ref<EmployeeTypeBuilder>
			name(name:Ref<I18n>[]):Ref<EmployeeTypeBuilder>
			defaultEmployeeType(defaultEmployeeType:bool):Ref<EmployeeTypeBuilder>
			active(active:bool):Ref<EmployeeTypeBuilder>
			code(code:string):Ref<EmployeeTypeBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<EmployeeTypeBuilder>
			build():Ref<EmployeeType>
	}
	export interface Employment extends Struct<Employment>{

			prehireId:Ref<string>
			employeeTypeId:Ref<string>
			tenure:Ref<string>
			departmentId:Ref<string>
			jobLevelId:Ref<string>
			workLocationId:Ref<string>
			jobFamilyId:Ref<string>
			jobId:Ref<string>
			companyId:Ref<string>
			workingHoursTypeId:Ref<string>
			id:Ref<string>
			seniorityDate:Ref<string>
			employeeNumber:Ref<string>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			employmentType:Ref<Enum>
			personId:Ref<string>
			probationPeriod:Ref<int>
			onProbation:Ref<string>
			probationEndDate:Ref<string>
			primaryEmployment:Ref<bool>
			employmentStatus:Ref<Enum>
			customFields:Ref<ObjectFieldData>[]
			workEmailList:Ref<Email>[]
			emailAddress:Ref<string>
			reasonForOffboarding:Ref<Enum>
			costCenterList:Ref<JobDataCostCenter>[]
			atsApplicationId:Ref<string>
			rehire:Ref<Enum>
			rehireEmploymentId:Ref<string>
			serviceCompany:Ref<string>
			compensationType:Ref<Enum>
			workShift:Ref<Enum>
	}
	export interface EmploymentBuilder extends Struct<EmploymentBuilder>{

			prehireId(prehireId:string):Ref<EmploymentBuilder>
			employeeTypeId(employeeTypeId:string):Ref<EmploymentBuilder>
			tenure(tenure:string):Ref<EmploymentBuilder>
			departmentId(departmentId:string):Ref<EmploymentBuilder>
			jobLevelId(jobLevelId:string):Ref<EmploymentBuilder>
			workLocationId(workLocationId:string):Ref<EmploymentBuilder>
			jobFamilyId(jobFamilyId:string):Ref<EmploymentBuilder>
			jobId(jobId:string):Ref<EmploymentBuilder>
			companyId(companyId:string):Ref<EmploymentBuilder>
			workingHoursTypeId(workingHoursTypeId:string):Ref<EmploymentBuilder>
			id(id:string):Ref<EmploymentBuilder>
			seniorityDate(seniorityDate:string):Ref<EmploymentBuilder>
			employeeNumber(employeeNumber:string):Ref<EmploymentBuilder>
			effectiveTime(effectiveTime:string):Ref<EmploymentBuilder>
			expirationTime(expirationTime:string):Ref<EmploymentBuilder>
			employmentType(employmentType:Ref<Enum>):Ref<EmploymentBuilder>
			personId(personId:string):Ref<EmploymentBuilder>
			probationPeriod(probationPeriod:int):Ref<EmploymentBuilder>
			onProbation(onProbation:string):Ref<EmploymentBuilder>
			probationEndDate(probationEndDate:string):Ref<EmploymentBuilder>
			primaryEmployment(primaryEmployment:bool):Ref<EmploymentBuilder>
			employmentStatus(employmentStatus:Ref<Enum>):Ref<EmploymentBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<EmploymentBuilder>
			workEmailList(workEmailList:Ref<Email>[]):Ref<EmploymentBuilder>
			emailAddress(emailAddress:string):Ref<EmploymentBuilder>
			reasonForOffboarding(reasonForOffboarding:Ref<Enum>):Ref<EmploymentBuilder>
			costCenterList(costCenterList:Ref<JobDataCostCenter>[]):Ref<EmploymentBuilder>
			atsApplicationId(atsApplicationId:string):Ref<EmploymentBuilder>
			rehire(rehire:Ref<Enum>):Ref<EmploymentBuilder>
			rehireEmploymentId(rehireEmploymentId:string):Ref<EmploymentBuilder>
			serviceCompany(serviceCompany:string):Ref<EmploymentBuilder>
			compensationType(compensationType:Ref<Enum>):Ref<EmploymentBuilder>
			workShift(workShift:Ref<Enum>):Ref<EmploymentBuilder>
			build():Ref<Employment>
	}
	export interface EmploymentCostCenter extends Struct<EmploymentCostCenter>{

			employmentId:Ref<string>
			costCenter:Ref<CostCenter>[]
	}
	export interface EmploymentCostCenterBuilder extends Struct<EmploymentCostCenterBuilder>{

			employmentId(employmentId:string):Ref<EmploymentCostCenterBuilder>
			costCenter(costCenter:Ref<CostCenter>[]):Ref<EmploymentCostCenterBuilder>
			build():Ref<EmploymentCostCenter>
	}
	export interface EmploymentCreate extends Struct<EmploymentCreate>{

			prehireId:Ref<string>
			employeeTypeId:Ref<string>
			tenure:Ref<string>
			departmentId:Ref<string>
			jobLevelId:Ref<string>
			workLocationId:Ref<string>
			jobFamilyId:Ref<string>
			jobId:Ref<string>
			companyId:Ref<string>
			workingHoursTypeId:Ref<string>
			id:Ref<string>
			seniorityDate:Ref<string>
			employeeNumber:Ref<string>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			employmentType:Ref<Enum>
			personId:Ref<string>
			probationPeriod:Ref<int>
			onProbation:Ref<string>
			probationEndDate:Ref<string>
			primaryEmployment:Ref<bool>
			employmentStatus:Ref<Enum>
			customFields:Ref<ObjectFieldData>[]
			workEmailList:Ref<Email>[]
			emailAddress:Ref<string>
			reasonForOffboarding:Ref<Enum>
			costCenterList:Ref<JobDataCostCenter>[]
			atsApplicationId:Ref<string>
			rehire:Ref<Enum>
			rehireEmploymentId:Ref<string>
	}
	export interface EmploymentCreateBuilder extends Struct<EmploymentCreateBuilder>{

			prehireId(prehireId:string):Ref<EmploymentCreateBuilder>
			employeeTypeId(employeeTypeId:string):Ref<EmploymentCreateBuilder>
			tenure(tenure:string):Ref<EmploymentCreateBuilder>
			departmentId(departmentId:string):Ref<EmploymentCreateBuilder>
			jobLevelId(jobLevelId:string):Ref<EmploymentCreateBuilder>
			workLocationId(workLocationId:string):Ref<EmploymentCreateBuilder>
			jobFamilyId(jobFamilyId:string):Ref<EmploymentCreateBuilder>
			jobId(jobId:string):Ref<EmploymentCreateBuilder>
			companyId(companyId:string):Ref<EmploymentCreateBuilder>
			workingHoursTypeId(workingHoursTypeId:string):Ref<EmploymentCreateBuilder>
			id(id:string):Ref<EmploymentCreateBuilder>
			seniorityDate(seniorityDate:string):Ref<EmploymentCreateBuilder>
			employeeNumber(employeeNumber:string):Ref<EmploymentCreateBuilder>
			effectiveTime(effectiveTime:string):Ref<EmploymentCreateBuilder>
			expirationTime(expirationTime:string):Ref<EmploymentCreateBuilder>
			employmentType(employmentType:Ref<Enum>):Ref<EmploymentCreateBuilder>
			personId(personId:string):Ref<EmploymentCreateBuilder>
			probationPeriod(probationPeriod:int):Ref<EmploymentCreateBuilder>
			onProbation(onProbation:string):Ref<EmploymentCreateBuilder>
			probationEndDate(probationEndDate:string):Ref<EmploymentCreateBuilder>
			primaryEmployment(primaryEmployment:bool):Ref<EmploymentCreateBuilder>
			employmentStatus(employmentStatus:Ref<Enum>):Ref<EmploymentCreateBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<EmploymentCreateBuilder>
			workEmailList(workEmailList:Ref<Email>[]):Ref<EmploymentCreateBuilder>
			emailAddress(emailAddress:string):Ref<EmploymentCreateBuilder>
			reasonForOffboarding(reasonForOffboarding:Ref<Enum>):Ref<EmploymentCreateBuilder>
			costCenterList(costCenterList:Ref<JobDataCostCenter>[]):Ref<EmploymentCreateBuilder>
			atsApplicationId(atsApplicationId:string):Ref<EmploymentCreateBuilder>
			rehire(rehire:Ref<Enum>):Ref<EmploymentCreateBuilder>
			rehireEmploymentId(rehireEmploymentId:string):Ref<EmploymentCreateBuilder>
			build():Ref<EmploymentCreate>
	}
	export interface EmploymentLeaveBalance extends Struct<EmploymentLeaveBalance>{

			employmentId:Ref<string>
			employmentName:Ref<I18n>[]
			asOfDate:Ref<string>
			leaveBalanceList:Ref<LeaveBalance>[]
	}
	export interface EmploymentLeaveBalanceBuilder extends Struct<EmploymentLeaveBalanceBuilder>{

			employmentId(employmentId:string):Ref<EmploymentLeaveBalanceBuilder>
			employmentName(employmentName:Ref<I18n>[]):Ref<EmploymentLeaveBalanceBuilder>
			asOfDate(asOfDate:string):Ref<EmploymentLeaveBalanceBuilder>
			leaveBalanceList(leaveBalanceList:Ref<LeaveBalance>[]):Ref<EmploymentLeaveBalanceBuilder>
			build():Ref<EmploymentLeaveBalance>
	}
	export interface Enum extends Struct<Enum>{

			enumName:Ref<string>
			display:Ref<I18n>[]
	}
	export interface EnumBuilder extends Struct<EnumBuilder>{

			enumName(enumName:string):Ref<EnumBuilder>
			display(display:Ref<I18n>[]):Ref<EnumBuilder>
			build():Ref<Enum>
	}
	export interface EnumFieldOption extends Struct<EnumFieldOption>{

			optionApiName:Ref<string>
			active:Ref<bool>
			name:Ref<Name>
	}
	export interface EnumFieldOptionBuilder extends Struct<EnumFieldOptionBuilder>{

			optionApiName(optionApiName:string):Ref<EnumFieldOptionBuilder>
			active(active:bool):Ref<EnumFieldOptionBuilder>
			name(name:Ref<Name>):Ref<EnumFieldOptionBuilder>
			build():Ref<EnumFieldOption>
	}
	export interface EnumFieldSetting extends Struct<EnumFieldSetting>{

			enumFieldOptionList:Ref<CommonSchemaOption>[]
			isMultiple:Ref<bool>
	}
	export interface EnumFieldSettingBuilder extends Struct<EnumFieldSettingBuilder>{

			enumFieldOptionList(enumFieldOptionList:Ref<CommonSchemaOption>[]):Ref<EnumFieldSettingBuilder>
			isMultiple(isMultiple:bool):Ref<EnumFieldSettingBuilder>
			build():Ref<EnumFieldSetting>
	}
	//"department_id"
	export const FeishuDepartmentIdTypeDepartmentId:string
	//"open_department_id"
	export const FeishuDepartmentIdTypeOpenDepartmentId:string
	//"open_id"
	export const FeishuUserIdTypeOpenId:string
	//"union_id"
	export const FeishuUserIdTypeUnionId:string
	//"user_id"
	export const FeishuUserIdTypeUserId:string
	export interface File extends Struct<File>{

			id:Ref<string>
	}
	export interface FileBuilder extends Struct<FileBuilder>{

			id(id:string):Ref<FileBuilder>
			build():Ref<File>
	}
	export interface FilterCondition extends Struct<FilterCondition>{

			left:Ref<FilterRuleValue>
			right:Ref<FilterRuleValue>
			operator:Ref<int>
			rightValueType:Ref<int>
	}
	export interface FilterConditionBuilder extends Struct<FilterConditionBuilder>{

			left(left:Ref<FilterRuleValue>):Ref<FilterConditionBuilder>
			right(right:Ref<FilterRuleValue>):Ref<FilterConditionBuilder>
			operator(operator:int):Ref<FilterConditionBuilder>
			rightValueType(rightValueType:int):Ref<FilterConditionBuilder>
			build():Ref<FilterCondition>
	}
	export interface FilterExpression extends Struct<FilterExpression>{

			conditions:Ref<FilterCondition>[]
			expression:Ref<string>
	}
	export interface FilterExpressionBuilder extends Struct<FilterExpressionBuilder>{

			conditions(conditions:Ref<FilterCondition>[]):Ref<FilterExpressionBuilder>
			expression(expression:string):Ref<FilterExpressionBuilder>
			build():Ref<FilterExpression>
	}
	export interface FilterRuleValue extends Struct<FilterRuleValue>{

			type:Ref<int>
			value:Ref<string>
			lookupValue:Ref<string>
			lookupType:Ref<string>
	}
	export interface FilterRuleValueBuilder extends Struct<FilterRuleValueBuilder>{

			type(type_:int):Ref<FilterRuleValueBuilder>
			value(value:string):Ref<FilterRuleValueBuilder>
			lookupValue(lookupValue:string):Ref<FilterRuleValueBuilder>
			lookupType(lookupType:string):Ref<FilterRuleValueBuilder>
			build():Ref<FilterRuleValue>
	}
	export interface FormFieldVariable extends Struct<FormFieldVariable>{

			variableApiName:Ref<string>
			variableName:Ref<BpmDataengineI18n>
			variableValue:Ref<FormVariableValueInfo>
	}
	export interface FormFieldVariableBoolValue extends Struct<FormFieldVariableBoolValue>{

			value:Ref<bool>
	}
	export interface FormFieldVariableBoolValueBuilder extends Struct<FormFieldVariableBoolValueBuilder>{

			value(value:bool):Ref<FormFieldVariableBoolValueBuilder>
			build():Ref<FormFieldVariableBoolValue>
	}
	export interface FormFieldVariableBuilder extends Struct<FormFieldVariableBuilder>{

			variableApiName(variableApiName:string):Ref<FormFieldVariableBuilder>
			variableName(variableName:Ref<BpmDataengineI18n>):Ref<FormFieldVariableBuilder>
			variableValue(variableValue:Ref<FormVariableValueInfo>):Ref<FormFieldVariableBuilder>
			build():Ref<FormFieldVariable>
	}
	export interface FormFieldVariableDateValue extends Struct<FormFieldVariableDateValue>{

			value:Ref<int>
	}
	export interface FormFieldVariableDateValueBuilder extends Struct<FormFieldVariableDateValueBuilder>{

			value(value:int):Ref<FormFieldVariableDateValueBuilder>
			build():Ref<FormFieldVariableDateValue>
	}
	export interface FormFieldVariableDatetimeValue extends Struct<FormFieldVariableDatetimeValue>{

			value:Ref<int>
			zone:Ref<string>
	}
	export interface FormFieldVariableDatetimeValueBuilder extends Struct<FormFieldVariableDatetimeValueBuilder>{

			value(value:int):Ref<FormFieldVariableDatetimeValueBuilder>
			zone(zone:string):Ref<FormFieldVariableDatetimeValueBuilder>
			build():Ref<FormFieldVariableDatetimeValue>
	}
	export interface FormFieldVariableDepartmentValue extends Struct<FormFieldVariableDepartmentValue>{

			value:Ref<string>
	}
	export interface FormFieldVariableDepartmentValueBuilder extends Struct<FormFieldVariableDepartmentValueBuilder>{

			value(value:string):Ref<FormFieldVariableDepartmentValueBuilder>
			build():Ref<FormFieldVariableDepartmentValue>
	}
	export interface FormFieldVariableEmploymentValue extends Struct<FormFieldVariableEmploymentValue>{

			value:Ref<string>
			userId:Ref<string>
	}
	export interface FormFieldVariableEmploymentValueBuilder extends Struct<FormFieldVariableEmploymentValueBuilder>{

			value(value:string):Ref<FormFieldVariableEmploymentValueBuilder>
			userId(userId:string):Ref<FormFieldVariableEmploymentValueBuilder>
			build():Ref<FormFieldVariableEmploymentValue>
	}
	export interface FormFieldVariableEnumValue extends Struct<FormFieldVariableEnumValue>{

			value:Ref<string>
			name:Ref<BpmDataengineI18n>
			desc:Ref<BpmDataengineI18n>
	}
	export interface FormFieldVariableEnumValueBuilder extends Struct<FormFieldVariableEnumValueBuilder>{

			value(value:string):Ref<FormFieldVariableEnumValueBuilder>
			name(name:Ref<BpmDataengineI18n>):Ref<FormFieldVariableEnumValueBuilder>
			desc(desc:Ref<BpmDataengineI18n>):Ref<FormFieldVariableEnumValueBuilder>
			build():Ref<FormFieldVariableEnumValue>
	}
	export interface FormFieldVariableFileValue extends Struct<FormFieldVariableFileValue>{

			sourceType:Ref<int>
			fileId:Ref<string>
			fileName:Ref<string>
			length:Ref<int>
			mimeType:Ref<string>
	}
	export interface FormFieldVariableFileValueBuilder extends Struct<FormFieldVariableFileValueBuilder>{

			sourceType(sourceType:int):Ref<FormFieldVariableFileValueBuilder>
			fileId(fileId:string):Ref<FormFieldVariableFileValueBuilder>
			fileName(fileName:string):Ref<FormFieldVariableFileValueBuilder>
			length(length:int):Ref<FormFieldVariableFileValueBuilder>
			mimeType(mimeType:string):Ref<FormFieldVariableFileValueBuilder>
			build():Ref<FormFieldVariableFileValue>
	}
	export interface FormFieldVariableI18nValue extends Struct<FormFieldVariableI18nValue>{

			value:Ref<BpmDataengineI18n>
	}
	export interface FormFieldVariableI18nValueBuilder extends Struct<FormFieldVariableI18nValueBuilder>{

			value(value:Ref<BpmDataengineI18n>):Ref<FormFieldVariableI18nValueBuilder>
			build():Ref<FormFieldVariableI18nValue>
	}
	export interface FormFieldVariableListObject extends Struct<FormFieldVariableListObject>{

			textValue:Ref<FormFieldVariableTextValue>
			numberValue:Ref<FormFieldVariableNumberValue>
			dateValue:Ref<FormFieldVariableDateValue>
			employmentValue:Ref<FormFieldVariableEmploymentValue>
			dateTimeValue:Ref<FormFieldVariableDatetimeValue>
			enumValue:Ref<FormFieldVariableEnumValue>
			nullValue:Ref<FormFieldVariableNullValue>
			boolValue:Ref<FormFieldVariableBoolValue>
			departmentValue:Ref<FormFieldVariableDepartmentValue>
			fileValue:Ref<FormFieldVariableFileValue>
			i18nValue:Ref<FormFieldVariableI18nValue>
			objectValue:Ref<FormFieldVariableObjectValue>
			recordValue:Ref<FormFieldVariableRecordValue>
	}
	export interface FormFieldVariableListObjectBuilder extends Struct<FormFieldVariableListObjectBuilder>{

			textValue(textValue:Ref<FormFieldVariableTextValue>):Ref<FormFieldVariableListObjectBuilder>
			numberValue(numberValue:Ref<FormFieldVariableNumberValue>):Ref<FormFieldVariableListObjectBuilder>
			dateValue(dateValue:Ref<FormFieldVariableDateValue>):Ref<FormFieldVariableListObjectBuilder>
			employmentValue(employmentValue:Ref<FormFieldVariableEmploymentValue>):Ref<FormFieldVariableListObjectBuilder>
			dateTimeValue(dateTimeValue:Ref<FormFieldVariableDatetimeValue>):Ref<FormFieldVariableListObjectBuilder>
			enumValue(enumValue:Ref<FormFieldVariableEnumValue>):Ref<FormFieldVariableListObjectBuilder>
			nullValue(nullValue:Ref<FormFieldVariableNullValue>):Ref<FormFieldVariableListObjectBuilder>
			boolValue(boolValue:Ref<FormFieldVariableBoolValue>):Ref<FormFieldVariableListObjectBuilder>
			departmentValue(departmentValue:Ref<FormFieldVariableDepartmentValue>):Ref<FormFieldVariableListObjectBuilder>
			fileValue(fileValue:Ref<FormFieldVariableFileValue>):Ref<FormFieldVariableListObjectBuilder>
			i18nValue(i18nValue:Ref<FormFieldVariableI18nValue>):Ref<FormFieldVariableListObjectBuilder>
			objectValue(objectValue:Ref<FormFieldVariableObjectValue>):Ref<FormFieldVariableListObjectBuilder>
			recordValue(recordValue:Ref<FormFieldVariableRecordValue>):Ref<FormFieldVariableListObjectBuilder>
			build():Ref<FormFieldVariableListObject>
	}
	export interface FormFieldVariableListValue extends Struct<FormFieldVariableListValue>{

			values:Ref<FormFieldVariableListObject>[]
	}
	export interface FormFieldVariableListValueBuilder extends Struct<FormFieldVariableListValueBuilder>{

			values(values:Ref<FormFieldVariableListObject>[]):Ref<FormFieldVariableListValueBuilder>
			build():Ref<FormFieldVariableListValue>
	}
	export interface FormFieldVariableNullValue extends Alias<Nothing>{

	}
	export interface FormFieldVariableNumberValue extends Struct<FormFieldVariableNumberValue>{

			value:Ref<string>
	}
	export interface FormFieldVariableNumberValueBuilder extends Struct<FormFieldVariableNumberValueBuilder>{

			value(value:string):Ref<FormFieldVariableNumberValueBuilder>
			build():Ref<FormFieldVariableNumberValue>
	}
	export interface FormFieldVariableObjectValue extends Struct<FormFieldVariableObjectValue>{

			value:Ref<string>
			wkApiName:Ref<string>
	}
	export interface FormFieldVariableObjectValueBuilder extends Struct<FormFieldVariableObjectValueBuilder>{

			value(value:string):Ref<FormFieldVariableObjectValueBuilder>
			wkApiName(wkApiName:string):Ref<FormFieldVariableObjectValueBuilder>
			build():Ref<FormFieldVariableObjectValue>
	}
	export interface FormFieldVariableRecordValue extends Struct<FormFieldVariableRecordValue>{

			values:Ref<FormFieldVariableRecordValueExample>
	}
	export interface FormFieldVariableRecordValueBuilder extends Struct<FormFieldVariableRecordValueBuilder>{

			values(values:Ref<FormFieldVariableRecordValueExample>):Ref<FormFieldVariableRecordValueBuilder>
			build():Ref<FormFieldVariableRecordValue>
	}
	export interface FormFieldVariableRecordValueExample extends Struct<FormFieldVariableRecordValueExample>{

			countryRegion:Ref<FormVariableValueInfoExample>
	}
	export interface FormFieldVariableRecordValueExampleBuilder extends Struct<FormFieldVariableRecordValueExampleBuilder>{

			countryRegion(countryRegion:Ref<FormVariableValueInfoExample>):Ref<FormFieldVariableRecordValueExampleBuilder>
			build():Ref<FormFieldVariableRecordValueExample>
	}
	export interface FormFieldVariableTextValue extends Struct<FormFieldVariableTextValue>{

			value:Ref<string>
	}
	export interface FormFieldVariableTextValueBuilder extends Struct<FormFieldVariableTextValueBuilder>{

			value(value:string):Ref<FormFieldVariableTextValueBuilder>
			build():Ref<FormFieldVariableTextValue>
	}
	export interface FormVariableData extends Struct<FormVariableData>{

			fieldVariableValues:Ref<FormFieldVariable>[]
	}
	export interface FormVariableDataBuilder extends Struct<FormVariableDataBuilder>{

			fieldVariableValues(fieldVariableValues:Ref<FormFieldVariable>[]):Ref<FormVariableDataBuilder>
			build():Ref<FormVariableData>
	}
	export interface FormVariableValueInfo extends Struct<FormVariableValueInfo>{

			textValue:Ref<FormFieldVariableTextValue>
			numberValue:Ref<FormFieldVariableNumberValue>
			dateValue:Ref<FormFieldVariableDateValue>
			employmentValue:Ref<FormFieldVariableEmploymentValue>
			dateTimeValue:Ref<FormFieldVariableDatetimeValue>
			enumValue:Ref<FormFieldVariableEnumValue>
			nullValue:Ref<FormFieldVariableNullValue>
			boolValue:Ref<FormFieldVariableBoolValue>
			departmentValue:Ref<FormFieldVariableDepartmentValue>
			fileValue:Ref<FormFieldVariableFileValue>
			i18nValue:Ref<FormFieldVariableI18nValue>
			objectValue:Ref<FormFieldVariableObjectValue>
			listValue:Ref<FormFieldVariableListValue>
			recordValue:Ref<FormFieldVariableRecordValue>
	}
	export interface FormVariableValueInfoBuilder extends Struct<FormVariableValueInfoBuilder>{

			textValue(textValue:Ref<FormFieldVariableTextValue>):Ref<FormVariableValueInfoBuilder>
			numberValue(numberValue:Ref<FormFieldVariableNumberValue>):Ref<FormVariableValueInfoBuilder>
			dateValue(dateValue:Ref<FormFieldVariableDateValue>):Ref<FormVariableValueInfoBuilder>
			employmentValue(employmentValue:Ref<FormFieldVariableEmploymentValue>):Ref<FormVariableValueInfoBuilder>
			dateTimeValue(dateTimeValue:Ref<FormFieldVariableDatetimeValue>):Ref<FormVariableValueInfoBuilder>
			enumValue(enumValue:Ref<FormFieldVariableEnumValue>):Ref<FormVariableValueInfoBuilder>
			nullValue(nullValue:Ref<FormFieldVariableNullValue>):Ref<FormVariableValueInfoBuilder>
			boolValue(boolValue:Ref<FormFieldVariableBoolValue>):Ref<FormVariableValueInfoBuilder>
			departmentValue(departmentValue:Ref<FormFieldVariableDepartmentValue>):Ref<FormVariableValueInfoBuilder>
			fileValue(fileValue:Ref<FormFieldVariableFileValue>):Ref<FormVariableValueInfoBuilder>
			i18nValue(i18nValue:Ref<FormFieldVariableI18nValue>):Ref<FormVariableValueInfoBuilder>
			objectValue(objectValue:Ref<FormFieldVariableObjectValue>):Ref<FormVariableValueInfoBuilder>
			listValue(listValue:Ref<FormFieldVariableListValue>):Ref<FormVariableValueInfoBuilder>
			recordValue(recordValue:Ref<FormFieldVariableRecordValue>):Ref<FormVariableValueInfoBuilder>
			build():Ref<FormVariableValueInfo>
	}
	export interface FormVariableValueInfoExample extends Struct<FormVariableValueInfoExample>{

			objectValue:Ref<FormFieldVariableObjectValue>
	}
	export interface FormVariableValueInfoExampleBuilder extends Struct<FormVariableValueInfoExampleBuilder>{

			objectValue(objectValue:Ref<FormFieldVariableObjectValue>):Ref<FormVariableValueInfoExampleBuilder>
			build():Ref<FormVariableValueInfoExample>
	}
	export interface GetByParamCustomFieldReq extends Struct<GetByParamCustomFieldReq>{

	}
	export interface GetByParamCustomFieldReqBuilder extends Struct<GetByParamCustomFieldReqBuilder>{

			customApiName(customApiName:string):Ref<GetByParamCustomFieldReqBuilder>
			objectApiName(objectApiName:string):Ref<GetByParamCustomFieldReqBuilder>
			build():Ref<GetByParamCustomFieldReq>
	}
	export interface GetByParamCustomFieldResp extends Struct<GetByParamCustomFieldResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetByParamCustomFieldRespData>
			success():bool
	}
	export interface GetByParamCustomFieldRespData extends Struct<GetByParamCustomFieldRespData>{

			data:Ref<CustomField>
	}
	export interface GetCompanyReq extends Struct<GetCompanyReq>{

	}
	export interface GetCompanyReqBuilder extends Struct<GetCompanyReqBuilder>{

			companyId(companyId:string):Ref<GetCompanyReqBuilder>
			build():Ref<GetCompanyReq>
	}
	export interface GetCompanyResp extends Struct<GetCompanyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetCompanyRespData>
			success():bool
	}
	export interface GetCompanyRespData extends Struct<GetCompanyRespData>{

			company:Ref<Company>
	}
	export interface GetContractReq extends Struct<GetContractReq>{

	}
	export interface GetContractReqBuilder extends Struct<GetContractReqBuilder>{

			contractId(contractId:string):Ref<GetContractReqBuilder>
			build():Ref<GetContractReq>
	}
	export interface GetContractResp extends Struct<GetContractResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetContractRespData>
			success():bool
	}
	export interface GetContractRespData extends Struct<GetContractRespData>{

			contract:Ref<Contract>
	}
	export interface GetCountryRegionReq extends Struct<GetCountryRegionReq>{

	}
	export interface GetCountryRegionReqBuilder extends Struct<GetCountryRegionReqBuilder>{

			countryRegionId(countryRegionId:string):Ref<GetCountryRegionReqBuilder>
			build():Ref<GetCountryRegionReq>
	}
	export interface GetCountryRegionResp extends Struct<GetCountryRegionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetCountryRegionRespData>
			success():bool
	}
	export interface GetCountryRegionRespData extends Struct<GetCountryRegionRespData>{

			countryRegion:Ref<CountryRegion>
	}
	export interface GetCurrencyReq extends Struct<GetCurrencyReq>{

	}
	export interface GetCurrencyReqBuilder extends Struct<GetCurrencyReqBuilder>{

			currencyId(currencyId:string):Ref<GetCurrencyReqBuilder>
			build():Ref<GetCurrencyReq>
	}
	export interface GetCurrencyResp extends Struct<GetCurrencyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetCurrencyRespData>
			success():bool
	}
	export interface GetCurrencyRespData extends Struct<GetCurrencyRespData>{

			currency:Ref<Currency>
	}
	export interface GetDepartmentReq extends Struct<GetDepartmentReq>{

	}
	export interface GetDepartmentReqBuilder extends Struct<GetDepartmentReqBuilder>{

			departmentId(departmentId:string):Ref<GetDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<GetDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<GetDepartmentReqBuilder>
			build():Ref<GetDepartmentReq>
	}
	export interface GetDepartmentResp extends Struct<GetDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetDepartmentRespData>
			success():bool
	}
	export interface GetDepartmentRespData extends Struct<GetDepartmentRespData>{

			department:Ref<Department>
	}
	export interface GetEmployeeTypeReq extends Struct<GetEmployeeTypeReq>{

	}
	export interface GetEmployeeTypeReqBuilder extends Struct<GetEmployeeTypeReqBuilder>{

			employeeTypeId(employeeTypeId:string):Ref<GetEmployeeTypeReqBuilder>
			build():Ref<GetEmployeeTypeReq>
	}
	export interface GetEmployeeTypeResp extends Struct<GetEmployeeTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetEmployeeTypeRespData>
			success():bool
	}
	export interface GetEmployeeTypeRespData extends Struct<GetEmployeeTypeRespData>{

			employeeType:Ref<EmployeeType>
	}
	export interface GetFileReq extends Struct<GetFileReq>{

	}
	export interface GetFileReqBuilder extends Struct<GetFileReqBuilder>{

			id(id:string):Ref<GetFileReqBuilder>
			build():Ref<GetFileReq>
	}
	export interface GetFileResp extends Struct<GetFileResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			file:io.Reader
			fileName:string
			success():bool
			writeFile(fileName:string)/*error*/
	}
	export interface GetJobDataReq extends Struct<GetJobDataReq>{

	}
	export interface GetJobDataReqBuilder extends Struct<GetJobDataReqBuilder>{

			jobDataId(jobDataId:string):Ref<GetJobDataReqBuilder>
			userIdType(userIdType:string):Ref<GetJobDataReqBuilder>
			departmentIdType(departmentIdType:string):Ref<GetJobDataReqBuilder>
			build():Ref<GetJobDataReq>
	}
	export interface GetJobDataResp extends Struct<GetJobDataResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetJobDataRespData>
			success():bool
	}
	export interface GetJobDataRespData extends Struct<GetJobDataRespData>{

			jobData:Ref<JobData>
	}
	export interface GetJobFamilyReq extends Struct<GetJobFamilyReq>{

	}
	export interface GetJobFamilyReqBuilder extends Struct<GetJobFamilyReqBuilder>{

			jobFamilyId(jobFamilyId:string):Ref<GetJobFamilyReqBuilder>
			build():Ref<GetJobFamilyReq>
	}
	export interface GetJobFamilyResp extends Struct<GetJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetJobFamilyRespData>
			success():bool
	}
	export interface GetJobFamilyRespData extends Struct<GetJobFamilyRespData>{

			jobFamily:Ref<JobFamily>
	}
	export interface GetJobLevelReq extends Struct<GetJobLevelReq>{

	}
	export interface GetJobLevelReqBuilder extends Struct<GetJobLevelReqBuilder>{

			jobLevelId(jobLevelId:string):Ref<GetJobLevelReqBuilder>
			build():Ref<GetJobLevelReq>
	}
	export interface GetJobLevelResp extends Struct<GetJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetJobLevelRespData>
			success():bool
	}
	export interface GetJobLevelRespData extends Struct<GetJobLevelRespData>{

			jobLevel:Ref<JobLevel>
	}
	export interface GetJobReq extends Struct<GetJobReq>{

	}
	export interface GetJobReqBuilder extends Struct<GetJobReqBuilder>{

			jobId(jobId:string):Ref<GetJobReqBuilder>
			build():Ref<GetJobReq>
	}
	export interface GetJobResp extends Struct<GetJobResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetJobRespData>
			success():bool
	}
	export interface GetJobRespData extends Struct<GetJobRespData>{

			job:Ref<Job>
	}
	export interface GetLocationReq extends Struct<GetLocationReq>{

	}
	export interface GetLocationReqBuilder extends Struct<GetLocationReqBuilder>{

			locationId(locationId:string):Ref<GetLocationReqBuilder>
			build():Ref<GetLocationReq>
	}
	export interface GetLocationResp extends Struct<GetLocationResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetLocationRespData>
			success():bool
	}
	export interface GetLocationRespData extends Struct<GetLocationRespData>{

			location:Ref<Location>
	}
	export interface GetNationalIdTypeReq extends Struct<GetNationalIdTypeReq>{

	}
	export interface GetNationalIdTypeReqBuilder extends Struct<GetNationalIdTypeReqBuilder>{

			nationalIdTypeId(nationalIdTypeId:string):Ref<GetNationalIdTypeReqBuilder>
			build():Ref<GetNationalIdTypeReq>
	}
	export interface GetNationalIdTypeResp extends Struct<GetNationalIdTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetNationalIdTypeRespData>
			success():bool
	}
	export interface GetNationalIdTypeRespData extends Struct<GetNationalIdTypeRespData>{

			nationalIdType:Ref<NationalIdType>
	}
	export interface GetPersonReq extends Struct<GetPersonReq>{

	}
	export interface GetPersonReqBuilder extends Struct<GetPersonReqBuilder>{

			personId(personId:string):Ref<GetPersonReqBuilder>
			userIdType(userIdType:string):Ref<GetPersonReqBuilder>
			build():Ref<GetPersonReq>
	}
	export interface GetPersonResp extends Struct<GetPersonResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetPersonRespData>
			success():bool
	}
	export interface GetPersonRespData extends Struct<GetPersonRespData>{

			person:Ref<Person>
	}
	export interface GetPreHireReq extends Struct<GetPreHireReq>{

	}
	export interface GetPreHireReqBuilder extends Struct<GetPreHireReqBuilder>{

			preHireId(preHireId:string):Ref<GetPreHireReqBuilder>
			build():Ref<GetPreHireReq>
	}
	export interface GetPreHireResp extends Struct<GetPreHireResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetPreHireRespData>
			success():bool
	}
	export interface GetPreHireRespData extends Struct<GetPreHireRespData>{

			preHire:Ref<PreHire>
	}
	export interface GetProcessFormVariableDataReq extends Struct<GetProcessFormVariableDataReq>{

	}
	export interface GetProcessFormVariableDataReqBuilder extends Struct<GetProcessFormVariableDataReqBuilder>{

			processId(processId:string):Ref<GetProcessFormVariableDataReqBuilder>
			build():Ref<GetProcessFormVariableDataReq>
	}
	export interface GetProcessFormVariableDataResp extends Struct<GetProcessFormVariableDataResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetProcessFormVariableDataRespData>
			success():bool
	}
	export interface GetProcessFormVariableDataRespData extends Struct<GetProcessFormVariableDataRespData>{

			fieldVariableValues:Ref<FormFieldVariable>[]
	}
	export interface GetSubdivisionReq extends Struct<GetSubdivisionReq>{

	}
	export interface GetSubdivisionReqBuilder extends Struct<GetSubdivisionReqBuilder>{

			subdivisionId(subdivisionId:string):Ref<GetSubdivisionReqBuilder>
			build():Ref<GetSubdivisionReq>
	}
	export interface GetSubdivisionResp extends Struct<GetSubdivisionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSubdivisionRespData>
			success():bool
	}
	export interface GetSubdivisionRespData extends Struct<GetSubdivisionRespData>{

			subdivision:Ref<Subdivision>
	}
	export interface GetSubregionReq extends Struct<GetSubregionReq>{

	}
	export interface GetSubregionReqBuilder extends Struct<GetSubregionReqBuilder>{

			subregionId(subregionId:string):Ref<GetSubregionReqBuilder>
			build():Ref<GetSubregionReq>
	}
	export interface GetSubregionResp extends Struct<GetSubregionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetSubregionRespData>
			success():bool
	}
	export interface GetSubregionRespData extends Struct<GetSubregionRespData>{

			subregion:Ref<Subregion>
	}
	export interface GetWorkingHoursTypeReq extends Struct<GetWorkingHoursTypeReq>{

	}
	export interface GetWorkingHoursTypeReqBuilder extends Struct<GetWorkingHoursTypeReqBuilder>{

			workingHoursTypeId(workingHoursTypeId:string):Ref<GetWorkingHoursTypeReqBuilder>
			build():Ref<GetWorkingHoursTypeReq>
	}
	export interface GetWorkingHoursTypeResp extends Struct<GetWorkingHoursTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<GetWorkingHoursTypeRespData>
			success():bool
	}
	export interface GetWorkingHoursTypeRespData extends Struct<GetWorkingHoursTypeRespData>{

			workingHoursType:Ref<WorkingHoursType>
	}
	export interface HiberarchyCommon extends Struct<HiberarchyCommon>{

			parentId:Ref<string>
			name:Ref<I18n>[]
			type:Ref<Enum>
			active:Ref<bool>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			code:Ref<string>
			description:Ref<I18n>[]
			treeOrder:Ref<string>
			listOrder:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface HiberarchyCommonBuilder extends Struct<HiberarchyCommonBuilder>{

			parentId(parentId:string):Ref<HiberarchyCommonBuilder>
			name(name:Ref<I18n>[]):Ref<HiberarchyCommonBuilder>
			type(type_:Ref<Enum>):Ref<HiberarchyCommonBuilder>
			active(active:bool):Ref<HiberarchyCommonBuilder>
			effectiveTime(effectiveTime:string):Ref<HiberarchyCommonBuilder>
			expirationTime(expirationTime:string):Ref<HiberarchyCommonBuilder>
			code(code:string):Ref<HiberarchyCommonBuilder>
			description(description:Ref<I18n>[]):Ref<HiberarchyCommonBuilder>
			treeOrder(treeOrder:string):Ref<HiberarchyCommonBuilder>
			listOrder(listOrder:string):Ref<HiberarchyCommonBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<HiberarchyCommonBuilder>
			build():Ref<HiberarchyCommon>
	}
	export interface Hrbp extends Struct<Hrbp>{

			employmentIdList:string[]
			departmentId:Ref<string>
			workLocationId:Ref<string>
	}
	export interface HrbpBuilder extends Struct<HrbpBuilder>{

			employmentIdList(employmentIdList:string[]):Ref<HrbpBuilder>
			departmentId(departmentId:string):Ref<HrbpBuilder>
			workLocationId(workLocationId:string):Ref<HrbpBuilder>
			build():Ref<Hrbp>
	}
	export interface I18n extends Struct<I18n>{

			lang:Ref<string>
			value:Ref<string>
	}
	export interface I18nBuilder extends Struct<I18nBuilder>{

			lang(lang:string):Ref<I18nBuilder>
			value(value:string):Ref<I18nBuilder>
			build():Ref<I18n>
	}
	export interface IdInfo extends Struct<IdInfo>{

			id:Ref<string>
			targetId:Ref<string>
	}
	export interface IdInfoBuilder extends Struct<IdInfoBuilder>{

			id(id:string):Ref<IdInfoBuilder>
			targetId(targetId:string):Ref<IdInfoBuilder>
			build():Ref<IdInfo>
	}
	//4
	export const IdTransformTypeAdmin2CoreHR:int
	//3
	export const IdTransformTypeAdmin2Feishu:int
	//1
	export const IdTransformTypeCoreHR2Feishu:int
	//2
	export const IdTransformTypeFeishu2CoreHR:int
	//"department_id"
	export const IdTypeDepartmentID:string
	//"employee_type_id"
	export const IdTypeEmployeeTypeID:string
	//"user_id"
	export const IdTypeEmploymentID:string
	//"job_family_id"
	export const IdTypeJobFamilyID:string
	//"job_level_id"
	export const IdTypeJobLevelID:string
	export interface ImageFieldSetting extends Struct<ImageFieldSetting>{

			imageType:Ref<int>
			displayStyle:Ref<int>
	}
	export interface ImageFieldSettingBuilder extends Struct<ImageFieldSettingBuilder>{

			imageType(imageType:int):Ref<ImageFieldSettingBuilder>
			displayStyle(displayStyle:int):Ref<ImageFieldSettingBuilder>
			build():Ref<ImageFieldSetting>
	}
	export interface Job extends Struct<Job>{

			id:Ref<string>
			code:Ref<string>
			name:Ref<I18n>[]
			description:Ref<I18n>[]
			active:Ref<bool>
			jobTitle:Ref<I18n>[]
			jobFamilyIdList:string[]
			jobLevelIdList:string[]
			workingHoursTypeId:Ref<string>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface JobBuilder extends Struct<JobBuilder>{

			id(id:string):Ref<JobBuilder>
			code(code:string):Ref<JobBuilder>
			name(name:Ref<I18n>[]):Ref<JobBuilder>
			description(description:Ref<I18n>[]):Ref<JobBuilder>
			active(active:bool):Ref<JobBuilder>
			jobTitle(jobTitle:Ref<I18n>[]):Ref<JobBuilder>
			jobFamilyIdList(jobFamilyIdList:string[]):Ref<JobBuilder>
			jobLevelIdList(jobLevelIdList:string[]):Ref<JobBuilder>
			workingHoursTypeId(workingHoursTypeId:string):Ref<JobBuilder>
			effectiveTime(effectiveTime:string):Ref<JobBuilder>
			expirationTime(expirationTime:string):Ref<JobBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<JobBuilder>
			build():Ref<Job>
	}
	export interface JobCategory extends Struct<JobCategory>{

			id:Ref<string>
	}
	export interface JobCategoryBuilder extends Struct<JobCategoryBuilder>{

			id(id:string):Ref<JobCategoryBuilder>
			build():Ref<JobCategory>
	}
	export interface JobChange extends Struct<JobChange>{

			jobChangeId:Ref<string>
			employmentId:Ref<string>
			status:Ref<string>
			transferTypeUniqueIdentifier:Ref<string>
			transferReasonUniqueIdentifier:Ref<string>
			processId:Ref<string>
			effectiveDate:Ref<string>
			createdTime:Ref<string>
			updatedTime:Ref<string>
			transferInfo:Ref<TransferInfo>
	}
	export interface JobChangeBuilder extends Struct<JobChangeBuilder>{

			jobChangeId(jobChangeId:string):Ref<JobChangeBuilder>
			employmentId(employmentId:string):Ref<JobChangeBuilder>
			status(status:string):Ref<JobChangeBuilder>
			transferTypeUniqueIdentifier(transferTypeUniqueIdentifier:string):Ref<JobChangeBuilder>
			transferReasonUniqueIdentifier(transferReasonUniqueIdentifier:string):Ref<JobChangeBuilder>
			processId(processId:string):Ref<JobChangeBuilder>
			effectiveDate(effectiveDate:string):Ref<JobChangeBuilder>
			createdTime(createdTime:string):Ref<JobChangeBuilder>
			updatedTime(updatedTime:string):Ref<JobChangeBuilder>
			transferInfo(transferInfo:Ref<TransferInfo>):Ref<JobChangeBuilder>
			build():Ref<JobChange>
	}
	export interface JobData extends Struct<JobData>{

			id:Ref<string>
			versionId:Ref<string>
			jobLevelId:Ref<string>
			jobGradeId:Ref<string>
			employeeTypeId:Ref<string>
			workingHoursTypeId:Ref<string>
			workLocationId:Ref<string>
			departmentId:Ref<string>
			jobId:Ref<string>
			probationStartDate:Ref<string>
			probationEndDate:Ref<string>
			primaryJobData:Ref<bool>
			employmentId:Ref<string>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			jobFamilyId:Ref<string>
			assignmentStartReason:Ref<Enum>
			probationExpectedEndDate:Ref<string>
			probationOutcome:Ref<Enum>
			weeklyWorkingHours:Ref<int>
			directManagerId:Ref<string>
			dottedLineManagerIdList:string[]
			secondDirectManagerId:Ref<string>
			costCenterRate:Ref<SupportCostCenterItem>[]
			weeklyWorkingHoursV2:Ref<float64>
			workShift:Ref<Enum>
			compensationType:Ref<Enum>
			serviceCompany:Ref<string>
	}
	export interface JobDataBuilder extends Struct<JobDataBuilder>{

			id(id:string):Ref<JobDataBuilder>
			versionId(versionId:string):Ref<JobDataBuilder>
			jobLevelId(jobLevelId:string):Ref<JobDataBuilder>
			jobGradeId(jobGradeId:string):Ref<JobDataBuilder>
			employeeTypeId(employeeTypeId:string):Ref<JobDataBuilder>
			workingHoursTypeId(workingHoursTypeId:string):Ref<JobDataBuilder>
			workLocationId(workLocationId:string):Ref<JobDataBuilder>
			departmentId(departmentId:string):Ref<JobDataBuilder>
			jobId(jobId:string):Ref<JobDataBuilder>
			probationStartDate(probationStartDate:string):Ref<JobDataBuilder>
			probationEndDate(probationEndDate:string):Ref<JobDataBuilder>
			primaryJobData(primaryJobData:bool):Ref<JobDataBuilder>
			employmentId(employmentId:string):Ref<JobDataBuilder>
			effectiveTime(effectiveTime:string):Ref<JobDataBuilder>
			expirationTime(expirationTime:string):Ref<JobDataBuilder>
			jobFamilyId(jobFamilyId:string):Ref<JobDataBuilder>
			assignmentStartReason(assignmentStartReason:Ref<Enum>):Ref<JobDataBuilder>
			probationExpectedEndDate(probationExpectedEndDate:string):Ref<JobDataBuilder>
			probationOutcome(probationOutcome:Ref<Enum>):Ref<JobDataBuilder>
			weeklyWorkingHours(weeklyWorkingHours:int):Ref<JobDataBuilder>
			directManagerId(directManagerId:string):Ref<JobDataBuilder>
			dottedLineManagerIdList(dottedLineManagerIdList:string[]):Ref<JobDataBuilder>
			secondDirectManagerId(secondDirectManagerId:string):Ref<JobDataBuilder>
			costCenterRate(costCenterRate:Ref<SupportCostCenterItem>[]):Ref<JobDataBuilder>
			weeklyWorkingHoursV2(weeklyWorkingHoursV2:float64):Ref<JobDataBuilder>
			workShift(workShift:Ref<Enum>):Ref<JobDataBuilder>
			compensationType(compensationType:Ref<Enum>):Ref<JobDataBuilder>
			serviceCompany(serviceCompany:string):Ref<JobDataBuilder>
			build():Ref<JobData>
	}
	export interface JobDataCostCenter extends Struct<JobDataCostCenter>{

			costCenterId:Ref<string>
			rate:Ref<int>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface JobDataCostCenterBuilder extends Struct<JobDataCostCenterBuilder>{

			costCenterId(costCenterId:string):Ref<JobDataCostCenterBuilder>
			rate(rate:int):Ref<JobDataCostCenterBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<JobDataCostCenterBuilder>
			build():Ref<JobDataCostCenter>
	}
	export interface JobFamily extends Struct<JobFamily>{

			id:Ref<string>
			name:Ref<I18n>[]
			active:Ref<bool>
			parentId:Ref<string>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			code:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface JobFamilyBuilder extends Struct<JobFamilyBuilder>{

			id(id:string):Ref<JobFamilyBuilder>
			name(name:Ref<I18n>[]):Ref<JobFamilyBuilder>
			active(active:bool):Ref<JobFamilyBuilder>
			parentId(parentId:string):Ref<JobFamilyBuilder>
			effectiveTime(effectiveTime:string):Ref<JobFamilyBuilder>
			expirationTime(expirationTime:string):Ref<JobFamilyBuilder>
			code(code:string):Ref<JobFamilyBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<JobFamilyBuilder>
			build():Ref<JobFamily>
	}
	export interface JobLevel extends Struct<JobLevel>{

			id:Ref<string>
			levelOrder:Ref<int>
			code:Ref<string>
			name:Ref<I18n>[]
			description:Ref<I18n>[]
			active:Ref<bool>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface JobLevelBuilder extends Struct<JobLevelBuilder>{

			id(id:string):Ref<JobLevelBuilder>
			levelOrder(levelOrder:int):Ref<JobLevelBuilder>
			code(code:string):Ref<JobLevelBuilder>
			name(name:Ref<I18n>[]):Ref<JobLevelBuilder>
			description(description:Ref<I18n>[]):Ref<JobLevelBuilder>
			active(active:bool):Ref<JobLevelBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<JobLevelBuilder>
			build():Ref<JobLevel>
	}
	export interface LeaveBalance extends Struct<LeaveBalance>{

			leaveTypeId:Ref<string>
			leaveTypeName:Ref<I18n>[]
			historicalCyclesLeft:Ref<string>
			thisCycleTotal:Ref<string>
			thisCycleTaken:Ref<string>
			leaveBalance:Ref<string>
			leaveDurationUnit:Ref<int>
	}
	export interface LeaveBalanceBuilder extends Struct<LeaveBalanceBuilder>{

			leaveTypeId(leaveTypeId:string):Ref<LeaveBalanceBuilder>
			leaveTypeName(leaveTypeName:Ref<I18n>[]):Ref<LeaveBalanceBuilder>
			historicalCyclesLeft(historicalCyclesLeft:string):Ref<LeaveBalanceBuilder>
			thisCycleTotal(thisCycleTotal:string):Ref<LeaveBalanceBuilder>
			thisCycleTaken(thisCycleTaken:string):Ref<LeaveBalanceBuilder>
			leaveBalance(leaveBalance:string):Ref<LeaveBalanceBuilder>
			leaveDurationUnit(leaveDurationUnit:int):Ref<LeaveBalanceBuilder>
			build():Ref<LeaveBalance>
	}
	export interface LeaveBalancesLeaveReq extends Struct<LeaveBalancesLeaveReq>{

	}
	export interface LeaveBalancesLeaveReqBuilder extends Struct<LeaveBalancesLeaveReqBuilder>{

			pageToken(pageToken:string):Ref<LeaveBalancesLeaveReqBuilder>
			pageSize(pageSize:string):Ref<LeaveBalancesLeaveReqBuilder>
			asOfDate(asOfDate:string):Ref<LeaveBalancesLeaveReqBuilder>
			employmentIdList(employmentIdList:string[]):Ref<LeaveBalancesLeaveReqBuilder>
			userIdType(userIdType:string):Ref<LeaveBalancesLeaveReqBuilder>
			timeZone(timeZone:string):Ref<LeaveBalancesLeaveReqBuilder>
			build():Ref<LeaveBalancesLeaveReq>
	}
	export interface LeaveBalancesLeaveResp extends Struct<LeaveBalancesLeaveResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<LeaveBalancesLeaveRespData>
			success():bool
	}
	export interface LeaveBalancesLeaveRespData extends Struct<LeaveBalancesLeaveRespData>{

			employmentLeaveBalanceList:Ref<EmploymentLeaveBalance>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface LeaveGrantingRecord extends Struct<LeaveGrantingRecord>{

			id:Ref<string>
			employmentId:Ref<string>
			leaveTypeId:Ref<string>
			grantingQuantity:Ref<string>
			grantingUnit:Ref<int>
			effectiveDate:Ref<string>
			expirationDate:Ref<string>
			grantedBy:Ref<int>
			reason:Ref<I18n>[]
			createdAt:Ref<string>
			createdBy:Ref<string>
			updatedAt:Ref<string>
			updatedBy:Ref<string>
			sectionType:Ref<int>
	}
	export interface LeaveGrantingRecordBuilder extends Struct<LeaveGrantingRecordBuilder>{

			id(id:string):Ref<LeaveGrantingRecordBuilder>
			employmentId(employmentId:string):Ref<LeaveGrantingRecordBuilder>
			leaveTypeId(leaveTypeId:string):Ref<LeaveGrantingRecordBuilder>
			grantingQuantity(grantingQuantity:string):Ref<LeaveGrantingRecordBuilder>
			grantingUnit(grantingUnit:int):Ref<LeaveGrantingRecordBuilder>
			effectiveDate(effectiveDate:string):Ref<LeaveGrantingRecordBuilder>
			expirationDate(expirationDate:string):Ref<LeaveGrantingRecordBuilder>
			grantedBy(grantedBy:int):Ref<LeaveGrantingRecordBuilder>
			reason(reason:Ref<I18n>[]):Ref<LeaveGrantingRecordBuilder>
			createdAt(createdAt:string):Ref<LeaveGrantingRecordBuilder>
			createdBy(createdBy:string):Ref<LeaveGrantingRecordBuilder>
			updatedAt(updatedAt:string):Ref<LeaveGrantingRecordBuilder>
			updatedBy(updatedBy:string):Ref<LeaveGrantingRecordBuilder>
			sectionType(sectionType:int):Ref<LeaveGrantingRecordBuilder>
			build():Ref<LeaveGrantingRecord>
	}
	export interface LeaveRequest extends Struct<LeaveRequest>{

			leaveRequestId:Ref<string>
			employmentId:Ref<string>
			employmentName:Ref<I18n>[]
			leaveTypeId:Ref<string>
			leaveTypeName:Ref<I18n>[]
			startTime:Ref<string>
			endTime:Ref<string>
			leaveDuration:Ref<string>
			leaveDurationUnit:Ref<int>
			leaveRequestStatus:Ref<int>
			grantSource:Ref<string>
			returnTime:Ref<string>
			submittedAt:Ref<string>
			submittedBy:Ref<string>
			notes:Ref<string>
			approvalDate:Ref<string>
			isDeducted:Ref<bool>
			details:Ref<LeaveRequestDetail>[]
			leaveTypeCode:Ref<string>
			actualEndDate:Ref<string>
			estimatedEndDate:Ref<string>
			timeZone:Ref<string>
			dataSource:Ref<int>
			leaveProcessId:string[]
			leaveCorrectProcessId:string[]
			leaveCancelProcessId:string[]
			leaveReturnProcessId:string[]
			wdPaidType:Ref<int>
	}
	export interface LeaveRequestBuilder extends Struct<LeaveRequestBuilder>{

			leaveRequestId(leaveRequestId:string):Ref<LeaveRequestBuilder>
			employmentId(employmentId:string):Ref<LeaveRequestBuilder>
			employmentName(employmentName:Ref<I18n>[]):Ref<LeaveRequestBuilder>
			leaveTypeId(leaveTypeId:string):Ref<LeaveRequestBuilder>
			leaveTypeName(leaveTypeName:Ref<I18n>[]):Ref<LeaveRequestBuilder>
			startTime(startTime:string):Ref<LeaveRequestBuilder>
			endTime(endTime:string):Ref<LeaveRequestBuilder>
			leaveDuration(leaveDuration:string):Ref<LeaveRequestBuilder>
			leaveDurationUnit(leaveDurationUnit:int):Ref<LeaveRequestBuilder>
			leaveRequestStatus(leaveRequestStatus:int):Ref<LeaveRequestBuilder>
			grantSource(grantSource:string):Ref<LeaveRequestBuilder>
			returnTime(returnTime:string):Ref<LeaveRequestBuilder>
			submittedAt(submittedAt:string):Ref<LeaveRequestBuilder>
			submittedBy(submittedBy:string):Ref<LeaveRequestBuilder>
			notes(notes:string):Ref<LeaveRequestBuilder>
			approvalDate(approvalDate:string):Ref<LeaveRequestBuilder>
			isDeducted(isDeducted:bool):Ref<LeaveRequestBuilder>
			details(details:Ref<LeaveRequestDetail>[]):Ref<LeaveRequestBuilder>
			leaveTypeCode(leaveTypeCode:string):Ref<LeaveRequestBuilder>
			actualEndDate(actualEndDate:string):Ref<LeaveRequestBuilder>
			estimatedEndDate(estimatedEndDate:string):Ref<LeaveRequestBuilder>
			timeZone(timeZone:string):Ref<LeaveRequestBuilder>
			dataSource(dataSource:int):Ref<LeaveRequestBuilder>
			leaveProcessId(leaveProcessId:string[]):Ref<LeaveRequestBuilder>
			leaveCorrectProcessId(leaveCorrectProcessId:string[]):Ref<LeaveRequestBuilder>
			leaveCancelProcessId(leaveCancelProcessId:string[]):Ref<LeaveRequestBuilder>
			leaveReturnProcessId(leaveReturnProcessId:string[]):Ref<LeaveRequestBuilder>
			wdPaidType(wdPaidType:int):Ref<LeaveRequestBuilder>
			build():Ref<LeaveRequest>
	}
	export interface LeaveRequestDetail extends Struct<LeaveRequestDetail>{

			leaveRequestId:Ref<string>
			leaveDate:Ref<string>
			leaveDuration:Ref<string>
			leaveDurationUnit:Ref<int>
			paidType:Ref<int>
	}
	export interface LeaveRequestDetailBuilder extends Struct<LeaveRequestDetailBuilder>{

			leaveRequestId(leaveRequestId:string):Ref<LeaveRequestDetailBuilder>
			leaveDate(leaveDate:string):Ref<LeaveRequestDetailBuilder>
			leaveDuration(leaveDuration:string):Ref<LeaveRequestDetailBuilder>
			leaveDurationUnit(leaveDurationUnit:int):Ref<LeaveRequestDetailBuilder>
			paidType(paidType:int):Ref<LeaveRequestDetailBuilder>
			build():Ref<LeaveRequestDetail>
	}
	export interface LeaveRequestHistoryLeaveReq extends Struct<LeaveRequestHistoryLeaveReq>{

	}
	export interface LeaveRequestHistoryLeaveReqBuilder extends Struct<LeaveRequestHistoryLeaveReqBuilder>{

			pageToken(pageToken:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			pageSize(pageSize:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			employmentIdList(employmentIdList:string[]):Ref<LeaveRequestHistoryLeaveReqBuilder>
			initiatorIdList(initiatorIdList:string[]):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveRequestStatus(leaveRequestStatus:string[]):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveTypeIdList(leaveTypeIdList:string[]):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveStartDateMin(leaveStartDateMin:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveStartDateMax(leaveStartDateMax:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveEndDateMin(leaveEndDateMin:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveEndDateMax(leaveEndDateMax:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveSubmitDateMin(leaveSubmitDateMin:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveSubmitDateMax(leaveSubmitDateMax:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			userIdType(userIdType:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveUpdateTimeMin(leaveUpdateTimeMin:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveUpdateTimeMax(leaveUpdateTimeMax:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			returnDetail(returnDetail:bool):Ref<LeaveRequestHistoryLeaveReqBuilder>
			leaveTermType(leaveTermType:int):Ref<LeaveRequestHistoryLeaveReqBuilder>
			timeZone(timeZone:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			dataSource(dataSource:int):Ref<LeaveRequestHistoryLeaveReqBuilder>
			dbUpdateTimeMin(dbUpdateTimeMin:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			dbUpdateTimeMax(dbUpdateTimeMax:string):Ref<LeaveRequestHistoryLeaveReqBuilder>
			wdNeedAmountZeroRecords(wdNeedAmountZeroRecords:bool):Ref<LeaveRequestHistoryLeaveReqBuilder>
			wdNeedDeniedAndCanceledRecord(wdNeedDeniedAndCanceledRecord:bool):Ref<LeaveRequestHistoryLeaveReqBuilder>
			wdPaidType(wdPaidType:int):Ref<LeaveRequestHistoryLeaveReqBuilder>
			build():Ref<LeaveRequestHistoryLeaveReq>
	}
	export interface LeaveRequestHistoryLeaveResp extends Struct<LeaveRequestHistoryLeaveResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<LeaveRequestHistoryLeaveRespData>
			success():bool
	}
	export interface LeaveRequestHistoryLeaveRespData extends Struct<LeaveRequestHistoryLeaveRespData>{

			leaveRequestList:Ref<LeaveRequest>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface LeaveSubtype extends Struct<LeaveSubtype>{

			leaveTypeId:Ref<string>
			leaveTypeName:Ref<I18n>[]
	}
	export interface LeaveSubtypeBuilder extends Struct<LeaveSubtypeBuilder>{

			leaveTypeId(leaveTypeId:string):Ref<LeaveSubtypeBuilder>
			leaveTypeName(leaveTypeName:Ref<I18n>[]):Ref<LeaveSubtypeBuilder>
			build():Ref<LeaveSubtype>
	}
	export interface LeaveType extends Struct<LeaveType>{

			leaveTypeId:Ref<string>
			leaveTypeName:Ref<I18n>[]
			status:Ref<int>
			leaveSubtypeList:Ref<LeaveSubtype>[]
			createdAt:Ref<string>
			createdBy:Ref<string>
			updatedAt:Ref<string>
			updatedBy:Ref<string>
	}
	export interface LeaveTypeBuilder extends Struct<LeaveTypeBuilder>{

			leaveTypeId(leaveTypeId:string):Ref<LeaveTypeBuilder>
			leaveTypeName(leaveTypeName:Ref<I18n>[]):Ref<LeaveTypeBuilder>
			status(status:int):Ref<LeaveTypeBuilder>
			leaveSubtypeList(leaveSubtypeList:Ref<LeaveSubtype>[]):Ref<LeaveTypeBuilder>
			createdAt(createdAt:string):Ref<LeaveTypeBuilder>
			createdBy(createdBy:string):Ref<LeaveTypeBuilder>
			updatedAt(updatedAt:string):Ref<LeaveTypeBuilder>
			updatedBy(updatedBy:string):Ref<LeaveTypeBuilder>
			build():Ref<LeaveType>
	}
	export interface LeaveTypesLeaveReq extends Struct<LeaveTypesLeaveReq>{

	}
	export interface LeaveTypesLeaveReqBuilder extends Struct<LeaveTypesLeaveReqBuilder>{

			pageToken(pageToken:string):Ref<LeaveTypesLeaveReqBuilder>
			pageSize(pageSize:string):Ref<LeaveTypesLeaveReqBuilder>
			status(status:string):Ref<LeaveTypesLeaveReqBuilder>
			userIdType(userIdType:string):Ref<LeaveTypesLeaveReqBuilder>
			build():Ref<LeaveTypesLeaveReq>
	}
	export interface LeaveTypesLeaveResp extends Struct<LeaveTypesLeaveResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<LeaveTypesLeaveRespData>
			success():bool
	}
	export interface LeaveTypesLeaveRespData extends Struct<LeaveTypesLeaveRespData>{

			leaveTypeList:Ref<LeaveType>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListCompanyReq extends Struct<ListCompanyReq>{

	}
	export interface ListCompanyReqBuilder extends Struct<ListCompanyReqBuilder>{

			pageToken(pageToken:string):Ref<ListCompanyReqBuilder>
			pageSize(pageSize:string):Ref<ListCompanyReqBuilder>
			build():Ref<ListCompanyReq>
	}
	export interface ListCompanyResp extends Struct<ListCompanyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListCompanyRespData>
			success():bool
	}
	export interface ListCompanyRespData extends Struct<ListCompanyRespData>{

			items:Ref<Company>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListContractReq extends Struct<ListContractReq>{

	}
	export interface ListContractReqBuilder extends Struct<ListContractReqBuilder>{

			pageToken(pageToken:string):Ref<ListContractReqBuilder>
			pageSize(pageSize:string):Ref<ListContractReqBuilder>
			build():Ref<ListContractReq>
	}
	export interface ListContractResp extends Struct<ListContractResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListContractRespData>
			success():bool
	}
	export interface ListContractRespData extends Struct<ListContractRespData>{

			items:Ref<Contract>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListCountryRegionReq extends Struct<ListCountryRegionReq>{

	}
	export interface ListCountryRegionReqBuilder extends Struct<ListCountryRegionReqBuilder>{

			pageToken(pageToken:string):Ref<ListCountryRegionReqBuilder>
			pageSize(pageSize:string):Ref<ListCountryRegionReqBuilder>
			build():Ref<ListCountryRegionReq>
	}
	export interface ListCountryRegionResp extends Struct<ListCountryRegionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListCountryRegionRespData>
			success():bool
	}
	export interface ListCountryRegionRespData extends Struct<ListCountryRegionRespData>{

			items:Ref<CountryRegion>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListCurrencyReq extends Struct<ListCurrencyReq>{

	}
	export interface ListCurrencyReqBuilder extends Struct<ListCurrencyReqBuilder>{

			pageToken(pageToken:string):Ref<ListCurrencyReqBuilder>
			pageSize(pageSize:string):Ref<ListCurrencyReqBuilder>
			build():Ref<ListCurrencyReq>
	}
	export interface ListCurrencyResp extends Struct<ListCurrencyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListCurrencyRespData>
			success():bool
	}
	export interface ListCurrencyRespData extends Struct<ListCurrencyRespData>{

			items:Ref<Currency>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListDepartmentReq extends Struct<ListDepartmentReq>{

	}
	export interface ListDepartmentReqBuilder extends Struct<ListDepartmentReqBuilder>{

			pageToken(pageToken:string):Ref<ListDepartmentReqBuilder>
			pageSize(pageSize:string):Ref<ListDepartmentReqBuilder>
			departmentIdList(departmentIdList:string[]):Ref<ListDepartmentReqBuilder>
			nameList(nameList:string[]):Ref<ListDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<ListDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListDepartmentReqBuilder>
			build():Ref<ListDepartmentReq>
	}
	export interface ListDepartmentResp extends Struct<ListDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListDepartmentRespData>
			success():bool
	}
	export interface ListDepartmentRespData extends Struct<ListDepartmentRespData>{

			items:Ref<Department>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListEmployeeTypeReq extends Struct<ListEmployeeTypeReq>{

	}
	export interface ListEmployeeTypeReqBuilder extends Struct<ListEmployeeTypeReqBuilder>{

			pageToken(pageToken:string):Ref<ListEmployeeTypeReqBuilder>
			pageSize(pageSize:string):Ref<ListEmployeeTypeReqBuilder>
			build():Ref<ListEmployeeTypeReq>
	}
	export interface ListEmployeeTypeResp extends Struct<ListEmployeeTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListEmployeeTypeRespData>
			success():bool
	}
	export interface ListEmployeeTypeRespData extends Struct<ListEmployeeTypeRespData>{

			items:Ref<EmployeeType>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListJobDataReq extends Struct<ListJobDataReq>{

	}
	export interface ListJobDataReqBuilder extends Struct<ListJobDataReqBuilder>{

			pageToken(pageToken:string):Ref<ListJobDataReqBuilder>
			pageSize(pageSize:string):Ref<ListJobDataReqBuilder>
			employmentId(employmentId:string):Ref<ListJobDataReqBuilder>
			jobDataIdList(jobDataIdList:string[]):Ref<ListJobDataReqBuilder>
			departmentId(departmentId:string):Ref<ListJobDataReqBuilder>
			jobId(jobId:string):Ref<ListJobDataReqBuilder>
			getAllVersion(getAllVersion:bool):Ref<ListJobDataReqBuilder>
			userIdType(userIdType:string):Ref<ListJobDataReqBuilder>
			departmentIdType(departmentIdType:string):Ref<ListJobDataReqBuilder>
			build():Ref<ListJobDataReq>
	}
	export interface ListJobDataResp extends Struct<ListJobDataResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListJobDataRespData>
			success():bool
	}
	export interface ListJobDataRespData extends Struct<ListJobDataRespData>{

			items:Ref<JobData>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListJobFamilyReq extends Struct<ListJobFamilyReq>{

	}
	export interface ListJobFamilyReqBuilder extends Struct<ListJobFamilyReqBuilder>{

			pageToken(pageToken:string):Ref<ListJobFamilyReqBuilder>
			pageSize(pageSize:string):Ref<ListJobFamilyReqBuilder>
			build():Ref<ListJobFamilyReq>
	}
	export interface ListJobFamilyResp extends Struct<ListJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListJobFamilyRespData>
			success():bool
	}
	export interface ListJobFamilyRespData extends Struct<ListJobFamilyRespData>{

			items:Ref<JobFamily>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListJobLevelReq extends Struct<ListJobLevelReq>{

	}
	export interface ListJobLevelReqBuilder extends Struct<ListJobLevelReqBuilder>{

			pageToken(pageToken:string):Ref<ListJobLevelReqBuilder>
			pageSize(pageSize:string):Ref<ListJobLevelReqBuilder>
			build():Ref<ListJobLevelReq>
	}
	export interface ListJobLevelResp extends Struct<ListJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListJobLevelRespData>
			success():bool
	}
	export interface ListJobLevelRespData extends Struct<ListJobLevelRespData>{

			items:Ref<JobLevel>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListJobReq extends Struct<ListJobReq>{

	}
	export interface ListJobReqBuilder extends Struct<ListJobReqBuilder>{

			pageToken(pageToken:string):Ref<ListJobReqBuilder>
			pageSize(pageSize:string):Ref<ListJobReqBuilder>
			name(name:string):Ref<ListJobReqBuilder>
			queryLanguage(queryLanguage:string):Ref<ListJobReqBuilder>
			build():Ref<ListJobReq>
	}
	export interface ListJobResp extends Struct<ListJobResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListJobRespData>
			success():bool
	}
	export interface ListJobRespData extends Struct<ListJobRespData>{

			items:Ref<Job>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListLocationReq extends Struct<ListLocationReq>{

	}
	export interface ListLocationReqBuilder extends Struct<ListLocationReqBuilder>{

			pageToken(pageToken:string):Ref<ListLocationReqBuilder>
			pageSize(pageSize:string):Ref<ListLocationReqBuilder>
			build():Ref<ListLocationReq>
	}
	export interface ListLocationResp extends Struct<ListLocationResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListLocationRespData>
			success():bool
	}
	export interface ListLocationRespData extends Struct<ListLocationRespData>{

			items:Ref<Location>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListNationalIdTypeReq extends Struct<ListNationalIdTypeReq>{

	}
	export interface ListNationalIdTypeReqBuilder extends Struct<ListNationalIdTypeReqBuilder>{

			pageToken(pageToken:string):Ref<ListNationalIdTypeReqBuilder>
			pageSize(pageSize:string):Ref<ListNationalIdTypeReqBuilder>
			identificationType(identificationType:string):Ref<ListNationalIdTypeReqBuilder>
			code(code:string):Ref<ListNationalIdTypeReqBuilder>
			countryRegionId(countryRegionId:string):Ref<ListNationalIdTypeReqBuilder>
			build():Ref<ListNationalIdTypeReq>
	}
	export interface ListNationalIdTypeResp extends Struct<ListNationalIdTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListNationalIdTypeRespData>
			success():bool
	}
	export interface ListNationalIdTypeRespData extends Struct<ListNationalIdTypeRespData>{

			items:Ref<NationalIdType>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListObjectApiNameCustomFieldReq extends Struct<ListObjectApiNameCustomFieldReq>{

	}
	export interface ListObjectApiNameCustomFieldReqBuilder extends Struct<ListObjectApiNameCustomFieldReqBuilder>{

			pageToken(pageToken:string):Ref<ListObjectApiNameCustomFieldReqBuilder>
			pageSize(pageSize:string):Ref<ListObjectApiNameCustomFieldReqBuilder>
			build():Ref<ListObjectApiNameCustomFieldReq>
	}
	export interface ListObjectApiNameCustomFieldResp extends Struct<ListObjectApiNameCustomFieldResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListObjectApiNameCustomFieldRespData>
			success():bool
	}
	export interface ListObjectApiNameCustomFieldRespData extends Struct<ListObjectApiNameCustomFieldRespData>{

			items:Ref<Object>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListPreHireReq extends Struct<ListPreHireReq>{

	}
	export interface ListPreHireReqBuilder extends Struct<ListPreHireReqBuilder>{

			pageToken(pageToken:string):Ref<ListPreHireReqBuilder>
			pageSize(pageSize:string):Ref<ListPreHireReqBuilder>
			preHireIds(preHireIds:string[]):Ref<ListPreHireReqBuilder>
			build():Ref<ListPreHireReq>
	}
	export interface ListPreHireResp extends Struct<ListPreHireResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListPreHireRespData>
			success():bool
	}
	export interface ListPreHireRespData extends Struct<ListPreHireRespData>{

			items:Ref<PreHireQuery>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListSecurityGroupReq extends Struct<ListSecurityGroupReq>{

	}
	export interface ListSecurityGroupReqBuilder extends Struct<ListSecurityGroupReqBuilder>{

			pageToken(pageToken:string):Ref<ListSecurityGroupReqBuilder>
			pageSize(pageSize:string):Ref<ListSecurityGroupReqBuilder>
			build():Ref<ListSecurityGroupReq>
	}
	export interface ListSecurityGroupResp extends Struct<ListSecurityGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListSecurityGroupRespData>
			success():bool
	}
	export interface ListSecurityGroupRespData extends Struct<ListSecurityGroupRespData>{

			items:Ref<SecurityGroup>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListSubdivisionReq extends Struct<ListSubdivisionReq>{

	}
	export interface ListSubdivisionReqBuilder extends Struct<ListSubdivisionReqBuilder>{

			pageToken(pageToken:string):Ref<ListSubdivisionReqBuilder>
			pageSize(pageSize:string):Ref<ListSubdivisionReqBuilder>
			countryRegionId(countryRegionId:string):Ref<ListSubdivisionReqBuilder>
			build():Ref<ListSubdivisionReq>
	}
	export interface ListSubdivisionResp extends Struct<ListSubdivisionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListSubdivisionRespData>
			success():bool
	}
	export interface ListSubdivisionRespData extends Struct<ListSubdivisionRespData>{

			items:Ref<Subdivision>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListSubregionReq extends Struct<ListSubregionReq>{

	}
	export interface ListSubregionReqBuilder extends Struct<ListSubregionReqBuilder>{

			pageToken(pageToken:string):Ref<ListSubregionReqBuilder>
			pageSize(pageSize:string):Ref<ListSubregionReqBuilder>
			subdivisionId(subdivisionId:string):Ref<ListSubregionReqBuilder>
			build():Ref<ListSubregionReq>
	}
	export interface ListSubregionResp extends Struct<ListSubregionResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListSubregionRespData>
			success():bool
	}
	export interface ListSubregionRespData extends Struct<ListSubregionRespData>{

			items:Ref<Subregion>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface ListWorkingHoursTypeReq extends Struct<ListWorkingHoursTypeReq>{

	}
	export interface ListWorkingHoursTypeReqBuilder extends Struct<ListWorkingHoursTypeReqBuilder>{

			pageToken(pageToken:string):Ref<ListWorkingHoursTypeReqBuilder>
			pageSize(pageSize:string):Ref<ListWorkingHoursTypeReqBuilder>
			build():Ref<ListWorkingHoursTypeReq>
	}
	export interface ListWorkingHoursTypeResp extends Struct<ListWorkingHoursTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListWorkingHoursTypeRespData>
			success():bool
	}
	export interface ListWorkingHoursTypeRespData extends Struct<ListWorkingHoursTypeRespData>{

			items:Ref<WorkingHoursType>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface Location extends Struct<Location>{

			id:Ref<string>
			hiberarchyCommon:Ref<HiberarchyCommon>
			locationUsageList:Ref<Enum>[]
			address:Ref<Address>[]
			workingHoursTypeId:Ref<string>
			effectiveTime:Ref<string>
			expirationTime:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			locale:Ref<Enum>
			timeZoneId:Ref<string>
			displayLanguageId:Ref<string>
	}
	export interface LocationBuilder extends Struct<LocationBuilder>{

			id(id:string):Ref<LocationBuilder>
			hiberarchyCommon(hiberarchyCommon:Ref<HiberarchyCommon>):Ref<LocationBuilder>
			locationUsageList(locationUsageList:Ref<Enum>[]):Ref<LocationBuilder>
			address(address:Ref<Address>[]):Ref<LocationBuilder>
			workingHoursTypeId(workingHoursTypeId:string):Ref<LocationBuilder>
			effectiveTime(effectiveTime:string):Ref<LocationBuilder>
			expirationTime(expirationTime:string):Ref<LocationBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<LocationBuilder>
			locale(locale:Ref<Enum>):Ref<LocationBuilder>
			timeZoneId(timeZoneId:string):Ref<LocationBuilder>
			displayLanguageId(displayLanguageId:string):Ref<LocationBuilder>
			build():Ref<Location>
	}
	export interface LookupFieldSetting extends Struct<LookupFieldSetting>{

			lookupObjApiName:Ref<string>
			isMultiple:Ref<bool>
	}
	export interface LookupFieldSettingBuilder extends Struct<LookupFieldSettingBuilder>{

			lookupObjApiName(lookupObjApiName:string):Ref<LookupFieldSettingBuilder>
			isMultiple(isMultiple:bool):Ref<LookupFieldSettingBuilder>
			build():Ref<LookupFieldSetting>
	}
	export interface ManageRelation extends Struct<ManageRelation>{

			subordinateDepartmentId:Ref<string>
			subordinateEmployeeId:Ref<string>
			managerType:Ref<Enum>
			reportModeType:Ref<Enum>
			superiorEmployeeId:Ref<string>
			effectiveTime:Ref<string>
	}
	export interface ManageRelationBuilder extends Struct<ManageRelationBuilder>{

			subordinateDepartmentId(subordinateDepartmentId:string):Ref<ManageRelationBuilder>
			subordinateEmployeeId(subordinateEmployeeId:string):Ref<ManageRelationBuilder>
			managerType(managerType:Ref<Enum>):Ref<ManageRelationBuilder>
			reportModeType(reportModeType:Ref<Enum>):Ref<ManageRelationBuilder>
			superiorEmployeeId(superiorEmployeeId:string):Ref<ManageRelationBuilder>
			effectiveTime(effectiveTime:string):Ref<ManageRelationBuilder>
			build():Ref<ManageRelation>
	}
	export interface ManagementScope extends Struct<ManagementScope>{

			managementDimension:Ref<string>
			objId:Ref<string>
	}
	export interface ManagementScopeBuilder extends Struct<ManagementScopeBuilder>{

			managementDimension(managementDimension:string):Ref<ManagementScopeBuilder>
			objId(objId:string):Ref<ManagementScopeBuilder>
			build():Ref<ManagementScope>
	}
	export interface MatchCompensationStandardReq extends Struct<MatchCompensationStandardReq>{

	}
	export interface MatchCompensationStandardReqBuilder extends Struct<MatchCompensationStandardReqBuilder>{

			userIdType(userIdType:string):Ref<MatchCompensationStandardReqBuilder>
			departmentIdType(departmentIdType:string):Ref<MatchCompensationStandardReqBuilder>
			employmentId(employmentId:string):Ref<MatchCompensationStandardReqBuilder>
			referenceObjectApi(referenceObjectApi:string):Ref<MatchCompensationStandardReqBuilder>
			referenceObjectId(referenceObjectId:string):Ref<MatchCompensationStandardReqBuilder>
			departmentId(departmentId:string):Ref<MatchCompensationStandardReqBuilder>
			workLocationId(workLocationId:string):Ref<MatchCompensationStandardReqBuilder>
			companyId(companyId:string):Ref<MatchCompensationStandardReqBuilder>
			jobFamilyId(jobFamilyId:string):Ref<MatchCompensationStandardReqBuilder>
			jobLevelId(jobLevelId:string):Ref<MatchCompensationStandardReqBuilder>
			employeeTypeId(employeeTypeId:string):Ref<MatchCompensationStandardReqBuilder>
			recruitmentType(recruitmentType:string):Ref<MatchCompensationStandardReqBuilder>
			cpstChangeReasonId(cpstChangeReasonId:string):Ref<MatchCompensationStandardReqBuilder>
			cpstPlanId(cpstPlanId:string):Ref<MatchCompensationStandardReqBuilder>
			cpstSalaryLevelId(cpstSalaryLevelId:string):Ref<MatchCompensationStandardReqBuilder>
			effectiveTime(effectiveTime:string):Ref<MatchCompensationStandardReqBuilder>
			build():Ref<MatchCompensationStandardReq>
	}
	export interface MatchCompensationStandardResp extends Struct<MatchCompensationStandardResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<MatchCompensationStandardRespData>
			success():bool
	}
	export interface MatchCompensationStandardRespData extends Struct<MatchCompensationStandardRespData>{

			standardId:Ref<string>
			grade:Ref<CpstGrade>
			effectiveTime:Ref<string>
	}
	export interface Name extends Struct<Name>{

			zhCn:Ref<string>
			enUs:Ref<string>
	}
	export interface NameBuilder extends Struct<NameBuilder>{

			zhCn(zhCn:string):Ref<NameBuilder>
			enUs(enUs:string):Ref<NameBuilder>
			build():Ref<Name>
	}
	export interface NationalId extends Struct<NationalId>{

			nationalIdTypeId:Ref<string>
			nationalIdNumber:Ref<string>
			issueDate:Ref<string>
			expirationDate:Ref<string>
			countryRegionId:Ref<string>
			issuedBy:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface NationalIdBuilder extends Struct<NationalIdBuilder>{

			nationalIdTypeId(nationalIdTypeId:string):Ref<NationalIdBuilder>
			nationalIdNumber(nationalIdNumber:string):Ref<NationalIdBuilder>
			issueDate(issueDate:string):Ref<NationalIdBuilder>
			expirationDate(expirationDate:string):Ref<NationalIdBuilder>
			countryRegionId(countryRegionId:string):Ref<NationalIdBuilder>
			issuedBy(issuedBy:string):Ref<NationalIdBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<NationalIdBuilder>
			build():Ref<NationalId>
	}
	export interface NationalIdType extends Struct<NationalIdType>{

			id:Ref<string>
			countryRegionId:Ref<string>
			name:Ref<I18n>[]
			active:Ref<bool>
			validationRule:Ref<string>
			validationRuleDescription:Ref<I18n>[]
			code:Ref<string>
			identificationType:Ref<Enum>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface NationalIdTypeBuilder extends Struct<NationalIdTypeBuilder>{

			id(id:string):Ref<NationalIdTypeBuilder>
			countryRegionId(countryRegionId:string):Ref<NationalIdTypeBuilder>
			name(name:Ref<I18n>[]):Ref<NationalIdTypeBuilder>
			active(active:bool):Ref<NationalIdTypeBuilder>
			validationRule(validationRule:string):Ref<NationalIdTypeBuilder>
			validationRuleDescription(validationRuleDescription:Ref<I18n>[]):Ref<NationalIdTypeBuilder>
			code(code:string):Ref<NationalIdTypeBuilder>
			identificationType(identificationType:Ref<Enum>):Ref<NationalIdTypeBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<NationalIdTypeBuilder>
			build():Ref<NationalIdType>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAddressBuilder():Ref<AddressBuilder>

	export function newApplicationInfoBuilder():Ref<ApplicationInfoBuilder>

	export function newAssignedOrganizationBuilder():Ref<AssignedOrganizationBuilder>

	export function newAssignedOrganizationWithCodeBuilder():Ref<AssignedOrganizationWithCodeBuilder>

	export function newAttachmentFieldSettingBuilder():Ref<AttachmentFieldSettingBuilder>

	export function newBackgroundCheckBuilder():Ref<BackgroundCheckBuilder>

	export function newBackgroundCheckCityBuilder():Ref<BackgroundCheckCityBuilder>

	export function newBackgroundCheckCountryBuilder():Ref<BackgroundCheckCountryBuilder>

	export function newBackgroundCheckReportObjectBuilder():Ref<BackgroundCheckReportObjectBuilder>

	export function newBackgroundCheckTargetBuilder():Ref<BackgroundCheckTargetBuilder>

	export function newBankAccountBuilder():Ref<BankAccountBuilder>

	export function newBpRoleOrganizationBuilder():Ref<BpRoleOrganizationBuilder>

	export function newBpmDataengineI18nBuilder():Ref<BpmDataengineI18nBuilder>

	export function newCommonSchemaConfigBuilder():Ref<CommonSchemaConfigBuilder>

	export function newCommonSchemaOptionBuilder():Ref<CommonSchemaOptionBuilder>

	export function newCompanyBuilder():Ref<CompanyBuilder>

	export function newContractBuilder():Ref<ContractBuilder>

	export function newConvertCommonDataIdPathReqBodyBuilder():Ref<ConvertCommonDataIdPathReqBodyBuilder>

	export function newConvertCommonDataIdReqBodyBuilder():Ref<ConvertCommonDataIdReqBodyBuilder>

	export function newConvertCommonDataIdReqBuilder():Ref<ConvertCommonDataIdReqBuilder>

	export function newCostCenterBuilder():Ref<CostCenterBuilder>

	export function newCostCenterQueryBuilder():Ref<CostCenterQueryBuilder>

	export function newCountryRegionBuilder():Ref<CountryRegionBuilder>

	export function newCpstBandWidthBuilder():Ref<CpstBandWidthBuilder>

	export function newCpstCurrencyBuilder():Ref<CpstCurrencyBuilder>

	export function newCpstGradeBuilder():Ref<CpstGradeBuilder>

	export function newCpstGradeStandardValueBuilder():Ref<CpstGradeStandardValueBuilder>

	export function newCpstI18nBuilder():Ref<CpstI18nBuilder>

	export function newCpstMatchItemBuilder():Ref<CpstMatchItemBuilder>

	export function newCpstStandardTypeBuilder():Ref<CpstStandardTypeBuilder>

	export function newCreateCompanyReqBuilder():Ref<CreateCompanyReqBuilder>

	export function newCreateContractReqBuilder():Ref<CreateContractReqBuilder>

	export function newCreateDepartmentReqBuilder():Ref<CreateDepartmentReqBuilder>

	export function newCreateEmployeeTypeReqBuilder():Ref<CreateEmployeeTypeReqBuilder>

	export function newCreateEmploymentReqBuilder():Ref<CreateEmploymentReqBuilder>

	export function newCreateJobChangePathReqBodyBuilder():Ref<CreateJobChangePathReqBodyBuilder>

	export function newCreateJobChangeReqBodyBuilder():Ref<CreateJobChangeReqBodyBuilder>

	export function newCreateJobChangeReqBuilder():Ref<CreateJobChangeReqBuilder>

	export function newCreateJobDataReqBuilder():Ref<CreateJobDataReqBuilder>

	export function newCreateJobFamilyReqBuilder():Ref<CreateJobFamilyReqBuilder>

	export function newCreateJobLevelReqBuilder():Ref<CreateJobLevelReqBuilder>

	export function newCreateJobReqBuilder():Ref<CreateJobReqBuilder>

	export function newCreateLeaveGrantingRecordPathReqBodyBuilder():Ref<CreateLeaveGrantingRecordPathReqBodyBuilder>

	export function newCreateLeaveGrantingRecordReqBodyBuilder():Ref<CreateLeaveGrantingRecordReqBodyBuilder>

	export function newCreateLeaveGrantingRecordReqBuilder():Ref<CreateLeaveGrantingRecordReqBuilder>

	export function newCreateLocationReqBuilder():Ref<CreateLocationReqBuilder>

	export function newCreateNationalIdTypeReqBuilder():Ref<CreateNationalIdTypeReqBuilder>

	export function newCreateWorkingHoursTypeReqBuilder():Ref<CreateWorkingHoursTypeReqBuilder>

	export function newCurrencyBuilder():Ref<CurrencyBuilder>

	export function newCustomFieldBuilder():Ref<CustomFieldBuilder>

	export function newCustomFieldDataBuilder():Ref<CustomFieldDataBuilder>

	export function newCustomNameBuilder():Ref<CustomNameBuilder>

	export function newDateTimeFieldSettingBuilder():Ref<DateTimeFieldSettingBuilder>

	export function newDeleteCompanyReqBuilder():Ref<DeleteCompanyReqBuilder>

	export function newDeleteContractReqBuilder():Ref<DeleteContractReqBuilder>

	export function newDeleteDepartmentReqBuilder():Ref<DeleteDepartmentReqBuilder>

	export function newDeleteEmployeeTypeReqBuilder():Ref<DeleteEmployeeTypeReqBuilder>

	export function newDeleteEmploymentReqBuilder():Ref<DeleteEmploymentReqBuilder>

	export function newDeleteJobDataReqBuilder():Ref<DeleteJobDataReqBuilder>

	export function newDeleteJobFamilyReqBuilder():Ref<DeleteJobFamilyReqBuilder>

	export function newDeleteJobLevelReqBuilder():Ref<DeleteJobLevelReqBuilder>

	export function newDeleteJobReqBuilder():Ref<DeleteJobReqBuilder>

	export function newDeleteLeaveGrantingRecordReqBuilder():Ref<DeleteLeaveGrantingRecordReqBuilder>

	export function newDeleteLocationReqBuilder():Ref<DeleteLocationReqBuilder>

	export function newDeleteNationalIdTypeReqBuilder():Ref<DeleteNationalIdTypeReqBuilder>

	export function newDeletePersonReqBuilder():Ref<DeletePersonReqBuilder>

	export function newDeletePreHireReqBuilder():Ref<DeletePreHireReqBuilder>

	export function newDeleteWorkingHoursTypeReqBuilder():Ref<DeleteWorkingHoursTypeReqBuilder>

	export function newDepartmentBuilder():Ref<DepartmentBuilder>

	export function newDepartmentCreateBuilder():Ref<DepartmentCreateBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newDependentBuilder():Ref<DependentBuilder>

	export function newDimensionValueBuilder():Ref<DimensionValueBuilder>

	export function newEducationBuilder():Ref<EducationBuilder>

	export function newEmailBuilder():Ref<EmailBuilder>

	export function newEmergencyContactBuilder():Ref<EmergencyContactBuilder>

	export function newEmployeeDateTypeBuilder():Ref<EmployeeDateTypeBuilder>

	export function newEmployeeTypeBuilder():Ref<EmployeeTypeBuilder>

	export function newEmploymentBuilder():Ref<EmploymentBuilder>

	export function newEmploymentCostCenterBuilder():Ref<EmploymentCostCenterBuilder>

	export function newEmploymentCreateBuilder():Ref<EmploymentCreateBuilder>

	export function newEmploymentLeaveBalanceBuilder():Ref<EmploymentLeaveBalanceBuilder>

	export function newEnumBuilder():Ref<EnumBuilder>

	export function newEnumFieldOptionBuilder():Ref<EnumFieldOptionBuilder>

	export function newEnumFieldSettingBuilder():Ref<EnumFieldSettingBuilder>

	export function newFileBuilder():Ref<FileBuilder>

	export function newFilterConditionBuilder():Ref<FilterConditionBuilder>

	export function newFilterExpressionBuilder():Ref<FilterExpressionBuilder>

	export function newFilterRuleValueBuilder():Ref<FilterRuleValueBuilder>

	export function newFormFieldVariableBoolValueBuilder():Ref<FormFieldVariableBoolValueBuilder>

	export function newFormFieldVariableBuilder():Ref<FormFieldVariableBuilder>

	export function newFormFieldVariableDateValueBuilder():Ref<FormFieldVariableDateValueBuilder>

	export function newFormFieldVariableDatetimeValueBuilder():Ref<FormFieldVariableDatetimeValueBuilder>

	export function newFormFieldVariableDepartmentValueBuilder():Ref<FormFieldVariableDepartmentValueBuilder>

	export function newFormFieldVariableEmploymentValueBuilder():Ref<FormFieldVariableEmploymentValueBuilder>

	export function newFormFieldVariableEnumValueBuilder():Ref<FormFieldVariableEnumValueBuilder>

	export function newFormFieldVariableFileValueBuilder():Ref<FormFieldVariableFileValueBuilder>

	export function newFormFieldVariableI18nValueBuilder():Ref<FormFieldVariableI18nValueBuilder>

	export function newFormFieldVariableListObjectBuilder():Ref<FormFieldVariableListObjectBuilder>

	export function newFormFieldVariableListValueBuilder():Ref<FormFieldVariableListValueBuilder>

	export function newFormFieldVariableNumberValueBuilder():Ref<FormFieldVariableNumberValueBuilder>

	export function newFormFieldVariableObjectValueBuilder():Ref<FormFieldVariableObjectValueBuilder>

	export function newFormFieldVariableRecordValueBuilder():Ref<FormFieldVariableRecordValueBuilder>

	export function newFormFieldVariableRecordValueExampleBuilder():Ref<FormFieldVariableRecordValueExampleBuilder>

	export function newFormFieldVariableTextValueBuilder():Ref<FormFieldVariableTextValueBuilder>

	export function newFormVariableDataBuilder():Ref<FormVariableDataBuilder>

	export function newFormVariableValueInfoBuilder():Ref<FormVariableValueInfoBuilder>

	export function newFormVariableValueInfoExampleBuilder():Ref<FormVariableValueInfoExampleBuilder>

	export function newGetByParamCustomFieldReqBuilder():Ref<GetByParamCustomFieldReqBuilder>

	export function newGetCompanyReqBuilder():Ref<GetCompanyReqBuilder>

	export function newGetContractReqBuilder():Ref<GetContractReqBuilder>

	export function newGetCountryRegionReqBuilder():Ref<GetCountryRegionReqBuilder>

	export function newGetCurrencyReqBuilder():Ref<GetCurrencyReqBuilder>

	export function newGetDepartmentReqBuilder():Ref<GetDepartmentReqBuilder>

	export function newGetEmployeeTypeReqBuilder():Ref<GetEmployeeTypeReqBuilder>

	export function newGetFileReqBuilder():Ref<GetFileReqBuilder>

	export function newGetJobDataReqBuilder():Ref<GetJobDataReqBuilder>

	export function newGetJobFamilyReqBuilder():Ref<GetJobFamilyReqBuilder>

	export function newGetJobLevelReqBuilder():Ref<GetJobLevelReqBuilder>

	export function newGetJobReqBuilder():Ref<GetJobReqBuilder>

	export function newGetLocationReqBuilder():Ref<GetLocationReqBuilder>

	export function newGetNationalIdTypeReqBuilder():Ref<GetNationalIdTypeReqBuilder>

	export function newGetPersonReqBuilder():Ref<GetPersonReqBuilder>

	export function newGetPreHireReqBuilder():Ref<GetPreHireReqBuilder>

	export function newGetProcessFormVariableDataReqBuilder():Ref<GetProcessFormVariableDataReqBuilder>

	export function newGetSubdivisionReqBuilder():Ref<GetSubdivisionReqBuilder>

	export function newGetSubregionReqBuilder():Ref<GetSubregionReqBuilder>

	export function newGetWorkingHoursTypeReqBuilder():Ref<GetWorkingHoursTypeReqBuilder>

	export function newHiberarchyCommonBuilder():Ref<HiberarchyCommonBuilder>

	export function newHrbpBuilder():Ref<HrbpBuilder>

	export function newI18nBuilder():Ref<I18nBuilder>

	export function newIdInfoBuilder():Ref<IdInfoBuilder>

	export function newImageFieldSettingBuilder():Ref<ImageFieldSettingBuilder>

	export function newJobBuilder():Ref<JobBuilder>

	export function newJobCategoryBuilder():Ref<JobCategoryBuilder>

	export function newJobChangeBuilder():Ref<JobChangeBuilder>

	export function newJobDataBuilder():Ref<JobDataBuilder>

	export function newJobDataCostCenterBuilder():Ref<JobDataCostCenterBuilder>

	export function newJobFamilyBuilder():Ref<JobFamilyBuilder>

	export function newJobLevelBuilder():Ref<JobLevelBuilder>

	export function newLeaveBalanceBuilder():Ref<LeaveBalanceBuilder>

	export function newLeaveBalancesLeaveReqBuilder():Ref<LeaveBalancesLeaveReqBuilder>

	export function newLeaveGrantingRecordBuilder():Ref<LeaveGrantingRecordBuilder>

	export function newLeaveRequestBuilder():Ref<LeaveRequestBuilder>

	export function newLeaveRequestDetailBuilder():Ref<LeaveRequestDetailBuilder>

	export function newLeaveRequestHistoryLeaveReqBuilder():Ref<LeaveRequestHistoryLeaveReqBuilder>

	export function newLeaveSubtypeBuilder():Ref<LeaveSubtypeBuilder>

	export function newLeaveTypeBuilder():Ref<LeaveTypeBuilder>

	export function newLeaveTypesLeaveReqBuilder():Ref<LeaveTypesLeaveReqBuilder>

	export function newListCompanyReqBuilder():Ref<ListCompanyReqBuilder>

	export function newListContractReqBuilder():Ref<ListContractReqBuilder>

	export function newListCountryRegionReqBuilder():Ref<ListCountryRegionReqBuilder>

	export function newListCurrencyReqBuilder():Ref<ListCurrencyReqBuilder>

	export function newListDepartmentReqBuilder():Ref<ListDepartmentReqBuilder>

	export function newListEmployeeTypeReqBuilder():Ref<ListEmployeeTypeReqBuilder>

	export function newListJobDataReqBuilder():Ref<ListJobDataReqBuilder>

	export function newListJobFamilyReqBuilder():Ref<ListJobFamilyReqBuilder>

	export function newListJobLevelReqBuilder():Ref<ListJobLevelReqBuilder>

	export function newListJobReqBuilder():Ref<ListJobReqBuilder>

	export function newListLocationReqBuilder():Ref<ListLocationReqBuilder>

	export function newListNationalIdTypeReqBuilder():Ref<ListNationalIdTypeReqBuilder>

	export function newListObjectApiNameCustomFieldReqBuilder():Ref<ListObjectApiNameCustomFieldReqBuilder>

	export function newListPreHireReqBuilder():Ref<ListPreHireReqBuilder>

	export function newListSecurityGroupReqBuilder():Ref<ListSecurityGroupReqBuilder>

	export function newListSubdivisionReqBuilder():Ref<ListSubdivisionReqBuilder>

	export function newListSubregionReqBuilder():Ref<ListSubregionReqBuilder>

	export function newListWorkingHoursTypeReqBuilder():Ref<ListWorkingHoursTypeReqBuilder>

	export function newLocationBuilder():Ref<LocationBuilder>

	export function newLookupFieldSettingBuilder():Ref<LookupFieldSettingBuilder>

	export function newManageRelationBuilder():Ref<ManageRelationBuilder>

	export function newManagementScopeBuilder():Ref<ManagementScopeBuilder>

	export function newMatchCompensationStandardReqBuilder():Ref<MatchCompensationStandardReqBuilder>

	export function newNameBuilder():Ref<NameBuilder>

	export function newNationalIdBuilder():Ref<NationalIdBuilder>

	export function newNationalIdTypeBuilder():Ref<NationalIdTypeBuilder>

	export function newNumberFieldSettingBuilder():Ref<NumberFieldSettingBuilder>

	export function newObjectBuilder():Ref<ObjectBuilder>

	export function newObjectDataBuilder():Ref<ObjectDataBuilder>

	export function newObjectFieldDataBuilder():Ref<ObjectFieldDataBuilder>

	export function newOffboardingBuilder():Ref<OffboardingBuilder>

	export function newOffboardingChecklistBuilder():Ref<OffboardingChecklistBuilder>

	export function newOffboardingDataBuilder():Ref<OffboardingDataBuilder>

	export function newOffboardingInfoBuilder():Ref<OffboardingInfoBuilder>

	export function newOffboardingReasonBuilder():Ref<OffboardingReasonBuilder>

	export function newOrgTruncationBuilder():Ref<OrgTruncationBuilder>

	export function newP2ContractCreatedV1Handler(v1:(v2:context.Context,v1:Ref<P2ContractCreatedV1>)=>void/*error*/):Ref<P2ContractCreatedV1Handler>

	export function newP2ContractDeletedV1Handler(v1:(v2:context.Context,v1:Ref<P2ContractDeletedV1>)=>void/*error*/):Ref<P2ContractDeletedV1Handler>

	export function newP2ContractUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2ContractUpdatedV1>)=>void/*error*/):Ref<P2ContractUpdatedV1Handler>

	export function newP2DepartmentCreatedV1Handler(v1:(v2:context.Context,v1:Ref<P2DepartmentCreatedV1>)=>void/*error*/):Ref<P2DepartmentCreatedV1Handler>

	export function newP2DepartmentDeletedV1Handler(v1:(v2:context.Context,v1:Ref<P2DepartmentDeletedV1>)=>void/*error*/):Ref<P2DepartmentDeletedV1Handler>

	export function newP2DepartmentUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2DepartmentUpdatedV1>)=>void/*error*/):Ref<P2DepartmentUpdatedV1Handler>

	export function newP2EmploymentConvertedV1Handler(v1:(v2:context.Context,v1:Ref<P2EmploymentConvertedV1>)=>void/*error*/):Ref<P2EmploymentConvertedV1Handler>

	export function newP2EmploymentCreatedV1Handler(v1:(v2:context.Context,v1:Ref<P2EmploymentCreatedV1>)=>void/*error*/):Ref<P2EmploymentCreatedV1Handler>

	export function newP2EmploymentDeletedV1Handler(v1:(v2:context.Context,v1:Ref<P2EmploymentDeletedV1>)=>void/*error*/):Ref<P2EmploymentDeletedV1Handler>

	export function newP2EmploymentResignedV1Handler(v1:(v2:context.Context,v1:Ref<P2EmploymentResignedV1>)=>void/*error*/):Ref<P2EmploymentResignedV1Handler>

	export function newP2EmploymentUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2EmploymentUpdatedV1>)=>void/*error*/):Ref<P2EmploymentUpdatedV1Handler>

	export function newP2JobChangeUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2JobChangeUpdatedV1>)=>void/*error*/):Ref<P2JobChangeUpdatedV1Handler>

	export function newP2JobCreatedV1Handler(v1:(v2:context.Context,v1:Ref<P2JobCreatedV1>)=>void/*error*/):Ref<P2JobCreatedV1Handler>

	export function newP2JobDataChangedV1Handler(v1:(v2:context.Context,v1:Ref<P2JobDataChangedV1>)=>void/*error*/):Ref<P2JobDataChangedV1Handler>

	export function newP2JobDataEmployedV1Handler(v1:(v2:context.Context,v1:Ref<P2JobDataEmployedV1>)=>void/*error*/):Ref<P2JobDataEmployedV1Handler>

	export function newP2JobDeletedV1Handler(v1:(v2:context.Context,v1:Ref<P2JobDeletedV1>)=>void/*error*/):Ref<P2JobDeletedV1Handler>

	export function newP2JobUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2JobUpdatedV1>)=>void/*error*/):Ref<P2JobUpdatedV1Handler>

	export function newP2OffboardingUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2OffboardingUpdatedV1>)=>void/*error*/):Ref<P2OffboardingUpdatedV1Handler>

	export function newP2OrgRoleAuthorizationUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2OrgRoleAuthorizationUpdatedV1>)=>void/*error*/):Ref<P2OrgRoleAuthorizationUpdatedV1Handler>

	export function newP2PersonCreatedV1Handler(v1:(v2:context.Context,v1:Ref<P2PersonCreatedV1>)=>void/*error*/):Ref<P2PersonCreatedV1Handler>

	export function newP2PersonDeletedV1Handler(v1:(v2:context.Context,v1:Ref<P2PersonDeletedV1>)=>void/*error*/):Ref<P2PersonDeletedV1Handler>

	export function newP2PersonUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2PersonUpdatedV1>)=>void/*error*/):Ref<P2PersonUpdatedV1Handler>

	export function newP2PreHireUpdatedV1Handler(v1:(v2:context.Context,v1:Ref<P2PreHireUpdatedV1>)=>void/*error*/):Ref<P2PreHireUpdatedV1Handler>

	export function newPatchCompanyReqBuilder():Ref<PatchCompanyReqBuilder>

	export function newPatchContractReqBuilder():Ref<PatchContractReqBuilder>

	export function newPatchDepartmentReqBuilder():Ref<PatchDepartmentReqBuilder>

	export function newPatchEmployeeTypeReqBuilder():Ref<PatchEmployeeTypeReqBuilder>

	export function newPatchEmploymentReqBuilder():Ref<PatchEmploymentReqBuilder>

	export function newPatchJobDataReqBuilder():Ref<PatchJobDataReqBuilder>

	export function newPatchJobFamilyReqBuilder():Ref<PatchJobFamilyReqBuilder>

	export function newPatchJobLevelReqBuilder():Ref<PatchJobLevelReqBuilder>

	export function newPatchJobReqBuilder():Ref<PatchJobReqBuilder>

	export function newPatchNationalIdTypeReqBuilder():Ref<PatchNationalIdTypeReqBuilder>

	export function newPatchPreHireReqBuilder():Ref<PatchPreHireReqBuilder>

	export function newPatchWorkingHoursTypeReqBuilder():Ref<PatchWorkingHoursTypeReqBuilder>

	export function newPermissionDetailBuilder():Ref<PermissionDetailBuilder>

	export function newPermissionSecurityGroupBuilder():Ref<PermissionSecurityGroupBuilder>

	export function newPersonBuilder():Ref<PersonBuilder>

	export function newPersonInfoChnBuilder():Ref<PersonInfoChnBuilder>

	export function newPersonInfoMysBuilder():Ref<PersonInfoMysBuilder>

	export function newPersonNameBuilder():Ref<PersonNameBuilder>

	export function newPersonalProfileBuilder():Ref<PersonalProfileBuilder>

	export function newPhoneBuilder():Ref<PhoneBuilder>

	export function newPhoneNumberAndAreaCodeBuilder():Ref<PhoneNumberAndAreaCodeBuilder>

	export function newPreHireBuilder():Ref<PreHireBuilder>

	export function newPreHireQueryBuilder():Ref<PreHireQueryBuilder>

	export function newPreviousEmployerBuilder():Ref<PreviousEmployerBuilder>

	export function newProcessBuilder():Ref<ProcessBuilder>

	export function newQueryCustomFieldReqBuilder():Ref<QueryCustomFieldReqBuilder>

	export function newQueryOffboardingPathReqBodyBuilder():Ref<QueryOffboardingPathReqBodyBuilder>

	export function newQueryOffboardingReqBodyBuilder():Ref<QueryOffboardingReqBodyBuilder>

	export function newQueryOffboardingReqBuilder():Ref<QueryOffboardingReqBuilder>

	export function newQuerySecurityGroupPathReqBodyBuilder():Ref<QuerySecurityGroupPathReqBodyBuilder>

	export function newQuerySecurityGroupReqBodyBuilder():Ref<QuerySecurityGroupReqBodyBuilder>

	export function newQuerySecurityGroupReqBuilder():Ref<QuerySecurityGroupReqBuilder>

	export function newQueryTransferReasonReqBuilder():Ref<QueryTransferReasonReqBuilder>

	export function newQueryTransferTypeReqBuilder():Ref<QueryTransferTypeReqBuilder>

	export function newReferenceObjectBuilder():Ref<ReferenceObjectBuilder>

	export function newResidentTaxBuilder():Ref<ResidentTaxBuilder>

	export function newRoleAuthorizationBuilder():Ref<RoleAuthorizationBuilder>

	export function newRuleDimensionBuilder():Ref<RuleDimensionBuilder>

	export function newSearchAssignedUserPathReqBodyBuilder():Ref<SearchAssignedUserPathReqBodyBuilder>

	export function newSearchAssignedUserReqBodyBuilder():Ref<SearchAssignedUserReqBodyBuilder>

	export function newSearchAssignedUserReqBuilder():Ref<SearchAssignedUserReqBuilder>

	export function newSearchOffboardingPathReqBodyBuilder():Ref<SearchOffboardingPathReqBodyBuilder>

	export function newSearchOffboardingReqBodyBuilder():Ref<SearchOffboardingReqBodyBuilder>

	export function newSearchOffboardingReqBuilder():Ref<SearchOffboardingReqBuilder>

	export function newSecurityGroupBuilder():Ref<SecurityGroupBuilder>

	export function newSortOptionBuilder():Ref<SortOptionBuilder>

	export function newSubdivisionBuilder():Ref<SubdivisionBuilder>

	export function newSubmitOffboardingPathReqBodyBuilder():Ref<SubmitOffboardingPathReqBodyBuilder>

	export function newSubmitOffboardingReqBodyBuilder():Ref<SubmitOffboardingReqBodyBuilder>

	export function newSubmitOffboardingReqBuilder():Ref<SubmitOffboardingReqBuilder>

	export function newSubregionBuilder():Ref<SubregionBuilder>

	export function newSupportCostCenterItemBuilder():Ref<SupportCostCenterItemBuilder>

	export function newTempBuilder():Ref<TempBuilder>

	export function newTextFieldSettingBuilder():Ref<TextFieldSettingBuilder>

	export function newTranferEmploymentInfoBuilder():Ref<TranferEmploymentInfoBuilder>

	export function newTransferInfoBuilder():Ref<TransferInfoBuilder>

	export function newTransferReasonBuilder():Ref<TransferReasonBuilder>

	export function newTransferTypeBuilder():Ref<TransferTypeBuilder>

	export function newUploadPersonPathReqBodyBuilder():Ref<UploadPersonPathReqBodyBuilder>

	export function newUploadPersonReqBodyBuilder():Ref<UploadPersonReqBodyBuilder>

	export function newUploadPersonReqBuilder():Ref<UploadPersonReqBuilder>

	export function newUserIdBuilder():Ref<UserIdBuilder>

	export function newWkCalendarI18nBuilder():Ref<WkCalendarI18nBuilder>

	export function newWkOptionBuilder():Ref<WkOptionBuilder>

	export function newWorkCalendarDetailBuilder():Ref<WorkCalendarDetailBuilder>

	export function newWorkCalendarFilterBuilder():Ref<WorkCalendarFilterBuilder>

	export function newWorkExperienceBuilder():Ref<WorkExperienceBuilder>

	export function newWorkingHoursTypeBuilder():Ref<WorkingHoursTypeBuilder>

	export interface NumberFieldSetting extends Struct<NumberFieldSetting>{

			numberFieldType:Ref<int>
			decimalPlaces:Ref<int>
			roundType:Ref<int>
			decimalTotalPlaces:Ref<int>
	}
	export interface NumberFieldSettingBuilder extends Struct<NumberFieldSettingBuilder>{

			numberFieldType(numberFieldType:int):Ref<NumberFieldSettingBuilder>
			decimalPlaces(decimalPlaces:int):Ref<NumberFieldSettingBuilder>
			roundType(roundType:int):Ref<NumberFieldSettingBuilder>
			decimalTotalPlaces(decimalTotalPlaces:int):Ref<NumberFieldSettingBuilder>
			build():Ref<NumberFieldSetting>
	}
	export interface Object extends Struct<Object>{

			objectApiName:Ref<string>
			name:Ref<Name>
			isOpen:Ref<bool>
			createTime:Ref<string>
			updateTime:Ref<string>
	}
	export interface ObjectBuilder extends Struct<ObjectBuilder>{

			objectApiName(objectApiName:string):Ref<ObjectBuilder>
			name(name:Ref<Name>):Ref<ObjectBuilder>
			isOpen(isOpen:bool):Ref<ObjectBuilder>
			createTime(createTime:string):Ref<ObjectBuilder>
			updateTime(updateTime:string):Ref<ObjectBuilder>
			build():Ref<Object>
	}
	export interface ObjectData extends Struct<ObjectData>{

			objectName:Ref<string>
			id:Ref<string>
			fieldList:Ref<ObjectFieldData>[]
	}
	export interface ObjectDataBuilder extends Struct<ObjectDataBuilder>{

			objectName(objectName:string):Ref<ObjectDataBuilder>
			id(id:string):Ref<ObjectDataBuilder>
			fieldList(fieldList:Ref<ObjectFieldData>[]):Ref<ObjectDataBuilder>
			build():Ref<ObjectData>
	}
	export interface ObjectFieldData extends Struct<ObjectFieldData>{

			fieldName:Ref<string>
			value:Ref<string>
	}
	export interface ObjectFieldDataBuilder extends Struct<ObjectFieldDataBuilder>{

			fieldName(fieldName:string):Ref<ObjectFieldDataBuilder>
			value(value:string):Ref<ObjectFieldDataBuilder>
			build():Ref<ObjectFieldData>
	}
	export interface Offboarding extends Struct<Offboarding>{

			initiatingType:Ref<string>
			status:Ref<string>
			applicationInfo:Ref<ApplicationInfo>
			offboardingInfo:Ref<OffboardingInfo>
			offboardingChecklist:Ref<OffboardingChecklist>
			offboardingId:Ref<string>
	}
	export interface OffboardingBuilder extends Struct<OffboardingBuilder>{

			initiatingType(initiatingType:string):Ref<OffboardingBuilder>
			status(status:string):Ref<OffboardingBuilder>
			applicationInfo(applicationInfo:Ref<ApplicationInfo>):Ref<OffboardingBuilder>
			offboardingInfo(offboardingInfo:Ref<OffboardingInfo>):Ref<OffboardingBuilder>
			offboardingChecklist(offboardingChecklist:Ref<OffboardingChecklist>):Ref<OffboardingBuilder>
			offboardingId(offboardingId:string):Ref<OffboardingBuilder>
			build():Ref<Offboarding>
	}
	export interface OffboardingChecklist extends Struct<OffboardingChecklist>{

			checklistStatus:Ref<string>
			checklistStartTime:Ref<string>
			checklistFinishTime:Ref<string>
			checklistProcessId:Ref<string>
	}
	export interface OffboardingChecklistBuilder extends Struct<OffboardingChecklistBuilder>{

			checklistStatus(checklistStatus:string):Ref<OffboardingChecklistBuilder>
			checklistStartTime(checklistStartTime:string):Ref<OffboardingChecklistBuilder>
			checklistFinishTime(checklistFinishTime:string):Ref<OffboardingChecklistBuilder>
			checklistProcessId(checklistProcessId:string):Ref<OffboardingChecklistBuilder>
			build():Ref<OffboardingChecklist>
	}
	export interface OffboardingData extends Struct<OffboardingData>{

			offboardingId:Ref<string>
			employmentId:Ref<string>
			offboardingReasonUniqueIdentifier:Ref<string>
			offboardingDate:Ref<string>
			offboardingReasonExplanation:Ref<string>
			createdTime:Ref<string>
	}
	export interface OffboardingDataBuilder extends Struct<OffboardingDataBuilder>{

			offboardingId(offboardingId:string):Ref<OffboardingDataBuilder>
			employmentId(employmentId:string):Ref<OffboardingDataBuilder>
			offboardingReasonUniqueIdentifier(offboardingReasonUniqueIdentifier:string):Ref<OffboardingDataBuilder>
			offboardingDate(offboardingDate:string):Ref<OffboardingDataBuilder>
			offboardingReasonExplanation(offboardingReasonExplanation:string):Ref<OffboardingDataBuilder>
			createdTime(createdTime:string):Ref<OffboardingDataBuilder>
			build():Ref<OffboardingData>
	}
	export interface OffboardingInfo extends Struct<OffboardingInfo>{

			employmentId:Ref<string>
			hrbpId:string[]
			expectedOffboardingDate:Ref<string>
			offboardingDate:Ref<string>
			reason:Ref<Enum>
			reasonExplanation:Ref<string>
			employeeReason:Ref<Enum>
			employeeReasonExplanation:Ref<string>
			addBlockList:Ref<string>
			blockReason:Ref<Enum>
			blockReasonExplanation:Ref<string>
			customFields:Ref<CustomFieldData>[]
	}
	export interface OffboardingInfoBuilder extends Struct<OffboardingInfoBuilder>{

			employmentId(employmentId:string):Ref<OffboardingInfoBuilder>
			hrbpId(hrbpId:string[]):Ref<OffboardingInfoBuilder>
			expectedOffboardingDate(expectedOffboardingDate:string):Ref<OffboardingInfoBuilder>
			offboardingDate(offboardingDate:string):Ref<OffboardingInfoBuilder>
			reason(reason:Ref<Enum>):Ref<OffboardingInfoBuilder>
			reasonExplanation(reasonExplanation:string):Ref<OffboardingInfoBuilder>
			employeeReason(employeeReason:Ref<Enum>):Ref<OffboardingInfoBuilder>
			employeeReasonExplanation(employeeReasonExplanation:string):Ref<OffboardingInfoBuilder>
			addBlockList(addBlockList:string):Ref<OffboardingInfoBuilder>
			blockReason(blockReason:Ref<Enum>):Ref<OffboardingInfoBuilder>
			blockReasonExplanation(blockReasonExplanation:string):Ref<OffboardingInfoBuilder>
			customFields(customFields:Ref<CustomFieldData>[]):Ref<OffboardingInfoBuilder>
			build():Ref<OffboardingInfo>
	}
	//1
	export const OffboardingModeTerminationOfDismissal:int
	export interface OffboardingReason extends Struct<OffboardingReason>{

			offboardingReasonUniqueIdentifier:Ref<string>
			name:Ref<I18n>[]
			active:Ref<bool>
			parentOffboardingReasonUniqueIdentifier:Ref<string>
			createdTime:Ref<string>
			updatedTime:Ref<string>
	}
	export interface OffboardingReasonBuilder extends Struct<OffboardingReasonBuilder>{

			offboardingReasonUniqueIdentifier(offboardingReasonUniqueIdentifier:string):Ref<OffboardingReasonBuilder>
			name(name:Ref<I18n>[]):Ref<OffboardingReasonBuilder>
			active(active:bool):Ref<OffboardingReasonBuilder>
			parentOffboardingReasonUniqueIdentifier(parentOffboardingReasonUniqueIdentifier:string):Ref<OffboardingReasonBuilder>
			createdTime(createdTime:string):Ref<OffboardingReasonBuilder>
			updatedTime(updatedTime:string):Ref<OffboardingReasonBuilder>
			build():Ref<OffboardingReason>
	}
	export interface OrgTruncation extends Struct<OrgTruncation>{

			orgKey:Ref<string>
			type:Ref<int>
			depth:Ref<int>
	}
	export interface OrgTruncationBuilder extends Struct<OrgTruncationBuilder>{

			orgKey(orgKey:string):Ref<OrgTruncationBuilder>
			type(type_:int):Ref<OrgTruncationBuilder>
			depth(depth:int):Ref<OrgTruncationBuilder>
			build():Ref<OrgTruncation>
	}
	export interface P2ContractCreatedV1 extends Struct<P2ContractCreatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2ContractCreatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2ContractCreatedV1Data extends Struct<P2ContractCreatedV1Data>{

			contractId:Ref<string>
	}
	export interface P2ContractCreatedV1Handler extends Struct<P2ContractCreatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2ContractDeletedV1 extends Struct<P2ContractDeletedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2ContractDeletedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2ContractDeletedV1Data extends Struct<P2ContractDeletedV1Data>{

			contractId:Ref<string>
	}
	export interface P2ContractDeletedV1Handler extends Struct<P2ContractDeletedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2ContractUpdatedV1 extends Struct<P2ContractUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2ContractUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2ContractUpdatedV1Data extends Struct<P2ContractUpdatedV1Data>{

			contractId:Ref<string>
	}
	export interface P2ContractUpdatedV1Handler extends Struct<P2ContractUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2DepartmentCreatedV1 extends Struct<P2DepartmentCreatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2DepartmentCreatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2DepartmentCreatedV1Data extends Struct<P2DepartmentCreatedV1Data>{

			departmentId:Ref<string>
	}
	export interface P2DepartmentCreatedV1Handler extends Struct<P2DepartmentCreatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2DepartmentDeletedV1 extends Struct<P2DepartmentDeletedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2DepartmentDeletedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2DepartmentDeletedV1Data extends Struct<P2DepartmentDeletedV1Data>{

			departmentId:Ref<string>
	}
	export interface P2DepartmentDeletedV1Handler extends Struct<P2DepartmentDeletedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2DepartmentUpdatedV1 extends Struct<P2DepartmentUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2DepartmentUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2DepartmentUpdatedV1Data extends Struct<P2DepartmentUpdatedV1Data>{

			departmentId:Ref<string>
			fieldChanges:string[]
	}
	export interface P2DepartmentUpdatedV1Handler extends Struct<P2DepartmentUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmploymentConvertedV1 extends Struct<P2EmploymentConvertedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmploymentConvertedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmploymentConvertedV1Data extends Struct<P2EmploymentConvertedV1Data>{

			employmentId:Ref<string>
	}
	export interface P2EmploymentConvertedV1Handler extends larkevent.EventHandler,Struct<P2EmploymentConvertedV1Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmploymentCreatedV1 extends Struct<P2EmploymentCreatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmploymentCreatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmploymentCreatedV1Data extends Struct<P2EmploymentCreatedV1Data>{

			employmentId:Ref<string>
			targetUserId:Ref<UserId>
	}
	export interface P2EmploymentCreatedV1Handler extends Struct<P2EmploymentCreatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmploymentDeletedV1 extends Struct<P2EmploymentDeletedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmploymentDeletedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmploymentDeletedV1Data extends Struct<P2EmploymentDeletedV1Data>{

			employmentId:Ref<string>
			targetUserId:Ref<UserId>
	}
	export interface P2EmploymentDeletedV1Handler extends Struct<P2EmploymentDeletedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmploymentResignedV1 extends larkevent.EventHandlerModel,Struct<P2EmploymentResignedV1>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmploymentResignedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmploymentResignedV1Data extends Struct<P2EmploymentResignedV1Data>{

			employmentId:Ref<string>
	}
	export interface P2EmploymentResignedV1Handler extends larkevent.EventHandler,Struct<P2EmploymentResignedV1Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2EmploymentUpdatedV1 extends Struct<P2EmploymentUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2EmploymentUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2EmploymentUpdatedV1Data extends Struct<P2EmploymentUpdatedV1Data>{

			employmentId:Ref<string>
			targetUserId:Ref<UserId>
			fieldChanges:string[]
	}
	export interface P2EmploymentUpdatedV1Handler extends Struct<P2EmploymentUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2JobChangeUpdatedV1 extends larkevent.EventHandlerModel,Struct<P2JobChangeUpdatedV1>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2JobChangeUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2JobChangeUpdatedV1Data extends Struct<P2JobChangeUpdatedV1Data>{

			employmentId:Ref<string>
			targetUserId:Ref<UserId>
			jobChangeId:Ref<string>
			transferMode:Ref<int>
			transferTypeUniqueIdentifier:Ref<string>
			transferReasonUniqueIdentifier:Ref<string>
			processId:Ref<string>
			effectiveDate:Ref<string>
			status:Ref<int>
			transferKey:Ref<string>
	}
	export interface P2JobChangeUpdatedV1Handler extends Struct<P2JobChangeUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2JobCreatedV1 extends Struct<P2JobCreatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2JobCreatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2JobCreatedV1Data extends Struct<P2JobCreatedV1Data>{

			jobId:Ref<string>
	}
	export interface P2JobCreatedV1Handler extends Struct<P2JobCreatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2JobDataChangedV1 extends Struct<P2JobDataChangedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2JobDataChangedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2JobDataChangedV1Data extends Struct<P2JobDataChangedV1Data>{

			jobDataId:Ref<string>
			employmentId:Ref<string>
			targetUserId:Ref<UserId>
	}
	export interface P2JobDataChangedV1Handler extends Struct<P2JobDataChangedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2JobDataEmployedV1 extends larkevent.EventHandlerModel,Struct<P2JobDataEmployedV1>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2JobDataEmployedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2JobDataEmployedV1Data extends Struct<P2JobDataEmployedV1Data>{

			jobDataId:Ref<string>
			employmentId:Ref<string>
			targetUserId:Ref<UserId>
	}
	export interface P2JobDataEmployedV1Handler extends Struct<P2JobDataEmployedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2JobDeletedV1 extends Struct<P2JobDeletedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2JobDeletedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2JobDeletedV1Data extends Struct<P2JobDeletedV1Data>{

			jobId:Ref<string>
	}
	export interface P2JobDeletedV1Handler extends larkevent.EventHandler,Struct<P2JobDeletedV1Handler>{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2JobUpdatedV1 extends Struct<P2JobUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2JobUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2JobUpdatedV1Data extends Struct<P2JobUpdatedV1Data>{

			jobId:Ref<string>
	}
	export interface P2JobUpdatedV1Handler extends Struct<P2JobUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2OffboardingUpdatedV1 extends larkevent.EventHandlerModel,Struct<P2OffboardingUpdatedV1>{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2OffboardingUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2OffboardingUpdatedV1Data extends Struct<P2OffboardingUpdatedV1Data>{

			employmentId:Ref<string>
			targetUserId:Ref<UserId>
			offboardingId:Ref<string>
			processId:Ref<string>
			status:Ref<int>
	}
	export interface P2OffboardingUpdatedV1Handler extends Struct<P2OffboardingUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2OrgRoleAuthorizationUpdatedV1 extends Struct<P2OrgRoleAuthorizationUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2OrgRoleAuthorizationUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2OrgRoleAuthorizationUpdatedV1Data extends Struct<P2OrgRoleAuthorizationUpdatedV1Data>{

			roleId:Ref<string>
			managementScopeList:Ref<ManagementScope>[]
			employmentIdList:string[]
	}
	export interface P2OrgRoleAuthorizationUpdatedV1Handler extends Struct<P2OrgRoleAuthorizationUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2PersonCreatedV1 extends Struct<P2PersonCreatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2PersonCreatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2PersonCreatedV1Data extends Struct<P2PersonCreatedV1Data>{

			personId:Ref<string>
	}
	export interface P2PersonCreatedV1Handler extends Struct<P2PersonCreatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2PersonDeletedV1 extends Struct<P2PersonDeletedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2PersonDeletedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2PersonDeletedV1Data extends Struct<P2PersonDeletedV1Data>{

			personId:Ref<string>
	}
	export interface P2PersonDeletedV1Handler extends Struct<P2PersonDeletedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2PersonUpdatedV1 extends Struct<P2PersonUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2PersonUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2PersonUpdatedV1Data extends Struct<P2PersonUpdatedV1Data>{

			personId:Ref<string>
			fieldChanges:string[]
	}
	export interface P2PersonUpdatedV1Handler extends Struct<P2PersonUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface P2PreHireUpdatedV1 extends Struct<P2PreHireUpdatedV1>,larkevent.EventHandlerModel{

			eventV2Base:Ref<larkevent.EventV2Base>
			eventReq:Ref<larkevent.EventReq>
			event:Ref<P2PreHireUpdatedV1Data>
			rawReq(req:Ref<larkevent.EventReq>):void
	}
	export interface P2PreHireUpdatedV1Data extends Struct<P2PreHireUpdatedV1Data>{

			preHireId:Ref<string>
			fieldChanges:string[]
	}
	export interface P2PreHireUpdatedV1Handler extends Struct<P2PreHireUpdatedV1Handler>,larkevent.EventHandler{

			event():any
			handle(ctx:context.Context,event:any)/*error*/
	}
	export interface PatchCompanyReq extends Struct<PatchCompanyReq>{

			company:Ref<Company>
	}
	export interface PatchCompanyReqBuilder extends Struct<PatchCompanyReqBuilder>{

			companyId(companyId:string):Ref<PatchCompanyReqBuilder>
			clientToken(clientToken:string):Ref<PatchCompanyReqBuilder>
			company(company:Ref<Company>):Ref<PatchCompanyReqBuilder>
			build():Ref<PatchCompanyReq>
	}
	export interface PatchCompanyResp extends Struct<PatchCompanyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchCompanyRespData>
			success():bool
	}
	export interface PatchCompanyRespData extends Struct<PatchCompanyRespData>{

			company:Ref<Company>
	}
	export interface PatchContractReq extends Struct<PatchContractReq>{

			contract:Ref<Contract>
	}
	export interface PatchContractReqBuilder extends Struct<PatchContractReqBuilder>{

			contractId(contractId:string):Ref<PatchContractReqBuilder>
			clientToken(clientToken:string):Ref<PatchContractReqBuilder>
			contract(contract:Ref<Contract>):Ref<PatchContractReqBuilder>
			build():Ref<PatchContractReq>
	}
	export interface PatchContractResp extends Struct<PatchContractResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchContractRespData>
			success():bool
	}
	export interface PatchContractRespData extends Struct<PatchContractRespData>{

			contract:Ref<Contract>
	}
	export interface PatchDepartmentReq extends Struct<PatchDepartmentReq>{

			department:Ref<Department>
	}
	export interface PatchDepartmentReqBuilder extends Struct<PatchDepartmentReqBuilder>{

			departmentId(departmentId:string):Ref<PatchDepartmentReqBuilder>
			clientToken(clientToken:string):Ref<PatchDepartmentReqBuilder>
			userIdType(userIdType:string):Ref<PatchDepartmentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<PatchDepartmentReqBuilder>
			department(department:Ref<Department>):Ref<PatchDepartmentReqBuilder>
			build():Ref<PatchDepartmentReq>
	}
	export interface PatchDepartmentResp extends Struct<PatchDepartmentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchDepartmentRespData>
			success():bool
	}
	export interface PatchDepartmentRespData extends Struct<PatchDepartmentRespData>{

			department:Ref<Department>
	}
	export interface PatchEmployeeTypeReq extends Struct<PatchEmployeeTypeReq>{

			employeeType:Ref<EmployeeType>
	}
	export interface PatchEmployeeTypeReqBuilder extends Struct<PatchEmployeeTypeReqBuilder>{

			employeeTypeId(employeeTypeId:string):Ref<PatchEmployeeTypeReqBuilder>
			clientToken(clientToken:string):Ref<PatchEmployeeTypeReqBuilder>
			employeeType(employeeType:Ref<EmployeeType>):Ref<PatchEmployeeTypeReqBuilder>
			build():Ref<PatchEmployeeTypeReq>
	}
	export interface PatchEmployeeTypeResp extends Struct<PatchEmployeeTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchEmployeeTypeRespData>
			success():bool
	}
	export interface PatchEmployeeTypeRespData extends Struct<PatchEmployeeTypeRespData>{

			employeeType:Ref<EmployeeType>
	}
	export interface PatchEmploymentReq extends Struct<PatchEmploymentReq>{

			employment:Ref<Employment>
	}
	export interface PatchEmploymentReqBuilder extends Struct<PatchEmploymentReqBuilder>{

			employmentId(employmentId:string):Ref<PatchEmploymentReqBuilder>
			clientToken(clientToken:string):Ref<PatchEmploymentReqBuilder>
			userIdType(userIdType:string):Ref<PatchEmploymentReqBuilder>
			departmentIdType(departmentIdType:string):Ref<PatchEmploymentReqBuilder>
			employment(employment:Ref<Employment>):Ref<PatchEmploymentReqBuilder>
			build():Ref<PatchEmploymentReq>
	}
	export interface PatchEmploymentResp extends Struct<PatchEmploymentResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchEmploymentRespData>
			success():bool
	}
	export interface PatchEmploymentRespData extends Struct<PatchEmploymentRespData>{

			employment:Ref<Employment>
	}
	export interface PatchJobDataReq extends Struct<PatchJobDataReq>{

			jobData:Ref<JobData>
	}
	export interface PatchJobDataReqBuilder extends Struct<PatchJobDataReqBuilder>{

			jobDataId(jobDataId:string):Ref<PatchJobDataReqBuilder>
			clientToken(clientToken:string):Ref<PatchJobDataReqBuilder>
			userIdType(userIdType:string):Ref<PatchJobDataReqBuilder>
			departmentIdType(departmentIdType:string):Ref<PatchJobDataReqBuilder>
			jobData(jobData:Ref<JobData>):Ref<PatchJobDataReqBuilder>
			build():Ref<PatchJobDataReq>
	}
	export interface PatchJobDataResp extends Struct<PatchJobDataResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchJobDataRespData>
			success():bool
	}
	export interface PatchJobDataRespData extends Struct<PatchJobDataRespData>{

			jobData:Ref<JobData>
	}
	export interface PatchJobFamilyReq extends Struct<PatchJobFamilyReq>{

			jobFamily:Ref<JobFamily>
	}
	export interface PatchJobFamilyReqBuilder extends Struct<PatchJobFamilyReqBuilder>{

			jobFamilyId(jobFamilyId:string):Ref<PatchJobFamilyReqBuilder>
			clientToken(clientToken:string):Ref<PatchJobFamilyReqBuilder>
			jobFamily(jobFamily:Ref<JobFamily>):Ref<PatchJobFamilyReqBuilder>
			build():Ref<PatchJobFamilyReq>
	}
	export interface PatchJobFamilyResp extends Struct<PatchJobFamilyResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchJobFamilyRespData>
			success():bool
	}
	export interface PatchJobFamilyRespData extends Struct<PatchJobFamilyRespData>{

			jobFamily:Ref<JobFamily>
	}
	export interface PatchJobLevelReq extends Struct<PatchJobLevelReq>{

			jobLevel:Ref<JobLevel>
	}
	export interface PatchJobLevelReqBuilder extends Struct<PatchJobLevelReqBuilder>{

			jobLevelId(jobLevelId:string):Ref<PatchJobLevelReqBuilder>
			clientToken(clientToken:string):Ref<PatchJobLevelReqBuilder>
			jobLevel(jobLevel:Ref<JobLevel>):Ref<PatchJobLevelReqBuilder>
			build():Ref<PatchJobLevelReq>
	}
	export interface PatchJobLevelResp extends Struct<PatchJobLevelResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchJobLevelRespData>
			success():bool
	}
	export interface PatchJobLevelRespData extends Struct<PatchJobLevelRespData>{

			jobLevel:Ref<JobLevel>
	}
	export interface PatchJobReq extends Struct<PatchJobReq>{

			job:Ref<Job>
	}
	export interface PatchJobReqBuilder extends Struct<PatchJobReqBuilder>{

			jobId(jobId:string):Ref<PatchJobReqBuilder>
			clientToken(clientToken:string):Ref<PatchJobReqBuilder>
			job(job:Ref<Job>):Ref<PatchJobReqBuilder>
			build():Ref<PatchJobReq>
	}
	export interface PatchJobResp extends Struct<PatchJobResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchJobRespData>
			success():bool
	}
	export interface PatchJobRespData extends Struct<PatchJobRespData>{

			job:Ref<Job>
	}
	export interface PatchNationalIdTypeReq extends Struct<PatchNationalIdTypeReq>{

			nationalIdType:Ref<NationalIdType>
	}
	export interface PatchNationalIdTypeReqBuilder extends Struct<PatchNationalIdTypeReqBuilder>{

			nationalIdTypeId(nationalIdTypeId:string):Ref<PatchNationalIdTypeReqBuilder>
			clientToken(clientToken:string):Ref<PatchNationalIdTypeReqBuilder>
			nationalIdType(nationalIdType:Ref<NationalIdType>):Ref<PatchNationalIdTypeReqBuilder>
			build():Ref<PatchNationalIdTypeReq>
	}
	export interface PatchNationalIdTypeResp extends Struct<PatchNationalIdTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchNationalIdTypeRespData>
			success():bool
	}
	export interface PatchNationalIdTypeRespData extends Struct<PatchNationalIdTypeRespData>{

			nationalIdType:Ref<NationalIdType>
	}
	export interface PatchPreHireReq extends Struct<PatchPreHireReq>{

			preHire:Ref<PreHire>
	}
	export interface PatchPreHireReqBuilder extends Struct<PatchPreHireReqBuilder>{

			preHireId(preHireId:string):Ref<PatchPreHireReqBuilder>
			clientToken(clientToken:string):Ref<PatchPreHireReqBuilder>
			preHire(preHire:Ref<PreHire>):Ref<PatchPreHireReqBuilder>
			build():Ref<PatchPreHireReq>
	}
	export interface PatchPreHireResp extends Struct<PatchPreHireResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchPreHireRespData>
			success():bool
	}
	export interface PatchPreHireRespData extends Struct<PatchPreHireRespData>{

			preHire:Ref<PreHire>
	}
	export interface PatchWorkingHoursTypeReq extends Struct<PatchWorkingHoursTypeReq>{

			workingHoursType:Ref<WorkingHoursType>
	}
	export interface PatchWorkingHoursTypeReqBuilder extends Struct<PatchWorkingHoursTypeReqBuilder>{

			workingHoursTypeId(workingHoursTypeId:string):Ref<PatchWorkingHoursTypeReqBuilder>
			clientToken(clientToken:string):Ref<PatchWorkingHoursTypeReqBuilder>
			workingHoursType(workingHoursType:Ref<WorkingHoursType>):Ref<PatchWorkingHoursTypeReqBuilder>
			build():Ref<PatchWorkingHoursTypeReq>
	}
	export interface PatchWorkingHoursTypeResp extends Struct<PatchWorkingHoursTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<PatchWorkingHoursTypeRespData>
			success():bool
	}
	export interface PatchWorkingHoursTypeRespData extends Struct<PatchWorkingHoursTypeRespData>{

			workingHoursType:Ref<WorkingHoursType>
	}
	export interface PermissionDetail extends Struct<PermissionDetail>{

			role:Ref<SecurityGroup>
			assignedOrganizationList:Ref<AssignedOrganization>[][]
			grantorRuleList:Ref<PermissionSecurityGroup>[]
			updateTime:Ref<string>
	}
	export interface PermissionDetailBuilder extends Struct<PermissionDetailBuilder>{

			role(role:Ref<SecurityGroup>):Ref<PermissionDetailBuilder>
			assignedOrganizationList(assignedOrganizationList:Ref<AssignedOrganization>[][]):Ref<PermissionDetailBuilder>
			grantorRuleList(grantorRuleList:Ref<PermissionSecurityGroup>[]):Ref<PermissionDetailBuilder>
			updateTime(updateTime:string):Ref<PermissionDetailBuilder>
			build():Ref<PermissionDetail>
	}
	export interface PermissionSecurityGroup extends Struct<PermissionSecurityGroup>{

			ruleDimension:Ref<RuleDimension>
			ruleType:Ref<int>
			expression:Ref<FilterExpression>
	}
	export interface PermissionSecurityGroupBuilder extends Struct<PermissionSecurityGroupBuilder>{

			ruleDimension(ruleDimension:Ref<RuleDimension>):Ref<PermissionSecurityGroupBuilder>
			ruleType(ruleType:int):Ref<PermissionSecurityGroupBuilder>
			expression(expression:Ref<FilterExpression>):Ref<PermissionSecurityGroupBuilder>
			build():Ref<PermissionSecurityGroup>
	}
	export interface Person extends Struct<Person>{

			phoneNumber:Ref<string>
			legalName:Ref<string>
			preferredName:Ref<string>
			id:Ref<string>
			nameList:Ref<PersonName>[]
			gender:Ref<Enum>
			dateOfBirth:Ref<string>
			nationalityId:Ref<string>
			race:Ref<Enum>
			maritalStatus:Ref<Enum>
			phoneList:Ref<Phone>[]
			addressList:Ref<Address>[]
			emailList:Ref<Email>[]
			workExperienceList:Ref<WorkExperience>[]
			educationList:Ref<Education>[]
			bankAccountList:Ref<BankAccount>[]
			nationalIdList:Ref<NationalId>[]
			dependentList:Ref<Dependent>[]
			emergencyContactList:Ref<EmergencyContact>[]
			dateEnteredWorkforce:Ref<string>
			profileImageId:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			emailAddress:Ref<string>
			residentTaxIdList:string[]
			age:Ref<int>
			highestLevelOfEducation:Ref<Education>
			highestDegreeOfEducation:Ref<Education>
			personalProfile:Ref<PersonalProfile>[]
	}
	export interface PersonBuilder extends Struct<PersonBuilder>{

			phoneNumber(phoneNumber:string):Ref<PersonBuilder>
			legalName(legalName:string):Ref<PersonBuilder>
			preferredName(preferredName:string):Ref<PersonBuilder>
			id(id:string):Ref<PersonBuilder>
			nameList(nameList:Ref<PersonName>[]):Ref<PersonBuilder>
			gender(gender:Ref<Enum>):Ref<PersonBuilder>
			dateOfBirth(dateOfBirth:string):Ref<PersonBuilder>
			nationalityId(nationalityId:string):Ref<PersonBuilder>
			race(race:Ref<Enum>):Ref<PersonBuilder>
			maritalStatus(maritalStatus:Ref<Enum>):Ref<PersonBuilder>
			phoneList(phoneList:Ref<Phone>[]):Ref<PersonBuilder>
			addressList(addressList:Ref<Address>[]):Ref<PersonBuilder>
			emailList(emailList:Ref<Email>[]):Ref<PersonBuilder>
			workExperienceList(workExperienceList:Ref<WorkExperience>[]):Ref<PersonBuilder>
			educationList(educationList:Ref<Education>[]):Ref<PersonBuilder>
			bankAccountList(bankAccountList:Ref<BankAccount>[]):Ref<PersonBuilder>
			nationalIdList(nationalIdList:Ref<NationalId>[]):Ref<PersonBuilder>
			dependentList(dependentList:Ref<Dependent>[]):Ref<PersonBuilder>
			emergencyContactList(emergencyContactList:Ref<EmergencyContact>[]):Ref<PersonBuilder>
			dateEnteredWorkforce(dateEnteredWorkforce:string):Ref<PersonBuilder>
			profileImageId(profileImageId:string):Ref<PersonBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<PersonBuilder>
			emailAddress(emailAddress:string):Ref<PersonBuilder>
			residentTaxIdList(residentTaxIdList:string[]):Ref<PersonBuilder>
			age(age:int):Ref<PersonBuilder>
			highestLevelOfEducation(highestLevelOfEducation:Ref<Education>):Ref<PersonBuilder>
			highestDegreeOfEducation(highestDegreeOfEducation:Ref<Education>):Ref<PersonBuilder>
			personalProfile(personalProfile:Ref<PersonalProfile>[]):Ref<PersonBuilder>
			build():Ref<Person>
	}
	export interface PersonInfoChn extends Struct<PersonInfoChn>{

			id:Ref<string>
			nativeRegion:Ref<string>
			politicalAffiliationList:Ref<Enum>[]
			hukouType:Ref<Enum>
			hukouLocation:Ref<string>
			personId:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			workingYears:Ref<int>
	}
	export interface PersonInfoChnBuilder extends Struct<PersonInfoChnBuilder>{

			id(id:string):Ref<PersonInfoChnBuilder>
			nativeRegion(nativeRegion:string):Ref<PersonInfoChnBuilder>
			politicalAffiliationList(politicalAffiliationList:Ref<Enum>[]):Ref<PersonInfoChnBuilder>
			hukouType(hukouType:Ref<Enum>):Ref<PersonInfoChnBuilder>
			hukouLocation(hukouLocation:string):Ref<PersonInfoChnBuilder>
			personId(personId:string):Ref<PersonInfoChnBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<PersonInfoChnBuilder>
			workingYears(workingYears:int):Ref<PersonInfoChnBuilder>
			build():Ref<PersonInfoChn>
	}
	export interface PersonInfoMys extends Struct<PersonInfoMys>{

			id:Ref<string>
			personId:Ref<string>
			previousIncomeInTheCurrentYear:Ref<bool>
			freshGraduate:Ref<bool>
			previousEmployersList:Ref<PreviousEmployer>[]
			monthlyGross:Ref<string>
			taxRelief1:Ref<string>
			taxRelief2:Ref<string>
			taxRelief3:Ref<string>
			taxRelief4:Ref<string>
			taxRelief5:Ref<string>
			commonReserveFund:Ref<string>
			monthlyTaxDeduction:Ref<string>
			socialInsurance:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface PersonInfoMysBuilder extends Struct<PersonInfoMysBuilder>{

			id(id:string):Ref<PersonInfoMysBuilder>
			personId(personId:string):Ref<PersonInfoMysBuilder>
			previousIncomeInTheCurrentYear(previousIncomeInTheCurrentYear:bool):Ref<PersonInfoMysBuilder>
			freshGraduate(freshGraduate:bool):Ref<PersonInfoMysBuilder>
			previousEmployersList(previousEmployersList:Ref<PreviousEmployer>[]):Ref<PersonInfoMysBuilder>
			monthlyGross(monthlyGross:string):Ref<PersonInfoMysBuilder>
			taxRelief1(taxRelief1:string):Ref<PersonInfoMysBuilder>
			taxRelief2(taxRelief2:string):Ref<PersonInfoMysBuilder>
			taxRelief3(taxRelief3:string):Ref<PersonInfoMysBuilder>
			taxRelief4(taxRelief4:string):Ref<PersonInfoMysBuilder>
			taxRelief5(taxRelief5:string):Ref<PersonInfoMysBuilder>
			commonReserveFund(commonReserveFund:string):Ref<PersonInfoMysBuilder>
			monthlyTaxDeduction(monthlyTaxDeduction:string):Ref<PersonInfoMysBuilder>
			socialInsurance(socialInsurance:string):Ref<PersonInfoMysBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<PersonInfoMysBuilder>
			build():Ref<PersonInfoMys>
	}
	export interface PersonName extends Struct<PersonName>{

			localPrimary:Ref<string>
			localFirstName:Ref<string>
			countryRegionId:Ref<string>
			nameType:Ref<Enum>
			localFirstName2:Ref<string>
			localPrimary2:Ref<string>
			additionalNameType:Ref<Enum>
			firstName:Ref<string>
			fullName:Ref<string>
			hereditary:Ref<string>
			customName:Ref<string>
			customLocalName:Ref<string>
			middleName:Ref<string>
			namePrimary:Ref<string>
			secondary:Ref<string>
			social:Ref<Enum>
			tertiary:Ref<string>
			title:Ref<Enum>
			localMiddleName:Ref<string>
			localSecondary:Ref<string>
			displayNameLocalAndWesternScript:Ref<string>
			displayNameLocalScript:Ref<string>
			displayNameWesternScript:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface PersonNameBuilder extends Struct<PersonNameBuilder>{

			localPrimary(localPrimary:string):Ref<PersonNameBuilder>
			localFirstName(localFirstName:string):Ref<PersonNameBuilder>
			countryRegionId(countryRegionId:string):Ref<PersonNameBuilder>
			nameType(nameType:Ref<Enum>):Ref<PersonNameBuilder>
			localFirstName2(localFirstName2:string):Ref<PersonNameBuilder>
			localPrimary2(localPrimary2:string):Ref<PersonNameBuilder>
			additionalNameType(additionalNameType:Ref<Enum>):Ref<PersonNameBuilder>
			firstName(firstName:string):Ref<PersonNameBuilder>
			fullName(fullName:string):Ref<PersonNameBuilder>
			hereditary(hereditary:string):Ref<PersonNameBuilder>
			customName(customName:string):Ref<PersonNameBuilder>
			customLocalName(customLocalName:string):Ref<PersonNameBuilder>
			middleName(middleName:string):Ref<PersonNameBuilder>
			namePrimary(namePrimary:string):Ref<PersonNameBuilder>
			secondary(secondary:string):Ref<PersonNameBuilder>
			social(social:Ref<Enum>):Ref<PersonNameBuilder>
			tertiary(tertiary:string):Ref<PersonNameBuilder>
			title(title:Ref<Enum>):Ref<PersonNameBuilder>
			localMiddleName(localMiddleName:string):Ref<PersonNameBuilder>
			localSecondary(localSecondary:string):Ref<PersonNameBuilder>
			displayNameLocalAndWesternScript(displayNameLocalAndWesternScript:string):Ref<PersonNameBuilder>
			displayNameLocalScript(displayNameLocalScript:string):Ref<PersonNameBuilder>
			displayNameWesternScript(displayNameWesternScript:string):Ref<PersonNameBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<PersonNameBuilder>
			build():Ref<PersonName>
	}
	export interface PersonalProfile extends Struct<PersonalProfile>{

			personalProfileType:Ref<Enum>
			files:Ref<File>[]
	}
	export interface PersonalProfileBuilder extends Struct<PersonalProfileBuilder>{

			personalProfileType(personalProfileType:Ref<Enum>):Ref<PersonalProfileBuilder>
			files(files:Ref<File>[]):Ref<PersonalProfileBuilder>
			build():Ref<PersonalProfile>
	}
	export interface Phone extends Struct<Phone>{

			internationalAreaCode:Ref<Enum>
			phoneNumber:Ref<string>
			formattedPhoneNumber:Ref<string>
			deviceType:Ref<Enum>
			phoneUsage:Ref<Enum>
			isPrimary:Ref<bool>
			isPublic:Ref<bool>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface PhoneBuilder extends Struct<PhoneBuilder>{

			internationalAreaCode(internationalAreaCode:Ref<Enum>):Ref<PhoneBuilder>
			phoneNumber(phoneNumber:string):Ref<PhoneBuilder>
			formattedPhoneNumber(formattedPhoneNumber:string):Ref<PhoneBuilder>
			deviceType(deviceType:Ref<Enum>):Ref<PhoneBuilder>
			phoneUsage(phoneUsage:Ref<Enum>):Ref<PhoneBuilder>
			isPrimary(isPrimary:bool):Ref<PhoneBuilder>
			isPublic(isPublic:bool):Ref<PhoneBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<PhoneBuilder>
			build():Ref<Phone>
	}
	export interface PhoneNumberAndAreaCode extends Struct<PhoneNumberAndAreaCode>{

			areaCode:Ref<Enum>
			phoneNumber:Ref<string>
	}
	export interface PhoneNumberAndAreaCodeBuilder extends Struct<PhoneNumberAndAreaCodeBuilder>{

			areaCode(areaCode:Ref<Enum>):Ref<PhoneNumberAndAreaCodeBuilder>
			phoneNumber(phoneNumber:string):Ref<PhoneNumberAndAreaCodeBuilder>
			build():Ref<PhoneNumberAndAreaCode>
	}
	export interface PreHire extends Struct<PreHire>{

			atsApplicationId:Ref<string>
			id:Ref<string>
			hireDate:Ref<string>
			employeeType:Ref<Enum>
			workerId:Ref<string>
			employeeTypeId:Ref<string>
			personId:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			costCenterRate:Ref<SupportCostCenterItem>[]
			onboardingStatus:Ref<Enum>
	}
	export interface PreHireBuilder extends Struct<PreHireBuilder>{

			atsApplicationId(atsApplicationId:string):Ref<PreHireBuilder>
			id(id:string):Ref<PreHireBuilder>
			hireDate(hireDate:string):Ref<PreHireBuilder>
			employeeType(employeeType:Ref<Enum>):Ref<PreHireBuilder>
			workerId(workerId:string):Ref<PreHireBuilder>
			employeeTypeId(employeeTypeId:string):Ref<PreHireBuilder>
			personId(personId:string):Ref<PreHireBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<PreHireBuilder>
			costCenterRate(costCenterRate:Ref<SupportCostCenterItem>[]):Ref<PreHireBuilder>
			onboardingStatus(onboardingStatus:Ref<Enum>):Ref<PreHireBuilder>
			build():Ref<PreHire>
	}
	export interface PreHireQuery extends Struct<PreHireQuery>{

			atsApplicationId:Ref<string>
			id:Ref<string>
			hireDate:Ref<string>
			employeeType:Ref<Enum>
			workerId:Ref<string>
			employeeTypeId:Ref<string>
			personId:Ref<string>
			customFields:Ref<ObjectFieldData>[]
			onboardingStatus:Ref<Enum>
			costCenterRate:Ref<SupportCostCenterItem>[]
			workEmailList:Ref<Email>[]
			departmentId:Ref<string>
	}
	export interface PreHireQueryBuilder extends Struct<PreHireQueryBuilder>{

			atsApplicationId(atsApplicationId:string):Ref<PreHireQueryBuilder>
			id(id:string):Ref<PreHireQueryBuilder>
			hireDate(hireDate:string):Ref<PreHireQueryBuilder>
			employeeType(employeeType:Ref<Enum>):Ref<PreHireQueryBuilder>
			workerId(workerId:string):Ref<PreHireQueryBuilder>
			employeeTypeId(employeeTypeId:string):Ref<PreHireQueryBuilder>
			personId(personId:string):Ref<PreHireQueryBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<PreHireQueryBuilder>
			onboardingStatus(onboardingStatus:Ref<Enum>):Ref<PreHireQueryBuilder>
			costCenterRate(costCenterRate:Ref<SupportCostCenterItem>[]):Ref<PreHireQueryBuilder>
			workEmailList(workEmailList:Ref<Email>[]):Ref<PreHireQueryBuilder>
			departmentId(departmentId:string):Ref<PreHireQueryBuilder>
			build():Ref<PreHireQuery>
	}
	export interface PreviousEmployer extends Struct<PreviousEmployer>{

			id:Ref<string>
			employerName:Ref<string>
			employerReferenceNumber:Ref<string>
			employmentOrder:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface PreviousEmployerBuilder extends Struct<PreviousEmployerBuilder>{

			id(id:string):Ref<PreviousEmployerBuilder>
			employerName(employerName:string):Ref<PreviousEmployerBuilder>
			employerReferenceNumber(employerReferenceNumber:string):Ref<PreviousEmployerBuilder>
			employmentOrder(employmentOrder:string):Ref<PreviousEmployerBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<PreviousEmployerBuilder>
			build():Ref<PreviousEmployer>
	}
	export interface Process extends Struct<Process>{

			id:Ref<string>
	}
	export interface ProcessBuilder extends Struct<ProcessBuilder>{

			id(id:string):Ref<ProcessBuilder>
			build():Ref<Process>
	}
	export interface QueryCustomFieldReq extends Struct<QueryCustomFieldReq>{

	}
	export interface QueryCustomFieldReqBuilder extends Struct<QueryCustomFieldReqBuilder>{

			objectApiNameList(objectApiNameList:string[]):Ref<QueryCustomFieldReqBuilder>
			build():Ref<QueryCustomFieldReq>
	}
	export interface QueryCustomFieldResp extends Struct<QueryCustomFieldResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryCustomFieldRespData>
			success():bool
	}
	export interface QueryCustomFieldRespData extends Struct<QueryCustomFieldRespData>{

			items:Ref<CustomField>[]
	}
	export interface QueryOffboardingPathReqBodyBuilder extends Struct<QueryOffboardingPathReqBodyBuilder>{

			active(active:bool):Ref<QueryOffboardingPathReqBodyBuilder>
			offboardingReasonUniqueIdentifier(offboardingReasonUniqueIdentifier:string[]):Ref<QueryOffboardingPathReqBodyBuilder>
			build():Ref<QueryOffboardingReqBody>
	}
	export interface QueryOffboardingReq extends Struct<QueryOffboardingReq>{

			body:Ref<QueryOffboardingReqBody>
	}
	export interface QueryOffboardingReqBody extends Struct<QueryOffboardingReqBody>{

			active:Ref<bool>
			offboardingReasonUniqueIdentifier:string[]
	}
	export interface QueryOffboardingReqBodyBuilder extends Struct<QueryOffboardingReqBodyBuilder>{

			active(active:bool):Ref<QueryOffboardingReqBodyBuilder>
			offboardingReasonUniqueIdentifier(offboardingReasonUniqueIdentifier:string[]):Ref<QueryOffboardingReqBodyBuilder>
			build():Ref<QueryOffboardingReqBody>
	}
	export interface QueryOffboardingReqBuilder extends Struct<QueryOffboardingReqBuilder>{

			body(body:Ref<QueryOffboardingReqBody>):Ref<QueryOffboardingReqBuilder>
			build():Ref<QueryOffboardingReq>
	}
	export interface QueryOffboardingResp extends Struct<QueryOffboardingResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryOffboardingRespData>
			success():bool
	}
	export interface QueryOffboardingRespData extends Struct<QueryOffboardingRespData>{

			items:Ref<OffboardingReason>[]
	}
	export interface QuerySecurityGroupPathReqBodyBuilder extends Struct<QuerySecurityGroupPathReqBodyBuilder>{

			itemList(itemList:Ref<BpRoleOrganization>[]):Ref<QuerySecurityGroupPathReqBodyBuilder>
			build():Ref<QuerySecurityGroupReqBody>
	}
	export interface QuerySecurityGroupReq extends Struct<QuerySecurityGroupReq>{

			body:Ref<QuerySecurityGroupReqBody>
	}
	export interface QuerySecurityGroupReqBody extends Struct<QuerySecurityGroupReqBody>{

			itemList:Ref<BpRoleOrganization>[]
	}
	export interface QuerySecurityGroupReqBodyBuilder extends Struct<QuerySecurityGroupReqBodyBuilder>{

			itemList(itemList:Ref<BpRoleOrganization>[]):Ref<QuerySecurityGroupReqBodyBuilder>
			build():Ref<QuerySecurityGroupReqBody>
	}
	export interface QuerySecurityGroupReqBuilder extends Struct<QuerySecurityGroupReqBuilder>{

			departmentIdType(departmentIdType:string):Ref<QuerySecurityGroupReqBuilder>
			body(body:Ref<QuerySecurityGroupReqBody>):Ref<QuerySecurityGroupReqBuilder>
			build():Ref<QuerySecurityGroupReq>
	}
	export interface QuerySecurityGroupResp extends Struct<QuerySecurityGroupResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QuerySecurityGroupRespData>
			success():bool
	}
	export interface QuerySecurityGroupRespData extends Struct<QuerySecurityGroupRespData>{

			hrbpList:Ref<Hrbp>[]
	}
	export interface QueryTransferReasonReq extends Struct<QueryTransferReasonReq>{

	}
	export interface QueryTransferReasonReqBuilder extends Struct<QueryTransferReasonReqBuilder>{

			active(active:bool):Ref<QueryTransferReasonReqBuilder>
			transferReasonUniqueIdentifier(transferReasonUniqueIdentifier:string[]):Ref<QueryTransferReasonReqBuilder>
			build():Ref<QueryTransferReasonReq>
	}
	export interface QueryTransferReasonResp extends Struct<QueryTransferReasonResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryTransferReasonRespData>
			success():bool
	}
	export interface QueryTransferReasonRespData extends Struct<QueryTransferReasonRespData>{

			items:Ref<TransferReason>[]
	}
	export interface QueryTransferTypeReq extends Struct<QueryTransferTypeReq>{

	}
	export interface QueryTransferTypeReqBuilder extends Struct<QueryTransferTypeReqBuilder>{

			active(active:bool):Ref<QueryTransferTypeReqBuilder>
			transferTypeUniqueIdentifier(transferTypeUniqueIdentifier:string[]):Ref<QueryTransferTypeReqBuilder>
			build():Ref<QueryTransferTypeReq>
	}
	export interface QueryTransferTypeResp extends Struct<QueryTransferTypeResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryTransferTypeRespData>
			success():bool
	}
	export interface QueryTransferTypeRespData extends Struct<QueryTransferTypeRespData>{

			items:Ref<TransferType>[]
	}
	//"experienced_professionals"
	export const RecruitmentTypeExperiencedProfessionals:string
	//"recent_graduates"
	export const RecruitmentTypeRecentGraduates:string
	//"routine_intern"
	export const RecruitmentTypeRoutineIntern:string
	export interface ReferenceObject extends Struct<ReferenceObject>{

			apiName:Ref<string>
			id:Ref<string>
	}
	//"cpst_indicator"
	export const ReferenceObjectApiCpstIndicator:string
	//"cpst_item"
	export const ReferenceObjectApiCpstItem:string
	export interface ReferenceObjectBuilder extends Struct<ReferenceObjectBuilder>{

			apiName(apiName:string):Ref<ReferenceObjectBuilder>
			id(id:string):Ref<ReferenceObjectBuilder>
			build():Ref<ReferenceObject>
	}
	export interface ResidentTax extends Struct<ResidentTax>{

			id:Ref<string>
			yearResidentTax:Ref<string>
			taxAddress:Ref<Address>
			taxCountryRegionId:Ref<string>
			residentStatus:Ref<Enum>
			residentStatusSpecification:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface ResidentTaxBuilder extends Struct<ResidentTaxBuilder>{

			id(id:string):Ref<ResidentTaxBuilder>
			yearResidentTax(yearResidentTax:string):Ref<ResidentTaxBuilder>
			taxAddress(taxAddress:Ref<Address>):Ref<ResidentTaxBuilder>
			taxCountryRegionId(taxCountryRegionId:string):Ref<ResidentTaxBuilder>
			residentStatus(residentStatus:Ref<Enum>):Ref<ResidentTaxBuilder>
			residentStatusSpecification(residentStatusSpecification:string):Ref<ResidentTaxBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<ResidentTaxBuilder>
			build():Ref<ResidentTax>
	}
	export interface RoleAuthorization extends Struct<RoleAuthorization>{

			employmentId:Ref<string>
			permissionDetailList:Ref<PermissionDetail>[]
			managementScopeList:Ref<ManagementScope>[]
	}
	export interface RoleAuthorizationBuilder extends Struct<RoleAuthorizationBuilder>{

			employmentId(employmentId:string):Ref<RoleAuthorizationBuilder>
			permissionDetailList(permissionDetailList:Ref<PermissionDetail>[]):Ref<RoleAuthorizationBuilder>
			managementScopeList(managementScopeList:Ref<ManagementScope>[]):Ref<RoleAuthorizationBuilder>
			build():Ref<RoleAuthorization>
	}
	export interface RuleDimension extends Struct<RuleDimension>{

			entityKey:Ref<string>
			entityName:Ref<Name>
	}
	export interface RuleDimensionBuilder extends Struct<RuleDimensionBuilder>{

			entityKey(entityKey:string):Ref<RuleDimensionBuilder>
			entityName(entityName:Ref<Name>):Ref<RuleDimensionBuilder>
			build():Ref<RuleDimension>
	}
	export interface SearchAssignedUserPathReqBodyBuilder extends Struct<SearchAssignedUserPathReqBodyBuilder>{

			roleId(roleId:string):Ref<SearchAssignedUserPathReqBodyBuilder>
			managementScopeList(managementScopeList:Ref<ManagementScope>[]):Ref<SearchAssignedUserPathReqBodyBuilder>
			searchMethod(searchMethod:string):Ref<SearchAssignedUserPathReqBodyBuilder>
			pageToken(pageToken:string):Ref<SearchAssignedUserPathReqBodyBuilder>
			pageSize(pageSize:string):Ref<SearchAssignedUserPathReqBodyBuilder>
			build():Ref<SearchAssignedUserReqBody>
	}
	export interface SearchAssignedUserReq extends Struct<SearchAssignedUserReq>{

			body:Ref<SearchAssignedUserReqBody>
	}
	export interface SearchAssignedUserReqBody extends Struct<SearchAssignedUserReqBody>{

			roleId:Ref<string>
			managementScopeList:Ref<ManagementScope>[]
			searchMethod:Ref<string>
			pageToken:Ref<string>
			pageSize:Ref<string>
	}
	export interface SearchAssignedUserReqBodyBuilder extends Struct<SearchAssignedUserReqBodyBuilder>{

			roleId(roleId:string):Ref<SearchAssignedUserReqBodyBuilder>
			managementScopeList(managementScopeList:Ref<ManagementScope>[]):Ref<SearchAssignedUserReqBodyBuilder>
			searchMethod(searchMethod:string):Ref<SearchAssignedUserReqBodyBuilder>
			pageToken(pageToken:string):Ref<SearchAssignedUserReqBodyBuilder>
			pageSize(pageSize:string):Ref<SearchAssignedUserReqBodyBuilder>
			build():Ref<SearchAssignedUserReqBody>
	}
	export interface SearchAssignedUserReqBuilder extends Struct<SearchAssignedUserReqBuilder>{

			userIdType(userIdType:string):Ref<SearchAssignedUserReqBuilder>
			body(body:Ref<SearchAssignedUserReqBody>):Ref<SearchAssignedUserReqBuilder>
			build():Ref<SearchAssignedUserReq>
	}
	export interface SearchAssignedUserResp extends Struct<SearchAssignedUserResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SearchAssignedUserRespData>
			success():bool
	}
	export interface SearchAssignedUserRespData extends Struct<SearchAssignedUserRespData>{

			items:Ref<RoleAuthorization>[]
			hasMore:Ref<bool>
			pageToken:Ref<string>
	}
	export interface SearchOffboardingIterator extends Struct<SearchOffboardingIterator>{

			next():[bool,Ref<Offboarding>]
			nextPageToken():Ref<string>
	}
	export interface SearchOffboardingPathReqBodyBuilder extends Struct<SearchOffboardingPathReqBodyBuilder>{

			employmentIds(employmentIds:string[]):Ref<SearchOffboardingPathReqBodyBuilder>
			applyInitiatingTimeStart(applyInitiatingTimeStart:string):Ref<SearchOffboardingPathReqBodyBuilder>
			applyInitiatingTimeEnd(applyInitiatingTimeEnd:string):Ref<SearchOffboardingPathReqBodyBuilder>
			expectedOffboardingDateStart(expectedOffboardingDateStart:string):Ref<SearchOffboardingPathReqBodyBuilder>
			expectedOffboardingDateEnd(expectedOffboardingDateEnd:string):Ref<SearchOffboardingPathReqBodyBuilder>
			offboardingDateStart(offboardingDateStart:string):Ref<SearchOffboardingPathReqBodyBuilder>
			offboardingDateEnd(offboardingDateEnd:string):Ref<SearchOffboardingPathReqBodyBuilder>
			statuses(statuses:string[]):Ref<SearchOffboardingPathReqBodyBuilder>
			reasons(reasons:string[]):Ref<SearchOffboardingPathReqBodyBuilder>
			employeeReasons(employeeReasons:string[]):Ref<SearchOffboardingPathReqBodyBuilder>
			build():Ref<SearchOffboardingReqBody>
	}
	export interface SearchOffboardingReq extends Struct<SearchOffboardingReq>{

			body:Ref<SearchOffboardingReqBody>
			limit:int
	}
	export interface SearchOffboardingReqBody extends Struct<SearchOffboardingReqBody>{

			employmentIds:string[]
			applyInitiatingTimeStart:Ref<string>
			applyInitiatingTimeEnd:Ref<string>
			expectedOffboardingDateStart:Ref<string>
			expectedOffboardingDateEnd:Ref<string>
			offboardingDateStart:Ref<string>
			offboardingDateEnd:Ref<string>
			statuses:string[]
			reasons:string[]
			employeeReasons:string[]
	}
	export interface SearchOffboardingReqBodyBuilder extends Struct<SearchOffboardingReqBodyBuilder>{

			employmentIds(employmentIds:string[]):Ref<SearchOffboardingReqBodyBuilder>
			applyInitiatingTimeStart(applyInitiatingTimeStart:string):Ref<SearchOffboardingReqBodyBuilder>
			applyInitiatingTimeEnd(applyInitiatingTimeEnd:string):Ref<SearchOffboardingReqBodyBuilder>
			expectedOffboardingDateStart(expectedOffboardingDateStart:string):Ref<SearchOffboardingReqBodyBuilder>
			expectedOffboardingDateEnd(expectedOffboardingDateEnd:string):Ref<SearchOffboardingReqBodyBuilder>
			offboardingDateStart(offboardingDateStart:string):Ref<SearchOffboardingReqBodyBuilder>
			offboardingDateEnd(offboardingDateEnd:string):Ref<SearchOffboardingReqBodyBuilder>
			statuses(statuses:string[]):Ref<SearchOffboardingReqBodyBuilder>
			reasons(reasons:string[]):Ref<SearchOffboardingReqBodyBuilder>
			employeeReasons(employeeReasons:string[]):Ref<SearchOffboardingReqBodyBuilder>
			build():Ref<SearchOffboardingReqBody>
	}
	export interface SearchOffboardingReqBuilder extends Struct<SearchOffboardingReqBuilder>{

			limit(limit:int):Ref<SearchOffboardingReqBuilder>
			pageSize(pageSize:int):Ref<SearchOffboardingReqBuilder>
			pageToken(pageToken:string):Ref<SearchOffboardingReqBuilder>
			userIdType(userIdType:string):Ref<SearchOffboardingReqBuilder>
			body(body:Ref<SearchOffboardingReqBody>):Ref<SearchOffboardingReqBuilder>
			build():Ref<SearchOffboardingReq>
	}
	export interface SearchOffboardingResp extends Struct<SearchOffboardingResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SearchOffboardingRespData>
			success():bool
	}
	export interface SearchOffboardingRespData extends Struct<SearchOffboardingRespData>{

			items:Ref<Offboarding>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface SecurityGroup extends Struct<SecurityGroup>{

			id:Ref<string>
			code:Ref<string>
			name:Ref<Name>
			activeStatus:Ref<int>
			description:Ref<Name>
			updateTime:Ref<string>
			orgTruncation:Ref<OrgTruncation>[]
	}
	export interface SecurityGroupBuilder extends Struct<SecurityGroupBuilder>{

			id(id:string):Ref<SecurityGroupBuilder>
			code(code:string):Ref<SecurityGroupBuilder>
			name(name:Ref<Name>):Ref<SecurityGroupBuilder>
			activeStatus(activeStatus:int):Ref<SecurityGroupBuilder>
			description(description:Ref<Name>):Ref<SecurityGroupBuilder>
			updateTime(updateTime:string):Ref<SecurityGroupBuilder>
			orgTruncation(orgTruncation:Ref<OrgTruncation>[]):Ref<SecurityGroupBuilder>
			build():Ref<SecurityGroup>
	}
	export interface SortOption extends Struct<SortOption>{

			sortField:Ref<string>
			sortOrder:Ref<int>
			sortI18n:Ref<int>
			sortByStrandLength:Ref<bool>
			sortByPinyin:Ref<bool>
			sortByEnumValueOrder:Ref<bool>
	}
	export interface SortOptionBuilder extends Struct<SortOptionBuilder>{

			sortField(sortField:string):Ref<SortOptionBuilder>
			sortOrder(sortOrder:int):Ref<SortOptionBuilder>
			sortI18n(sortI18n:int):Ref<SortOptionBuilder>
			sortByStrandLength(sortByStrandLength:bool):Ref<SortOptionBuilder>
			sortByPinyin(sortByPinyin:bool):Ref<SortOptionBuilder>
			sortByEnumValueOrder(sortByEnumValueOrder:bool):Ref<SortOptionBuilder>
			build():Ref<SortOption>
	}
	export interface Subdivision extends Struct<Subdivision>{

			id:Ref<string>
			name:Ref<I18n>[]
			countryRegionId:Ref<string>
			subdivisionType:Ref<Enum>
	}
	export interface SubdivisionBuilder extends Struct<SubdivisionBuilder>{

			id(id:string):Ref<SubdivisionBuilder>
			name(name:Ref<I18n>[]):Ref<SubdivisionBuilder>
			countryRegionId(countryRegionId:string):Ref<SubdivisionBuilder>
			subdivisionType(subdivisionType:Ref<Enum>):Ref<SubdivisionBuilder>
			build():Ref<Subdivision>
	}
	export interface SubmitOffboardingPathReqBodyBuilder extends Struct<SubmitOffboardingPathReqBodyBuilder>{

			offboardingMode(offboardingMode:int):Ref<SubmitOffboardingPathReqBodyBuilder>
			employmentId(employmentId:string):Ref<SubmitOffboardingPathReqBodyBuilder>
			offboardingDate(offboardingDate:string):Ref<SubmitOffboardingPathReqBodyBuilder>
			offboardingReasonUniqueIdentifier(offboardingReasonUniqueIdentifier:string):Ref<SubmitOffboardingPathReqBodyBuilder>
			offboardingReasonExplanation(offboardingReasonExplanation:string):Ref<SubmitOffboardingPathReqBodyBuilder>
			initiatorId(initiatorId:string):Ref<SubmitOffboardingPathReqBodyBuilder>
			addBlockList(addBlockList:bool):Ref<SubmitOffboardingPathReqBodyBuilder>
			blockReason(blockReason:string):Ref<SubmitOffboardingPathReqBodyBuilder>
			blockReasonExplanation(blockReasonExplanation:string):Ref<SubmitOffboardingPathReqBodyBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<SubmitOffboardingPathReqBodyBuilder>
			build():Ref<SubmitOffboardingReqBody>
	}
	export interface SubmitOffboardingReq extends Struct<SubmitOffboardingReq>{

			body:Ref<SubmitOffboardingReqBody>
	}
	export interface SubmitOffboardingReqBody extends Struct<SubmitOffboardingReqBody>{

			offboardingMode:Ref<int>
			employmentId:Ref<string>
			offboardingDate:Ref<string>
			offboardingReasonUniqueIdentifier:Ref<string>
			offboardingReasonExplanation:Ref<string>
			initiatorId:Ref<string>
			addBlockList:Ref<bool>
			blockReason:Ref<string>
			blockReasonExplanation:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface SubmitOffboardingReqBodyBuilder extends Struct<SubmitOffboardingReqBodyBuilder>{

			offboardingMode(offboardingMode:int):Ref<SubmitOffboardingReqBodyBuilder>
			employmentId(employmentId:string):Ref<SubmitOffboardingReqBodyBuilder>
			offboardingDate(offboardingDate:string):Ref<SubmitOffboardingReqBodyBuilder>
			offboardingReasonUniqueIdentifier(offboardingReasonUniqueIdentifier:string):Ref<SubmitOffboardingReqBodyBuilder>
			offboardingReasonExplanation(offboardingReasonExplanation:string):Ref<SubmitOffboardingReqBodyBuilder>
			initiatorId(initiatorId:string):Ref<SubmitOffboardingReqBodyBuilder>
			addBlockList(addBlockList:bool):Ref<SubmitOffboardingReqBodyBuilder>
			blockReason(blockReason:string):Ref<SubmitOffboardingReqBodyBuilder>
			blockReasonExplanation(blockReasonExplanation:string):Ref<SubmitOffboardingReqBodyBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<SubmitOffboardingReqBodyBuilder>
			build():Ref<SubmitOffboardingReqBody>
	}
	export interface SubmitOffboardingReqBuilder extends Struct<SubmitOffboardingReqBuilder>{

			userIdType(userIdType:string):Ref<SubmitOffboardingReqBuilder>
			body(body:Ref<SubmitOffboardingReqBody>):Ref<SubmitOffboardingReqBuilder>
			build():Ref<SubmitOffboardingReq>
	}
	export interface SubmitOffboardingResp extends Struct<SubmitOffboardingResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<SubmitOffboardingRespData>
			success():bool
	}
	export interface SubmitOffboardingRespData extends Struct<SubmitOffboardingRespData>{

			offboardingId:Ref<string>
			employmentId:Ref<string>
			offboardingReasonUniqueIdentifier:Ref<string>
			offboardingDate:Ref<string>
			offboardingReasonExplanation:Ref<string>
			addBlockList:Ref<bool>
			blockReason:Ref<string>
			blockReasonExplanation:Ref<string>
			createdTime:Ref<string>
	}
	export interface Subregion extends Struct<Subregion>{

			id:Ref<string>
			name:Ref<I18n>[]
			subdivisionId:Ref<string>
			superiorSubregionId:Ref<string>
	}
	export interface SubregionBuilder extends Struct<SubregionBuilder>{

			id(id:string):Ref<SubregionBuilder>
			name(name:Ref<I18n>[]):Ref<SubregionBuilder>
			subdivisionId(subdivisionId:string):Ref<SubregionBuilder>
			superiorSubregionId(superiorSubregionId:string):Ref<SubregionBuilder>
			build():Ref<Subregion>
	}
	export interface SupportCostCenterItem extends Struct<SupportCostCenterItem>{

			costCenterId:Ref<string>
			rate:Ref<int>
	}
	export interface SupportCostCenterItemBuilder extends Struct<SupportCostCenterItemBuilder>{

			costCenterId(costCenterId:string):Ref<SupportCostCenterItemBuilder>
			rate(rate:int):Ref<SupportCostCenterItemBuilder>
			build():Ref<SupportCostCenterItem>
	}
	export interface Temp extends Struct<Temp>{

			id:Ref<string>
	}
	export interface TempBuilder extends Struct<TempBuilder>{

			id(id:string):Ref<TempBuilder>
			build():Ref<Temp>
	}
	export interface TextFieldSetting extends Struct<TextFieldSetting>{

			isMultilingual:Ref<bool>
			isMultiline:Ref<bool>
			maxLength:Ref<int>
			isUrlType:Ref<bool>
	}
	export interface TextFieldSettingBuilder extends Struct<TextFieldSettingBuilder>{

			isMultilingual(isMultilingual:bool):Ref<TextFieldSettingBuilder>
			isMultiline(isMultiline:bool):Ref<TextFieldSettingBuilder>
			maxLength(maxLength:int):Ref<TextFieldSettingBuilder>
			isUrlType(isUrlType:bool):Ref<TextFieldSettingBuilder>
			build():Ref<TextFieldSetting>
	}
	export interface TranferEmploymentInfo extends Struct<TranferEmploymentInfo>{

			regularEmployeeStartDate:Ref<string>
			seniorityDate:Ref<string>
			employeeNumber:Ref<string>
			customFields:Ref<CustomFieldData>[]
	}
	export interface TranferEmploymentInfoBuilder extends Struct<TranferEmploymentInfoBuilder>{

			regularEmployeeStartDate(regularEmployeeStartDate:string):Ref<TranferEmploymentInfoBuilder>
			seniorityDate(seniorityDate:string):Ref<TranferEmploymentInfoBuilder>
			employeeNumber(employeeNumber:string):Ref<TranferEmploymentInfoBuilder>
			customFields(customFields:Ref<CustomFieldData>[]):Ref<TranferEmploymentInfoBuilder>
			build():Ref<TranferEmploymentInfo>
	}
	export interface TransferInfo extends Struct<TransferInfo>{

			remark:Ref<string>
			offerInfo:Ref<string>
			targetDottedManagerClean:Ref<bool>
			probationExist:Ref<bool>
			originalDepartment:Ref<string>
			targetDepartment:Ref<string>
			originalWorkLocation:Ref<string>
			targetWorkLocation:Ref<string>
			originalDirectManager:Ref<string>
			targetDirectManager:Ref<string>
			originalDottedManager:Ref<string>
			targetDottedManager:Ref<string>
			originalJob:Ref<string>
			targetJob:Ref<string>
			originalJobFamily:Ref<string>
			targetJobFamily:Ref<string>
			originalJobLevel:Ref<string>
			targetJobLevel:Ref<string>
			originalWorkforceType:Ref<string>
			targetWorkforceType:Ref<string>
			originalCompany:Ref<string>
			targetCompany:Ref<string>
			originalContractNumber:Ref<string>
			targetContractNumber:Ref<string>
			originalContractType:Ref<string>
			targetContractType:Ref<string>
			originalDurationType:Ref<string>
			targetDurationType:Ref<string>
			originalSigningType:Ref<string>
			targetSigningType:Ref<string>
			originalContractStartDate:Ref<string>
			targetContractStartDate:Ref<string>
			originalContractEndDate:Ref<string>
			targetContractEndDate:Ref<string>
			originalWorkingHoursType:Ref<string>
			targetWorkingHoursType:Ref<string>
			originalWorkingCalendar:Ref<string>
			targetWorkingCalendar:Ref<string>
			originalProbationEndDate:Ref<string>
			targetProbationEndDate:Ref<string>
			originalWeeklyWorkingHours:Ref<string>
			targetWeeklyWorkingHours:Ref<string>
			originalWorkShift:Ref<string>
			targetWorkShift:Ref<string>
			originalCostCenterRate:Ref<SupportCostCenterItem>[]
			targetCostCenterRate:Ref<SupportCostCenterItem>[]
			originalEmploymentChange:Ref<TranferEmploymentInfo>
			targetEmploymentChange:Ref<TranferEmploymentInfo>
			originalJobGrade:Ref<string>
			targetJobGrade:Ref<string>
			originalCompensationType:Ref<string>
			targetCompensationType:Ref<string>
			originalServiceCompany:Ref<string>
			targetServiceCompany:Ref<string>
	}
	export interface TransferInfoBuilder extends Struct<TransferInfoBuilder>{

			remark(remark:string):Ref<TransferInfoBuilder>
			offerInfo(offerInfo:string):Ref<TransferInfoBuilder>
			targetDottedManagerClean(targetDottedManagerClean:bool):Ref<TransferInfoBuilder>
			probationExist(probationExist:bool):Ref<TransferInfoBuilder>
			originalDepartment(originalDepartment:string):Ref<TransferInfoBuilder>
			targetDepartment(targetDepartment:string):Ref<TransferInfoBuilder>
			originalWorkLocation(originalWorkLocation:string):Ref<TransferInfoBuilder>
			targetWorkLocation(targetWorkLocation:string):Ref<TransferInfoBuilder>
			originalDirectManager(originalDirectManager:string):Ref<TransferInfoBuilder>
			targetDirectManager(targetDirectManager:string):Ref<TransferInfoBuilder>
			originalDottedManager(originalDottedManager:string):Ref<TransferInfoBuilder>
			targetDottedManager(targetDottedManager:string):Ref<TransferInfoBuilder>
			originalJob(originalJob:string):Ref<TransferInfoBuilder>
			targetJob(targetJob:string):Ref<TransferInfoBuilder>
			originalJobFamily(originalJobFamily:string):Ref<TransferInfoBuilder>
			targetJobFamily(targetJobFamily:string):Ref<TransferInfoBuilder>
			originalJobLevel(originalJobLevel:string):Ref<TransferInfoBuilder>
			targetJobLevel(targetJobLevel:string):Ref<TransferInfoBuilder>
			originalWorkforceType(originalWorkforceType:string):Ref<TransferInfoBuilder>
			targetWorkforceType(targetWorkforceType:string):Ref<TransferInfoBuilder>
			originalCompany(originalCompany:string):Ref<TransferInfoBuilder>
			targetCompany(targetCompany:string):Ref<TransferInfoBuilder>
			originalContractNumber(originalContractNumber:string):Ref<TransferInfoBuilder>
			targetContractNumber(targetContractNumber:string):Ref<TransferInfoBuilder>
			originalContractType(originalContractType:string):Ref<TransferInfoBuilder>
			targetContractType(targetContractType:string):Ref<TransferInfoBuilder>
			originalDurationType(originalDurationType:string):Ref<TransferInfoBuilder>
			targetDurationType(targetDurationType:string):Ref<TransferInfoBuilder>
			originalSigningType(originalSigningType:string):Ref<TransferInfoBuilder>
			targetSigningType(targetSigningType:string):Ref<TransferInfoBuilder>
			originalContractStartDate(originalContractStartDate:string):Ref<TransferInfoBuilder>
			targetContractStartDate(targetContractStartDate:string):Ref<TransferInfoBuilder>
			originalContractEndDate(originalContractEndDate:string):Ref<TransferInfoBuilder>
			targetContractEndDate(targetContractEndDate:string):Ref<TransferInfoBuilder>
			originalWorkingHoursType(originalWorkingHoursType:string):Ref<TransferInfoBuilder>
			targetWorkingHoursType(targetWorkingHoursType:string):Ref<TransferInfoBuilder>
			originalWorkingCalendar(originalWorkingCalendar:string):Ref<TransferInfoBuilder>
			targetWorkingCalendar(targetWorkingCalendar:string):Ref<TransferInfoBuilder>
			originalProbationEndDate(originalProbationEndDate:string):Ref<TransferInfoBuilder>
			targetProbationEndDate(targetProbationEndDate:string):Ref<TransferInfoBuilder>
			originalWeeklyWorkingHours(originalWeeklyWorkingHours:string):Ref<TransferInfoBuilder>
			targetWeeklyWorkingHours(targetWeeklyWorkingHours:string):Ref<TransferInfoBuilder>
			originalWorkShift(originalWorkShift:string):Ref<TransferInfoBuilder>
			targetWorkShift(targetWorkShift:string):Ref<TransferInfoBuilder>
			originalCostCenterRate(originalCostCenterRate:Ref<SupportCostCenterItem>[]):Ref<TransferInfoBuilder>
			targetCostCenterRate(targetCostCenterRate:Ref<SupportCostCenterItem>[]):Ref<TransferInfoBuilder>
			originalEmploymentChange(originalEmploymentChange:Ref<TranferEmploymentInfo>):Ref<TransferInfoBuilder>
			targetEmploymentChange(targetEmploymentChange:Ref<TranferEmploymentInfo>):Ref<TransferInfoBuilder>
			originalJobGrade(originalJobGrade:string):Ref<TransferInfoBuilder>
			targetJobGrade(targetJobGrade:string):Ref<TransferInfoBuilder>
			originalCompensationType(originalCompensationType:string):Ref<TransferInfoBuilder>
			targetCompensationType(targetCompensationType:string):Ref<TransferInfoBuilder>
			originalServiceCompany(originalServiceCompany:string):Ref<TransferInfoBuilder>
			targetServiceCompany(targetServiceCompany:string):Ref<TransferInfoBuilder>
			build():Ref<TransferInfo>
	}
	//1
	export const TransferMode1:int
	//2
	export const TransferMode2:int
	export interface TransferReason extends Struct<TransferReason>{

			transferReasonUniqueIdentifier:Ref<string>
			name:Ref<I18n>[]
			active:Ref<bool>
			parentTransferReasonUniqueIdentifier:Ref<string>
			createdTime:Ref<string>
			updatedTime:Ref<string>
	}
	export interface TransferReasonBuilder extends Struct<TransferReasonBuilder>{

			transferReasonUniqueIdentifier(transferReasonUniqueIdentifier:string):Ref<TransferReasonBuilder>
			name(name:Ref<I18n>[]):Ref<TransferReasonBuilder>
			active(active:bool):Ref<TransferReasonBuilder>
			parentTransferReasonUniqueIdentifier(parentTransferReasonUniqueIdentifier:string):Ref<TransferReasonBuilder>
			createdTime(createdTime:string):Ref<TransferReasonBuilder>
			updatedTime(updatedTime:string):Ref<TransferReasonBuilder>
			build():Ref<TransferReason>
	}
	export interface TransferType extends Struct<TransferType>{

			transferTypeUniqueIdentifier:Ref<string>
			name:Ref<I18n>[]
			active:Ref<bool>
			flowId:Ref<string>
			flowName:Ref<I18n>[]
			createdTime:Ref<string>
			updatedTime:Ref<string>
	}
	export interface TransferTypeBuilder extends Struct<TransferTypeBuilder>{

			transferTypeUniqueIdentifier(transferTypeUniqueIdentifier:string):Ref<TransferTypeBuilder>
			name(name:Ref<I18n>[]):Ref<TransferTypeBuilder>
			active(active:bool):Ref<TransferTypeBuilder>
			flowId(flowId:string):Ref<TransferTypeBuilder>
			flowName(flowName:Ref<I18n>[]):Ref<TransferTypeBuilder>
			createdTime(createdTime:string):Ref<TransferTypeBuilder>
			updatedTime(updatedTime:string):Ref<TransferTypeBuilder>
			build():Ref<TransferType>
	}
	export interface UploadPersonPathReqBodyBuilder extends Struct<UploadPersonPathReqBodyBuilder>{

			fileContentPath(fileContentPath:string):Ref<UploadPersonPathReqBodyBuilder>
			fileName(fileName:string):Ref<UploadPersonPathReqBodyBuilder>
			build():Ref<UploadPersonReqBody>
	}
	export interface UploadPersonReq extends Struct<UploadPersonReq>{

			body:Ref<UploadPersonReqBody>
	}
	export interface UploadPersonReqBody extends Struct<UploadPersonReqBody>{

			fileContent:io.Reader
			fileName:Ref<string>
	}
	export interface UploadPersonReqBodyBuilder extends Struct<UploadPersonReqBodyBuilder>{

			fileContent(fileContent:io.Reader):Ref<UploadPersonReqBodyBuilder>
			fileName(fileName:string):Ref<UploadPersonReqBodyBuilder>
			build():Ref<UploadPersonReqBody>
	}
	export interface UploadPersonReqBuilder extends Struct<UploadPersonReqBuilder>{

			body(body:Ref<UploadPersonReqBody>):Ref<UploadPersonReqBuilder>
			build():Ref<UploadPersonReq>
	}
	export interface UploadPersonResp extends Struct<UploadPersonResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<UploadPersonRespData>
			success():bool
	}
	export interface UploadPersonRespData extends Struct<UploadPersonRespData>{

			id:Ref<string>
	}
	export interface UserId extends Struct<UserId>{

			userId:Ref<string>
			openId:Ref<string>
			unionId:Ref<string>
	}
	export interface UserIdBuilder extends Struct<UserIdBuilder>{

			userId(userId:string):Ref<UserIdBuilder>
			openId(openId:string):Ref<UserIdBuilder>
			unionId(unionId:string):Ref<UserIdBuilder>
			build():Ref<UserId>
	}
	//"open_id"
	export const UserIdTypeCreateDepartmentOpenId:string
	//"people_corehr_id"
	export const UserIdTypeCreateDepartmentPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeCreateDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeCreateDepartmentUserId:string
	//"open_id"
	export const UserIdTypeCreateJobChangeOpenId:string
	//"people_admin_id"
	export const UserIdTypeCreateJobChangePeopleAdminId:string
	//"people_corehr_id"
	export const UserIdTypeCreateJobChangePeopleCorehrId:string
	//"union_id"
	export const UserIdTypeCreateJobChangeUnionId:string
	//"user_id"
	export const UserIdTypeCreateJobChangeUserId:string
	//"open_id"
	export const UserIdTypeCreateJobDataOpenId:string
	//"people_corehr_id"
	export const UserIdTypeCreateJobDataPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeCreateJobDataUnionId:string
	//"user_id"
	export const UserIdTypeCreateJobDataUserId:string
	//"open_id"
	export const UserIdTypeCreateLeaveGrantingRecordOpenId:string
	//"people_corehr_id"
	export const UserIdTypeCreateLeaveGrantingRecordPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeCreateLeaveGrantingRecordUnionId:string
	//"user_id"
	export const UserIdTypeCreateLeaveGrantingRecordUserId:string
	//"open_id"
	export const UserIdTypeDeleteEmploymentOpenId:string
	//"people_corehr_id"
	export const UserIdTypeDeleteEmploymentPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeDeleteEmploymentUnionId:string
	//"user_id"
	export const UserIdTypeDeleteEmploymentUserId:string
	//"open_id"
	export const UserIdTypeGetDepartmentOpenId:string
	//"people_corehr_id"
	export const UserIdTypeGetDepartmentPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeGetDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeGetDepartmentUserId:string
	//"open_id"
	export const UserIdTypeGetJobDataOpenId:string
	//"people_corehr_id"
	export const UserIdTypeGetJobDataPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeGetJobDataUnionId:string
	//"user_id"
	export const UserIdTypeGetJobDataUserId:string
	//"people_employee_id"
	export const UserIdTypeGetPersonPeopleEmployeeId:string
	//"open_id"
	export const UserIdTypeLeaveBalancesLeaveOpenId:string
	//"people_corehr_id"
	export const UserIdTypeLeaveBalancesLeavePeopleCorehrId:string
	//"union_id"
	export const UserIdTypeLeaveBalancesLeaveUnionId:string
	//"user_id"
	export const UserIdTypeLeaveBalancesLeaveUserId:string
	//"open_id"
	export const UserIdTypeLeaveRequestHistoryLeaveOpenId:string
	//"people_corehr_id"
	export const UserIdTypeLeaveRequestHistoryLeavePeopleCorehrId:string
	//"union_id"
	export const UserIdTypeLeaveRequestHistoryLeaveUnionId:string
	//"user_id"
	export const UserIdTypeLeaveRequestHistoryLeaveUserId:string
	//"open_id"
	export const UserIdTypeLeaveTypesLeaveOpenId:string
	//"people_corehr_id"
	export const UserIdTypeLeaveTypesLeavePeopleCorehrId:string
	//"union_id"
	export const UserIdTypeLeaveTypesLeaveUnionId:string
	//"user_id"
	export const UserIdTypeLeaveTypesLeaveUserId:string
	//"open_id"
	export const UserIdTypeListDepartmentOpenId:string
	//"people_corehr_id"
	export const UserIdTypeListDepartmentPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeListDepartmentUnionId:string
	//"user_id"
	export const UserIdTypeListDepartmentUserId:string
	//"open_id"
	export const UserIdTypeListJobDataOpenId:string
	//"people_corehr_id"
	export const UserIdTypeListJobDataPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeListJobDataUnionId:string
	//"user_id"
	export const UserIdTypeListJobDataUserId:string
	//"open_id"
	export const UserIdTypeMatchCompensationStandardOpenId:string
	//"people_corehr_id"
	export const UserIdTypeMatchCompensationStandardPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeMatchCompensationStandardUnionId:string
	//"user_id"
	export const UserIdTypeMatchCompensationStandardUserId:string
	//"open_id"
	export const UserIdTypeOpenId:string
	//"open_id"
	export const UserIdTypePatchDepartmentOpenId:string
	//"people_corehr_id"
	export const UserIdTypePatchDepartmentPeopleCorehrId:string
	//"union_id"
	export const UserIdTypePatchDepartmentUnionId:string
	//"user_id"
	export const UserIdTypePatchDepartmentUserId:string
	//"open_id"
	export const UserIdTypePatchEmploymentOpenId:string
	//"people_corehr_id"
	export const UserIdTypePatchEmploymentPeopleCorehrId:string
	//"union_id"
	export const UserIdTypePatchEmploymentUnionId:string
	//"user_id"
	export const UserIdTypePatchEmploymentUserId:string
	//"open_id"
	export const UserIdTypePatchJobDataOpenId:string
	//"people_corehr_id"
	export const UserIdTypePatchJobDataPeopleCorehrId:string
	//"union_id"
	export const UserIdTypePatchJobDataUnionId:string
	//"user_id"
	export const UserIdTypePatchJobDataUserId:string
	//"people_corehr_id"
	export const UserIdTypePeopleCorehrId:string
	//"open_id"
	export const UserIdTypeSearchOffboardingOpenId:string
	//"people_corehr_id"
	export const UserIdTypeSearchOffboardingPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeSearchOffboardingUnionId:string
	//"user_id"
	export const UserIdTypeSearchOffboardingUserId:string
	//"open_id"
	export const UserIdTypeSubmitOffboardingOpenId:string
	//"people_corehr_id"
	export const UserIdTypeSubmitOffboardingPeopleCorehrId:string
	//"union_id"
	export const UserIdTypeSubmitOffboardingUnionId:string
	//"user_id"
	export const UserIdTypeSubmitOffboardingUserId:string
	//"union_id"
	export const UserIdTypeUnionId:string
	//"user_id"
	export const UserIdTypeUserId:string
	export interface V1 extends Struct<V1>{

			assignedUser:Ref<{
			
				search(ctx:context.Context,req:Ref<SearchAssignedUserReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchAssignedUserResp>
			}>
			commonDataId:Ref<{
			
				convert(ctx:context.Context,req:Ref<ConvertCommonDataIdReq>,...options:larkcore.RequestOptionFunc[]):Ref<ConvertCommonDataIdResp>
			}>
			company:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateCompanyReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateCompanyResp>
				delete(ctx:context.Context,req:Ref<DeleteCompanyReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteCompanyResp>
				get(ctx:context.Context,req:Ref<GetCompanyReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetCompanyResp>
				list(ctx:context.Context,req:Ref<ListCompanyReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListCompanyResp>
				patch(ctx:context.Context,req:Ref<PatchCompanyReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchCompanyResp>
			}>
			compensationStandard:Ref<{
			
				match(ctx:context.Context,req:Ref<MatchCompensationStandardReq>,...options:larkcore.RequestOptionFunc[]):Ref<MatchCompensationStandardResp>
			}>
			contract:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateContractReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateContractResp>
				delete(ctx:context.Context,req:Ref<DeleteContractReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteContractResp>
				get(ctx:context.Context,req:Ref<GetContractReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetContractResp>
				list(ctx:context.Context,req:Ref<ListContractReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListContractResp>
				patch(ctx:context.Context,req:Ref<PatchContractReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchContractResp>
			}>
			countryRegion:Ref<{
			
				get(ctx:context.Context,req:Ref<GetCountryRegionReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetCountryRegionResp>
				list(ctx:context.Context,req:Ref<ListCountryRegionReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListCountryRegionResp>
			}>
			currency:Ref<{
			
				get(ctx:context.Context,req:Ref<GetCurrencyReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetCurrencyResp>
				list(ctx:context.Context,req:Ref<ListCurrencyReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListCurrencyResp>
			}>
			customField:Ref<{
			
				getByParam(ctx:context.Context,req:Ref<GetByParamCustomFieldReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetByParamCustomFieldResp>
				listObjectApiName(ctx:context.Context,req:Ref<ListObjectApiNameCustomFieldReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListObjectApiNameCustomFieldResp>
				query(ctx:context.Context,req:Ref<QueryCustomFieldReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryCustomFieldResp>
			}>
			department:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateDepartmentResp>
				delete(ctx:context.Context,req:Ref<DeleteDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteDepartmentResp>
				get(ctx:context.Context,req:Ref<GetDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetDepartmentResp>
				list(ctx:context.Context,req:Ref<ListDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListDepartmentResp>
				patch(ctx:context.Context,req:Ref<PatchDepartmentReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchDepartmentResp>
			}>
			employeeType:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateEmployeeTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateEmployeeTypeResp>
				delete(ctx:context.Context,req:Ref<DeleteEmployeeTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteEmployeeTypeResp>
				get(ctx:context.Context,req:Ref<GetEmployeeTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetEmployeeTypeResp>
				list(ctx:context.Context,req:Ref<ListEmployeeTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListEmployeeTypeResp>
				patch(ctx:context.Context,req:Ref<PatchEmployeeTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchEmployeeTypeResp>
			}>
			employment:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateEmploymentReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateEmploymentResp>
				delete(ctx:context.Context,req:Ref<DeleteEmploymentReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteEmploymentResp>
				patch(ctx:context.Context,req:Ref<PatchEmploymentReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchEmploymentResp>
			}>
			file:Ref<{
			
				get(ctx:context.Context,req:Ref<GetFileReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetFileResp>
			}>
			job:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateJobReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateJobResp>
				delete(ctx:context.Context,req:Ref<DeleteJobReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteJobResp>
				get(ctx:context.Context,req:Ref<GetJobReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetJobResp>
				list(ctx:context.Context,req:Ref<ListJobReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobResp>
				patch(ctx:context.Context,req:Ref<PatchJobReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchJobResp>
			}>
			jobChange:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateJobChangeReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateJobChangeResp>
			}>
			jobData:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateJobDataReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateJobDataResp>
				delete(ctx:context.Context,req:Ref<DeleteJobDataReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteJobDataResp>
				get(ctx:context.Context,req:Ref<GetJobDataReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetJobDataResp>
				list(ctx:context.Context,req:Ref<ListJobDataReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobDataResp>
				patch(ctx:context.Context,req:Ref<PatchJobDataReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchJobDataResp>
			}>
			jobFamily:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateJobFamilyResp>
				delete(ctx:context.Context,req:Ref<DeleteJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteJobFamilyResp>
				get(ctx:context.Context,req:Ref<GetJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetJobFamilyResp>
				list(ctx:context.Context,req:Ref<ListJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobFamilyResp>
				patch(ctx:context.Context,req:Ref<PatchJobFamilyReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchJobFamilyResp>
			}>
			jobLevel:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateJobLevelResp>
				delete(ctx:context.Context,req:Ref<DeleteJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteJobLevelResp>
				get(ctx:context.Context,req:Ref<GetJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetJobLevelResp>
				list(ctx:context.Context,req:Ref<ListJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListJobLevelResp>
				patch(ctx:context.Context,req:Ref<PatchJobLevelReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchJobLevelResp>
			}>
			leave:Ref<{
			
				leaveBalances(ctx:context.Context,req:Ref<LeaveBalancesLeaveReq>,...options:larkcore.RequestOptionFunc[]):Ref<LeaveBalancesLeaveResp>
				leaveRequestHistory(ctx:context.Context,req:Ref<LeaveRequestHistoryLeaveReq>,...options:larkcore.RequestOptionFunc[]):Ref<LeaveRequestHistoryLeaveResp>
				leaveTypes(ctx:context.Context,req:Ref<LeaveTypesLeaveReq>,...options:larkcore.RequestOptionFunc[]):Ref<LeaveTypesLeaveResp>
			}>
			leaveGrantingRecord:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateLeaveGrantingRecordReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateLeaveGrantingRecordResp>
				delete(ctx:context.Context,req:Ref<DeleteLeaveGrantingRecordReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteLeaveGrantingRecordResp>
			}>
			location:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateLocationReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateLocationResp>
				delete(ctx:context.Context,req:Ref<DeleteLocationReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteLocationResp>
				get(ctx:context.Context,req:Ref<GetLocationReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetLocationResp>
				list(ctx:context.Context,req:Ref<ListLocationReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListLocationResp>
			}>
			nationalIdType:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateNationalIdTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateNationalIdTypeResp>
				delete(ctx:context.Context,req:Ref<DeleteNationalIdTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteNationalIdTypeResp>
				get(ctx:context.Context,req:Ref<GetNationalIdTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetNationalIdTypeResp>
				list(ctx:context.Context,req:Ref<ListNationalIdTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListNationalIdTypeResp>
				patch(ctx:context.Context,req:Ref<PatchNationalIdTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchNationalIdTypeResp>
			}>
			offboarding:Ref<{
			
				query(ctx:context.Context,req:Ref<QueryOffboardingReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryOffboardingResp>
				search(ctx:context.Context,req:Ref<SearchOffboardingReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchOffboardingResp>
				searchByIterator(ctx:context.Context,req:Ref<SearchOffboardingReq>,...options:larkcore.RequestOptionFunc[]):Ref<SearchOffboardingIterator>
				submit(ctx:context.Context,req:Ref<SubmitOffboardingReq>,...options:larkcore.RequestOptionFunc[]):Ref<SubmitOffboardingResp>
			}>
			person:Ref<{
			
				delete(ctx:context.Context,req:Ref<DeletePersonReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeletePersonResp>
				get(ctx:context.Context,req:Ref<GetPersonReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetPersonResp>
				upload(ctx:context.Context,req:Ref<UploadPersonReq>,...options:larkcore.RequestOptionFunc[]):Ref<UploadPersonResp>
			}>
			preHire:Ref<{
			
				delete(ctx:context.Context,req:Ref<DeletePreHireReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeletePreHireResp>
				get(ctx:context.Context,req:Ref<GetPreHireReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetPreHireResp>
				list(ctx:context.Context,req:Ref<ListPreHireReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListPreHireResp>
				patch(ctx:context.Context,req:Ref<PatchPreHireReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchPreHireResp>
			}>
			processFormVariableData:Ref<{
			
				get(ctx:context.Context,req:Ref<GetProcessFormVariableDataReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetProcessFormVariableDataResp>
			}>
			securityGroup:Ref<{
			
				list(ctx:context.Context,req:Ref<ListSecurityGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListSecurityGroupResp>
				query(ctx:context.Context,req:Ref<QuerySecurityGroupReq>,...options:larkcore.RequestOptionFunc[]):Ref<QuerySecurityGroupResp>
			}>
			subdivision:Ref<{
			
				get(ctx:context.Context,req:Ref<GetSubdivisionReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSubdivisionResp>
				list(ctx:context.Context,req:Ref<ListSubdivisionReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListSubdivisionResp>
			}>
			subregion:Ref<{
			
				get(ctx:context.Context,req:Ref<GetSubregionReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetSubregionResp>
				list(ctx:context.Context,req:Ref<ListSubregionReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListSubregionResp>
			}>
			transferReason:Ref<{
			
				query(ctx:context.Context,req:Ref<QueryTransferReasonReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryTransferReasonResp>
			}>
			transferType:Ref<{
			
				query(ctx:context.Context,req:Ref<QueryTransferTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryTransferTypeResp>
			}>
			workingHoursType:Ref<{
			
				create(ctx:context.Context,req:Ref<CreateWorkingHoursTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<CreateWorkingHoursTypeResp>
				delete(ctx:context.Context,req:Ref<DeleteWorkingHoursTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<DeleteWorkingHoursTypeResp>
				get(ctx:context.Context,req:Ref<GetWorkingHoursTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<GetWorkingHoursTypeResp>
				list(ctx:context.Context,req:Ref<ListWorkingHoursTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListWorkingHoursTypeResp>
				patch(ctx:context.Context,req:Ref<PatchWorkingHoursTypeReq>,...options:larkcore.RequestOptionFunc[]):Ref<PatchWorkingHoursTypeResp>
			}>
	}
	export interface WkCalendarI18n extends Struct<WkCalendarI18n>{

			zhCn:Ref<string>
			enUs:Ref<string>
	}
	export interface WkCalendarI18nBuilder extends Struct<WkCalendarI18nBuilder>{

			zhCn(zhCn:string):Ref<WkCalendarI18nBuilder>
			enUs(enUs:string):Ref<WkCalendarI18nBuilder>
			build():Ref<WkCalendarI18n>
	}
	export interface WkOption extends Struct<WkOption>{

			count:Ref<bool>
			offset:Ref<int>
			limit:Ref<int>
			sortOptions:Ref<SortOption>[]
	}
	export interface WkOptionBuilder extends Struct<WkOptionBuilder>{

			count(count:bool):Ref<WkOptionBuilder>
			offset(offset:int):Ref<WkOptionBuilder>
			limit(limit:int):Ref<WkOptionBuilder>
			sortOptions(sortOptions:Ref<SortOption>[]):Ref<WkOptionBuilder>
			build():Ref<WkOption>
	}
	export interface WorkCalendarDetail extends Struct<WorkCalendarDetail>{

			calendarId:Ref<string>
			calendarName:Ref<WkCalendarI18n>
			enable:Ref<bool>
	}
	export interface WorkCalendarDetailBuilder extends Struct<WorkCalendarDetailBuilder>{

			calendarId(calendarId:string):Ref<WorkCalendarDetailBuilder>
			calendarName(calendarName:Ref<WkCalendarI18n>):Ref<WorkCalendarDetailBuilder>
			enable(enable:bool):Ref<WorkCalendarDetailBuilder>
			build():Ref<WorkCalendarDetail>
	}
	export interface WorkCalendarFilter extends Struct<WorkCalendarFilter>{

			wkCalendarIds:string[]
			wkCalendarIdGt:Ref<string>
			wkOption:Ref<WkOption>
			onlyEnable:Ref<bool>
	}
	export interface WorkCalendarFilterBuilder extends Struct<WorkCalendarFilterBuilder>{

			wkCalendarIds(wkCalendarIds:string[]):Ref<WorkCalendarFilterBuilder>
			wkCalendarIdGt(wkCalendarIdGt:string):Ref<WorkCalendarFilterBuilder>
			wkOption(wkOption:Ref<WkOption>):Ref<WorkCalendarFilterBuilder>
			onlyEnable(onlyEnable:bool):Ref<WorkCalendarFilterBuilder>
			build():Ref<WorkCalendarFilter>
	}
	export interface WorkExperience extends Struct<WorkExperience>{

			companyOrganization:Ref<I18n>[]
			department:Ref<I18n>[]
			job:Ref<I18n>[]
			description:Ref<I18n>[]
			startDate:Ref<string>
			endDate:Ref<string>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface WorkExperienceBuilder extends Struct<WorkExperienceBuilder>{

			companyOrganization(companyOrganization:Ref<I18n>[]):Ref<WorkExperienceBuilder>
			department(department:Ref<I18n>[]):Ref<WorkExperienceBuilder>
			job(job:Ref<I18n>[]):Ref<WorkExperienceBuilder>
			description(description:Ref<I18n>[]):Ref<WorkExperienceBuilder>
			startDate(startDate:string):Ref<WorkExperienceBuilder>
			endDate(endDate:string):Ref<WorkExperienceBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<WorkExperienceBuilder>
			build():Ref<WorkExperience>
	}
	export interface WorkingHoursType extends Struct<WorkingHoursType>{

			id:Ref<string>
			code:Ref<string>
			name:Ref<I18n>[]
			countryRegionIdList:string[]
			defaultForJob:Ref<bool>
			active:Ref<bool>
			customFields:Ref<ObjectFieldData>[]
	}
	export interface WorkingHoursTypeBuilder extends Struct<WorkingHoursTypeBuilder>{

			id(id:string):Ref<WorkingHoursTypeBuilder>
			code(code:string):Ref<WorkingHoursTypeBuilder>
			name(name:Ref<I18n>[]):Ref<WorkingHoursTypeBuilder>
			countryRegionIdList(countryRegionIdList:string[]):Ref<WorkingHoursTypeBuilder>
			defaultForJob(defaultForJob:bool):Ref<WorkingHoursTypeBuilder>
			active(active:bool):Ref<WorkingHoursTypeBuilder>
			customFields(customFields:Ref<ObjectFieldData>[]):Ref<WorkingHoursTypeBuilder>
			build():Ref<WorkingHoursType>
	}
	export function emptyDeleteJobReq():DeleteJobReq
	export function emptyRefDeleteJobReq():Ref<DeleteJobReq>
	export function refOfDeleteJobReq(x:DeleteJobReq,v:Ref<DeleteJobReq>)
	export function unRefDeleteJobReq(v:Ref<DeleteJobReq>):DeleteJobReq
	export function emptyGetPersonReq():GetPersonReq
	export function emptyRefGetPersonReq():Ref<GetPersonReq>
	export function refOfGetPersonReq(x:GetPersonReq,v:Ref<GetPersonReq>)
	export function unRefGetPersonReq(v:Ref<GetPersonReq>):GetPersonReq
	export function emptyManagementScope():ManagementScope
	export function emptyRefManagementScope():Ref<ManagementScope>
	export function refOfManagementScope(x:ManagementScope,v:Ref<ManagementScope>)
	export function unRefManagementScope(v:Ref<ManagementScope>):ManagementScope
	export function emptyConvertCommonDataIdRespData():ConvertCommonDataIdRespData
	export function emptyRefConvertCommonDataIdRespData():Ref<ConvertCommonDataIdRespData>
	export function refOfConvertCommonDataIdRespData(x:ConvertCommonDataIdRespData,v:Ref<ConvertCommonDataIdRespData>)
	export function unRefConvertCommonDataIdRespData(v:Ref<ConvertCommonDataIdRespData>):ConvertCommonDataIdRespData
	export function emptyDepartmentCreate():DepartmentCreate
	export function emptyRefDepartmentCreate():Ref<DepartmentCreate>
	export function refOfDepartmentCreate(x:DepartmentCreate,v:Ref<DepartmentCreate>)
	export function unRefDepartmentCreate(v:Ref<DepartmentCreate>):DepartmentCreate
	export function emptyListSubregionRespData():ListSubregionRespData
	export function emptyRefListSubregionRespData():Ref<ListSubregionRespData>
	export function refOfListSubregionRespData(x:ListSubregionRespData,v:Ref<ListSubregionRespData>)
	export function unRefListSubregionRespData(v:Ref<ListSubregionRespData>):ListSubregionRespData
	export function emptyPatchCompanyRespData():PatchCompanyRespData
	export function emptyRefPatchCompanyRespData():Ref<PatchCompanyRespData>
	export function refOfPatchCompanyRespData(x:PatchCompanyRespData,v:Ref<PatchCompanyRespData>)
	export function unRefPatchCompanyRespData(v:Ref<PatchCompanyRespData>):PatchCompanyRespData
	export function emptyPatchEmploymentRespData():PatchEmploymentRespData
	export function emptyRefPatchEmploymentRespData():Ref<PatchEmploymentRespData>
	export function refOfPatchEmploymentRespData(x:PatchEmploymentRespData,v:Ref<PatchEmploymentRespData>)
	export function unRefPatchEmploymentRespData(v:Ref<PatchEmploymentRespData>):PatchEmploymentRespData
	export function emptyP2JobUpdatedV1Data():P2JobUpdatedV1Data
	export function emptyRefP2JobUpdatedV1Data():Ref<P2JobUpdatedV1Data>
	export function refOfP2JobUpdatedV1Data(x:P2JobUpdatedV1Data,v:Ref<P2JobUpdatedV1Data>)
	export function unRefP2JobUpdatedV1Data(v:Ref<P2JobUpdatedV1Data>):P2JobUpdatedV1Data
	export function emptyPatchWorkingHoursTypeReq():PatchWorkingHoursTypeReq
	export function emptyRefPatchWorkingHoursTypeReq():Ref<PatchWorkingHoursTypeReq>
	export function refOfPatchWorkingHoursTypeReq(x:PatchWorkingHoursTypeReq,v:Ref<PatchWorkingHoursTypeReq>)
	export function unRefPatchWorkingHoursTypeReq(v:Ref<PatchWorkingHoursTypeReq>):PatchWorkingHoursTypeReq
	export function emptyCreateLeaveGrantingRecordRespData():CreateLeaveGrantingRecordRespData
	export function emptyRefCreateLeaveGrantingRecordRespData():Ref<CreateLeaveGrantingRecordRespData>
	export function refOfCreateLeaveGrantingRecordRespData(x:CreateLeaveGrantingRecordRespData,v:Ref<CreateLeaveGrantingRecordRespData>)
	export function unRefCreateLeaveGrantingRecordRespData(v:Ref<CreateLeaveGrantingRecordRespData>):CreateLeaveGrantingRecordRespData
	export function emptyListLocationResp():ListLocationResp
	export function emptyRefListLocationResp():Ref<ListLocationResp>
	export function refOfListLocationResp(x:ListLocationResp,v:Ref<ListLocationResp>)
	export function unRefListLocationResp(v:Ref<ListLocationResp>):ListLocationResp
	export function emptyPatchJobDataResp():PatchJobDataResp
	export function emptyRefPatchJobDataResp():Ref<PatchJobDataResp>
	export function refOfPatchJobDataResp(x:PatchJobDataResp,v:Ref<PatchJobDataResp>)
	export function unRefPatchJobDataResp(v:Ref<PatchJobDataResp>):PatchJobDataResp
	export function emptySecurityGroup():SecurityGroup
	export function emptyRefSecurityGroup():Ref<SecurityGroup>
	export function refOfSecurityGroup(x:SecurityGroup,v:Ref<SecurityGroup>)
	export function unRefSecurityGroup(v:Ref<SecurityGroup>):SecurityGroup
	export function emptyCreateJobChangeReq():CreateJobChangeReq
	export function emptyRefCreateJobChangeReq():Ref<CreateJobChangeReq>
	export function refOfCreateJobChangeReq(x:CreateJobChangeReq,v:Ref<CreateJobChangeReq>)
	export function unRefCreateJobChangeReq(v:Ref<CreateJobChangeReq>):CreateJobChangeReq
	export function emptyDeleteWorkingHoursTypeResp():DeleteWorkingHoursTypeResp
	export function emptyRefDeleteWorkingHoursTypeResp():Ref<DeleteWorkingHoursTypeResp>
	export function refOfDeleteWorkingHoursTypeResp(x:DeleteWorkingHoursTypeResp,v:Ref<DeleteWorkingHoursTypeResp>)
	export function unRefDeleteWorkingHoursTypeResp(v:Ref<DeleteWorkingHoursTypeResp>):DeleteWorkingHoursTypeResp
	export function emptyFormFieldVariableListValue():FormFieldVariableListValue
	export function emptyRefFormFieldVariableListValue():Ref<FormFieldVariableListValue>
	export function refOfFormFieldVariableListValue(x:FormFieldVariableListValue,v:Ref<FormFieldVariableListValue>)
	export function unRefFormFieldVariableListValue(v:Ref<FormFieldVariableListValue>):FormFieldVariableListValue
	export function emptyDateTimeFieldSetting():DateTimeFieldSetting
	export function emptyRefDateTimeFieldSetting():Ref<DateTimeFieldSetting>
	export function refOfDateTimeFieldSetting(x:DateTimeFieldSetting,v:Ref<DateTimeFieldSetting>)
	export function unRefDateTimeFieldSetting(v:Ref<DateTimeFieldSetting>):DateTimeFieldSetting
	export function emptyGetSubdivisionReq():GetSubdivisionReq
	export function emptyRefGetSubdivisionReq():Ref<GetSubdivisionReq>
	export function refOfGetSubdivisionReq(x:GetSubdivisionReq,v:Ref<GetSubdivisionReq>)
	export function unRefGetSubdivisionReq(v:Ref<GetSubdivisionReq>):GetSubdivisionReq
	export function emptyFormFieldVariableDateValue():FormFieldVariableDateValue
	export function emptyRefFormFieldVariableDateValue():Ref<FormFieldVariableDateValue>
	export function refOfFormFieldVariableDateValue(x:FormFieldVariableDateValue,v:Ref<FormFieldVariableDateValue>)
	export function unRefFormFieldVariableDateValue(v:Ref<FormFieldVariableDateValue>):FormFieldVariableDateValue
	export function emptyGetCurrencyReq():GetCurrencyReq
	export function emptyRefGetCurrencyReq():Ref<GetCurrencyReq>
	export function refOfGetCurrencyReq(x:GetCurrencyReq,v:Ref<GetCurrencyReq>)
	export function unRefGetCurrencyReq(v:Ref<GetCurrencyReq>):GetCurrencyReq
	export function emptyCreateWorkingHoursTypeReq():CreateWorkingHoursTypeReq
	export function emptyRefCreateWorkingHoursTypeReq():Ref<CreateWorkingHoursTypeReq>
	export function refOfCreateWorkingHoursTypeReq(x:CreateWorkingHoursTypeReq,v:Ref<CreateWorkingHoursTypeReq>)
	export function unRefCreateWorkingHoursTypeReq(v:Ref<CreateWorkingHoursTypeReq>):CreateWorkingHoursTypeReq
	export function emptyObjectFieldData():ObjectFieldData
	export function emptyRefObjectFieldData():Ref<ObjectFieldData>
	export function refOfObjectFieldData(x:ObjectFieldData,v:Ref<ObjectFieldData>)
	export function unRefObjectFieldData(v:Ref<ObjectFieldData>):ObjectFieldData
	export function emptyP2DepartmentCreatedV1Data():P2DepartmentCreatedV1Data
	export function emptyRefP2DepartmentCreatedV1Data():Ref<P2DepartmentCreatedV1Data>
	export function refOfP2DepartmentCreatedV1Data(x:P2DepartmentCreatedV1Data,v:Ref<P2DepartmentCreatedV1Data>)
	export function unRefP2DepartmentCreatedV1Data(v:Ref<P2DepartmentCreatedV1Data>):P2DepartmentCreatedV1Data
	export function emptyPatchDepartmentRespData():PatchDepartmentRespData
	export function emptyRefPatchDepartmentRespData():Ref<PatchDepartmentRespData>
	export function refOfPatchDepartmentRespData(x:PatchDepartmentRespData,v:Ref<PatchDepartmentRespData>)
	export function unRefPatchDepartmentRespData(v:Ref<PatchDepartmentRespData>):PatchDepartmentRespData
	export function emptyPatchJobFamilyResp():PatchJobFamilyResp
	export function emptyRefPatchJobFamilyResp():Ref<PatchJobFamilyResp>
	export function refOfPatchJobFamilyResp(x:PatchJobFamilyResp,v:Ref<PatchJobFamilyResp>)
	export function unRefPatchJobFamilyResp(v:Ref<PatchJobFamilyResp>):PatchJobFamilyResp
	export function emptyGetProcessFormVariableDataRespData():GetProcessFormVariableDataRespData
	export function emptyRefGetProcessFormVariableDataRespData():Ref<GetProcessFormVariableDataRespData>
	export function refOfGetProcessFormVariableDataRespData(x:GetProcessFormVariableDataRespData,v:Ref<GetProcessFormVariableDataRespData>)
	export function unRefGetProcessFormVariableDataRespData(v:Ref<GetProcessFormVariableDataRespData>):GetProcessFormVariableDataRespData
	export function emptyLeaveRequestHistoryLeaveReq():LeaveRequestHistoryLeaveReq
	export function emptyRefLeaveRequestHistoryLeaveReq():Ref<LeaveRequestHistoryLeaveReq>
	export function refOfLeaveRequestHistoryLeaveReq(x:LeaveRequestHistoryLeaveReq,v:Ref<LeaveRequestHistoryLeaveReq>)
	export function unRefLeaveRequestHistoryLeaveReq(v:Ref<LeaveRequestHistoryLeaveReq>):LeaveRequestHistoryLeaveReq
	export function emptyListJobReq():ListJobReq
	export function emptyRefListJobReq():Ref<ListJobReq>
	export function refOfListJobReq(x:ListJobReq,v:Ref<ListJobReq>)
	export function unRefListJobReq(v:Ref<ListJobReq>):ListJobReq
	export function emptyP2EmploymentConvertedV1():P2EmploymentConvertedV1
	export function emptyRefP2EmploymentConvertedV1():Ref<P2EmploymentConvertedV1>
	export function refOfP2EmploymentConvertedV1(x:P2EmploymentConvertedV1,v:Ref<P2EmploymentConvertedV1>)
	export function unRefP2EmploymentConvertedV1(v:Ref<P2EmploymentConvertedV1>):P2EmploymentConvertedV1
	export function emptyGetJobDataReq():GetJobDataReq
	export function emptyRefGetJobDataReq():Ref<GetJobDataReq>
	export function refOfGetJobDataReq(x:GetJobDataReq,v:Ref<GetJobDataReq>)
	export function unRefGetJobDataReq(v:Ref<GetJobDataReq>):GetJobDataReq
	export function emptyName():Name
	export function emptyRefName():Ref<Name>
	export function refOfName(x:Name,v:Ref<Name>)
	export function unRefName(v:Ref<Name>):Name
	export function emptyP2DepartmentUpdatedV1():P2DepartmentUpdatedV1
	export function emptyRefP2DepartmentUpdatedV1():Ref<P2DepartmentUpdatedV1>
	export function refOfP2DepartmentUpdatedV1(x:P2DepartmentUpdatedV1,v:Ref<P2DepartmentUpdatedV1>)
	export function unRefP2DepartmentUpdatedV1(v:Ref<P2DepartmentUpdatedV1>):P2DepartmentUpdatedV1
	export function emptyCreateWorkingHoursTypeResp():CreateWorkingHoursTypeResp
	export function emptyRefCreateWorkingHoursTypeResp():Ref<CreateWorkingHoursTypeResp>
	export function refOfCreateWorkingHoursTypeResp(x:CreateWorkingHoursTypeResp,v:Ref<CreateWorkingHoursTypeResp>)
	export function unRefCreateWorkingHoursTypeResp(v:Ref<CreateWorkingHoursTypeResp>):CreateWorkingHoursTypeResp
	export function emptyDeleteDepartmentResp():DeleteDepartmentResp
	export function emptyRefDeleteDepartmentResp():Ref<DeleteDepartmentResp>
	export function refOfDeleteDepartmentResp(x:DeleteDepartmentResp,v:Ref<DeleteDepartmentResp>)
	export function unRefDeleteDepartmentResp(v:Ref<DeleteDepartmentResp>):DeleteDepartmentResp
	export function emptyListJobDataResp():ListJobDataResp
	export function emptyRefListJobDataResp():Ref<ListJobDataResp>
	export function refOfListJobDataResp(x:ListJobDataResp,v:Ref<ListJobDataResp>)
	export function unRefListJobDataResp(v:Ref<ListJobDataResp>):ListJobDataResp
	export function emptyPatchContractReq():PatchContractReq
	export function emptyRefPatchContractReq():Ref<PatchContractReq>
	export function refOfPatchContractReq(x:PatchContractReq,v:Ref<PatchContractReq>)
	export function unRefPatchContractReq(v:Ref<PatchContractReq>):PatchContractReq
	export function emptyCreateJobDataRespData():CreateJobDataRespData
	export function emptyRefCreateJobDataRespData():Ref<CreateJobDataRespData>
	export function refOfCreateJobDataRespData(x:CreateJobDataRespData,v:Ref<CreateJobDataRespData>)
	export function unRefCreateJobDataRespData(v:Ref<CreateJobDataRespData>):CreateJobDataRespData
	export function emptyP2JobDeletedV1():P2JobDeletedV1
	export function emptyRefP2JobDeletedV1():Ref<P2JobDeletedV1>
	export function refOfP2JobDeletedV1(x:P2JobDeletedV1,v:Ref<P2JobDeletedV1>)
	export function unRefP2JobDeletedV1(v:Ref<P2JobDeletedV1>):P2JobDeletedV1
	export function emptySearchAssignedUserResp():SearchAssignedUserResp
	export function emptyRefSearchAssignedUserResp():Ref<SearchAssignedUserResp>
	export function refOfSearchAssignedUserResp(x:SearchAssignedUserResp,v:Ref<SearchAssignedUserResp>)
	export function unRefSearchAssignedUserResp(v:Ref<SearchAssignedUserResp>):SearchAssignedUserResp
	export function emptyBackgroundCheckCity():BackgroundCheckCity
	export function emptyRefBackgroundCheckCity():Ref<BackgroundCheckCity>
	export function refOfBackgroundCheckCity(x:BackgroundCheckCity,v:Ref<BackgroundCheckCity>)
	export function unRefBackgroundCheckCity(v:Ref<BackgroundCheckCity>):BackgroundCheckCity
	export function emptyConvertCommonDataIdReq():ConvertCommonDataIdReq
	export function emptyRefConvertCommonDataIdReq():Ref<ConvertCommonDataIdReq>
	export function refOfConvertCommonDataIdReq(x:ConvertCommonDataIdReq,v:Ref<ConvertCommonDataIdReq>)
	export function unRefConvertCommonDataIdReq(v:Ref<ConvertCommonDataIdReq>):ConvertCommonDataIdReq
	export function emptyLeaveGrantingRecord():LeaveGrantingRecord
	export function emptyRefLeaveGrantingRecord():Ref<LeaveGrantingRecord>
	export function refOfLeaveGrantingRecord(x:LeaveGrantingRecord,v:Ref<LeaveGrantingRecord>)
	export function unRefLeaveGrantingRecord(v:Ref<LeaveGrantingRecord>):LeaveGrantingRecord
	export function emptyPatchWorkingHoursTypeResp():PatchWorkingHoursTypeResp
	export function emptyRefPatchWorkingHoursTypeResp():Ref<PatchWorkingHoursTypeResp>
	export function refOfPatchWorkingHoursTypeResp(x:PatchWorkingHoursTypeResp,v:Ref<PatchWorkingHoursTypeResp>)
	export function unRefPatchWorkingHoursTypeResp(v:Ref<PatchWorkingHoursTypeResp>):PatchWorkingHoursTypeResp
	export function emptyPatchJobFamilyRespData():PatchJobFamilyRespData
	export function emptyRefPatchJobFamilyRespData():Ref<PatchJobFamilyRespData>
	export function refOfPatchJobFamilyRespData(x:PatchJobFamilyRespData,v:Ref<PatchJobFamilyRespData>)
	export function unRefPatchJobFamilyRespData(v:Ref<PatchJobFamilyRespData>):PatchJobFamilyRespData
	export function emptyEmployeeDateType():EmployeeDateType
	export function emptyRefEmployeeDateType():Ref<EmployeeDateType>
	export function refOfEmployeeDateType(x:EmployeeDateType,v:Ref<EmployeeDateType>)
	export function unRefEmployeeDateType(v:Ref<EmployeeDateType>):EmployeeDateType
	export function emptyLeaveRequestDetail():LeaveRequestDetail
	export function emptyRefLeaveRequestDetail():Ref<LeaveRequestDetail>
	export function refOfLeaveRequestDetail(x:LeaveRequestDetail,v:Ref<LeaveRequestDetail>)
	export function unRefLeaveRequestDetail(v:Ref<LeaveRequestDetail>):LeaveRequestDetail
	export function emptyNationalId():NationalId
	export function emptyRefNationalId():Ref<NationalId>
	export function refOfNationalId(x:NationalId,v:Ref<NationalId>)
	export function unRefNationalId(v:Ref<NationalId>):NationalId
	export function emptyPreHire():PreHire
	export function emptyRefPreHire():Ref<PreHire>
	export function refOfPreHire(x:PreHire,v:Ref<PreHire>)
	export function unRefPreHire(v:Ref<PreHire>):PreHire
	export function emptyTransferReason():TransferReason
	export function emptyRefTransferReason():Ref<TransferReason>
	export function refOfTransferReason(x:TransferReason,v:Ref<TransferReason>)
	export function unRefTransferReason(v:Ref<TransferReason>):TransferReason
	export function emptyCreateContractReq():CreateContractReq
	export function emptyRefCreateContractReq():Ref<CreateContractReq>
	export function refOfCreateContractReq(x:CreateContractReq,v:Ref<CreateContractReq>)
	export function unRefCreateContractReq(v:Ref<CreateContractReq>):CreateContractReq
	export function emptyCreateNationalIdTypeResp():CreateNationalIdTypeResp
	export function emptyRefCreateNationalIdTypeResp():Ref<CreateNationalIdTypeResp>
	export function refOfCreateNationalIdTypeResp(x:CreateNationalIdTypeResp,v:Ref<CreateNationalIdTypeResp>)
	export function unRefCreateNationalIdTypeResp(v:Ref<CreateNationalIdTypeResp>):CreateNationalIdTypeResp
	export function emptyDeleteLocationResp():DeleteLocationResp
	export function emptyRefDeleteLocationResp():Ref<DeleteLocationResp>
	export function refOfDeleteLocationResp(x:DeleteLocationResp,v:Ref<DeleteLocationResp>)
	export function unRefDeleteLocationResp(v:Ref<DeleteLocationResp>):DeleteLocationResp
	export function emptyOffboarding():Offboarding
	export function emptyRefOffboarding():Ref<Offboarding>
	export function refOfOffboarding(x:Offboarding,v:Ref<Offboarding>)
	export function unRefOffboarding(v:Ref<Offboarding>):Offboarding
	export function emptySubmitOffboardingResp():SubmitOffboardingResp
	export function emptyRefSubmitOffboardingResp():Ref<SubmitOffboardingResp>
	export function refOfSubmitOffboardingResp(x:SubmitOffboardingResp,v:Ref<SubmitOffboardingResp>)
	export function unRefSubmitOffboardingResp(v:Ref<SubmitOffboardingResp>):SubmitOffboardingResp
	export function emptyListJobResp():ListJobResp
	export function emptyRefListJobResp():Ref<ListJobResp>
	export function refOfListJobResp(x:ListJobResp,v:Ref<ListJobResp>)
	export function unRefListJobResp(v:Ref<ListJobResp>):ListJobResp
	export function emptyP2JobDeletedV1Data():P2JobDeletedV1Data
	export function emptyRefP2JobDeletedV1Data():Ref<P2JobDeletedV1Data>
	export function refOfP2JobDeletedV1Data(x:P2JobDeletedV1Data,v:Ref<P2JobDeletedV1Data>)
	export function unRefP2JobDeletedV1Data(v:Ref<P2JobDeletedV1Data>):P2JobDeletedV1Data
	export function emptySubregion():Subregion
	export function emptyRefSubregion():Ref<Subregion>
	export function refOfSubregion(x:Subregion,v:Ref<Subregion>)
	export function unRefSubregion(v:Ref<Subregion>):Subregion
	export function emptyWkOption():WkOption
	export function emptyRefWkOption():Ref<WkOption>
	export function refOfWkOption(x:WkOption,v:Ref<WkOption>)
	export function unRefWkOption(v:Ref<WkOption>):WkOption
	export function emptyCreateEmployeeTypeReq():CreateEmployeeTypeReq
	export function emptyRefCreateEmployeeTypeReq():Ref<CreateEmployeeTypeReq>
	export function refOfCreateEmployeeTypeReq(x:CreateEmployeeTypeReq,v:Ref<CreateEmployeeTypeReq>)
	export function unRefCreateEmployeeTypeReq(v:Ref<CreateEmployeeTypeReq>):CreateEmployeeTypeReq
	export function emptyDeleteContractReq():DeleteContractReq
	export function emptyRefDeleteContractReq():Ref<DeleteContractReq>
	export function refOfDeleteContractReq(x:DeleteContractReq,v:Ref<DeleteContractReq>)
	export function unRefDeleteContractReq(v:Ref<DeleteContractReq>):DeleteContractReq
	export function emptyP2DepartmentDeletedV1():P2DepartmentDeletedV1
	export function emptyRefP2DepartmentDeletedV1():Ref<P2DepartmentDeletedV1>
	export function refOfP2DepartmentDeletedV1(x:P2DepartmentDeletedV1,v:Ref<P2DepartmentDeletedV1>)
	export function unRefP2DepartmentDeletedV1(v:Ref<P2DepartmentDeletedV1>):P2DepartmentDeletedV1
	export function emptyP2EmploymentDeletedV1():P2EmploymentDeletedV1
	export function emptyRefP2EmploymentDeletedV1():Ref<P2EmploymentDeletedV1>
	export function refOfP2EmploymentDeletedV1(x:P2EmploymentDeletedV1,v:Ref<P2EmploymentDeletedV1>)
	export function unRefP2EmploymentDeletedV1(v:Ref<P2EmploymentDeletedV1>):P2EmploymentDeletedV1
	export function emptySearchAssignedUserRespData():SearchAssignedUserRespData
	export function emptyRefSearchAssignedUserRespData():Ref<SearchAssignedUserRespData>
	export function refOfSearchAssignedUserRespData(x:SearchAssignedUserRespData,v:Ref<SearchAssignedUserRespData>)
	export function unRefSearchAssignedUserRespData(v:Ref<SearchAssignedUserRespData>):SearchAssignedUserRespData
	export function emptySearchOffboardingRespData():SearchOffboardingRespData
	export function emptyRefSearchOffboardingRespData():Ref<SearchOffboardingRespData>
	export function refOfSearchOffboardingRespData(x:SearchOffboardingRespData,v:Ref<SearchOffboardingRespData>)
	export function unRefSearchOffboardingRespData(v:Ref<SearchOffboardingRespData>):SearchOffboardingRespData
	export function emptyJobCategory():JobCategory
	export function emptyRefJobCategory():Ref<JobCategory>
	export function refOfJobCategory(x:JobCategory,v:Ref<JobCategory>)
	export function unRefJobCategory(v:Ref<JobCategory>):JobCategory
	export function emptyListSubregionResp():ListSubregionResp
	export function emptyRefListSubregionResp():Ref<ListSubregionResp>
	export function refOfListSubregionResp(x:ListSubregionResp,v:Ref<ListSubregionResp>)
	export function unRefListSubregionResp(v:Ref<ListSubregionResp>):ListSubregionResp
	export function emptySortOption():SortOption
	export function emptyRefSortOption():Ref<SortOption>
	export function refOfSortOption(x:SortOption,v:Ref<SortOption>)
	export function unRefSortOption(v:Ref<SortOption>):SortOption
	export function emptyQueryOffboardingRespData():QueryOffboardingRespData
	export function emptyRefQueryOffboardingRespData():Ref<QueryOffboardingRespData>
	export function refOfQueryOffboardingRespData(x:QueryOffboardingRespData,v:Ref<QueryOffboardingRespData>)
	export function unRefQueryOffboardingRespData(v:Ref<QueryOffboardingRespData>):QueryOffboardingRespData
	export function emptyBackgroundCheck():BackgroundCheck
	export function emptyRefBackgroundCheck():Ref<BackgroundCheck>
	export function refOfBackgroundCheck(x:BackgroundCheck,v:Ref<BackgroundCheck>)
	export function unRefBackgroundCheck(v:Ref<BackgroundCheck>):BackgroundCheck
	export function emptyCreateDepartmentRespData():CreateDepartmentRespData
	export function emptyRefCreateDepartmentRespData():Ref<CreateDepartmentRespData>
	export function refOfCreateDepartmentRespData(x:CreateDepartmentRespData,v:Ref<CreateDepartmentRespData>)
	export function unRefCreateDepartmentRespData(v:Ref<CreateDepartmentRespData>):CreateDepartmentRespData
	export function emptyCreateJobRespData():CreateJobRespData
	export function emptyRefCreateJobRespData():Ref<CreateJobRespData>
	export function refOfCreateJobRespData(x:CreateJobRespData,v:Ref<CreateJobRespData>)
	export function unRefCreateJobRespData(v:Ref<CreateJobRespData>):CreateJobRespData
	export function emptyGetCurrencyRespData():GetCurrencyRespData
	export function emptyRefGetCurrencyRespData():Ref<GetCurrencyRespData>
	export function refOfGetCurrencyRespData(x:GetCurrencyRespData,v:Ref<GetCurrencyRespData>)
	export function unRefGetCurrencyRespData(v:Ref<GetCurrencyRespData>):GetCurrencyRespData
	export function emptyP2EmploymentConvertedV1Data():P2EmploymentConvertedV1Data
	export function emptyRefP2EmploymentConvertedV1Data():Ref<P2EmploymentConvertedV1Data>
	export function refOfP2EmploymentConvertedV1Data(x:P2EmploymentConvertedV1Data,v:Ref<P2EmploymentConvertedV1Data>)
	export function unRefP2EmploymentConvertedV1Data(v:Ref<P2EmploymentConvertedV1Data>):P2EmploymentConvertedV1Data
	export function emptyGetContractResp():GetContractResp
	export function emptyRefGetContractResp():Ref<GetContractResp>
	export function refOfGetContractResp(x:GetContractResp,v:Ref<GetContractResp>)
	export function unRefGetContractResp(v:Ref<GetContractResp>):GetContractResp
	export function emptyPatchCompanyResp():PatchCompanyResp
	export function emptyRefPatchCompanyResp():Ref<PatchCompanyResp>
	export function refOfPatchCompanyResp(x:PatchCompanyResp,v:Ref<PatchCompanyResp>)
	export function unRefPatchCompanyResp(v:Ref<PatchCompanyResp>):PatchCompanyResp
	export function emptyCreateJobDataResp():CreateJobDataResp
	export function emptyRefCreateJobDataResp():Ref<CreateJobDataResp>
	export function refOfCreateJobDataResp(x:CreateJobDataResp,v:Ref<CreateJobDataResp>)
	export function unRefCreateJobDataResp(v:Ref<CreateJobDataResp>):CreateJobDataResp
	export function emptyListContractResp():ListContractResp
	export function emptyRefListContractResp():Ref<ListContractResp>
	export function refOfListContractResp(x:ListContractResp,v:Ref<ListContractResp>)
	export function unRefListContractResp(v:Ref<ListContractResp>):ListContractResp
	export function emptyUploadPersonReq():UploadPersonReq
	export function emptyRefUploadPersonReq():Ref<UploadPersonReq>
	export function refOfUploadPersonReq(x:UploadPersonReq,v:Ref<UploadPersonReq>)
	export function unRefUploadPersonReq(v:Ref<UploadPersonReq>):UploadPersonReq
	export function emptyQueryOffboardingResp():QueryOffboardingResp
	export function emptyRefQueryOffboardingResp():Ref<QueryOffboardingResp>
	export function refOfQueryOffboardingResp(x:QueryOffboardingResp,v:Ref<QueryOffboardingResp>)
	export function unRefQueryOffboardingResp(v:Ref<QueryOffboardingResp>):QueryOffboardingResp
	export function emptyP2JobCreatedV1():P2JobCreatedV1
	export function emptyRefP2JobCreatedV1():Ref<P2JobCreatedV1>
	export function refOfP2JobCreatedV1(x:P2JobCreatedV1,v:Ref<P2JobCreatedV1>)
	export function unRefP2JobCreatedV1(v:Ref<P2JobCreatedV1>):P2JobCreatedV1
	export function emptyCreateJobLevelReq():CreateJobLevelReq
	export function emptyRefCreateJobLevelReq():Ref<CreateJobLevelReq>
	export function refOfCreateJobLevelReq(x:CreateJobLevelReq,v:Ref<CreateJobLevelReq>)
	export function unRefCreateJobLevelReq(v:Ref<CreateJobLevelReq>):CreateJobLevelReq
	export function emptyCustomField():CustomField
	export function emptyRefCustomField():Ref<CustomField>
	export function refOfCustomField(x:CustomField,v:Ref<CustomField>)
	export function unRefCustomField(v:Ref<CustomField>):CustomField
	export function emptyListCurrencyRespData():ListCurrencyRespData
	export function emptyRefListCurrencyRespData():Ref<ListCurrencyRespData>
	export function refOfListCurrencyRespData(x:ListCurrencyRespData,v:Ref<ListCurrencyRespData>)
	export function unRefListCurrencyRespData(v:Ref<ListCurrencyRespData>):ListCurrencyRespData
	export function emptyListJobFamilyResp():ListJobFamilyResp
	export function emptyRefListJobFamilyResp():Ref<ListJobFamilyResp>
	export function refOfListJobFamilyResp(x:ListJobFamilyResp,v:Ref<ListJobFamilyResp>)
	export function unRefListJobFamilyResp(v:Ref<ListJobFamilyResp>):ListJobFamilyResp
	export function emptyListNationalIdTypeResp():ListNationalIdTypeResp
	export function emptyRefListNationalIdTypeResp():Ref<ListNationalIdTypeResp>
	export function refOfListNationalIdTypeResp(x:ListNationalIdTypeResp,v:Ref<ListNationalIdTypeResp>)
	export function unRefListNationalIdTypeResp(v:Ref<ListNationalIdTypeResp>):ListNationalIdTypeResp
	export function emptyCurrency():Currency
	export function emptyRefCurrency():Ref<Currency>
	export function refOfCurrency(x:Currency,v:Ref<Currency>)
	export function unRefCurrency(v:Ref<Currency>):Currency
	export function emptyGetWorkingHoursTypeResp():GetWorkingHoursTypeResp
	export function emptyRefGetWorkingHoursTypeResp():Ref<GetWorkingHoursTypeResp>
	export function refOfGetWorkingHoursTypeResp(x:GetWorkingHoursTypeResp,v:Ref<GetWorkingHoursTypeResp>)
	export function unRefGetWorkingHoursTypeResp(v:Ref<GetWorkingHoursTypeResp>):GetWorkingHoursTypeResp
	export function emptyListCurrencyReq():ListCurrencyReq
	export function emptyRefListCurrencyReq():Ref<ListCurrencyReq>
	export function refOfListCurrencyReq(x:ListCurrencyReq,v:Ref<ListCurrencyReq>)
	export function unRefListCurrencyReq(v:Ref<ListCurrencyReq>):ListCurrencyReq
	export function emptyP2PersonDeletedV1Data():P2PersonDeletedV1Data
	export function emptyRefP2PersonDeletedV1Data():Ref<P2PersonDeletedV1Data>
	export function refOfP2PersonDeletedV1Data(x:P2PersonDeletedV1Data,v:Ref<P2PersonDeletedV1Data>)
	export function unRefP2PersonDeletedV1Data(v:Ref<P2PersonDeletedV1Data>):P2PersonDeletedV1Data
	export function emptyDeleteLocationReq():DeleteLocationReq
	export function emptyRefDeleteLocationReq():Ref<DeleteLocationReq>
	export function refOfDeleteLocationReq(x:DeleteLocationReq,v:Ref<DeleteLocationReq>)
	export function unRefDeleteLocationReq(v:Ref<DeleteLocationReq>):DeleteLocationReq
	export function emptyDeletePersonReq():DeletePersonReq
	export function emptyRefDeletePersonReq():Ref<DeletePersonReq>
	export function refOfDeletePersonReq(x:DeletePersonReq,v:Ref<DeletePersonReq>)
	export function unRefDeletePersonReq(v:Ref<DeletePersonReq>):DeletePersonReq
	export function emptyGetCompanyReq():GetCompanyReq
	export function emptyRefGetCompanyReq():Ref<GetCompanyReq>
	export function refOfGetCompanyReq(x:GetCompanyReq,v:Ref<GetCompanyReq>)
	export function unRefGetCompanyReq(v:Ref<GetCompanyReq>):GetCompanyReq
	export function emptyGetCountryRegionReq():GetCountryRegionReq
	export function emptyRefGetCountryRegionReq():Ref<GetCountryRegionReq>
	export function refOfGetCountryRegionReq(x:GetCountryRegionReq,v:Ref<GetCountryRegionReq>)
	export function unRefGetCountryRegionReq(v:Ref<GetCountryRegionReq>):GetCountryRegionReq
	export function emptyMatchCompensationStandardRespData():MatchCompensationStandardRespData
	export function emptyRefMatchCompensationStandardRespData():Ref<MatchCompensationStandardRespData>
	export function refOfMatchCompensationStandardRespData(x:MatchCompensationStandardRespData,v:Ref<MatchCompensationStandardRespData>)
	export function unRefMatchCompensationStandardRespData(v:Ref<MatchCompensationStandardRespData>):MatchCompensationStandardRespData
	export function emptyWorkCalendarDetail():WorkCalendarDetail
	export function emptyRefWorkCalendarDetail():Ref<WorkCalendarDetail>
	export function refOfWorkCalendarDetail(x:WorkCalendarDetail,v:Ref<WorkCalendarDetail>)
	export function unRefWorkCalendarDetail(v:Ref<WorkCalendarDetail>):WorkCalendarDetail
	export function emptyCostCenterQuery():CostCenterQuery
	export function emptyRefCostCenterQuery():Ref<CostCenterQuery>
	export function refOfCostCenterQuery(x:CostCenterQuery,v:Ref<CostCenterQuery>)
	export function unRefCostCenterQuery(v:Ref<CostCenterQuery>):CostCenterQuery
	export function emptyCreateCompanyRespData():CreateCompanyRespData
	export function emptyRefCreateCompanyRespData():Ref<CreateCompanyRespData>
	export function refOfCreateCompanyRespData(x:CreateCompanyRespData,v:Ref<CreateCompanyRespData>)
	export function unRefCreateCompanyRespData(v:Ref<CreateCompanyRespData>):CreateCompanyRespData
	export function emptyGetJobDataRespData():GetJobDataRespData
	export function emptyRefGetJobDataRespData():Ref<GetJobDataRespData>
	export function refOfGetJobDataRespData(x:GetJobDataRespData,v:Ref<GetJobDataRespData>)
	export function unRefGetJobDataRespData(v:Ref<GetJobDataRespData>):GetJobDataRespData
	export function emptyP2ContractUpdatedV1():P2ContractUpdatedV1
	export function emptyRefP2ContractUpdatedV1():Ref<P2ContractUpdatedV1>
	export function refOfP2ContractUpdatedV1(x:P2ContractUpdatedV1,v:Ref<P2ContractUpdatedV1>)
	export function unRefP2ContractUpdatedV1(v:Ref<P2ContractUpdatedV1>):P2ContractUpdatedV1
	export function emptyP2OffboardingUpdatedV1Data():P2OffboardingUpdatedV1Data
	export function emptyRefP2OffboardingUpdatedV1Data():Ref<P2OffboardingUpdatedV1Data>
	export function refOfP2OffboardingUpdatedV1Data(x:P2OffboardingUpdatedV1Data,v:Ref<P2OffboardingUpdatedV1Data>)
	export function unRefP2OffboardingUpdatedV1Data(v:Ref<P2OffboardingUpdatedV1Data>):P2OffboardingUpdatedV1Data
	export function emptyGetJobFamilyResp():GetJobFamilyResp
	export function emptyRefGetJobFamilyResp():Ref<GetJobFamilyResp>
	export function refOfGetJobFamilyResp(x:GetJobFamilyResp,v:Ref<GetJobFamilyResp>)
	export function unRefGetJobFamilyResp(v:Ref<GetJobFamilyResp>):GetJobFamilyResp
	export function emptyListSecurityGroupRespData():ListSecurityGroupRespData
	export function emptyRefListSecurityGroupRespData():Ref<ListSecurityGroupRespData>
	export function refOfListSecurityGroupRespData(x:ListSecurityGroupRespData,v:Ref<ListSecurityGroupRespData>)
	export function unRefListSecurityGroupRespData(v:Ref<ListSecurityGroupRespData>):ListSecurityGroupRespData
	export function emptyListJobFamilyRespData():ListJobFamilyRespData
	export function emptyRefListJobFamilyRespData():Ref<ListJobFamilyRespData>
	export function refOfListJobFamilyRespData(x:ListJobFamilyRespData,v:Ref<ListJobFamilyRespData>)
	export function unRefListJobFamilyRespData(v:Ref<ListJobFamilyRespData>):ListJobFamilyRespData
	export function emptyListJobLevelRespData():ListJobLevelRespData
	export function emptyRefListJobLevelRespData():Ref<ListJobLevelRespData>
	export function refOfListJobLevelRespData(x:ListJobLevelRespData,v:Ref<ListJobLevelRespData>)
	export function unRefListJobLevelRespData(v:Ref<ListJobLevelRespData>):ListJobLevelRespData
	export function emptyListNationalIdTypeReq():ListNationalIdTypeReq
	export function emptyRefListNationalIdTypeReq():Ref<ListNationalIdTypeReq>
	export function refOfListNationalIdTypeReq(x:ListNationalIdTypeReq,v:Ref<ListNationalIdTypeReq>)
	export function unRefListNationalIdTypeReq(v:Ref<ListNationalIdTypeReq>):ListNationalIdTypeReq
	export function emptyPatchEmploymentResp():PatchEmploymentResp
	export function emptyRefPatchEmploymentResp():Ref<PatchEmploymentResp>
	export function refOfPatchEmploymentResp(x:PatchEmploymentResp,v:Ref<PatchEmploymentResp>)
	export function unRefPatchEmploymentResp(v:Ref<PatchEmploymentResp>):PatchEmploymentResp
	export function emptyCreateEmployeeTypeResp():CreateEmployeeTypeResp
	export function emptyRefCreateEmployeeTypeResp():Ref<CreateEmployeeTypeResp>
	export function refOfCreateEmployeeTypeResp(x:CreateEmployeeTypeResp,v:Ref<CreateEmployeeTypeResp>)
	export function unRefCreateEmployeeTypeResp(v:Ref<CreateEmployeeTypeResp>):CreateEmployeeTypeResp
	export function emptyLookupFieldSetting():LookupFieldSetting
	export function emptyRefLookupFieldSetting():Ref<LookupFieldSetting>
	export function refOfLookupFieldSetting(x:LookupFieldSetting,v:Ref<LookupFieldSetting>)
	export function unRefLookupFieldSetting(v:Ref<LookupFieldSetting>):LookupFieldSetting
	export function emptyP2ContractCreatedV1():P2ContractCreatedV1
	export function emptyRefP2ContractCreatedV1():Ref<P2ContractCreatedV1>
	export function refOfP2ContractCreatedV1(x:P2ContractCreatedV1,v:Ref<P2ContractCreatedV1>)
	export function unRefP2ContractCreatedV1(v:Ref<P2ContractCreatedV1>):P2ContractCreatedV1
	export function emptyCreateJobResp():CreateJobResp
	export function emptyRefCreateJobResp():Ref<CreateJobResp>
	export function refOfCreateJobResp(x:CreateJobResp,v:Ref<CreateJobResp>)
	export function unRefCreateJobResp(v:Ref<CreateJobResp>):CreateJobResp
	export function emptyCreateWorkingHoursTypeRespData():CreateWorkingHoursTypeRespData
	export function emptyRefCreateWorkingHoursTypeRespData():Ref<CreateWorkingHoursTypeRespData>
	export function refOfCreateWorkingHoursTypeRespData(x:CreateWorkingHoursTypeRespData,v:Ref<CreateWorkingHoursTypeRespData>)
	export function unRefCreateWorkingHoursTypeRespData(v:Ref<CreateWorkingHoursTypeRespData>):CreateWorkingHoursTypeRespData
	export function emptyGetPreHireResp():GetPreHireResp
	export function emptyRefGetPreHireResp():Ref<GetPreHireResp>
	export function refOfGetPreHireResp(x:GetPreHireResp,v:Ref<GetPreHireResp>)
	export function unRefGetPreHireResp(v:Ref<GetPreHireResp>):GetPreHireResp
	export function emptyQueryCustomFieldReq():QueryCustomFieldReq
	export function emptyRefQueryCustomFieldReq():Ref<QueryCustomFieldReq>
	export function refOfQueryCustomFieldReq(x:QueryCustomFieldReq,v:Ref<QueryCustomFieldReq>)
	export function unRefQueryCustomFieldReq(v:Ref<QueryCustomFieldReq>):QueryCustomFieldReq
	export function emptyLeaveType():LeaveType
	export function emptyRefLeaveType():Ref<LeaveType>
	export function refOfLeaveType(x:LeaveType,v:Ref<LeaveType>)
	export function unRefLeaveType(v:Ref<LeaveType>):LeaveType
	export function emptyListJobFamilyReq():ListJobFamilyReq
	export function emptyRefListJobFamilyReq():Ref<ListJobFamilyReq>
	export function refOfListJobFamilyReq(x:ListJobFamilyReq,v:Ref<ListJobFamilyReq>)
	export function unRefListJobFamilyReq(v:Ref<ListJobFamilyReq>):ListJobFamilyReq
	export function emptyApplicationInfo():ApplicationInfo
	export function emptyRefApplicationInfo():Ref<ApplicationInfo>
	export function refOfApplicationInfo(x:ApplicationInfo,v:Ref<ApplicationInfo>)
	export function unRefApplicationInfo(v:Ref<ApplicationInfo>):ApplicationInfo
	export function emptyListSecurityGroupReq():ListSecurityGroupReq
	export function emptyRefListSecurityGroupReq():Ref<ListSecurityGroupReq>
	export function refOfListSecurityGroupReq(x:ListSecurityGroupReq,v:Ref<ListSecurityGroupReq>)
	export function unRefListSecurityGroupReq(v:Ref<ListSecurityGroupReq>):ListSecurityGroupReq
	export function emptyP2JobChangeUpdatedV1Data():P2JobChangeUpdatedV1Data
	export function emptyRefP2JobChangeUpdatedV1Data():Ref<P2JobChangeUpdatedV1Data>
	export function refOfP2JobChangeUpdatedV1Data(x:P2JobChangeUpdatedV1Data,v:Ref<P2JobChangeUpdatedV1Data>)
	export function unRefP2JobChangeUpdatedV1Data(v:Ref<P2JobChangeUpdatedV1Data>):P2JobChangeUpdatedV1Data
	export function emptyCreateEmploymentRespData():CreateEmploymentRespData
	export function emptyRefCreateEmploymentRespData():Ref<CreateEmploymentRespData>
	export function refOfCreateEmploymentRespData(x:CreateEmploymentRespData,v:Ref<CreateEmploymentRespData>)
	export function unRefCreateEmploymentRespData(v:Ref<CreateEmploymentRespData>):CreateEmploymentRespData
	export function emptyGetProcessFormVariableDataReq():GetProcessFormVariableDataReq
	export function emptyRefGetProcessFormVariableDataReq():Ref<GetProcessFormVariableDataReq>
	export function refOfGetProcessFormVariableDataReq(x:GetProcessFormVariableDataReq,v:Ref<GetProcessFormVariableDataReq>)
	export function unRefGetProcessFormVariableDataReq(v:Ref<GetProcessFormVariableDataReq>):GetProcessFormVariableDataReq
	export function emptyGetPersonRespData():GetPersonRespData
	export function emptyRefGetPersonRespData():Ref<GetPersonRespData>
	export function refOfGetPersonRespData(x:GetPersonRespData,v:Ref<GetPersonRespData>)
	export function unRefGetPersonRespData(v:Ref<GetPersonRespData>):GetPersonRespData
	export function emptyP2EmploymentDeletedV1Data():P2EmploymentDeletedV1Data
	export function emptyRefP2EmploymentDeletedV1Data():Ref<P2EmploymentDeletedV1Data>
	export function refOfP2EmploymentDeletedV1Data(x:P2EmploymentDeletedV1Data,v:Ref<P2EmploymentDeletedV1Data>)
	export function unRefP2EmploymentDeletedV1Data(v:Ref<P2EmploymentDeletedV1Data>):P2EmploymentDeletedV1Data
	export function emptySubdivision():Subdivision
	export function emptyRefSubdivision():Ref<Subdivision>
	export function refOfSubdivision(x:Subdivision,v:Ref<Subdivision>)
	export function unRefSubdivision(v:Ref<Subdivision>):Subdivision
	export function emptyWkCalendarI18n():WkCalendarI18n
	export function emptyRefWkCalendarI18n():Ref<WkCalendarI18n>
	export function refOfWkCalendarI18n(x:WkCalendarI18n,v:Ref<WkCalendarI18n>)
	export function unRefWkCalendarI18n(v:Ref<WkCalendarI18n>):WkCalendarI18n
	export function emptyBackgroundCheckReportObject():BackgroundCheckReportObject
	export function emptyRefBackgroundCheckReportObject():Ref<BackgroundCheckReportObject>
	export function refOfBackgroundCheckReportObject(x:BackgroundCheckReportObject,v:Ref<BackgroundCheckReportObject>)
	export function unRefBackgroundCheckReportObject(v:Ref<BackgroundCheckReportObject>):BackgroundCheckReportObject
	export function emptyDeleteJobDataReq():DeleteJobDataReq
	export function emptyRefDeleteJobDataReq():Ref<DeleteJobDataReq>
	export function refOfDeleteJobDataReq(x:DeleteJobDataReq,v:Ref<DeleteJobDataReq>)
	export function unRefDeleteJobDataReq(v:Ref<DeleteJobDataReq>):DeleteJobDataReq
	export function emptyFilterCondition():FilterCondition
	export function emptyRefFilterCondition():Ref<FilterCondition>
	export function refOfFilterCondition(x:FilterCondition,v:Ref<FilterCondition>)
	export function unRefFilterCondition(v:Ref<FilterCondition>):FilterCondition
	export function emptyPermissionDetail():PermissionDetail
	export function emptyRefPermissionDetail():Ref<PermissionDetail>
	export function refOfPermissionDetail(x:PermissionDetail,v:Ref<PermissionDetail>)
	export function unRefPermissionDetail(v:Ref<PermissionDetail>):PermissionDetail
	export function emptyCreateLocationResp():CreateLocationResp
	export function emptyRefCreateLocationResp():Ref<CreateLocationResp>
	export function refOfCreateLocationResp(x:CreateLocationResp,v:Ref<CreateLocationResp>)
	export function unRefCreateLocationResp(v:Ref<CreateLocationResp>):CreateLocationResp
	export function emptyJobDataCostCenter():JobDataCostCenter
	export function emptyRefJobDataCostCenter():Ref<JobDataCostCenter>
	export function refOfJobDataCostCenter(x:JobDataCostCenter,v:Ref<JobDataCostCenter>)
	export function unRefJobDataCostCenter(v:Ref<JobDataCostCenter>):JobDataCostCenter
	export function emptyListPreHireResp():ListPreHireResp
	export function emptyRefListPreHireResp():Ref<ListPreHireResp>
	export function refOfListPreHireResp(x:ListPreHireResp,v:Ref<ListPreHireResp>)
	export function unRefListPreHireResp(v:Ref<ListPreHireResp>):ListPreHireResp
	export function emptyTranferEmploymentInfo():TranferEmploymentInfo
	export function emptyRefTranferEmploymentInfo():Ref<TranferEmploymentInfo>
	export function refOfTranferEmploymentInfo(x:TranferEmploymentInfo,v:Ref<TranferEmploymentInfo>)
	export function unRefTranferEmploymentInfo(v:Ref<TranferEmploymentInfo>):TranferEmploymentInfo
	export function emptyCpstGrade():CpstGrade
	export function emptyRefCpstGrade():Ref<CpstGrade>
	export function refOfCpstGrade(x:CpstGrade,v:Ref<CpstGrade>)
	export function unRefCpstGrade(v:Ref<CpstGrade>):CpstGrade
	export function emptyCreateEmploymentReq():CreateEmploymentReq
	export function emptyRefCreateEmploymentReq():Ref<CreateEmploymentReq>
	export function refOfCreateEmploymentReq(x:CreateEmploymentReq,v:Ref<CreateEmploymentReq>)
	export function unRefCreateEmploymentReq(v:Ref<CreateEmploymentReq>):CreateEmploymentReq
	export function emptyFormFieldVariableEmploymentValue():FormFieldVariableEmploymentValue
	export function emptyRefFormFieldVariableEmploymentValue():Ref<FormFieldVariableEmploymentValue>
	export function refOfFormFieldVariableEmploymentValue(x:FormFieldVariableEmploymentValue,v:Ref<FormFieldVariableEmploymentValue>)
	export function unRefFormFieldVariableEmploymentValue(v:Ref<FormFieldVariableEmploymentValue>):FormFieldVariableEmploymentValue
	export function emptyP2JobCreatedV1Data():P2JobCreatedV1Data
	export function emptyRefP2JobCreatedV1Data():Ref<P2JobCreatedV1Data>
	export function refOfP2JobCreatedV1Data(x:P2JobCreatedV1Data,v:Ref<P2JobCreatedV1Data>)
	export function unRefP2JobCreatedV1Data(v:Ref<P2JobCreatedV1Data>):P2JobCreatedV1Data
	export function emptySubmitOffboardingReqBody():SubmitOffboardingReqBody
	export function emptyRefSubmitOffboardingReqBody():Ref<SubmitOffboardingReqBody>
	export function refOfSubmitOffboardingReqBody(x:SubmitOffboardingReqBody,v:Ref<SubmitOffboardingReqBody>)
	export function unRefSubmitOffboardingReqBody(v:Ref<SubmitOffboardingReqBody>):SubmitOffboardingReqBody
	export function emptyCreateJobChangeRespData():CreateJobChangeRespData
	export function emptyRefCreateJobChangeRespData():Ref<CreateJobChangeRespData>
	export function refOfCreateJobChangeRespData(x:CreateJobChangeRespData,v:Ref<CreateJobChangeRespData>)
	export function unRefCreateJobChangeRespData(v:Ref<CreateJobChangeRespData>):CreateJobChangeRespData
	export function emptyDeletePreHireReq():DeletePreHireReq
	export function emptyRefDeletePreHireReq():Ref<DeletePreHireReq>
	export function refOfDeletePreHireReq(x:DeletePreHireReq,v:Ref<DeletePreHireReq>)
	export function unRefDeletePreHireReq(v:Ref<DeletePreHireReq>):DeletePreHireReq
	export function emptyGetCountryRegionResp():GetCountryRegionResp
	export function emptyRefGetCountryRegionResp():Ref<GetCountryRegionResp>
	export function refOfGetCountryRegionResp(x:GetCountryRegionResp,v:Ref<GetCountryRegionResp>)
	export function unRefGetCountryRegionResp(v:Ref<GetCountryRegionResp>):GetCountryRegionResp
	export function emptyGetLocationReq():GetLocationReq
	export function emptyRefGetLocationReq():Ref<GetLocationReq>
	export function refOfGetLocationReq(x:GetLocationReq,v:Ref<GetLocationReq>)
	export function unRefGetLocationReq(v:Ref<GetLocationReq>):GetLocationReq
	export function emptyListLocationRespData():ListLocationRespData
	export function emptyRefListLocationRespData():Ref<ListLocationRespData>
	export function refOfListLocationRespData(x:ListLocationRespData,v:Ref<ListLocationRespData>)
	export function unRefListLocationRespData(v:Ref<ListLocationRespData>):ListLocationRespData
	export function emptyResidentTax():ResidentTax
	export function emptyRefResidentTax():Ref<ResidentTax>
	export function refOfResidentTax(x:ResidentTax,v:Ref<ResidentTax>)
	export function unRefResidentTax(v:Ref<ResidentTax>):ResidentTax
	export function emptyRuleDimension():RuleDimension
	export function emptyRefRuleDimension():Ref<RuleDimension>
	export function refOfRuleDimension(x:RuleDimension,v:Ref<RuleDimension>)
	export function unRefRuleDimension(v:Ref<RuleDimension>):RuleDimension
	export function emptyCreateJobFamilyResp():CreateJobFamilyResp
	export function emptyRefCreateJobFamilyResp():Ref<CreateJobFamilyResp>
	export function refOfCreateJobFamilyResp(x:CreateJobFamilyResp,v:Ref<CreateJobFamilyResp>)
	export function unRefCreateJobFamilyResp(v:Ref<CreateJobFamilyResp>):CreateJobFamilyResp
	export function emptyGetJobReq():GetJobReq
	export function emptyRefGetJobReq():Ref<GetJobReq>
	export function refOfGetJobReq(x:GetJobReq,v:Ref<GetJobReq>)
	export function unRefGetJobReq(v:Ref<GetJobReq>):GetJobReq
	export function emptyGetJobResp():GetJobResp
	export function emptyRefGetJobResp():Ref<GetJobResp>
	export function refOfGetJobResp(x:GetJobResp,v:Ref<GetJobResp>)
	export function unRefGetJobResp(v:Ref<GetJobResp>):GetJobResp
	export function emptyFile():File
	export function emptyRefFile():Ref<File>
	export function refOfFile(x:File,v:Ref<File>)
	export function unRefFile(v:Ref<File>):File
	export function emptyLeaveBalancesLeaveResp():LeaveBalancesLeaveResp
	export function emptyRefLeaveBalancesLeaveResp():Ref<LeaveBalancesLeaveResp>
	export function refOfLeaveBalancesLeaveResp(x:LeaveBalancesLeaveResp,v:Ref<LeaveBalancesLeaveResp>)
	export function unRefLeaveBalancesLeaveResp(v:Ref<LeaveBalancesLeaveResp>):LeaveBalancesLeaveResp
	export function emptyListObjectApiNameCustomFieldReq():ListObjectApiNameCustomFieldReq
	export function emptyRefListObjectApiNameCustomFieldReq():Ref<ListObjectApiNameCustomFieldReq>
	export function refOfListObjectApiNameCustomFieldReq(x:ListObjectApiNameCustomFieldReq,v:Ref<ListObjectApiNameCustomFieldReq>)
	export function unRefListObjectApiNameCustomFieldReq(v:Ref<ListObjectApiNameCustomFieldReq>):ListObjectApiNameCustomFieldReq
	export function emptyListPreHireRespData():ListPreHireRespData
	export function emptyRefListPreHireRespData():Ref<ListPreHireRespData>
	export function refOfListPreHireRespData(x:ListPreHireRespData,v:Ref<ListPreHireRespData>)
	export function unRefListPreHireRespData(v:Ref<ListPreHireRespData>):ListPreHireRespData
	export function emptyDeleteEmployeeTypeResp():DeleteEmployeeTypeResp
	export function emptyRefDeleteEmployeeTypeResp():Ref<DeleteEmployeeTypeResp>
	export function refOfDeleteEmployeeTypeResp(x:DeleteEmployeeTypeResp,v:Ref<DeleteEmployeeTypeResp>)
	export function unRefDeleteEmployeeTypeResp(v:Ref<DeleteEmployeeTypeResp>):DeleteEmployeeTypeResp
	export function emptyDeleteJobLevelReq():DeleteJobLevelReq
	export function emptyRefDeleteJobLevelReq():Ref<DeleteJobLevelReq>
	export function refOfDeleteJobLevelReq(x:DeleteJobLevelReq,v:Ref<DeleteJobLevelReq>)
	export function unRefDeleteJobLevelReq(v:Ref<DeleteJobLevelReq>):DeleteJobLevelReq
	export function emptyAddress():Address
	export function emptyRefAddress():Ref<Address>
	export function refOfAddress(x:Address,v:Ref<Address>)
	export function unRefAddress(v:Ref<Address>):Address
	export function emptyUploadPersonRespData():UploadPersonRespData
	export function emptyRefUploadPersonRespData():Ref<UploadPersonRespData>
	export function refOfUploadPersonRespData(x:UploadPersonRespData,v:Ref<UploadPersonRespData>)
	export function unRefUploadPersonRespData(v:Ref<UploadPersonRespData>):UploadPersonRespData
	export function emptyListSecurityGroupResp():ListSecurityGroupResp
	export function emptyRefListSecurityGroupResp():Ref<ListSecurityGroupResp>
	export function refOfListSecurityGroupResp(x:ListSecurityGroupResp,v:Ref<ListSecurityGroupResp>)
	export function unRefListSecurityGroupResp(v:Ref<ListSecurityGroupResp>):ListSecurityGroupResp
	export function emptyCreateJobFamilyReq():CreateJobFamilyReq
	export function emptyRefCreateJobFamilyReq():Ref<CreateJobFamilyReq>
	export function refOfCreateJobFamilyReq(x:CreateJobFamilyReq,v:Ref<CreateJobFamilyReq>)
	export function unRefCreateJobFamilyReq(v:Ref<CreateJobFamilyReq>):CreateJobFamilyReq
	export function emptyDependent():Dependent
	export function emptyRefDependent():Ref<Dependent>
	export function refOfDependent(x:Dependent,v:Ref<Dependent>)
	export function unRefDependent(v:Ref<Dependent>):Dependent
	export function emptyFormFieldVariableTextValue():FormFieldVariableTextValue
	export function emptyRefFormFieldVariableTextValue():Ref<FormFieldVariableTextValue>
	export function refOfFormFieldVariableTextValue(x:FormFieldVariableTextValue,v:Ref<FormFieldVariableTextValue>)
	export function unRefFormFieldVariableTextValue(v:Ref<FormFieldVariableTextValue>):FormFieldVariableTextValue
	export function emptyGetContractReq():GetContractReq
	export function emptyRefGetContractReq():Ref<GetContractReq>
	export function refOfGetContractReq(x:GetContractReq,v:Ref<GetContractReq>)
	export function unRefGetContractReq(v:Ref<GetContractReq>):GetContractReq
	export function emptyJobFamily():JobFamily
	export function emptyRefJobFamily():Ref<JobFamily>
	export function refOfJobFamily(x:JobFamily,v:Ref<JobFamily>)
	export function unRefJobFamily(v:Ref<JobFamily>):JobFamily
	export function emptyListObjectApiNameCustomFieldRespData():ListObjectApiNameCustomFieldRespData
	export function emptyRefListObjectApiNameCustomFieldRespData():Ref<ListObjectApiNameCustomFieldRespData>
	export function refOfListObjectApiNameCustomFieldRespData(x:ListObjectApiNameCustomFieldRespData,v:Ref<ListObjectApiNameCustomFieldRespData>)
	export function unRefListObjectApiNameCustomFieldRespData(v:Ref<ListObjectApiNameCustomFieldRespData>):ListObjectApiNameCustomFieldRespData
	export function emptyProcess():Process
	export function emptyRefProcess():Ref<Process>
	export function refOfProcess(x:Process,v:Ref<Process>)
	export function unRefProcess(v:Ref<Process>):Process
	export function emptyListCompanyResp():ListCompanyResp
	export function emptyRefListCompanyResp():Ref<ListCompanyResp>
	export function refOfListCompanyResp(x:ListCompanyResp,v:Ref<ListCompanyResp>)
	export function unRefListCompanyResp(v:Ref<ListCompanyResp>):ListCompanyResp
	export function emptyUserId():UserId
	export function emptyRefUserId():Ref<UserId>
	export function refOfUserId(x:UserId,v:Ref<UserId>)
	export function unRefUserId(v:Ref<UserId>):UserId
	export function emptyListJobLevelReq():ListJobLevelReq
	export function emptyRefListJobLevelReq():Ref<ListJobLevelReq>
	export function refOfListJobLevelReq(x:ListJobLevelReq,v:Ref<ListJobLevelReq>)
	export function unRefListJobLevelReq(v:Ref<ListJobLevelReq>):ListJobLevelReq
	export function emptyP2DepartmentCreatedV1():P2DepartmentCreatedV1
	export function emptyRefP2DepartmentCreatedV1():Ref<P2DepartmentCreatedV1>
	export function refOfP2DepartmentCreatedV1(x:P2DepartmentCreatedV1,v:Ref<P2DepartmentCreatedV1>)
	export function unRefP2DepartmentCreatedV1(v:Ref<P2DepartmentCreatedV1>):P2DepartmentCreatedV1
	export function emptyCreateJobChangeReqBody():CreateJobChangeReqBody
	export function emptyRefCreateJobChangeReqBody():Ref<CreateJobChangeReqBody>
	export function refOfCreateJobChangeReqBody(x:CreateJobChangeReqBody,v:Ref<CreateJobChangeReqBody>)
	export function unRefCreateJobChangeReqBody(v:Ref<CreateJobChangeReqBody>):CreateJobChangeReqBody
	export function emptyGetFileReq():GetFileReq
	export function emptyRefGetFileReq():Ref<GetFileReq>
	export function refOfGetFileReq(x:GetFileReq,v:Ref<GetFileReq>)
	export function unRefGetFileReq(v:Ref<GetFileReq>):GetFileReq
	export function emptyP2JobDataChangedV1Data():P2JobDataChangedV1Data
	export function emptyRefP2JobDataChangedV1Data():Ref<P2JobDataChangedV1Data>
	export function refOfP2JobDataChangedV1Data(x:P2JobDataChangedV1Data,v:Ref<P2JobDataChangedV1Data>)
	export function unRefP2JobDataChangedV1Data(v:Ref<P2JobDataChangedV1Data>):P2JobDataChangedV1Data
	export function emptyPersonName():PersonName
	export function emptyRefPersonName():Ref<PersonName>
	export function refOfPersonName(x:PersonName,v:Ref<PersonName>)
	export function unRefPersonName(v:Ref<PersonName>):PersonName
	export function emptyFormFieldVariableDepartmentValue():FormFieldVariableDepartmentValue
	export function emptyRefFormFieldVariableDepartmentValue():Ref<FormFieldVariableDepartmentValue>
	export function refOfFormFieldVariableDepartmentValue(x:FormFieldVariableDepartmentValue,v:Ref<FormFieldVariableDepartmentValue>)
	export function unRefFormFieldVariableDepartmentValue(v:Ref<FormFieldVariableDepartmentValue>):FormFieldVariableDepartmentValue
	export function emptyGetNationalIdTypeResp():GetNationalIdTypeResp
	export function emptyRefGetNationalIdTypeResp():Ref<GetNationalIdTypeResp>
	export function refOfGetNationalIdTypeResp(x:GetNationalIdTypeResp,v:Ref<GetNationalIdTypeResp>)
	export function unRefGetNationalIdTypeResp(v:Ref<GetNationalIdTypeResp>):GetNationalIdTypeResp
	export function emptyQuerySecurityGroupReq():QuerySecurityGroupReq
	export function emptyRefQuerySecurityGroupReq():Ref<QuerySecurityGroupReq>
	export function refOfQuerySecurityGroupReq(x:QuerySecurityGroupReq,v:Ref<QuerySecurityGroupReq>)
	export function unRefQuerySecurityGroupReq(v:Ref<QuerySecurityGroupReq>):QuerySecurityGroupReq
	export function emptyI18n():I18n
	export function emptyRefI18n():Ref<I18n>
	export function refOfI18n(x:I18n,v:Ref<I18n>)
	export function unRefI18n(v:Ref<I18n>):I18n
	export function emptyListCountryRegionRespData():ListCountryRegionRespData
	export function emptyRefListCountryRegionRespData():Ref<ListCountryRegionRespData>
	export function refOfListCountryRegionRespData(x:ListCountryRegionRespData,v:Ref<ListCountryRegionRespData>)
	export function unRefListCountryRegionRespData(v:Ref<ListCountryRegionRespData>):ListCountryRegionRespData
	export function emptyOffboardingChecklist():OffboardingChecklist
	export function emptyRefOffboardingChecklist():Ref<OffboardingChecklist>
	export function refOfOffboardingChecklist(x:OffboardingChecklist,v:Ref<OffboardingChecklist>)
	export function unRefOffboardingChecklist(v:Ref<OffboardingChecklist>):OffboardingChecklist
	export function emptyQueryTransferReasonReq():QueryTransferReasonReq
	export function emptyRefQueryTransferReasonReq():Ref<QueryTransferReasonReq>
	export function refOfQueryTransferReasonReq(x:QueryTransferReasonReq,v:Ref<QueryTransferReasonReq>)
	export function unRefQueryTransferReasonReq(v:Ref<QueryTransferReasonReq>):QueryTransferReasonReq
	export function emptyDeleteNationalIdTypeReq():DeleteNationalIdTypeReq
	export function emptyRefDeleteNationalIdTypeReq():Ref<DeleteNationalIdTypeReq>
	export function refOfDeleteNationalIdTypeReq(x:DeleteNationalIdTypeReq,v:Ref<DeleteNationalIdTypeReq>)
	export function unRefDeleteNationalIdTypeReq(v:Ref<DeleteNationalIdTypeReq>):DeleteNationalIdTypeReq
	export function emptyGetCompanyRespData():GetCompanyRespData
	export function emptyRefGetCompanyRespData():Ref<GetCompanyRespData>
	export function refOfGetCompanyRespData(x:GetCompanyRespData,v:Ref<GetCompanyRespData>)
	export function unRefGetCompanyRespData(v:Ref<GetCompanyRespData>):GetCompanyRespData
	export function emptyGetNationalIdTypeRespData():GetNationalIdTypeRespData
	export function emptyRefGetNationalIdTypeRespData():Ref<GetNationalIdTypeRespData>
	export function refOfGetNationalIdTypeRespData(x:GetNationalIdTypeRespData,v:Ref<GetNationalIdTypeRespData>)
	export function unRefGetNationalIdTypeRespData(v:Ref<GetNationalIdTypeRespData>):GetNationalIdTypeRespData
	export function emptyGetNationalIdTypeReq():GetNationalIdTypeReq
	export function emptyRefGetNationalIdTypeReq():Ref<GetNationalIdTypeReq>
	export function refOfGetNationalIdTypeReq(x:GetNationalIdTypeReq,v:Ref<GetNationalIdTypeReq>)
	export function unRefGetNationalIdTypeReq(v:Ref<GetNationalIdTypeReq>):GetNationalIdTypeReq
	export function emptyQueryCustomFieldResp():QueryCustomFieldResp
	export function emptyRefQueryCustomFieldResp():Ref<QueryCustomFieldResp>
	export function refOfQueryCustomFieldResp(x:QueryCustomFieldResp,v:Ref<QueryCustomFieldResp>)
	export function unRefQueryCustomFieldResp(v:Ref<QueryCustomFieldResp>):QueryCustomFieldResp
	export function emptyTransferInfo():TransferInfo
	export function emptyRefTransferInfo():Ref<TransferInfo>
	export function refOfTransferInfo(x:TransferInfo,v:Ref<TransferInfo>)
	export function unRefTransferInfo(v:Ref<TransferInfo>):TransferInfo
	export function emptyP2DepartmentUpdatedV1Data():P2DepartmentUpdatedV1Data
	export function emptyRefP2DepartmentUpdatedV1Data():Ref<P2DepartmentUpdatedV1Data>
	export function refOfP2DepartmentUpdatedV1Data(x:P2DepartmentUpdatedV1Data,v:Ref<P2DepartmentUpdatedV1Data>)
	export function unRefP2DepartmentUpdatedV1Data(v:Ref<P2DepartmentUpdatedV1Data>):P2DepartmentUpdatedV1Data
	export function emptyBpRoleOrganization():BpRoleOrganization
	export function emptyRefBpRoleOrganization():Ref<BpRoleOrganization>
	export function refOfBpRoleOrganization(x:BpRoleOrganization,v:Ref<BpRoleOrganization>)
	export function unRefBpRoleOrganization(v:Ref<BpRoleOrganization>):BpRoleOrganization
	export function emptyDeletePreHireResp():DeletePreHireResp
	export function emptyRefDeletePreHireResp():Ref<DeletePreHireResp>
	export function refOfDeletePreHireResp(x:DeletePreHireResp,v:Ref<DeletePreHireResp>)
	export function unRefDeletePreHireResp(v:Ref<DeletePreHireResp>):DeletePreHireResp
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyP2ContractCreatedV1Data():P2ContractCreatedV1Data
	export function emptyRefP2ContractCreatedV1Data():Ref<P2ContractCreatedV1Data>
	export function refOfP2ContractCreatedV1Data(x:P2ContractCreatedV1Data,v:Ref<P2ContractCreatedV1Data>)
	export function unRefP2ContractCreatedV1Data(v:Ref<P2ContractCreatedV1Data>):P2ContractCreatedV1Data
	export function emptyP2EmploymentCreatedV1Data():P2EmploymentCreatedV1Data
	export function emptyRefP2EmploymentCreatedV1Data():Ref<P2EmploymentCreatedV1Data>
	export function refOfP2EmploymentCreatedV1Data(x:P2EmploymentCreatedV1Data,v:Ref<P2EmploymentCreatedV1Data>)
	export function unRefP2EmploymentCreatedV1Data(v:Ref<P2EmploymentCreatedV1Data>):P2EmploymentCreatedV1Data
	export function emptyPatchJobLevelReq():PatchJobLevelReq
	export function emptyRefPatchJobLevelReq():Ref<PatchJobLevelReq>
	export function refOfPatchJobLevelReq(x:PatchJobLevelReq,v:Ref<PatchJobLevelReq>)
	export function unRefPatchJobLevelReq(v:Ref<PatchJobLevelReq>):PatchJobLevelReq
	export function emptyFormFieldVariableEnumValue():FormFieldVariableEnumValue
	export function emptyRefFormFieldVariableEnumValue():Ref<FormFieldVariableEnumValue>
	export function refOfFormFieldVariableEnumValue(x:FormFieldVariableEnumValue,v:Ref<FormFieldVariableEnumValue>)
	export function unRefFormFieldVariableEnumValue(v:Ref<FormFieldVariableEnumValue>):FormFieldVariableEnumValue
	export function emptyGetEmployeeTypeRespData():GetEmployeeTypeRespData
	export function emptyRefGetEmployeeTypeRespData():Ref<GetEmployeeTypeRespData>
	export function refOfGetEmployeeTypeRespData(x:GetEmployeeTypeRespData,v:Ref<GetEmployeeTypeRespData>)
	export function unRefGetEmployeeTypeRespData(v:Ref<GetEmployeeTypeRespData>):GetEmployeeTypeRespData
	export function emptyLeaveTypesLeaveReq():LeaveTypesLeaveReq
	export function emptyRefLeaveTypesLeaveReq():Ref<LeaveTypesLeaveReq>
	export function refOfLeaveTypesLeaveReq(x:LeaveTypesLeaveReq,v:Ref<LeaveTypesLeaveReq>)
	export function unRefLeaveTypesLeaveReq(v:Ref<LeaveTypesLeaveReq>):LeaveTypesLeaveReq
	export function emptyP2ContractDeletedV1Data():P2ContractDeletedV1Data
	export function emptyRefP2ContractDeletedV1Data():Ref<P2ContractDeletedV1Data>
	export function refOfP2ContractDeletedV1Data(x:P2ContractDeletedV1Data,v:Ref<P2ContractDeletedV1Data>)
	export function unRefP2ContractDeletedV1Data(v:Ref<P2ContractDeletedV1Data>):P2ContractDeletedV1Data
	export function emptyCreateEmploymentResp():CreateEmploymentResp
	export function emptyRefCreateEmploymentResp():Ref<CreateEmploymentResp>
	export function refOfCreateEmploymentResp(x:CreateEmploymentResp,v:Ref<CreateEmploymentResp>)
	export function unRefCreateEmploymentResp(v:Ref<CreateEmploymentResp>):CreateEmploymentResp
	export function emptyEmail():Email
	export function emptyRefEmail():Ref<Email>
	export function refOfEmail(x:Email,v:Ref<Email>)
	export function unRefEmail(v:Ref<Email>):Email
	export function emptyDeleteLeaveGrantingRecordReq():DeleteLeaveGrantingRecordReq
	export function emptyRefDeleteLeaveGrantingRecordReq():Ref<DeleteLeaveGrantingRecordReq>
	export function refOfDeleteLeaveGrantingRecordReq(x:DeleteLeaveGrantingRecordReq,v:Ref<DeleteLeaveGrantingRecordReq>)
	export function unRefDeleteLeaveGrantingRecordReq(v:Ref<DeleteLeaveGrantingRecordReq>):DeleteLeaveGrantingRecordReq
	export function emptyPatchEmployeeTypeRespData():PatchEmployeeTypeRespData
	export function emptyRefPatchEmployeeTypeRespData():Ref<PatchEmployeeTypeRespData>
	export function refOfPatchEmployeeTypeRespData(x:PatchEmployeeTypeRespData,v:Ref<PatchEmployeeTypeRespData>)
	export function unRefPatchEmployeeTypeRespData(v:Ref<PatchEmployeeTypeRespData>):PatchEmployeeTypeRespData
	export function emptyWorkingHoursType():WorkingHoursType
	export function emptyRefWorkingHoursType():Ref<WorkingHoursType>
	export function refOfWorkingHoursType(x:WorkingHoursType,v:Ref<WorkingHoursType>)
	export function unRefWorkingHoursType(v:Ref<WorkingHoursType>):WorkingHoursType
	export function emptyFormFieldVariableObjectValue():FormFieldVariableObjectValue
	export function emptyRefFormFieldVariableObjectValue():Ref<FormFieldVariableObjectValue>
	export function refOfFormFieldVariableObjectValue(x:FormFieldVariableObjectValue,v:Ref<FormFieldVariableObjectValue>)
	export function unRefFormFieldVariableObjectValue(v:Ref<FormFieldVariableObjectValue>):FormFieldVariableObjectValue
	export function emptyLeaveSubtype():LeaveSubtype
	export function emptyRefLeaveSubtype():Ref<LeaveSubtype>
	export function refOfLeaveSubtype(x:LeaveSubtype,v:Ref<LeaveSubtype>)
	export function unRefLeaveSubtype(v:Ref<LeaveSubtype>):LeaveSubtype
	export function emptyPatchNationalIdTypeResp():PatchNationalIdTypeResp
	export function emptyRefPatchNationalIdTypeResp():Ref<PatchNationalIdTypeResp>
	export function refOfPatchNationalIdTypeResp(x:PatchNationalIdTypeResp,v:Ref<PatchNationalIdTypeResp>)
	export function unRefPatchNationalIdTypeResp(v:Ref<PatchNationalIdTypeResp>):PatchNationalIdTypeResp
	export function emptyPatchNationalIdTypeRespData():PatchNationalIdTypeRespData
	export function emptyRefPatchNationalIdTypeRespData():Ref<PatchNationalIdTypeRespData>
	export function refOfPatchNationalIdTypeRespData(x:PatchNationalIdTypeRespData,v:Ref<PatchNationalIdTypeRespData>)
	export function unRefPatchNationalIdTypeRespData(v:Ref<PatchNationalIdTypeRespData>):PatchNationalIdTypeRespData
	export function emptyJobData():JobData
	export function emptyRefJobData():Ref<JobData>
	export function refOfJobData(x:JobData,v:Ref<JobData>)
	export function unRefJobData(v:Ref<JobData>):JobData
	export function emptyPatchDepartmentResp():PatchDepartmentResp
	export function emptyRefPatchDepartmentResp():Ref<PatchDepartmentResp>
	export function refOfPatchDepartmentResp(x:PatchDepartmentResp,v:Ref<PatchDepartmentResp>)
	export function unRefPatchDepartmentResp(v:Ref<PatchDepartmentResp>):PatchDepartmentResp
	export function emptyDeleteEmployeeTypeReq():DeleteEmployeeTypeReq
	export function emptyRefDeleteEmployeeTypeReq():Ref<DeleteEmployeeTypeReq>
	export function refOfDeleteEmployeeTypeReq(x:DeleteEmployeeTypeReq,v:Ref<DeleteEmployeeTypeReq>)
	export function unRefDeleteEmployeeTypeReq(v:Ref<DeleteEmployeeTypeReq>):DeleteEmployeeTypeReq
	export function emptyDeleteJobFamilyReq():DeleteJobFamilyReq
	export function emptyRefDeleteJobFamilyReq():Ref<DeleteJobFamilyReq>
	export function refOfDeleteJobFamilyReq(x:DeleteJobFamilyReq,v:Ref<DeleteJobFamilyReq>)
	export function unRefDeleteJobFamilyReq(v:Ref<DeleteJobFamilyReq>):DeleteJobFamilyReq
	export function emptyConvertCommonDataIdReqBody():ConvertCommonDataIdReqBody
	export function emptyRefConvertCommonDataIdReqBody():Ref<ConvertCommonDataIdReqBody>
	export function refOfConvertCommonDataIdReqBody(x:ConvertCommonDataIdReqBody,v:Ref<ConvertCommonDataIdReqBody>)
	export function unRefConvertCommonDataIdReqBody(v:Ref<ConvertCommonDataIdReqBody>):ConvertCommonDataIdReqBody
	export function emptyCreateLeaveGrantingRecordReq():CreateLeaveGrantingRecordReq
	export function emptyRefCreateLeaveGrantingRecordReq():Ref<CreateLeaveGrantingRecordReq>
	export function refOfCreateLeaveGrantingRecordReq(x:CreateLeaveGrantingRecordReq,v:Ref<CreateLeaveGrantingRecordReq>)
	export function unRefCreateLeaveGrantingRecordReq(v:Ref<CreateLeaveGrantingRecordReq>):CreateLeaveGrantingRecordReq
	export function emptyPatchPreHireReq():PatchPreHireReq
	export function emptyRefPatchPreHireReq():Ref<PatchPreHireReq>
	export function refOfPatchPreHireReq(x:PatchPreHireReq,v:Ref<PatchPreHireReq>)
	export function unRefPatchPreHireReq(v:Ref<PatchPreHireReq>):PatchPreHireReq
	export function emptyGetDepartmentRespData():GetDepartmentRespData
	export function emptyRefGetDepartmentRespData():Ref<GetDepartmentRespData>
	export function refOfGetDepartmentRespData(x:GetDepartmentRespData,v:Ref<GetDepartmentRespData>)
	export function unRefGetDepartmentRespData(v:Ref<GetDepartmentRespData>):GetDepartmentRespData
	export function emptyListJobDataReq():ListJobDataReq
	export function emptyRefListJobDataReq():Ref<ListJobDataReq>
	export function refOfListJobDataReq(x:ListJobDataReq,v:Ref<ListJobDataReq>)
	export function unRefListJobDataReq(v:Ref<ListJobDataReq>):ListJobDataReq
	export function emptyP2PersonUpdatedV1Data():P2PersonUpdatedV1Data
	export function emptyRefP2PersonUpdatedV1Data():Ref<P2PersonUpdatedV1Data>
	export function refOfP2PersonUpdatedV1Data(x:P2PersonUpdatedV1Data,v:Ref<P2PersonUpdatedV1Data>)
	export function unRefP2PersonUpdatedV1Data(v:Ref<P2PersonUpdatedV1Data>):P2PersonUpdatedV1Data
	export function emptyQuerySecurityGroupRespData():QuerySecurityGroupRespData
	export function emptyRefQuerySecurityGroupRespData():Ref<QuerySecurityGroupRespData>
	export function refOfQuerySecurityGroupRespData(x:QuerySecurityGroupRespData,v:Ref<QuerySecurityGroupRespData>)
	export function unRefQuerySecurityGroupRespData(v:Ref<QuerySecurityGroupRespData>):QuerySecurityGroupRespData
	export function emptyGetJobDataResp():GetJobDataResp
	export function emptyRefGetJobDataResp():Ref<GetJobDataResp>
	export function refOfGetJobDataResp(x:GetJobDataResp,v:Ref<GetJobDataResp>)
	export function unRefGetJobDataResp(v:Ref<GetJobDataResp>):GetJobDataResp
	export function emptyQueryTransferTypeResp():QueryTransferTypeResp
	export function emptyRefQueryTransferTypeResp():Ref<QueryTransferTypeResp>
	export function refOfQueryTransferTypeResp(x:QueryTransferTypeResp,v:Ref<QueryTransferTypeResp>)
	export function unRefQueryTransferTypeResp(v:Ref<QueryTransferTypeResp>):QueryTransferTypeResp
	export function emptyGetSubdivisionRespData():GetSubdivisionRespData
	export function emptyRefGetSubdivisionRespData():Ref<GetSubdivisionRespData>
	export function refOfGetSubdivisionRespData(x:GetSubdivisionRespData,v:Ref<GetSubdivisionRespData>)
	export function unRefGetSubdivisionRespData(v:Ref<GetSubdivisionRespData>):GetSubdivisionRespData
	export function emptyCpstStandardType():CpstStandardType
	export function emptyRefCpstStandardType():Ref<CpstStandardType>
	export function refOfCpstStandardType(x:CpstStandardType,v:Ref<CpstStandardType>)
	export function unRefCpstStandardType(v:Ref<CpstStandardType>):CpstStandardType
	export function emptyDimensionValue():DimensionValue
	export function emptyRefDimensionValue():Ref<DimensionValue>
	export function refOfDimensionValue(x:DimensionValue,v:Ref<DimensionValue>)
	export function unRefDimensionValue(v:Ref<DimensionValue>):DimensionValue
	export function emptyGetContractRespData():GetContractRespData
	export function emptyRefGetContractRespData():Ref<GetContractRespData>
	export function refOfGetContractRespData(x:GetContractRespData,v:Ref<GetContractRespData>)
	export function unRefGetContractRespData(v:Ref<GetContractRespData>):GetContractRespData
	export function emptyListDepartmentResp():ListDepartmentResp
	export function emptyRefListDepartmentResp():Ref<ListDepartmentResp>
	export function refOfListDepartmentResp(x:ListDepartmentResp,v:Ref<ListDepartmentResp>)
	export function unRefListDepartmentResp(v:Ref<ListDepartmentResp>):ListDepartmentResp
	export function emptyEmergencyContact():EmergencyContact
	export function emptyRefEmergencyContact():Ref<EmergencyContact>
	export function refOfEmergencyContact(x:EmergencyContact,v:Ref<EmergencyContact>)
	export function unRefEmergencyContact(v:Ref<EmergencyContact>):EmergencyContact
	export function emptyEmploymentLeaveBalance():EmploymentLeaveBalance
	export function emptyRefEmploymentLeaveBalance():Ref<EmploymentLeaveBalance>
	export function refOfEmploymentLeaveBalance(x:EmploymentLeaveBalance,v:Ref<EmploymentLeaveBalance>)
	export function unRefEmploymentLeaveBalance(v:Ref<EmploymentLeaveBalance>):EmploymentLeaveBalance
	export function emptyGetLocationRespData():GetLocationRespData
	export function emptyRefGetLocationRespData():Ref<GetLocationRespData>
	export function refOfGetLocationRespData(x:GetLocationRespData,v:Ref<GetLocationRespData>)
	export function unRefGetLocationRespData(v:Ref<GetLocationRespData>):GetLocationRespData
	export function emptyP2JobChangeUpdatedV1():P2JobChangeUpdatedV1
	export function emptyRefP2JobChangeUpdatedV1():Ref<P2JobChangeUpdatedV1>
	export function refOfP2JobChangeUpdatedV1(x:P2JobChangeUpdatedV1,v:Ref<P2JobChangeUpdatedV1>)
	export function unRefP2JobChangeUpdatedV1(v:Ref<P2JobChangeUpdatedV1>):P2JobChangeUpdatedV1
	export function emptyPatchJobDataRespData():PatchJobDataRespData
	export function emptyRefPatchJobDataRespData():Ref<PatchJobDataRespData>
	export function refOfPatchJobDataRespData(x:PatchJobDataRespData,v:Ref<PatchJobDataRespData>)
	export function unRefPatchJobDataRespData(v:Ref<PatchJobDataRespData>):PatchJobDataRespData
	export function emptyCreateLeaveGrantingRecordReqBody():CreateLeaveGrantingRecordReqBody
	export function emptyRefCreateLeaveGrantingRecordReqBody():Ref<CreateLeaveGrantingRecordReqBody>
	export function refOfCreateLeaveGrantingRecordReqBody(x:CreateLeaveGrantingRecordReqBody,v:Ref<CreateLeaveGrantingRecordReqBody>)
	export function unRefCreateLeaveGrantingRecordReqBody(v:Ref<CreateLeaveGrantingRecordReqBody>):CreateLeaveGrantingRecordReqBody
	export function emptyGetEmployeeTypeResp():GetEmployeeTypeResp
	export function emptyRefGetEmployeeTypeResp():Ref<GetEmployeeTypeResp>
	export function refOfGetEmployeeTypeResp(x:GetEmployeeTypeResp,v:Ref<GetEmployeeTypeResp>)
	export function unRefGetEmployeeTypeResp(v:Ref<GetEmployeeTypeResp>):GetEmployeeTypeResp
	export function emptyGetJobFamilyRespData():GetJobFamilyRespData
	export function emptyRefGetJobFamilyRespData():Ref<GetJobFamilyRespData>
	export function refOfGetJobFamilyRespData(x:GetJobFamilyRespData,v:Ref<GetJobFamilyRespData>)
	export function unRefGetJobFamilyRespData(v:Ref<GetJobFamilyRespData>):GetJobFamilyRespData
	export function emptyGetProcessFormVariableDataResp():GetProcessFormVariableDataResp
	export function emptyRefGetProcessFormVariableDataResp():Ref<GetProcessFormVariableDataResp>
	export function refOfGetProcessFormVariableDataResp(x:GetProcessFormVariableDataResp,v:Ref<GetProcessFormVariableDataResp>)
	export function unRefGetProcessFormVariableDataResp(v:Ref<GetProcessFormVariableDataResp>):GetProcessFormVariableDataResp
	export function emptyPatchJobDataReq():PatchJobDataReq
	export function emptyRefPatchJobDataReq():Ref<PatchJobDataReq>
	export function refOfPatchJobDataReq(x:PatchJobDataReq,v:Ref<PatchJobDataReq>)
	export function unRefPatchJobDataReq(v:Ref<PatchJobDataReq>):PatchJobDataReq
	export function emptyContract():Contract
	export function emptyRefContract():Ref<Contract>
	export function refOfContract(x:Contract,v:Ref<Contract>)
	export function unRefContract(v:Ref<Contract>):Contract
	export function emptyGetWorkingHoursTypeReq():GetWorkingHoursTypeReq
	export function emptyRefGetWorkingHoursTypeReq():Ref<GetWorkingHoursTypeReq>
	export function refOfGetWorkingHoursTypeReq(x:GetWorkingHoursTypeReq,v:Ref<GetWorkingHoursTypeReq>)
	export function unRefGetWorkingHoursTypeReq(v:Ref<GetWorkingHoursTypeReq>):GetWorkingHoursTypeReq
	export function emptySearchOffboardingIterator():SearchOffboardingIterator
	export function emptyRefSearchOffboardingIterator():Ref<SearchOffboardingIterator>
	export function refOfSearchOffboardingIterator(x:SearchOffboardingIterator,v:Ref<SearchOffboardingIterator>)
	export function unRefSearchOffboardingIterator(v:Ref<SearchOffboardingIterator>):SearchOffboardingIterator
	export function emptyListEmployeeTypeRespData():ListEmployeeTypeRespData
	export function emptyRefListEmployeeTypeRespData():Ref<ListEmployeeTypeRespData>
	export function refOfListEmployeeTypeRespData(x:ListEmployeeTypeRespData,v:Ref<ListEmployeeTypeRespData>)
	export function unRefListEmployeeTypeRespData(v:Ref<ListEmployeeTypeRespData>):ListEmployeeTypeRespData
	export function emptyCpstCurrency():CpstCurrency
	export function emptyRefCpstCurrency():Ref<CpstCurrency>
	export function refOfCpstCurrency(x:CpstCurrency,v:Ref<CpstCurrency>)
	export function unRefCpstCurrency(v:Ref<CpstCurrency>):CpstCurrency
	export function emptyDeleteEmploymentResp():DeleteEmploymentResp
	export function emptyRefDeleteEmploymentResp():Ref<DeleteEmploymentResp>
	export function refOfDeleteEmploymentResp(x:DeleteEmploymentResp,v:Ref<DeleteEmploymentResp>)
	export function unRefDeleteEmploymentResp(v:Ref<DeleteEmploymentResp>):DeleteEmploymentResp
	export function emptyEnumFieldOption():EnumFieldOption
	export function emptyRefEnumFieldOption():Ref<EnumFieldOption>
	export function refOfEnumFieldOption(x:EnumFieldOption,v:Ref<EnumFieldOption>)
	export function unRefEnumFieldOption(v:Ref<EnumFieldOption>):EnumFieldOption
	export function emptyListLocationReq():ListLocationReq
	export function emptyRefListLocationReq():Ref<ListLocationReq>
	export function refOfListLocationReq(x:ListLocationReq,v:Ref<ListLocationReq>)
	export function unRefListLocationReq(v:Ref<ListLocationReq>):ListLocationReq
	export function emptyPatchJobFamilyReq():PatchJobFamilyReq
	export function emptyRefPatchJobFamilyReq():Ref<PatchJobFamilyReq>
	export function refOfPatchJobFamilyReq(x:PatchJobFamilyReq,v:Ref<PatchJobFamilyReq>)
	export function unRefPatchJobFamilyReq(v:Ref<PatchJobFamilyReq>):PatchJobFamilyReq
	export function emptyPerson():Person
	export function emptyRefPerson():Ref<Person>
	export function refOfPerson(x:Person,v:Ref<Person>)
	export function unRefPerson(v:Ref<Person>):Person
	export function emptyPersonInfoMys():PersonInfoMys
	export function emptyRefPersonInfoMys():Ref<PersonInfoMys>
	export function refOfPersonInfoMys(x:PersonInfoMys,v:Ref<PersonInfoMys>)
	export function unRefPersonInfoMys(v:Ref<PersonInfoMys>):PersonInfoMys
	export function emptyDeleteJobLevelResp():DeleteJobLevelResp
	export function emptyRefDeleteJobLevelResp():Ref<DeleteJobLevelResp>
	export function refOfDeleteJobLevelResp(x:DeleteJobLevelResp,v:Ref<DeleteJobLevelResp>)
	export function unRefDeleteJobLevelResp(v:Ref<DeleteJobLevelResp>):DeleteJobLevelResp
	export function emptyQueryTransferReasonRespData():QueryTransferReasonRespData
	export function emptyRefQueryTransferReasonRespData():Ref<QueryTransferReasonRespData>
	export function refOfQueryTransferReasonRespData(x:QueryTransferReasonRespData,v:Ref<QueryTransferReasonRespData>)
	export function unRefQueryTransferReasonRespData(v:Ref<QueryTransferReasonRespData>):QueryTransferReasonRespData
	export function emptyFormFieldVariable():FormFieldVariable
	export function emptyRefFormFieldVariable():Ref<FormFieldVariable>
	export function refOfFormFieldVariable(x:FormFieldVariable,v:Ref<FormFieldVariable>)
	export function unRefFormFieldVariable(v:Ref<FormFieldVariable>):FormFieldVariable
	export function emptyFormFieldVariableRecordValue():FormFieldVariableRecordValue
	export function emptyRefFormFieldVariableRecordValue():Ref<FormFieldVariableRecordValue>
	export function refOfFormFieldVariableRecordValue(x:FormFieldVariableRecordValue,v:Ref<FormFieldVariableRecordValue>)
	export function unRefFormFieldVariableRecordValue(v:Ref<FormFieldVariableRecordValue>):FormFieldVariableRecordValue
	export function emptyGetDepartmentResp():GetDepartmentResp
	export function emptyRefGetDepartmentResp():Ref<GetDepartmentResp>
	export function refOfGetDepartmentResp(x:GetDepartmentResp,v:Ref<GetDepartmentResp>)
	export function unRefGetDepartmentResp(v:Ref<GetDepartmentResp>):GetDepartmentResp
	export function emptyListWorkingHoursTypeResp():ListWorkingHoursTypeResp
	export function emptyRefListWorkingHoursTypeResp():Ref<ListWorkingHoursTypeResp>
	export function refOfListWorkingHoursTypeResp(x:ListWorkingHoursTypeResp,v:Ref<ListWorkingHoursTypeResp>)
	export function unRefListWorkingHoursTypeResp(v:Ref<ListWorkingHoursTypeResp>):ListWorkingHoursTypeResp
	export function emptyCreateDepartmentResp():CreateDepartmentResp
	export function emptyRefCreateDepartmentResp():Ref<CreateDepartmentResp>
	export function refOfCreateDepartmentResp(x:CreateDepartmentResp,v:Ref<CreateDepartmentResp>)
	export function unRefCreateDepartmentResp(v:Ref<CreateDepartmentResp>):CreateDepartmentResp
	export function emptyListCountryRegionResp():ListCountryRegionResp
	export function emptyRefListCountryRegionResp():Ref<ListCountryRegionResp>
	export function refOfListCountryRegionResp(x:ListCountryRegionResp,v:Ref<ListCountryRegionResp>)
	export function unRefListCountryRegionResp(v:Ref<ListCountryRegionResp>):ListCountryRegionResp
	export function emptyListEmployeeTypeResp():ListEmployeeTypeResp
	export function emptyRefListEmployeeTypeResp():Ref<ListEmployeeTypeResp>
	export function refOfListEmployeeTypeResp(x:ListEmployeeTypeResp,v:Ref<ListEmployeeTypeResp>)
	export function unRefListEmployeeTypeResp(v:Ref<ListEmployeeTypeResp>):ListEmployeeTypeResp
	export function emptyPatchContractRespData():PatchContractRespData
	export function emptyRefPatchContractRespData():Ref<PatchContractRespData>
	export function refOfPatchContractRespData(x:PatchContractRespData,v:Ref<PatchContractRespData>)
	export function unRefPatchContractRespData(v:Ref<PatchContractRespData>):PatchContractRespData
	export function emptyQueryTransferTypeRespData():QueryTransferTypeRespData
	export function emptyRefQueryTransferTypeRespData():Ref<QueryTransferTypeRespData>
	export function refOfQueryTransferTypeRespData(x:QueryTransferTypeRespData,v:Ref<QueryTransferTypeRespData>)
	export function unRefQueryTransferTypeRespData(v:Ref<QueryTransferTypeRespData>):QueryTransferTypeRespData
	export function emptyFormFieldVariableBoolValue():FormFieldVariableBoolValue
	export function emptyRefFormFieldVariableBoolValue():Ref<FormFieldVariableBoolValue>
	export function refOfFormFieldVariableBoolValue(x:FormFieldVariableBoolValue,v:Ref<FormFieldVariableBoolValue>)
	export function unRefFormFieldVariableBoolValue(v:Ref<FormFieldVariableBoolValue>):FormFieldVariableBoolValue
	export function emptyGetJobLevelResp():GetJobLevelResp
	export function emptyRefGetJobLevelResp():Ref<GetJobLevelResp>
	export function refOfGetJobLevelResp(x:GetJobLevelResp,v:Ref<GetJobLevelResp>)
	export function unRefGetJobLevelResp(v:Ref<GetJobLevelResp>):GetJobLevelResp
	export function emptyListSubregionReq():ListSubregionReq
	export function emptyRefListSubregionReq():Ref<ListSubregionReq>
	export function refOfListSubregionReq(x:ListSubregionReq,v:Ref<ListSubregionReq>)
	export function unRefListSubregionReq(v:Ref<ListSubregionReq>):ListSubregionReq
	export function emptyObjectData():ObjectData
	export function emptyRefObjectData():Ref<ObjectData>
	export function refOfObjectData(x:ObjectData,v:Ref<ObjectData>)
	export function unRefObjectData(v:Ref<ObjectData>):ObjectData
	export function emptyP2ContractUpdatedV1Data():P2ContractUpdatedV1Data
	export function emptyRefP2ContractUpdatedV1Data():Ref<P2ContractUpdatedV1Data>
	export function refOfP2ContractUpdatedV1Data(x:P2ContractUpdatedV1Data,v:Ref<P2ContractUpdatedV1Data>)
	export function unRefP2ContractUpdatedV1Data(v:Ref<P2ContractUpdatedV1Data>):P2ContractUpdatedV1Data
	export function emptyP2EmploymentCreatedV1():P2EmploymentCreatedV1
	export function emptyRefP2EmploymentCreatedV1():Ref<P2EmploymentCreatedV1>
	export function refOfP2EmploymentCreatedV1(x:P2EmploymentCreatedV1,v:Ref<P2EmploymentCreatedV1>)
	export function unRefP2EmploymentCreatedV1(v:Ref<P2EmploymentCreatedV1>):P2EmploymentCreatedV1
	export function emptyGetDepartmentReq():GetDepartmentReq
	export function emptyRefGetDepartmentReq():Ref<GetDepartmentReq>
	export function refOfGetDepartmentReq(x:GetDepartmentReq,v:Ref<GetDepartmentReq>)
	export function unRefGetDepartmentReq(v:Ref<GetDepartmentReq>):GetDepartmentReq
	export function emptyListJobDataRespData():ListJobDataRespData
	export function emptyRefListJobDataRespData():Ref<ListJobDataRespData>
	export function refOfListJobDataRespData(x:ListJobDataRespData,v:Ref<ListJobDataRespData>)
	export function unRefListJobDataRespData(v:Ref<ListJobDataRespData>):ListJobDataRespData
	export function emptyPatchEmployeeTypeReq():PatchEmployeeTypeReq
	export function emptyRefPatchEmployeeTypeReq():Ref<PatchEmployeeTypeReq>
	export function refOfPatchEmployeeTypeReq(x:PatchEmployeeTypeReq,v:Ref<PatchEmployeeTypeReq>)
	export function unRefPatchEmployeeTypeReq(v:Ref<PatchEmployeeTypeReq>):PatchEmployeeTypeReq
	export function emptyPatchEmployeeTypeResp():PatchEmployeeTypeResp
	export function emptyRefPatchEmployeeTypeResp():Ref<PatchEmployeeTypeResp>
	export function refOfPatchEmployeeTypeResp(x:PatchEmployeeTypeResp,v:Ref<PatchEmployeeTypeResp>)
	export function unRefPatchEmployeeTypeResp(v:Ref<PatchEmployeeTypeResp>):PatchEmployeeTypeResp
	export function emptyCreateCompanyResp():CreateCompanyResp
	export function emptyRefCreateCompanyResp():Ref<CreateCompanyResp>
	export function refOfCreateCompanyResp(x:CreateCompanyResp,v:Ref<CreateCompanyResp>)
	export function unRefCreateCompanyResp(v:Ref<CreateCompanyResp>):CreateCompanyResp
	export function emptyJobChange():JobChange
	export function emptyRefJobChange():Ref<JobChange>
	export function refOfJobChange(x:JobChange,v:Ref<JobChange>)
	export function unRefJobChange(v:Ref<JobChange>):JobChange
	export function emptyObject():Object
	export function emptyRefObject():Ref<Object>
	export function refOfObject(x:Object,v:Ref<Object>)
	export function unRefObject(v:Ref<Object>):Object
	export function emptyListCompanyRespData():ListCompanyRespData
	export function emptyRefListCompanyRespData():Ref<ListCompanyRespData>
	export function refOfListCompanyRespData(x:ListCompanyRespData,v:Ref<ListCompanyRespData>)
	export function unRefListCompanyRespData(v:Ref<ListCompanyRespData>):ListCompanyRespData
	export function emptyCreateJobLevelResp():CreateJobLevelResp
	export function emptyRefCreateJobLevelResp():Ref<CreateJobLevelResp>
	export function refOfCreateJobLevelResp(x:CreateJobLevelResp,v:Ref<CreateJobLevelResp>)
	export function unRefCreateJobLevelResp(v:Ref<CreateJobLevelResp>):CreateJobLevelResp
	export function emptyDeleteEmploymentReq():DeleteEmploymentReq
	export function emptyRefDeleteEmploymentReq():Ref<DeleteEmploymentReq>
	export function refOfDeleteEmploymentReq(x:DeleteEmploymentReq,v:Ref<DeleteEmploymentReq>)
	export function unRefDeleteEmploymentReq(v:Ref<DeleteEmploymentReq>):DeleteEmploymentReq
	export function emptyDeleteJobResp():DeleteJobResp
	export function emptyRefDeleteJobResp():Ref<DeleteJobResp>
	export function refOfDeleteJobResp(x:DeleteJobResp,v:Ref<DeleteJobResp>)
	export function unRefDeleteJobResp(v:Ref<DeleteJobResp>):DeleteJobResp
	export function emptyGetFileResp():GetFileResp
	export function emptyRefGetFileResp():Ref<GetFileResp>
	export function refOfGetFileResp(x:GetFileResp,v:Ref<GetFileResp>)
	export function unRefGetFileResp(v:Ref<GetFileResp>):GetFileResp
	export function emptyGetSubregionReq():GetSubregionReq
	export function emptyRefGetSubregionReq():Ref<GetSubregionReq>
	export function refOfGetSubregionReq(x:GetSubregionReq,v:Ref<GetSubregionReq>)
	export function unRefGetSubregionReq(v:Ref<GetSubregionReq>):GetSubregionReq
	export function emptyLeaveBalancesLeaveReq():LeaveBalancesLeaveReq
	export function emptyRefLeaveBalancesLeaveReq():Ref<LeaveBalancesLeaveReq>
	export function refOfLeaveBalancesLeaveReq(x:LeaveBalancesLeaveReq,v:Ref<LeaveBalancesLeaveReq>)
	export function unRefLeaveBalancesLeaveReq(v:Ref<LeaveBalancesLeaveReq>):LeaveBalancesLeaveReq
	export function emptyListDepartmentRespData():ListDepartmentRespData
	export function emptyRefListDepartmentRespData():Ref<ListDepartmentRespData>
	export function refOfListDepartmentRespData(x:ListDepartmentRespData,v:Ref<ListDepartmentRespData>)
	export function unRefListDepartmentRespData(v:Ref<ListDepartmentRespData>):ListDepartmentRespData
	export function emptyP2JobDataEmployedV1Data():P2JobDataEmployedV1Data
	export function emptyRefP2JobDataEmployedV1Data():Ref<P2JobDataEmployedV1Data>
	export function refOfP2JobDataEmployedV1Data(x:P2JobDataEmployedV1Data,v:Ref<P2JobDataEmployedV1Data>)
	export function unRefP2JobDataEmployedV1Data(v:Ref<P2JobDataEmployedV1Data>):P2JobDataEmployedV1Data
	export function emptyPatchCompanyReq():PatchCompanyReq
	export function emptyRefPatchCompanyReq():Ref<PatchCompanyReq>
	export function refOfPatchCompanyReq(x:PatchCompanyReq,v:Ref<PatchCompanyReq>)
	export function unRefPatchCompanyReq(v:Ref<PatchCompanyReq>):PatchCompanyReq
	export function emptyPatchWorkingHoursTypeRespData():PatchWorkingHoursTypeRespData
	export function emptyRefPatchWorkingHoursTypeRespData():Ref<PatchWorkingHoursTypeRespData>
	export function refOfPatchWorkingHoursTypeRespData(x:PatchWorkingHoursTypeRespData,v:Ref<PatchWorkingHoursTypeRespData>)
	export function unRefPatchWorkingHoursTypeRespData(v:Ref<PatchWorkingHoursTypeRespData>):PatchWorkingHoursTypeRespData
	export function emptyEmploymentCostCenter():EmploymentCostCenter
	export function emptyRefEmploymentCostCenter():Ref<EmploymentCostCenter>
	export function refOfEmploymentCostCenter(x:EmploymentCostCenter,v:Ref<EmploymentCostCenter>)
	export function unRefEmploymentCostCenter(v:Ref<EmploymentCostCenter>):EmploymentCostCenter
	export function emptyOffboardingData():OffboardingData
	export function emptyRefOffboardingData():Ref<OffboardingData>
	export function refOfOffboardingData(x:OffboardingData,v:Ref<OffboardingData>)
	export function unRefOffboardingData(v:Ref<OffboardingData>):OffboardingData
	export function emptyP2EmploymentUpdatedV1():P2EmploymentUpdatedV1
	export function emptyRefP2EmploymentUpdatedV1():Ref<P2EmploymentUpdatedV1>
	export function refOfP2EmploymentUpdatedV1(x:P2EmploymentUpdatedV1,v:Ref<P2EmploymentUpdatedV1>)
	export function unRefP2EmploymentUpdatedV1(v:Ref<P2EmploymentUpdatedV1>):P2EmploymentUpdatedV1
	export function emptyP2PreHireUpdatedV1():P2PreHireUpdatedV1
	export function emptyRefP2PreHireUpdatedV1():Ref<P2PreHireUpdatedV1>
	export function refOfP2PreHireUpdatedV1(x:P2PreHireUpdatedV1,v:Ref<P2PreHireUpdatedV1>)
	export function unRefP2PreHireUpdatedV1(v:Ref<P2PreHireUpdatedV1>):P2PreHireUpdatedV1
	export function emptyFilterRuleValue():FilterRuleValue
	export function emptyRefFilterRuleValue():Ref<FilterRuleValue>
	export function refOfFilterRuleValue(x:FilterRuleValue,v:Ref<FilterRuleValue>)
	export function unRefFilterRuleValue(v:Ref<FilterRuleValue>):FilterRuleValue
	export function emptyPersonInfoChn():PersonInfoChn
	export function emptyRefPersonInfoChn():Ref<PersonInfoChn>
	export function refOfPersonInfoChn(x:PersonInfoChn,v:Ref<PersonInfoChn>)
	export function unRefPersonInfoChn(v:Ref<PersonInfoChn>):PersonInfoChn
	export function emptyP2DepartmentDeletedV1Data():P2DepartmentDeletedV1Data
	export function emptyRefP2DepartmentDeletedV1Data():Ref<P2DepartmentDeletedV1Data>
	export function refOfP2DepartmentDeletedV1Data(x:P2DepartmentDeletedV1Data,v:Ref<P2DepartmentDeletedV1Data>)
	export function unRefP2DepartmentDeletedV1Data(v:Ref<P2DepartmentDeletedV1Data>):P2DepartmentDeletedV1Data
	export function emptyBpmDataengineI18n():BpmDataengineI18n
	export function emptyRefBpmDataengineI18n():Ref<BpmDataengineI18n>
	export function refOfBpmDataengineI18n(x:BpmDataengineI18n,v:Ref<BpmDataengineI18n>)
	export function unRefBpmDataengineI18n(v:Ref<BpmDataengineI18n>):BpmDataengineI18n
	export function emptyCpstGradeStandardValue():CpstGradeStandardValue
	export function emptyRefCpstGradeStandardValue():Ref<CpstGradeStandardValue>
	export function refOfCpstGradeStandardValue(x:CpstGradeStandardValue,v:Ref<CpstGradeStandardValue>)
	export function unRefCpstGradeStandardValue(v:Ref<CpstGradeStandardValue>):CpstGradeStandardValue
	export function emptyDeleteContractResp():DeleteContractResp
	export function emptyRefDeleteContractResp():Ref<DeleteContractResp>
	export function refOfDeleteContractResp(x:DeleteContractResp,v:Ref<DeleteContractResp>)
	export function unRefDeleteContractResp(v:Ref<DeleteContractResp>):DeleteContractResp
	export function emptyEnumFieldSetting():EnumFieldSetting
	export function emptyRefEnumFieldSetting():Ref<EnumFieldSetting>
	export function refOfEnumFieldSetting(x:EnumFieldSetting,v:Ref<EnumFieldSetting>)
	export function unRefEnumFieldSetting(v:Ref<EnumFieldSetting>):EnumFieldSetting
	export function emptyGetByParamCustomFieldReq():GetByParamCustomFieldReq
	export function emptyRefGetByParamCustomFieldReq():Ref<GetByParamCustomFieldReq>
	export function refOfGetByParamCustomFieldReq(x:GetByParamCustomFieldReq,v:Ref<GetByParamCustomFieldReq>)
	export function unRefGetByParamCustomFieldReq(v:Ref<GetByParamCustomFieldReq>):GetByParamCustomFieldReq
	export function emptyBankAccount():BankAccount
	export function emptyRefBankAccount():Ref<BankAccount>
	export function refOfBankAccount(x:BankAccount,v:Ref<BankAccount>)
	export function unRefBankAccount(v:Ref<BankAccount>):BankAccount
	export function emptyCustomName():CustomName
	export function emptyRefCustomName():Ref<CustomName>
	export function refOfCustomName(x:CustomName,v:Ref<CustomName>)
	export function unRefCustomName(v:Ref<CustomName>):CustomName
	export function emptyQueryOffboardingReq():QueryOffboardingReq
	export function emptyRefQueryOffboardingReq():Ref<QueryOffboardingReq>
	export function refOfQueryOffboardingReq(x:QueryOffboardingReq,v:Ref<QueryOffboardingReq>)
	export function unRefQueryOffboardingReq(v:Ref<QueryOffboardingReq>):QueryOffboardingReq
	export function emptyGetPreHireRespData():GetPreHireRespData
	export function emptyRefGetPreHireRespData():Ref<GetPreHireRespData>
	export function refOfGetPreHireRespData(x:GetPreHireRespData,v:Ref<GetPreHireRespData>)
	export function unRefGetPreHireRespData(v:Ref<GetPreHireRespData>):GetPreHireRespData
	export function emptySupportCostCenterItem():SupportCostCenterItem
	export function emptyRefSupportCostCenterItem():Ref<SupportCostCenterItem>
	export function refOfSupportCostCenterItem(x:SupportCostCenterItem,v:Ref<SupportCostCenterItem>)
	export function unRefSupportCostCenterItem(v:Ref<SupportCostCenterItem>):SupportCostCenterItem
	export function emptyTextFieldSetting():TextFieldSetting
	export function emptyRefTextFieldSetting():Ref<TextFieldSetting>
	export function refOfTextFieldSetting(x:TextFieldSetting,v:Ref<TextFieldSetting>)
	export function unRefTextFieldSetting(v:Ref<TextFieldSetting>):TextFieldSetting
	export function emptyPatchContractResp():PatchContractResp
	export function emptyRefPatchContractResp():Ref<PatchContractResp>
	export function refOfPatchContractResp(x:PatchContractResp,v:Ref<PatchContractResp>)
	export function unRefPatchContractResp(v:Ref<PatchContractResp>):PatchContractResp
	export function emptyDeleteJobFamilyResp():DeleteJobFamilyResp
	export function emptyRefDeleteJobFamilyResp():Ref<DeleteJobFamilyResp>
	export function refOfDeleteJobFamilyResp(x:DeleteJobFamilyResp,v:Ref<DeleteJobFamilyResp>)
	export function unRefDeleteJobFamilyResp(v:Ref<DeleteJobFamilyResp>):DeleteJobFamilyResp
	export function emptyDepartment():Department
	export function emptyRefDepartment():Ref<Department>
	export function refOfDepartment(x:Department,v:Ref<Department>)
	export function unRefDepartment(v:Ref<Department>):Department
	export function emptyGetCountryRegionRespData():GetCountryRegionRespData
	export function emptyRefGetCountryRegionRespData():Ref<GetCountryRegionRespData>
	export function refOfGetCountryRegionRespData(x:GetCountryRegionRespData,v:Ref<GetCountryRegionRespData>)
	export function unRefGetCountryRegionRespData(v:Ref<GetCountryRegionRespData>):GetCountryRegionRespData
	export function emptyGetEmployeeTypeReq():GetEmployeeTypeReq
	export function emptyRefGetEmployeeTypeReq():Ref<GetEmployeeTypeReq>
	export function refOfGetEmployeeTypeReq(x:GetEmployeeTypeReq,v:Ref<GetEmployeeTypeReq>)
	export function unRefGetEmployeeTypeReq(v:Ref<GetEmployeeTypeReq>):GetEmployeeTypeReq
	export function emptyListWorkingHoursTypeRespData():ListWorkingHoursTypeRespData
	export function emptyRefListWorkingHoursTypeRespData():Ref<ListWorkingHoursTypeRespData>
	export function refOfListWorkingHoursTypeRespData(x:ListWorkingHoursTypeRespData,v:Ref<ListWorkingHoursTypeRespData>)
	export function unRefListWorkingHoursTypeRespData(v:Ref<ListWorkingHoursTypeRespData>):ListWorkingHoursTypeRespData
	export function emptySearchAssignedUserReqBody():SearchAssignedUserReqBody
	export function emptyRefSearchAssignedUserReqBody():Ref<SearchAssignedUserReqBody>
	export function refOfSearchAssignedUserReqBody(x:SearchAssignedUserReqBody,v:Ref<SearchAssignedUserReqBody>)
	export function unRefSearchAssignedUserReqBody(v:Ref<SearchAssignedUserReqBody>):SearchAssignedUserReqBody
	export function emptyCreateCompanyReq():CreateCompanyReq
	export function emptyRefCreateCompanyReq():Ref<CreateCompanyReq>
	export function refOfCreateCompanyReq(x:CreateCompanyReq,v:Ref<CreateCompanyReq>)
	export function unRefCreateCompanyReq(v:Ref<CreateCompanyReq>):CreateCompanyReq
	export function emptyCustomFieldData():CustomFieldData
	export function emptyRefCustomFieldData():Ref<CustomFieldData>
	export function refOfCustomFieldData(x:CustomFieldData,v:Ref<CustomFieldData>)
	export function unRefCustomFieldData(v:Ref<CustomFieldData>):CustomFieldData
	export function emptyGetWorkingHoursTypeRespData():GetWorkingHoursTypeRespData
	export function emptyRefGetWorkingHoursTypeRespData():Ref<GetWorkingHoursTypeRespData>
	export function refOfGetWorkingHoursTypeRespData(x:GetWorkingHoursTypeRespData,v:Ref<GetWorkingHoursTypeRespData>)
	export function unRefGetWorkingHoursTypeRespData(v:Ref<GetWorkingHoursTypeRespData>):GetWorkingHoursTypeRespData
	export function emptyListObjectApiNameCustomFieldResp():ListObjectApiNameCustomFieldResp
	export function emptyRefListObjectApiNameCustomFieldResp():Ref<ListObjectApiNameCustomFieldResp>
	export function refOfListObjectApiNameCustomFieldResp(x:ListObjectApiNameCustomFieldResp,v:Ref<ListObjectApiNameCustomFieldResp>)
	export function unRefListObjectApiNameCustomFieldResp(v:Ref<ListObjectApiNameCustomFieldResp>):ListObjectApiNameCustomFieldResp
	export function emptyCreateJobReq():CreateJobReq
	export function emptyRefCreateJobReq():Ref<CreateJobReq>
	export function refOfCreateJobReq(x:CreateJobReq,v:Ref<CreateJobReq>)
	export function unRefCreateJobReq(v:Ref<CreateJobReq>):CreateJobReq
	export function emptyCreateContractResp():CreateContractResp
	export function emptyRefCreateContractResp():Ref<CreateContractResp>
	export function refOfCreateContractResp(x:CreateContractResp,v:Ref<CreateContractResp>)
	export function unRefCreateContractResp(v:Ref<CreateContractResp>):CreateContractResp
	export function emptyDeleteCompanyResp():DeleteCompanyResp
	export function emptyRefDeleteCompanyResp():Ref<DeleteCompanyResp>
	export function refOfDeleteCompanyResp(x:DeleteCompanyResp,v:Ref<DeleteCompanyResp>)
	export function unRefDeleteCompanyResp(v:Ref<DeleteCompanyResp>):DeleteCompanyResp
	export function emptyLeaveBalancesLeaveRespData():LeaveBalancesLeaveRespData
	export function emptyRefLeaveBalancesLeaveRespData():Ref<LeaveBalancesLeaveRespData>
	export function refOfLeaveBalancesLeaveRespData(x:LeaveBalancesLeaveRespData,v:Ref<LeaveBalancesLeaveRespData>)
	export function unRefLeaveBalancesLeaveRespData(v:Ref<LeaveBalancesLeaveRespData>):LeaveBalancesLeaveRespData
	export function emptyWorkCalendarFilter():WorkCalendarFilter
	export function emptyRefWorkCalendarFilter():Ref<WorkCalendarFilter>
	export function refOfWorkCalendarFilter(x:WorkCalendarFilter,v:Ref<WorkCalendarFilter>)
	export function unRefWorkCalendarFilter(v:Ref<WorkCalendarFilter>):WorkCalendarFilter
	export function emptyDeleteWorkingHoursTypeReq():DeleteWorkingHoursTypeReq
	export function emptyRefDeleteWorkingHoursTypeReq():Ref<DeleteWorkingHoursTypeReq>
	export function refOfDeleteWorkingHoursTypeReq(x:DeleteWorkingHoursTypeReq,v:Ref<DeleteWorkingHoursTypeReq>)
	export function unRefDeleteWorkingHoursTypeReq(v:Ref<DeleteWorkingHoursTypeReq>):DeleteWorkingHoursTypeReq
	export function emptyGetByParamCustomFieldResp():GetByParamCustomFieldResp
	export function emptyRefGetByParamCustomFieldResp():Ref<GetByParamCustomFieldResp>
	export function refOfGetByParamCustomFieldResp(x:GetByParamCustomFieldResp,v:Ref<GetByParamCustomFieldResp>)
	export function unRefGetByParamCustomFieldResp(v:Ref<GetByParamCustomFieldResp>):GetByParamCustomFieldResp
	export function emptyListEmployeeTypeReq():ListEmployeeTypeReq
	export function emptyRefListEmployeeTypeReq():Ref<ListEmployeeTypeReq>
	export function refOfListEmployeeTypeReq(x:ListEmployeeTypeReq,v:Ref<ListEmployeeTypeReq>)
	export function unRefListEmployeeTypeReq(v:Ref<ListEmployeeTypeReq>):ListEmployeeTypeReq
	export function emptyNationalIdType():NationalIdType
	export function emptyRefNationalIdType():Ref<NationalIdType>
	export function refOfNationalIdType(x:NationalIdType,v:Ref<NationalIdType>)
	export function unRefNationalIdType(v:Ref<NationalIdType>):NationalIdType
	export function emptyP2JobDataEmployedV1():P2JobDataEmployedV1
	export function emptyRefP2JobDataEmployedV1():Ref<P2JobDataEmployedV1>
	export function refOfP2JobDataEmployedV1(x:P2JobDataEmployedV1,v:Ref<P2JobDataEmployedV1>)
	export function unRefP2JobDataEmployedV1(v:Ref<P2JobDataEmployedV1>):P2JobDataEmployedV1
	export function emptyGetSubregionResp():GetSubregionResp
	export function emptyRefGetSubregionResp():Ref<GetSubregionResp>
	export function refOfGetSubregionResp(x:GetSubregionResp,v:Ref<GetSubregionResp>)
	export function unRefGetSubregionResp(v:Ref<GetSubregionResp>):GetSubregionResp
	export function emptyListContractRespData():ListContractRespData
	export function emptyRefListContractRespData():Ref<ListContractRespData>
	export function refOfListContractRespData(x:ListContractRespData,v:Ref<ListContractRespData>)
	export function unRefListContractRespData(v:Ref<ListContractRespData>):ListContractRespData
	export function emptyP2ContractDeletedV1():P2ContractDeletedV1
	export function emptyRefP2ContractDeletedV1():Ref<P2ContractDeletedV1>
	export function refOfP2ContractDeletedV1(x:P2ContractDeletedV1,v:Ref<P2ContractDeletedV1>)
	export function unRefP2ContractDeletedV1(v:Ref<P2ContractDeletedV1>):P2ContractDeletedV1
	export function emptyRoleAuthorization():RoleAuthorization
	export function emptyRefRoleAuthorization():Ref<RoleAuthorization>
	export function refOfRoleAuthorization(x:RoleAuthorization,v:Ref<RoleAuthorization>)
	export function unRefRoleAuthorization(v:Ref<RoleAuthorization>):RoleAuthorization
	export function emptyGetByParamCustomFieldRespData():GetByParamCustomFieldRespData
	export function emptyRefGetByParamCustomFieldRespData():Ref<GetByParamCustomFieldRespData>
	export function refOfGetByParamCustomFieldRespData(x:GetByParamCustomFieldRespData,v:Ref<GetByParamCustomFieldRespData>)
	export function unRefGetByParamCustomFieldRespData(v:Ref<GetByParamCustomFieldRespData>):GetByParamCustomFieldRespData
	export function emptyGetPreHireReq():GetPreHireReq
	export function emptyRefGetPreHireReq():Ref<GetPreHireReq>
	export function refOfGetPreHireReq(x:GetPreHireReq,v:Ref<GetPreHireReq>)
	export function unRefGetPreHireReq(v:Ref<GetPreHireReq>):GetPreHireReq
	export function emptyManageRelation():ManageRelation
	export function emptyRefManageRelation():Ref<ManageRelation>
	export function refOfManageRelation(x:ManageRelation,v:Ref<ManageRelation>)
	export function unRefManageRelation(v:Ref<ManageRelation>):ManageRelation
	export function emptyP2EmploymentResignedV1Data():P2EmploymentResignedV1Data
	export function emptyRefP2EmploymentResignedV1Data():Ref<P2EmploymentResignedV1Data>
	export function refOfP2EmploymentResignedV1Data(x:P2EmploymentResignedV1Data,v:Ref<P2EmploymentResignedV1Data>)
	export function unRefP2EmploymentResignedV1Data(v:Ref<P2EmploymentResignedV1Data>):P2EmploymentResignedV1Data
	export function emptyEmployeeType():EmployeeType
	export function emptyRefEmployeeType():Ref<EmployeeType>
	export function refOfEmployeeType(x:EmployeeType,v:Ref<EmployeeType>)
	export function unRefEmployeeType(v:Ref<EmployeeType>):EmployeeType
	export function emptyListCompanyReq():ListCompanyReq
	export function emptyRefListCompanyReq():Ref<ListCompanyReq>
	export function refOfListCompanyReq(x:ListCompanyReq,v:Ref<ListCompanyReq>)
	export function unRefListCompanyReq(v:Ref<ListCompanyReq>):ListCompanyReq
	export function emptyListSubdivisionReq():ListSubdivisionReq
	export function emptyRefListSubdivisionReq():Ref<ListSubdivisionReq>
	export function refOfListSubdivisionReq(x:ListSubdivisionReq,v:Ref<ListSubdivisionReq>)
	export function unRefListSubdivisionReq(v:Ref<ListSubdivisionReq>):ListSubdivisionReq
	export function emptyPatchDepartmentReq():PatchDepartmentReq
	export function emptyRefPatchDepartmentReq():Ref<PatchDepartmentReq>
	export function refOfPatchDepartmentReq(x:PatchDepartmentReq,v:Ref<PatchDepartmentReq>)
	export function unRefPatchDepartmentReq(v:Ref<PatchDepartmentReq>):PatchDepartmentReq
	export function emptyCpstI18n():CpstI18n
	export function emptyRefCpstI18n():Ref<CpstI18n>
	export function refOfCpstI18n(x:CpstI18n,v:Ref<CpstI18n>)
	export function unRefCpstI18n(v:Ref<CpstI18n>):CpstI18n
	export function emptyCreateLocationRespData():CreateLocationRespData
	export function emptyRefCreateLocationRespData():Ref<CreateLocationRespData>
	export function refOfCreateLocationRespData(x:CreateLocationRespData,v:Ref<CreateLocationRespData>)
	export function unRefCreateLocationRespData(v:Ref<CreateLocationRespData>):CreateLocationRespData
	export function emptyFormFieldVariableI18nValue():FormFieldVariableI18nValue
	export function emptyRefFormFieldVariableI18nValue():Ref<FormFieldVariableI18nValue>
	export function refOfFormFieldVariableI18nValue(x:FormFieldVariableI18nValue,v:Ref<FormFieldVariableI18nValue>)
	export function unRefFormFieldVariableI18nValue(v:Ref<FormFieldVariableI18nValue>):FormFieldVariableI18nValue
	export function emptyLeaveTypesLeaveRespData():LeaveTypesLeaveRespData
	export function emptyRefLeaveTypesLeaveRespData():Ref<LeaveTypesLeaveRespData>
	export function refOfLeaveTypesLeaveRespData(x:LeaveTypesLeaveRespData,v:Ref<LeaveTypesLeaveRespData>)
	export function unRefLeaveTypesLeaveRespData(v:Ref<LeaveTypesLeaveRespData>):LeaveTypesLeaveRespData
	export function emptyPhone():Phone
	export function emptyRefPhone():Ref<Phone>
	export function refOfPhone(x:Phone,v:Ref<Phone>)
	export function unRefPhone(v:Ref<Phone>):Phone
	export function emptySearchOffboardingReq():SearchOffboardingReq
	export function emptyRefSearchOffboardingReq():Ref<SearchOffboardingReq>
	export function refOfSearchOffboardingReq(x:SearchOffboardingReq,v:Ref<SearchOffboardingReq>)
	export function unRefSearchOffboardingReq(v:Ref<SearchOffboardingReq>):SearchOffboardingReq
	export function emptyFormVariableData():FormVariableData
	export function emptyRefFormVariableData():Ref<FormVariableData>
	export function refOfFormVariableData(x:FormVariableData,v:Ref<FormVariableData>)
	export function unRefFormVariableData(v:Ref<FormVariableData>):FormVariableData
	export function emptyListDepartmentReq():ListDepartmentReq
	export function emptyRefListDepartmentReq():Ref<ListDepartmentReq>
	export function refOfListDepartmentReq(x:ListDepartmentReq,v:Ref<ListDepartmentReq>)
	export function unRefListDepartmentReq(v:Ref<ListDepartmentReq>):ListDepartmentReq
	export function emptyPatchJobReq():PatchJobReq
	export function emptyRefPatchJobReq():Ref<PatchJobReq>
	export function refOfPatchJobReq(x:PatchJobReq,v:Ref<PatchJobReq>)
	export function unRefPatchJobReq(v:Ref<PatchJobReq>):PatchJobReq
	export function emptyBackgroundCheckCountry():BackgroundCheckCountry
	export function emptyRefBackgroundCheckCountry():Ref<BackgroundCheckCountry>
	export function refOfBackgroundCheckCountry(x:BackgroundCheckCountry,v:Ref<BackgroundCheckCountry>)
	export function unRefBackgroundCheckCountry(v:Ref<BackgroundCheckCountry>):BackgroundCheckCountry
	export function emptyHiberarchyCommon():HiberarchyCommon
	export function emptyRefHiberarchyCommon():Ref<HiberarchyCommon>
	export function refOfHiberarchyCommon(x:HiberarchyCommon,v:Ref<HiberarchyCommon>)
	export function unRefHiberarchyCommon(v:Ref<HiberarchyCommon>):HiberarchyCommon
	export function emptyListNationalIdTypeRespData():ListNationalIdTypeRespData
	export function emptyRefListNationalIdTypeRespData():Ref<ListNationalIdTypeRespData>
	export function refOfListNationalIdTypeRespData(x:ListNationalIdTypeRespData,v:Ref<ListNationalIdTypeRespData>)
	export function unRefListNationalIdTypeRespData(v:Ref<ListNationalIdTypeRespData>):ListNationalIdTypeRespData
	export function emptyP2PersonDeletedV1():P2PersonDeletedV1
	export function emptyRefP2PersonDeletedV1():Ref<P2PersonDeletedV1>
	export function refOfP2PersonDeletedV1(x:P2PersonDeletedV1,v:Ref<P2PersonDeletedV1>)
	export function unRefP2PersonDeletedV1(v:Ref<P2PersonDeletedV1>):P2PersonDeletedV1
	export function emptyQuerySecurityGroupResp():QuerySecurityGroupResp
	export function emptyRefQuerySecurityGroupResp():Ref<QuerySecurityGroupResp>
	export function refOfQuerySecurityGroupResp(x:QuerySecurityGroupResp,v:Ref<QuerySecurityGroupResp>)
	export function unRefQuerySecurityGroupResp(v:Ref<QuerySecurityGroupResp>):QuerySecurityGroupResp
	export function emptyQuerySecurityGroupReqBody():QuerySecurityGroupReqBody
	export function emptyRefQuerySecurityGroupReqBody():Ref<QuerySecurityGroupReqBody>
	export function refOfQuerySecurityGroupReqBody(x:QuerySecurityGroupReqBody,v:Ref<QuerySecurityGroupReqBody>)
	export function unRefQuerySecurityGroupReqBody(v:Ref<QuerySecurityGroupReqBody>):QuerySecurityGroupReqBody
	export function emptyGetPersonResp():GetPersonResp
	export function emptyRefGetPersonResp():Ref<GetPersonResp>
	export function refOfGetPersonResp(x:GetPersonResp,v:Ref<GetPersonResp>)
	export function unRefGetPersonResp(v:Ref<GetPersonResp>):GetPersonResp
	export function emptyListSubdivisionResp():ListSubdivisionResp
	export function emptyRefListSubdivisionResp():Ref<ListSubdivisionResp>
	export function refOfListSubdivisionResp(x:ListSubdivisionResp,v:Ref<ListSubdivisionResp>)
	export function unRefListSubdivisionResp(v:Ref<ListSubdivisionResp>):ListSubdivisionResp
	export function emptyPatchPreHireRespData():PatchPreHireRespData
	export function emptyRefPatchPreHireRespData():Ref<PatchPreHireRespData>
	export function refOfPatchPreHireRespData(x:PatchPreHireRespData,v:Ref<PatchPreHireRespData>)
	export function unRefPatchPreHireRespData(v:Ref<PatchPreHireRespData>):PatchPreHireRespData
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyCreateLeaveGrantingRecordResp():CreateLeaveGrantingRecordResp
	export function emptyRefCreateLeaveGrantingRecordResp():Ref<CreateLeaveGrantingRecordResp>
	export function refOfCreateLeaveGrantingRecordResp(x:CreateLeaveGrantingRecordResp,v:Ref<CreateLeaveGrantingRecordResp>)
	export function unRefCreateLeaveGrantingRecordResp(v:Ref<CreateLeaveGrantingRecordResp>):CreateLeaveGrantingRecordResp
	export function emptyUploadPersonReqBody():UploadPersonReqBody
	export function emptyRefUploadPersonReqBody():Ref<UploadPersonReqBody>
	export function refOfUploadPersonReqBody(x:UploadPersonReqBody,v:Ref<UploadPersonReqBody>)
	export function unRefUploadPersonReqBody(v:Ref<UploadPersonReqBody>):UploadPersonReqBody
	export function emptyCreateDepartmentReq():CreateDepartmentReq
	export function emptyRefCreateDepartmentReq():Ref<CreateDepartmentReq>
	export function refOfCreateDepartmentReq(x:CreateDepartmentReq,v:Ref<CreateDepartmentReq>)
	export function unRefCreateDepartmentReq(v:Ref<CreateDepartmentReq>):CreateDepartmentReq
	export function emptyDeleteNationalIdTypeResp():DeleteNationalIdTypeResp
	export function emptyRefDeleteNationalIdTypeResp():Ref<DeleteNationalIdTypeResp>
	export function refOfDeleteNationalIdTypeResp(x:DeleteNationalIdTypeResp,v:Ref<DeleteNationalIdTypeResp>)
	export function unRefDeleteNationalIdTypeResp(v:Ref<DeleteNationalIdTypeResp>):DeleteNationalIdTypeResp
	export function emptyListCountryRegionReq():ListCountryRegionReq
	export function emptyRefListCountryRegionReq():Ref<ListCountryRegionReq>
	export function refOfListCountryRegionReq(x:ListCountryRegionReq,v:Ref<ListCountryRegionReq>)
	export function unRefListCountryRegionReq(v:Ref<ListCountryRegionReq>):ListCountryRegionReq
	export function emptyOrgTruncation():OrgTruncation
	export function emptyRefOrgTruncation():Ref<OrgTruncation>
	export function refOfOrgTruncation(x:OrgTruncation,v:Ref<OrgTruncation>)
	export function unRefOrgTruncation(v:Ref<OrgTruncation>):OrgTruncation
	export function emptyQueryTransferTypeReq():QueryTransferTypeReq
	export function emptyRefQueryTransferTypeReq():Ref<QueryTransferTypeReq>
	export function refOfQueryTransferTypeReq(x:QueryTransferTypeReq,v:Ref<QueryTransferTypeReq>)
	export function unRefQueryTransferTypeReq(v:Ref<QueryTransferTypeReq>):QueryTransferTypeReq
	export function emptySubmitOffboardingReq():SubmitOffboardingReq
	export function emptyRefSubmitOffboardingReq():Ref<SubmitOffboardingReq>
	export function refOfSubmitOffboardingReq(x:SubmitOffboardingReq,v:Ref<SubmitOffboardingReq>)
	export function unRefSubmitOffboardingReq(v:Ref<SubmitOffboardingReq>):SubmitOffboardingReq
	export function emptyCreateNationalIdTypeRespData():CreateNationalIdTypeRespData
	export function emptyRefCreateNationalIdTypeRespData():Ref<CreateNationalIdTypeRespData>
	export function refOfCreateNationalIdTypeRespData(x:CreateNationalIdTypeRespData,v:Ref<CreateNationalIdTypeRespData>)
	export function unRefCreateNationalIdTypeRespData(v:Ref<CreateNationalIdTypeRespData>):CreateNationalIdTypeRespData
	export function emptyFormFieldVariableDatetimeValue():FormFieldVariableDatetimeValue
	export function emptyRefFormFieldVariableDatetimeValue():Ref<FormFieldVariableDatetimeValue>
	export function refOfFormFieldVariableDatetimeValue(x:FormFieldVariableDatetimeValue,v:Ref<FormFieldVariableDatetimeValue>)
	export function unRefFormFieldVariableDatetimeValue(v:Ref<FormFieldVariableDatetimeValue>):FormFieldVariableDatetimeValue
	export function emptyPatchJobLevelResp():PatchJobLevelResp
	export function emptyRefPatchJobLevelResp():Ref<PatchJobLevelResp>
	export function refOfPatchJobLevelResp(x:PatchJobLevelResp,v:Ref<PatchJobLevelResp>)
	export function unRefPatchJobLevelResp(v:Ref<PatchJobLevelResp>):PatchJobLevelResp
	export function emptyTemp():Temp
	export function emptyRefTemp():Ref<Temp>
	export function refOfTemp(x:Temp,v:Ref<Temp>)
	export function unRefTemp(v:Ref<Temp>):Temp
	export function emptyListPreHireReq():ListPreHireReq
	export function emptyRefListPreHireReq():Ref<ListPreHireReq>
	export function refOfListPreHireReq(x:ListPreHireReq,v:Ref<ListPreHireReq>)
	export function unRefListPreHireReq(v:Ref<ListPreHireReq>):ListPreHireReq
	export function emptySearchOffboardingReqBody():SearchOffboardingReqBody
	export function emptyRefSearchOffboardingReqBody():Ref<SearchOffboardingReqBody>
	export function refOfSearchOffboardingReqBody(x:SearchOffboardingReqBody,v:Ref<SearchOffboardingReqBody>)
	export function unRefSearchOffboardingReqBody(v:Ref<SearchOffboardingReqBody>):SearchOffboardingReqBody
	export function emptyAssignedOrganizationWithCode():AssignedOrganizationWithCode
	export function emptyRefAssignedOrganizationWithCode():Ref<AssignedOrganizationWithCode>
	export function refOfAssignedOrganizationWithCode(x:AssignedOrganizationWithCode,v:Ref<AssignedOrganizationWithCode>)
	export function unRefAssignedOrganizationWithCode(v:Ref<AssignedOrganizationWithCode>):AssignedOrganizationWithCode
	export function emptyHrbp():Hrbp
	export function emptyRefHrbp():Ref<Hrbp>
	export function refOfHrbp(x:Hrbp,v:Ref<Hrbp>)
	export function unRefHrbp(v:Ref<Hrbp>):Hrbp
	export function emptyListWorkingHoursTypeReq():ListWorkingHoursTypeReq
	export function emptyRefListWorkingHoursTypeReq():Ref<ListWorkingHoursTypeReq>
	export function refOfListWorkingHoursTypeReq(x:ListWorkingHoursTypeReq,v:Ref<ListWorkingHoursTypeReq>)
	export function unRefListWorkingHoursTypeReq(v:Ref<ListWorkingHoursTypeReq>):ListWorkingHoursTypeReq
	export function emptyJob():Job
	export function emptyRefJob():Ref<Job>
	export function refOfJob(x:Job,v:Ref<Job>)
	export function unRefJob(v:Ref<Job>):Job
	export function emptyListJobRespData():ListJobRespData
	export function emptyRefListJobRespData():Ref<ListJobRespData>
	export function refOfListJobRespData(x:ListJobRespData,v:Ref<ListJobRespData>)
	export function unRefListJobRespData(v:Ref<ListJobRespData>):ListJobRespData
	export function emptyLocation():Location
	export function emptyRefLocation():Ref<Location>
	export function refOfLocation(x:Location,v:Ref<Location>)
	export function unRefLocation(v:Ref<Location>):Location
	export function emptyP2EmploymentUpdatedV1Data():P2EmploymentUpdatedV1Data
	export function emptyRefP2EmploymentUpdatedV1Data():Ref<P2EmploymentUpdatedV1Data>
	export function refOfP2EmploymentUpdatedV1Data(x:P2EmploymentUpdatedV1Data,v:Ref<P2EmploymentUpdatedV1Data>)
	export function unRefP2EmploymentUpdatedV1Data(v:Ref<P2EmploymentUpdatedV1Data>):P2EmploymentUpdatedV1Data
	export function emptyPersonalProfile():PersonalProfile
	export function emptyRefPersonalProfile():Ref<PersonalProfile>
	export function refOfPersonalProfile(x:PersonalProfile,v:Ref<PersonalProfile>)
	export function unRefPersonalProfile(v:Ref<PersonalProfile>):PersonalProfile
	export function emptyConvertCommonDataIdResp():ConvertCommonDataIdResp
	export function emptyRefConvertCommonDataIdResp():Ref<ConvertCommonDataIdResp>
	export function refOfConvertCommonDataIdResp(x:ConvertCommonDataIdResp,v:Ref<ConvertCommonDataIdResp>)
	export function unRefConvertCommonDataIdResp(v:Ref<ConvertCommonDataIdResp>):ConvertCommonDataIdResp
	export function emptyDeleteCompanyReq():DeleteCompanyReq
	export function emptyRefDeleteCompanyReq():Ref<DeleteCompanyReq>
	export function refOfDeleteCompanyReq(x:DeleteCompanyReq,v:Ref<DeleteCompanyReq>)
	export function unRefDeleteCompanyReq(v:Ref<DeleteCompanyReq>):DeleteCompanyReq
	export function emptySearchAssignedUserReq():SearchAssignedUserReq
	export function emptyRefSearchAssignedUserReq():Ref<SearchAssignedUserReq>
	export function refOfSearchAssignedUserReq(x:SearchAssignedUserReq,v:Ref<SearchAssignedUserReq>)
	export function unRefSearchAssignedUserReq(v:Ref<SearchAssignedUserReq>):SearchAssignedUserReq
	export function emptyCreateJobChangeResp():CreateJobChangeResp
	export function emptyRefCreateJobChangeResp():Ref<CreateJobChangeResp>
	export function refOfCreateJobChangeResp(x:CreateJobChangeResp,v:Ref<CreateJobChangeResp>)
	export function unRefCreateJobChangeResp(v:Ref<CreateJobChangeResp>):CreateJobChangeResp
	export function emptyDeleteJobDataResp():DeleteJobDataResp
	export function emptyRefDeleteJobDataResp():Ref<DeleteJobDataResp>
	export function refOfDeleteJobDataResp(x:DeleteJobDataResp,v:Ref<DeleteJobDataResp>)
	export function unRefDeleteJobDataResp(v:Ref<DeleteJobDataResp>):DeleteJobDataResp
	export function emptyEducation():Education
	export function emptyRefEducation():Ref<Education>
	export function refOfEducation(x:Education,v:Ref<Education>)
	export function unRefEducation(v:Ref<Education>):Education
	export function emptyGetJobRespData():GetJobRespData
	export function emptyRefGetJobRespData():Ref<GetJobRespData>
	export function refOfGetJobRespData(x:GetJobRespData,v:Ref<GetJobRespData>)
	export function unRefGetJobRespData(v:Ref<GetJobRespData>):GetJobRespData
	export function emptyGetLocationResp():GetLocationResp
	export function emptyRefGetLocationResp():Ref<GetLocationResp>
	export function refOfGetLocationResp(x:GetLocationResp,v:Ref<GetLocationResp>)
	export function unRefGetLocationResp(v:Ref<GetLocationResp>):GetLocationResp
	export function emptyListContractReq():ListContractReq
	export function emptyRefListContractReq():Ref<ListContractReq>
	export function refOfListContractReq(x:ListContractReq,v:Ref<ListContractReq>)
	export function unRefListContractReq(v:Ref<ListContractReq>):ListContractReq
	export function emptyWorkExperience():WorkExperience
	export function emptyRefWorkExperience():Ref<WorkExperience>
	export function refOfWorkExperience(x:WorkExperience,v:Ref<WorkExperience>)
	export function unRefWorkExperience(v:Ref<WorkExperience>):WorkExperience
	export function emptyAttachmentFieldSetting():AttachmentFieldSetting
	export function emptyRefAttachmentFieldSetting():Ref<AttachmentFieldSetting>
	export function refOfAttachmentFieldSetting(x:AttachmentFieldSetting,v:Ref<AttachmentFieldSetting>)
	export function unRefAttachmentFieldSetting(v:Ref<AttachmentFieldSetting>):AttachmentFieldSetting
	export function emptyEmploymentCreate():EmploymentCreate
	export function emptyRefEmploymentCreate():Ref<EmploymentCreate>
	export function refOfEmploymentCreate(x:EmploymentCreate,v:Ref<EmploymentCreate>)
	export function unRefEmploymentCreate(v:Ref<EmploymentCreate>):EmploymentCreate
	export function emptyEnum():Enum
	export function emptyRefEnum():Ref<Enum>
	export function refOfEnum(x:Enum,v:Ref<Enum>)
	export function unRefEnum(v:Ref<Enum>):Enum
	export function emptyGetJobLevelReq():GetJobLevelReq
	export function emptyRefGetJobLevelReq():Ref<GetJobLevelReq>
	export function refOfGetJobLevelReq(x:GetJobLevelReq,v:Ref<GetJobLevelReq>)
	export function unRefGetJobLevelReq(v:Ref<GetJobLevelReq>):GetJobLevelReq
	export function emptyListSubdivisionRespData():ListSubdivisionRespData
	export function emptyRefListSubdivisionRespData():Ref<ListSubdivisionRespData>
	export function refOfListSubdivisionRespData(x:ListSubdivisionRespData,v:Ref<ListSubdivisionRespData>)
	export function unRefListSubdivisionRespData(v:Ref<ListSubdivisionRespData>):ListSubdivisionRespData
	export function emptyP2PersonCreatedV1Data():P2PersonCreatedV1Data
	export function emptyRefP2PersonCreatedV1Data():Ref<P2PersonCreatedV1Data>
	export function refOfP2PersonCreatedV1Data(x:P2PersonCreatedV1Data,v:Ref<P2PersonCreatedV1Data>)
	export function unRefP2PersonCreatedV1Data(v:Ref<P2PersonCreatedV1Data>):P2PersonCreatedV1Data
	export function emptyGetSubregionRespData():GetSubregionRespData
	export function emptyRefGetSubregionRespData():Ref<GetSubregionRespData>
	export function refOfGetSubregionRespData(x:GetSubregionRespData,v:Ref<GetSubregionRespData>)
	export function unRefGetSubregionRespData(v:Ref<GetSubregionRespData>):GetSubregionRespData
	export function emptyNumberFieldSetting():NumberFieldSetting
	export function emptyRefNumberFieldSetting():Ref<NumberFieldSetting>
	export function refOfNumberFieldSetting(x:NumberFieldSetting,v:Ref<NumberFieldSetting>)
	export function unRefNumberFieldSetting(v:Ref<NumberFieldSetting>):NumberFieldSetting
	export function emptyQueryTransferReasonResp():QueryTransferReasonResp
	export function emptyRefQueryTransferReasonResp():Ref<QueryTransferReasonResp>
	export function refOfQueryTransferReasonResp(x:QueryTransferReasonResp,v:Ref<QueryTransferReasonResp>)
	export function unRefQueryTransferReasonResp(v:Ref<QueryTransferReasonResp>):QueryTransferReasonResp
	export function emptyCommonSchemaOption():CommonSchemaOption
	export function emptyRefCommonSchemaOption():Ref<CommonSchemaOption>
	export function refOfCommonSchemaOption(x:CommonSchemaOption,v:Ref<CommonSchemaOption>)
	export function unRefCommonSchemaOption(v:Ref<CommonSchemaOption>):CommonSchemaOption
	export function emptyLeaveRequestHistoryLeaveResp():LeaveRequestHistoryLeaveResp
	export function emptyRefLeaveRequestHistoryLeaveResp():Ref<LeaveRequestHistoryLeaveResp>
	export function refOfLeaveRequestHistoryLeaveResp(x:LeaveRequestHistoryLeaveResp,v:Ref<LeaveRequestHistoryLeaveResp>)
	export function unRefLeaveRequestHistoryLeaveResp(v:Ref<LeaveRequestHistoryLeaveResp>):LeaveRequestHistoryLeaveResp
	export function emptyListCurrencyResp():ListCurrencyResp
	export function emptyRefListCurrencyResp():Ref<ListCurrencyResp>
	export function refOfListCurrencyResp(x:ListCurrencyResp,v:Ref<ListCurrencyResp>)
	export function unRefListCurrencyResp(v:Ref<ListCurrencyResp>):ListCurrencyResp
	export function emptyP2PersonCreatedV1():P2PersonCreatedV1
	export function emptyRefP2PersonCreatedV1():Ref<P2PersonCreatedV1>
	export function refOfP2PersonCreatedV1(x:P2PersonCreatedV1,v:Ref<P2PersonCreatedV1>)
	export function unRefP2PersonCreatedV1(v:Ref<P2PersonCreatedV1>):P2PersonCreatedV1
	export function emptyPatchJobRespData():PatchJobRespData
	export function emptyRefPatchJobRespData():Ref<PatchJobRespData>
	export function refOfPatchJobRespData(x:PatchJobRespData,v:Ref<PatchJobRespData>)
	export function unRefPatchJobRespData(v:Ref<PatchJobRespData>):PatchJobRespData
	export function emptyGetCompanyResp():GetCompanyResp
	export function emptyRefGetCompanyResp():Ref<GetCompanyResp>
	export function refOfGetCompanyResp(x:GetCompanyResp,v:Ref<GetCompanyResp>)
	export function unRefGetCompanyResp(v:Ref<GetCompanyResp>):GetCompanyResp
	export function emptyCommonSchemaConfig():CommonSchemaConfig
	export function emptyRefCommonSchemaConfig():Ref<CommonSchemaConfig>
	export function refOfCommonSchemaConfig(x:CommonSchemaConfig,v:Ref<CommonSchemaConfig>)
	export function unRefCommonSchemaConfig(v:Ref<CommonSchemaConfig>):CommonSchemaConfig
	export function emptyDeletePersonResp():DeletePersonResp
	export function emptyRefDeletePersonResp():Ref<DeletePersonResp>
	export function refOfDeletePersonResp(x:DeletePersonResp,v:Ref<DeletePersonResp>)
	export function unRefDeletePersonResp(v:Ref<DeletePersonResp>):DeletePersonResp
	export function emptyGetSubdivisionResp():GetSubdivisionResp
	export function emptyRefGetSubdivisionResp():Ref<GetSubdivisionResp>
	export function refOfGetSubdivisionResp(x:GetSubdivisionResp,v:Ref<GetSubdivisionResp>)
	export function unRefGetSubdivisionResp(v:Ref<GetSubdivisionResp>):GetSubdivisionResp
	export function emptyImageFieldSetting():ImageFieldSetting
	export function emptyRefImageFieldSetting():Ref<ImageFieldSetting>
	export function refOfImageFieldSetting(x:ImageFieldSetting,v:Ref<ImageFieldSetting>)
	export function unRefImageFieldSetting(v:Ref<ImageFieldSetting>):ImageFieldSetting
	export function emptyOffboardingReason():OffboardingReason
	export function emptyRefOffboardingReason():Ref<OffboardingReason>
	export function refOfOffboardingReason(x:OffboardingReason,v:Ref<OffboardingReason>)
	export function unRefOffboardingReason(v:Ref<OffboardingReason>):OffboardingReason
	export function emptyP2PersonUpdatedV1():P2PersonUpdatedV1
	export function emptyRefP2PersonUpdatedV1():Ref<P2PersonUpdatedV1>
	export function refOfP2PersonUpdatedV1(x:P2PersonUpdatedV1,v:Ref<P2PersonUpdatedV1>)
	export function unRefP2PersonUpdatedV1(v:Ref<P2PersonUpdatedV1>):P2PersonUpdatedV1
	export function emptyEmployment():Employment
	export function emptyRefEmployment():Ref<Employment>
	export function refOfEmployment(x:Employment,v:Ref<Employment>)
	export function unRefEmployment(v:Ref<Employment>):Employment
	export function emptyGetCurrencyResp():GetCurrencyResp
	export function emptyRefGetCurrencyResp():Ref<GetCurrencyResp>
	export function refOfGetCurrencyResp(x:GetCurrencyResp,v:Ref<GetCurrencyResp>)
	export function unRefGetCurrencyResp(v:Ref<GetCurrencyResp>):GetCurrencyResp
	export function emptyGetJobFamilyReq():GetJobFamilyReq
	export function emptyRefGetJobFamilyReq():Ref<GetJobFamilyReq>
	export function refOfGetJobFamilyReq(x:GetJobFamilyReq,v:Ref<GetJobFamilyReq>)
	export function unRefGetJobFamilyReq(v:Ref<GetJobFamilyReq>):GetJobFamilyReq
	export function emptyPatchJobLevelRespData():PatchJobLevelRespData
	export function emptyRefPatchJobLevelRespData():Ref<PatchJobLevelRespData>
	export function refOfPatchJobLevelRespData(x:PatchJobLevelRespData,v:Ref<PatchJobLevelRespData>)
	export function unRefPatchJobLevelRespData(v:Ref<PatchJobLevelRespData>):PatchJobLevelRespData
	export function emptyPhoneNumberAndAreaCode():PhoneNumberAndAreaCode
	export function emptyRefPhoneNumberAndAreaCode():Ref<PhoneNumberAndAreaCode>
	export function refOfPhoneNumberAndAreaCode(x:PhoneNumberAndAreaCode,v:Ref<PhoneNumberAndAreaCode>)
	export function unRefPhoneNumberAndAreaCode(v:Ref<PhoneNumberAndAreaCode>):PhoneNumberAndAreaCode
	export function emptyCpstBandWidth():CpstBandWidth
	export function emptyRefCpstBandWidth():Ref<CpstBandWidth>
	export function refOfCpstBandWidth(x:CpstBandWidth,v:Ref<CpstBandWidth>)
	export function unRefCpstBandWidth(v:Ref<CpstBandWidth>):CpstBandWidth
	export function emptyCreateJobDataReq():CreateJobDataReq
	export function emptyRefCreateJobDataReq():Ref<CreateJobDataReq>
	export function refOfCreateJobDataReq(x:CreateJobDataReq,v:Ref<CreateJobDataReq>)
	export function unRefCreateJobDataReq(v:Ref<CreateJobDataReq>):CreateJobDataReq
	export function emptyIdInfo():IdInfo
	export function emptyRefIdInfo():Ref<IdInfo>
	export function refOfIdInfo(x:IdInfo,v:Ref<IdInfo>)
	export function unRefIdInfo(v:Ref<IdInfo>):IdInfo
	export function emptyDeleteLeaveGrantingRecordResp():DeleteLeaveGrantingRecordResp
	export function emptyRefDeleteLeaveGrantingRecordResp():Ref<DeleteLeaveGrantingRecordResp>
	export function refOfDeleteLeaveGrantingRecordResp(x:DeleteLeaveGrantingRecordResp,v:Ref<DeleteLeaveGrantingRecordResp>)
	export function unRefDeleteLeaveGrantingRecordResp(v:Ref<DeleteLeaveGrantingRecordResp>):DeleteLeaveGrantingRecordResp
	export function emptyFormFieldVariableListObject():FormFieldVariableListObject
	export function emptyRefFormFieldVariableListObject():Ref<FormFieldVariableListObject>
	export function refOfFormFieldVariableListObject(x:FormFieldVariableListObject,v:Ref<FormFieldVariableListObject>)
	export function unRefFormFieldVariableListObject(v:Ref<FormFieldVariableListObject>):FormFieldVariableListObject
	export function emptyFormFieldVariableNumberValue():FormFieldVariableNumberValue
	export function emptyRefFormFieldVariableNumberValue():Ref<FormFieldVariableNumberValue>
	export function refOfFormFieldVariableNumberValue(x:FormFieldVariableNumberValue,v:Ref<FormFieldVariableNumberValue>)
	export function unRefFormFieldVariableNumberValue(v:Ref<FormFieldVariableNumberValue>):FormFieldVariableNumberValue
	export function emptyPatchEmploymentReq():PatchEmploymentReq
	export function emptyRefPatchEmploymentReq():Ref<PatchEmploymentReq>
	export function refOfPatchEmploymentReq(x:PatchEmploymentReq,v:Ref<PatchEmploymentReq>)
	export function unRefPatchEmploymentReq(v:Ref<PatchEmploymentReq>):PatchEmploymentReq
	export function emptyPatchJobResp():PatchJobResp
	export function emptyRefPatchJobResp():Ref<PatchJobResp>
	export function refOfPatchJobResp(x:PatchJobResp,v:Ref<PatchJobResp>)
	export function unRefPatchJobResp(v:Ref<PatchJobResp>):PatchJobResp
	export function emptyPreviousEmployer():PreviousEmployer
	export function emptyRefPreviousEmployer():Ref<PreviousEmployer>
	export function refOfPreviousEmployer(x:PreviousEmployer,v:Ref<PreviousEmployer>)
	export function unRefPreviousEmployer(v:Ref<PreviousEmployer>):PreviousEmployer
	export function emptyCountryRegion():CountryRegion
	export function emptyRefCountryRegion():Ref<CountryRegion>
	export function refOfCountryRegion(x:CountryRegion,v:Ref<CountryRegion>)
	export function unRefCountryRegion(v:Ref<CountryRegion>):CountryRegion
	export function emptyFilterExpression():FilterExpression
	export function emptyRefFilterExpression():Ref<FilterExpression>
	export function refOfFilterExpression(x:FilterExpression,v:Ref<FilterExpression>)
	export function unRefFilterExpression(v:Ref<FilterExpression>):FilterExpression
	export function emptyPermissionSecurityGroup():PermissionSecurityGroup
	export function emptyRefPermissionSecurityGroup():Ref<PermissionSecurityGroup>
	export function refOfPermissionSecurityGroup(x:PermissionSecurityGroup,v:Ref<PermissionSecurityGroup>)
	export function unRefPermissionSecurityGroup(v:Ref<PermissionSecurityGroup>):PermissionSecurityGroup
	export function emptyBackgroundCheckTarget():BackgroundCheckTarget
	export function emptyRefBackgroundCheckTarget():Ref<BackgroundCheckTarget>
	export function refOfBackgroundCheckTarget(x:BackgroundCheckTarget,v:Ref<BackgroundCheckTarget>)
	export function unRefBackgroundCheckTarget(v:Ref<BackgroundCheckTarget>):BackgroundCheckTarget
	export function emptyCreateJobLevelRespData():CreateJobLevelRespData
	export function emptyRefCreateJobLevelRespData():Ref<CreateJobLevelRespData>
	export function refOfCreateJobLevelRespData(x:CreateJobLevelRespData,v:Ref<CreateJobLevelRespData>)
	export function unRefCreateJobLevelRespData(v:Ref<CreateJobLevelRespData>):CreateJobLevelRespData
	export function emptyDeleteDepartmentReq():DeleteDepartmentReq
	export function emptyRefDeleteDepartmentReq():Ref<DeleteDepartmentReq>
	export function refOfDeleteDepartmentReq(x:DeleteDepartmentReq,v:Ref<DeleteDepartmentReq>)
	export function unRefDeleteDepartmentReq(v:Ref<DeleteDepartmentReq>):DeleteDepartmentReq
	export function emptyJobLevel():JobLevel
	export function emptyRefJobLevel():Ref<JobLevel>
	export function refOfJobLevel(x:JobLevel,v:Ref<JobLevel>)
	export function unRefJobLevel(v:Ref<JobLevel>):JobLevel
	export function emptyMatchCompensationStandardReq():MatchCompensationStandardReq
	export function emptyRefMatchCompensationStandardReq():Ref<MatchCompensationStandardReq>
	export function refOfMatchCompensationStandardReq(x:MatchCompensationStandardReq,v:Ref<MatchCompensationStandardReq>)
	export function unRefMatchCompensationStandardReq(v:Ref<MatchCompensationStandardReq>):MatchCompensationStandardReq
	export function emptyP2JobDataChangedV1():P2JobDataChangedV1
	export function emptyRefP2JobDataChangedV1():Ref<P2JobDataChangedV1>
	export function refOfP2JobDataChangedV1(x:P2JobDataChangedV1,v:Ref<P2JobDataChangedV1>)
	export function unRefP2JobDataChangedV1(v:Ref<P2JobDataChangedV1>):P2JobDataChangedV1
	export function emptyCompany():Company
	export function emptyRefCompany():Ref<Company>
	export function refOfCompany(x:Company,v:Ref<Company>)
	export function unRefCompany(v:Ref<Company>):Company
	export function emptyOffboardingInfo():OffboardingInfo
	export function emptyRefOffboardingInfo():Ref<OffboardingInfo>
	export function refOfOffboardingInfo(x:OffboardingInfo,v:Ref<OffboardingInfo>)
	export function unRefOffboardingInfo(v:Ref<OffboardingInfo>):OffboardingInfo
	export function emptyP2OrgRoleAuthorizationUpdatedV1():P2OrgRoleAuthorizationUpdatedV1
	export function emptyRefP2OrgRoleAuthorizationUpdatedV1():Ref<P2OrgRoleAuthorizationUpdatedV1>
	export function refOfP2OrgRoleAuthorizationUpdatedV1(x:P2OrgRoleAuthorizationUpdatedV1,v:Ref<P2OrgRoleAuthorizationUpdatedV1>)
	export function unRefP2OrgRoleAuthorizationUpdatedV1(v:Ref<P2OrgRoleAuthorizationUpdatedV1>):P2OrgRoleAuthorizationUpdatedV1
	export function emptyAssignedOrganization():AssignedOrganization
	export function emptyRefAssignedOrganization():Ref<AssignedOrganization>
	export function refOfAssignedOrganization(x:AssignedOrganization,v:Ref<AssignedOrganization>)
	export function unRefAssignedOrganization(v:Ref<AssignedOrganization>):AssignedOrganization
	export function emptyCostCenter():CostCenter
	export function emptyRefCostCenter():Ref<CostCenter>
	export function refOfCostCenter(x:CostCenter,v:Ref<CostCenter>)
	export function unRefCostCenter(v:Ref<CostCenter>):CostCenter
	export function emptyFormVariableValueInfo():FormVariableValueInfo
	export function emptyRefFormVariableValueInfo():Ref<FormVariableValueInfo>
	export function refOfFormVariableValueInfo(x:FormVariableValueInfo,v:Ref<FormVariableValueInfo>)
	export function unRefFormVariableValueInfo(v:Ref<FormVariableValueInfo>):FormVariableValueInfo
	export function emptyP2EmploymentResignedV1():P2EmploymentResignedV1
	export function emptyRefP2EmploymentResignedV1():Ref<P2EmploymentResignedV1>
	export function refOfP2EmploymentResignedV1(x:P2EmploymentResignedV1,v:Ref<P2EmploymentResignedV1>)
	export function unRefP2EmploymentResignedV1(v:Ref<P2EmploymentResignedV1>):P2EmploymentResignedV1
	export function emptyPreHireQuery():PreHireQuery
	export function emptyRefPreHireQuery():Ref<PreHireQuery>
	export function refOfPreHireQuery(x:PreHireQuery,v:Ref<PreHireQuery>)
	export function unRefPreHireQuery(v:Ref<PreHireQuery>):PreHireQuery
	export function emptySubmitOffboardingRespData():SubmitOffboardingRespData
	export function emptyRefSubmitOffboardingRespData():Ref<SubmitOffboardingRespData>
	export function refOfSubmitOffboardingRespData(x:SubmitOffboardingRespData,v:Ref<SubmitOffboardingRespData>)
	export function unRefSubmitOffboardingRespData(v:Ref<SubmitOffboardingRespData>):SubmitOffboardingRespData
	export function emptyCpstMatchItem():CpstMatchItem
	export function emptyRefCpstMatchItem():Ref<CpstMatchItem>
	export function refOfCpstMatchItem(x:CpstMatchItem,v:Ref<CpstMatchItem>)
	export function unRefCpstMatchItem(v:Ref<CpstMatchItem>):CpstMatchItem
	export function emptyCreateNationalIdTypeReq():CreateNationalIdTypeReq
	export function emptyRefCreateNationalIdTypeReq():Ref<CreateNationalIdTypeReq>
	export function refOfCreateNationalIdTypeReq(x:CreateNationalIdTypeReq,v:Ref<CreateNationalIdTypeReq>)
	export function unRefCreateNationalIdTypeReq(v:Ref<CreateNationalIdTypeReq>):CreateNationalIdTypeReq
	export function emptyGetJobLevelRespData():GetJobLevelRespData
	export function emptyRefGetJobLevelRespData():Ref<GetJobLevelRespData>
	export function refOfGetJobLevelRespData(x:GetJobLevelRespData,v:Ref<GetJobLevelRespData>)
	export function unRefGetJobLevelRespData(v:Ref<GetJobLevelRespData>):GetJobLevelRespData
	export function emptyLeaveRequestHistoryLeaveRespData():LeaveRequestHistoryLeaveRespData
	export function emptyRefLeaveRequestHistoryLeaveRespData():Ref<LeaveRequestHistoryLeaveRespData>
	export function refOfLeaveRequestHistoryLeaveRespData(x:LeaveRequestHistoryLeaveRespData,v:Ref<LeaveRequestHistoryLeaveRespData>)
	export function unRefLeaveRequestHistoryLeaveRespData(v:Ref<LeaveRequestHistoryLeaveRespData>):LeaveRequestHistoryLeaveRespData
	export function emptyReferenceObject():ReferenceObject
	export function emptyRefReferenceObject():Ref<ReferenceObject>
	export function refOfReferenceObject(x:ReferenceObject,v:Ref<ReferenceObject>)
	export function unRefReferenceObject(v:Ref<ReferenceObject>):ReferenceObject
	export function emptyLeaveBalance():LeaveBalance
	export function emptyRefLeaveBalance():Ref<LeaveBalance>
	export function refOfLeaveBalance(x:LeaveBalance,v:Ref<LeaveBalance>)
	export function unRefLeaveBalance(v:Ref<LeaveBalance>):LeaveBalance
	export function emptyQueryCustomFieldRespData():QueryCustomFieldRespData
	export function emptyRefQueryCustomFieldRespData():Ref<QueryCustomFieldRespData>
	export function refOfQueryCustomFieldRespData(x:QueryCustomFieldRespData,v:Ref<QueryCustomFieldRespData>)
	export function unRefQueryCustomFieldRespData(v:Ref<QueryCustomFieldRespData>):QueryCustomFieldRespData
	export function emptyFormFieldVariableFileValue():FormFieldVariableFileValue
	export function emptyRefFormFieldVariableFileValue():Ref<FormFieldVariableFileValue>
	export function refOfFormFieldVariableFileValue(x:FormFieldVariableFileValue,v:Ref<FormFieldVariableFileValue>)
	export function unRefFormFieldVariableFileValue(v:Ref<FormFieldVariableFileValue>):FormFieldVariableFileValue
	export function emptyPatchPreHireResp():PatchPreHireResp
	export function emptyRefPatchPreHireResp():Ref<PatchPreHireResp>
	export function refOfPatchPreHireResp(x:PatchPreHireResp,v:Ref<PatchPreHireResp>)
	export function unRefPatchPreHireResp(v:Ref<PatchPreHireResp>):PatchPreHireResp
	export function emptyUploadPersonResp():UploadPersonResp
	export function emptyRefUploadPersonResp():Ref<UploadPersonResp>
	export function refOfUploadPersonResp(x:UploadPersonResp,v:Ref<UploadPersonResp>)
	export function unRefUploadPersonResp(v:Ref<UploadPersonResp>):UploadPersonResp
	export function emptyCreateLocationReq():CreateLocationReq
	export function emptyRefCreateLocationReq():Ref<CreateLocationReq>
	export function refOfCreateLocationReq(x:CreateLocationReq,v:Ref<CreateLocationReq>)
	export function unRefCreateLocationReq(v:Ref<CreateLocationReq>):CreateLocationReq
	export function emptyFormFieldVariableRecordValueExample():FormFieldVariableRecordValueExample
	export function emptyRefFormFieldVariableRecordValueExample():Ref<FormFieldVariableRecordValueExample>
	export function refOfFormFieldVariableRecordValueExample(x:FormFieldVariableRecordValueExample,v:Ref<FormFieldVariableRecordValueExample>)
	export function unRefFormFieldVariableRecordValueExample(v:Ref<FormFieldVariableRecordValueExample>):FormFieldVariableRecordValueExample
	export function emptyLeaveTypesLeaveResp():LeaveTypesLeaveResp
	export function emptyRefLeaveTypesLeaveResp():Ref<LeaveTypesLeaveResp>
	export function refOfLeaveTypesLeaveResp(x:LeaveTypesLeaveResp,v:Ref<LeaveTypesLeaveResp>)
	export function unRefLeaveTypesLeaveResp(v:Ref<LeaveTypesLeaveResp>):LeaveTypesLeaveResp
	export function emptyP2OffboardingUpdatedV1():P2OffboardingUpdatedV1
	export function emptyRefP2OffboardingUpdatedV1():Ref<P2OffboardingUpdatedV1>
	export function refOfP2OffboardingUpdatedV1(x:P2OffboardingUpdatedV1,v:Ref<P2OffboardingUpdatedV1>)
	export function unRefP2OffboardingUpdatedV1(v:Ref<P2OffboardingUpdatedV1>):P2OffboardingUpdatedV1
	export function emptyTransferType():TransferType
	export function emptyRefTransferType():Ref<TransferType>
	export function refOfTransferType(x:TransferType,v:Ref<TransferType>)
	export function unRefTransferType(v:Ref<TransferType>):TransferType
	export function emptyCreateEmployeeTypeRespData():CreateEmployeeTypeRespData
	export function emptyRefCreateEmployeeTypeRespData():Ref<CreateEmployeeTypeRespData>
	export function refOfCreateEmployeeTypeRespData(x:CreateEmployeeTypeRespData,v:Ref<CreateEmployeeTypeRespData>)
	export function unRefCreateEmployeeTypeRespData(v:Ref<CreateEmployeeTypeRespData>):CreateEmployeeTypeRespData
	export function emptyPatchNationalIdTypeReq():PatchNationalIdTypeReq
	export function emptyRefPatchNationalIdTypeReq():Ref<PatchNationalIdTypeReq>
	export function refOfPatchNationalIdTypeReq(x:PatchNationalIdTypeReq,v:Ref<PatchNationalIdTypeReq>)
	export function unRefPatchNationalIdTypeReq(v:Ref<PatchNationalIdTypeReq>):PatchNationalIdTypeReq
	export function emptySearchOffboardingResp():SearchOffboardingResp
	export function emptyRefSearchOffboardingResp():Ref<SearchOffboardingResp>
	export function refOfSearchOffboardingResp(x:SearchOffboardingResp,v:Ref<SearchOffboardingResp>)
	export function unRefSearchOffboardingResp(v:Ref<SearchOffboardingResp>):SearchOffboardingResp
	export function emptyLeaveRequest():LeaveRequest
	export function emptyRefLeaveRequest():Ref<LeaveRequest>
	export function refOfLeaveRequest(x:LeaveRequest,v:Ref<LeaveRequest>)
	export function unRefLeaveRequest(v:Ref<LeaveRequest>):LeaveRequest
	export function emptyP2JobUpdatedV1():P2JobUpdatedV1
	export function emptyRefP2JobUpdatedV1():Ref<P2JobUpdatedV1>
	export function refOfP2JobUpdatedV1(x:P2JobUpdatedV1,v:Ref<P2JobUpdatedV1>)
	export function unRefP2JobUpdatedV1(v:Ref<P2JobUpdatedV1>):P2JobUpdatedV1
	export function emptyP2OrgRoleAuthorizationUpdatedV1Data():P2OrgRoleAuthorizationUpdatedV1Data
	export function emptyRefP2OrgRoleAuthorizationUpdatedV1Data():Ref<P2OrgRoleAuthorizationUpdatedV1Data>
	export function refOfP2OrgRoleAuthorizationUpdatedV1Data(x:P2OrgRoleAuthorizationUpdatedV1Data,v:Ref<P2OrgRoleAuthorizationUpdatedV1Data>)
	export function unRefP2OrgRoleAuthorizationUpdatedV1Data(v:Ref<P2OrgRoleAuthorizationUpdatedV1Data>):P2OrgRoleAuthorizationUpdatedV1Data
	export function emptyQueryOffboardingReqBody():QueryOffboardingReqBody
	export function emptyRefQueryOffboardingReqBody():Ref<QueryOffboardingReqBody>
	export function refOfQueryOffboardingReqBody(x:QueryOffboardingReqBody,v:Ref<QueryOffboardingReqBody>)
	export function unRefQueryOffboardingReqBody(v:Ref<QueryOffboardingReqBody>):QueryOffboardingReqBody
	export function emptyP2PreHireUpdatedV1Data():P2PreHireUpdatedV1Data
	export function emptyRefP2PreHireUpdatedV1Data():Ref<P2PreHireUpdatedV1Data>
	export function refOfP2PreHireUpdatedV1Data(x:P2PreHireUpdatedV1Data,v:Ref<P2PreHireUpdatedV1Data>)
	export function unRefP2PreHireUpdatedV1Data(v:Ref<P2PreHireUpdatedV1Data>):P2PreHireUpdatedV1Data
	export function emptyCreateContractRespData():CreateContractRespData
	export function emptyRefCreateContractRespData():Ref<CreateContractRespData>
	export function refOfCreateContractRespData(x:CreateContractRespData,v:Ref<CreateContractRespData>)
	export function unRefCreateContractRespData(v:Ref<CreateContractRespData>):CreateContractRespData
	export function emptyListJobLevelResp():ListJobLevelResp
	export function emptyRefListJobLevelResp():Ref<ListJobLevelResp>
	export function refOfListJobLevelResp(x:ListJobLevelResp,v:Ref<ListJobLevelResp>)
	export function unRefListJobLevelResp(v:Ref<ListJobLevelResp>):ListJobLevelResp
	export function emptyCreateJobFamilyRespData():CreateJobFamilyRespData
	export function emptyRefCreateJobFamilyRespData():Ref<CreateJobFamilyRespData>
	export function refOfCreateJobFamilyRespData(x:CreateJobFamilyRespData,v:Ref<CreateJobFamilyRespData>)
	export function unRefCreateJobFamilyRespData(v:Ref<CreateJobFamilyRespData>):CreateJobFamilyRespData
	export function emptyMatchCompensationStandardResp():MatchCompensationStandardResp
	export function emptyRefMatchCompensationStandardResp():Ref<MatchCompensationStandardResp>
	export function refOfMatchCompensationStandardResp(x:MatchCompensationStandardResp,v:Ref<MatchCompensationStandardResp>)
	export function unRefMatchCompensationStandardResp(v:Ref<MatchCompensationStandardResp>):MatchCompensationStandardResp
	export function emptyFormVariableValueInfoExample():FormVariableValueInfoExample
	export function emptyRefFormVariableValueInfoExample():Ref<FormVariableValueInfoExample>
	export function refOfFormVariableValueInfoExample(x:FormVariableValueInfoExample,v:Ref<FormVariableValueInfoExample>)
	export function unRefFormVariableValueInfoExample(v:Ref<FormVariableValueInfoExample>):FormVariableValueInfoExample
}