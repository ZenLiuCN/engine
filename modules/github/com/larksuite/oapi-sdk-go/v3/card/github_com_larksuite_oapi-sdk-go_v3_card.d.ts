// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/card'{

	// @ts-ignore
	import * as json from 'golang/encoding/json'
	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as larkevent from 'github.com/larksuite/oapi-sdk-go/v3/event'
	// @ts-ignore
	import type {Alias,Nothing,Ref,map,bool,Struct,error,int} from 'go'
	export interface CardAction extends Struct<CardAction>,json.Token{

			eventReq:Ref<larkevent.EventReq>
			openID:string
			userID:string
			openMessageID:string
			openChatId:string
			tenantKey:string
			token:string
			timezone:string
			challenge:string
			type:string
			action:Ref<Struct<{
			
				value:map<string,any>
				tag:string
				option:string
				timezone:string
				name:string
				formValue:map<string,any>
				inputValue:string
				options:string[]
				checked:bool
			}>>
	}
	export interface CardActionBody extends json.Token,Struct<CardActionBody>{

			cardAction:Ref<CardAction>
			challenge:string
			type:string
	}
	export interface CardActionHandler extends json.Token,Struct<CardActionHandler>,larkevent.IReqHandler{

			config:Ref<larkcore.Config>
			handle(ctx:context.Context,req:Ref<larkevent.EventReq>):Ref<larkevent.EventResp>
			logger():larkcore.Logger
			initConfig(...options:larkevent.OptionFunc[]):void
			event():any
			authByChallenge(ctx:context.Context,cardAction:Ref<CardAction>):Ref<larkevent.EventResp>
			doHandle(ctx:context.Context,cardAction:Ref<CardAction>):Ref<larkevent.EventResp>
			verifySign(ctx:context.Context,req:Ref<larkevent.EventReq>)/*error*/
	}
	export interface CustomResp extends Struct<CustomResp>,json.Token{

			statusCode:int
			body:map<string,any>
	}
	export interface CustomToastBody extends Struct<CustomToastBody>,json.Token{

			content:string
			i18n:Ref<I18n>
	}
	export interface I18n extends Struct<I18n>,json.Token{

			zhCn:string
			enCn:string
			jaJp:string
			zhHk:string
			zhTw:string
			idId:string
			viVn:string
			thTh:string
			ptBr:string
			esEs:string
			koKr:string
			deDe:string
			frFr:string
			itIt:string
			ruRu:string
			msMy:string
	}
	export interface MessageCard extends Struct<MessageCard>,json.Token{

			config_:Ref<MessageCardConfig>
			header_:Ref<MessageCardHeader>
			elements_:MessageCardElement[]
			i18nElements_:Ref<MessageCardI18nElements>
			cardLink_:Ref<MessageCardURL>
			string():string
			config(config:Ref<MessageCardConfig>):Ref<MessageCard>
			header(header:Ref<MessageCardHeader>):Ref<MessageCard>
			elements(elements:MessageCardElement[]):Ref<MessageCard>
			i18nElements(i18nElements:Ref<MessageCardI18nElements>):Ref<MessageCard>
			cardLink(cardLink:Ref<MessageCardURL>):Ref<MessageCard>
			build():Ref<MessageCard>
			json():string
	}
	export interface MessageCardAction extends Struct<MessageCardAction>,MessageCardElement,json.Token,json.Marshaler{

			actions_:MessageCardActionElement[]
			layout_:Ref<MessageCardActionLayout>
			actions(actions:MessageCardActionElement[]):Ref<MessageCardAction>
			layout(layout:Ref<MessageCardActionLayout>):Ref<MessageCardAction>
			build():Ref<MessageCardAction>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardActionConfirm extends Struct<MessageCardActionConfirm>,json.Token{

			title_:Ref<MessageCardPlainText>
			text_:Ref<MessageCardPlainText>
			title(title:Ref<MessageCardPlainText>):Ref<MessageCardActionConfirm>
			text(text:Ref<MessageCardPlainText>):Ref<MessageCardActionConfirm>
			build():Ref<MessageCardActionConfirm>
	}
	export interface MessageCardActionElement extends MessageCardElement{

			isAction():void
	}
	export interface MessageCardActionLayout extends string{

	ptr():Ref<MessageCardActionLayout>
	}
	export const MessageCardActionLayoutBisected:MessageCardActionLayout
	export const MessageCardActionLayoutFlow:MessageCardActionLayout
	export const MessageCardActionLayoutTrisection:MessageCardActionLayout
	export interface MessageCardButtonType extends string{

	ptr():Ref<MessageCardButtonType>
	}
	export const MessageCardButtonTypeDanger:MessageCardButtonType
	export const MessageCardButtonTypeDefault:MessageCardButtonType
	export const MessageCardButtonTypePrimary:MessageCardButtonType
	export interface MessageCardConfig extends Struct<MessageCardConfig>,json.Token{

			enableForward_:Ref<bool>
			updateMulti_:Ref<bool>
			wideScreenMode_:Ref<bool>
			enableForward(enableForward:bool):Ref<MessageCardConfig>
			updateMulti(updateMulti:bool):Ref<MessageCardConfig>
			wideScreenMode(wideScreenMode:bool):Ref<MessageCardConfig>
			build():Ref<MessageCardConfig>
	}
	export interface MessageCardDiv extends Struct<MessageCardDiv>,MessageCardElement,json.Token,json.Marshaler{

			text_:MessageCardText
			fields_:Ref<MessageCardField>[]
			extra_:MessageCardExtraElement
			text(text:MessageCardText):Ref<MessageCardDiv>
			fields(fields:Ref<MessageCardField>[]):Ref<MessageCardDiv>
			extra(extra:MessageCardExtraElement):Ref<MessageCardDiv>
			build():Ref<MessageCardDiv>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardElement{

			marshalJSON():Uint8Array
			tag():string
	}
	export interface MessageCardEmbedButton extends Struct<MessageCardEmbedButton>,MessageCardExtraElement,json.Token,MessageCardActionElement,json.Marshaler{

			text_:MessageCardText
			urL_:Ref<string>
			multiURL_:Ref<MessageCardURL>
			type_:Ref<MessageCardButtonType>
			value_:map<string,any>
			confirm_:Ref<MessageCardActionConfirm>
			confirm(confirm:Ref<MessageCardActionConfirm>):Ref<MessageCardEmbedButton>
			value(value:map<string,any>):Ref<MessageCardEmbedButton>
			type(type_:MessageCardButtonType):Ref<MessageCardEmbedButton>
			text(text:MessageCardText):Ref<MessageCardEmbedButton>
			url(url:string):Ref<MessageCardEmbedButton>
			multiUrl(multiURL:Ref<MessageCardURL>):Ref<MessageCardEmbedButton>
			build():Ref<MessageCardEmbedButton>
			tag():string
			marshalJSON():Uint8Array
			isAction():void
			isExtra():void
	}
	export interface MessageCardEmbedDatePicker extends Struct<MessageCardEmbedDatePicker>,MessageCardActionElement,MessageCardExtraElement,json.Token,json.Marshaler{

			messageCardEmbedDatePickerBase:Ref<MessageCardEmbedDatePickerBase>
			messageCardEmbedDatePicker(base:Ref<MessageCardEmbedDatePickerBase>):Ref<MessageCardEmbedDatePicker>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardEmbedDatePickerBase extends json.Token,Struct<MessageCardEmbedDatePickerBase>{

			initialDate_:Ref<string>
			initialTime_:Ref<string>
			initialDatetime_:Ref<string>
			placeholder_:Ref<MessageCardPlainText>
			value_:map<string,any>
			confirm_:Ref<MessageCardActionConfirm>
			initialDate(initialDate:string):Ref<MessageCardEmbedDatePickerBase>
			initialTime(initialTime:string):Ref<MessageCardEmbedDatePickerBase>
			initialDatetime(initialDatetime:string):Ref<MessageCardEmbedDatePickerBase>
			placeholder(placeholder:Ref<MessageCardPlainText>):Ref<MessageCardEmbedDatePickerBase>
			value(value:map<string,any>):Ref<MessageCardEmbedDatePickerBase>
			confirm(confirm:Ref<MessageCardActionConfirm>):Ref<MessageCardEmbedDatePickerBase>
			build():Ref<MessageCardEmbedDatePickerBase>
			isAction():void
			isExtra():void
	}
	export interface MessageCardEmbedImage extends Struct<MessageCardEmbedImage>,MessageCardExtraElement,json.Token,MessageCardNoteElement,json.Marshaler{

			alt_:Ref<MessageCardPlainText>
			imgKey_:string
			mode_:Ref<MessageCardImageModel>
			preview_:Ref<bool>
			alt(alt:Ref<MessageCardPlainText>):Ref<MessageCardEmbedImage>
			imgKey(imgKey:string):Ref<MessageCardEmbedImage>
			mode(mode:Ref<MessageCardImageModel>):Ref<MessageCardEmbedImage>
			preview(preview:bool):Ref<MessageCardEmbedImage>
			build():Ref<MessageCardEmbedImage>
			tag():string
			isExtra():void
			isNote():void
			marshalJSON():Uint8Array
	}
	export interface MessageCardEmbedOverflow extends json.Marshaler,Struct<MessageCardEmbedOverflow>,MessageCardActionElement,MessageCardExtraElement,json.Token{

			options_:Ref<MessageCardEmbedSelectOption>[]
			value_:map<string,any>
			confirm_:Ref<MessageCardActionConfirm>
			options(options:Ref<MessageCardEmbedSelectOption>[]):Ref<MessageCardEmbedOverflow>
			value(value:map<string,any>):Ref<MessageCardEmbedOverflow>
			confirm(confirm:Ref<MessageCardActionConfirm>):Ref<MessageCardEmbedOverflow>
			build():Ref<MessageCardEmbedOverflow>
			tag():string
			marshalJSON():Uint8Array
			isAction():void
			isExtra():void
	}
	export interface MessageCardEmbedPickerDatetime extends MessageCardExtraElement,json.Token,json.Marshaler,Struct<MessageCardEmbedPickerDatetime>,MessageCardActionElement{

			messageCardEmbedDatePickerBase:Ref<MessageCardEmbedDatePickerBase>
			messageCardEmbedPickerDatetime(base:Ref<MessageCardEmbedDatePickerBase>):Ref<MessageCardEmbedPickerDatetime>
			build():Ref<MessageCardEmbedPickerDatetime>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardEmbedPickerTime extends Struct<MessageCardEmbedPickerTime>,MessageCardActionElement,MessageCardExtraElement,json.Token,json.Marshaler{

			messageCardEmbedDatePickerBase:Ref<MessageCardEmbedDatePickerBase>
			messageCardEmbedPickerTime(base:Ref<MessageCardEmbedDatePickerBase>):Ref<MessageCardEmbedPickerTime>
			build():Ref<MessageCardEmbedPickerTime>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardEmbedSelectMenuBase extends Struct<MessageCardEmbedSelectMenuBase>,json.Token{

			placeholder_:Ref<MessageCardPlainText>
			initialOption_:string
			options_:Ref<MessageCardEmbedSelectOption>[]
			value_:map<string,any>
			confirm_:Ref<MessageCardActionConfirm>
			placeholder(placeholder:Ref<MessageCardPlainText>):Ref<MessageCardEmbedSelectMenuBase>
			initialOption(initialOption:string):Ref<MessageCardEmbedSelectMenuBase>
			options(options:Ref<MessageCardEmbedSelectOption>[]):Ref<MessageCardEmbedSelectMenuBase>
			value(value:map<string,any>):Ref<MessageCardEmbedSelectMenuBase>
			confirm(confirm:Ref<MessageCardActionConfirm>):Ref<MessageCardEmbedSelectMenuBase>
			build():Ref<MessageCardEmbedSelectMenuBase>
			isAction():void
			isExtra():void
	}
	export interface MessageCardEmbedSelectMenuPerson extends json.Token,json.Marshaler,Struct<MessageCardEmbedSelectMenuPerson>,MessageCardActionElement,MessageCardExtraElement{

			messageCardEmbedSelectMenuBase:Ref<MessageCardEmbedSelectMenuBase>
			messageCardEmbedSelectMenu(messageCardEmbedSelectMenuBase:Ref<MessageCardEmbedSelectMenuBase>):Ref<MessageCardEmbedSelectMenuPerson>
			build(messageCardEmbedSelectMenuBase:Ref<MessageCardEmbedSelectMenuBase>):Ref<MessageCardEmbedSelectMenuPerson>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardEmbedSelectMenuStatic extends Struct<MessageCardEmbedSelectMenuStatic>,MessageCardActionElement,MessageCardExtraElement,json.Token,json.Marshaler{

			messageCardEmbedSelectMenuBase:Ref<MessageCardEmbedSelectMenuBase>
			messageCardEmbedSelectMenuStatic(base:Ref<MessageCardEmbedSelectMenuBase>):Ref<MessageCardEmbedSelectMenuStatic>
			build():Ref<MessageCardEmbedSelectMenuStatic>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardEmbedSelectOption extends Struct<MessageCardEmbedSelectOption>,json.Token{

			text_:Ref<MessageCardPlainText>
			value_:string
			urL_:Ref<string>
			multiURL_:Ref<MessageCardURL>
			type_:Ref<MessageCardButtonType>
			text(text:Ref<MessageCardPlainText>):Ref<MessageCardEmbedSelectOption>
			value(value:string):Ref<MessageCardEmbedSelectOption>
			url(url:string):Ref<MessageCardEmbedSelectOption>
			multiUrl(multiUrl:Ref<MessageCardURL>):Ref<MessageCardEmbedSelectOption>
			type(type_:Ref<MessageCardButtonType>):Ref<MessageCardEmbedSelectOption>
			build():Ref<MessageCardEmbedSelectOption>
	}
	export interface MessageCardExtraElement extends MessageCardElement{

			isExtra():void
	}
	export interface MessageCardField extends Struct<MessageCardField>,json.Token{

			isShort_:bool
			text_:MessageCardText
			isShort(isShort:bool):Ref<MessageCardField>
			text(text:MessageCardText):Ref<MessageCardField>
			build():Ref<MessageCardField>
	}
	export interface MessageCardHeader extends Struct<MessageCardHeader>,json.Token{

			template_:Ref<string>
			title_:Ref<MessageCardPlainText>
			template(template:string):Ref<MessageCardHeader>
			title(title:Ref<MessageCardPlainText>):Ref<MessageCardHeader>
			build():Ref<MessageCardHeader>
	}
	export interface MessageCardHr extends Alias<Nothing>{

			build():Ref<MessageCardHr>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardI18nElements extends Struct<MessageCardI18nElements>,json.Token{

			zhCN_:MessageCardElement[]
			enUS_:MessageCardElement[]
			jaJP_:MessageCardElement[]
			zhHK_:MessageCardElement[]
			zhTW_:MessageCardElement[]
			idID_:MessageCardElement[]
			viVN_:MessageCardElement[]
			thTH_:MessageCardElement[]
			ptBR_:MessageCardElement[]
			esES_:MessageCardElement[]
			koKR_:MessageCardElement[]
			deDE_:MessageCardElement[]
			frFR_:MessageCardElement[]
			itIT_:MessageCardElement[]
			ruRU_:MessageCardElement[]
			msMY_:MessageCardElement[]
			zhCN(zhCn:MessageCardElement[]):Ref<MessageCardI18nElements>
			enUS(enUS:MessageCardElement[]):Ref<MessageCardI18nElements>
			jaJP(jaJP:MessageCardElement[]):Ref<MessageCardI18nElements>
			build():Ref<MessageCardI18nElements>
	}
	export interface MessageCardImage extends Struct<MessageCardImage>,json.Token,MessageCardElement,json.Marshaler{

			alt_:Ref<MessageCardPlainText>
			title_:MessageCardText
			imgKey_:string
			customWidth_:Ref<int>
			compactWidth_:Ref<bool>
			mode_:Ref<MessageCardImageModel>
			preview_:Ref<bool>
			preview(preview:bool):Ref<MessageCardImage>
			alt(alt:Ref<MessageCardPlainText>):Ref<MessageCardImage>
			title(title:MessageCardText):Ref<MessageCardImage>
			imgKey(imgKey:string):Ref<MessageCardImage>
			customWidth(customWidth:int):Ref<MessageCardImage>
			compactWidth(compactWidth:bool):Ref<MessageCardImage>
			mode(mode:MessageCardImageModel):Ref<MessageCardImage>
			build():Ref<MessageCardImage>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardImageModel extends string{

	ptr():Ref<MessageCardImageModel>
	}
	export const MessageCardImageModelCropCenter:MessageCardImageModel
	export const MessageCardImageModelFitHorizontal:MessageCardImageModel
	export interface MessageCardLarkMd extends json.Token,MessageCardNoteElement,MessageCardText,json.Marshaler,Struct<MessageCardLarkMd>,MessageCardExtraElement{

			content_:string
			content(content:string):Ref<MessageCardLarkMd>
			build():Ref<MessageCardLarkMd>
			tag():string
			marshalJSON():Uint8Array
			text():string
			isExtra():void
			isNote():void
	}
	export interface MessageCardMarkdown extends json.Marshaler,Struct<MessageCardMarkdown>,json.Token,MessageCardElement{

			content_:string
			href_:map<string,Ref<MessageCardURL>>
			content(content:string):Ref<MessageCardMarkdown>
			href(href:map<string,Ref<MessageCardURL>>):Ref<MessageCardMarkdown>
			build():Ref<MessageCardMarkdown>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardNote extends MessageCardElement,json.Marshaler,Struct<MessageCardNote>,json.Token{

			elements_:MessageCardNoteElement[]
			elements(elements:MessageCardNoteElement[]):Ref<MessageCardNote>
			build():Ref<MessageCardNote>
			tag():string
			marshalJSON():Uint8Array
	}
	export interface MessageCardNoteElement extends MessageCardElement{

			isNote():void
	}
	export interface MessageCardPlainText extends MessageCardExtraElement,json.Token,MessageCardNoteElement,MessageCardText,json.Marshaler,Struct<MessageCardPlainText>{

			content_:string
			lines_:Ref<int>
			i18n_:Ref<MessageCardPlainTextI18n>
			content(content:string):Ref<MessageCardPlainText>
			lines(lines:int):Ref<MessageCardPlainText>
			i18n(i18n:Ref<MessageCardPlainTextI18n>):Ref<MessageCardPlainText>
			build():Ref<MessageCardPlainText>
			tag():string
			marshalJSON():Uint8Array
			text():string
			isExtra():void
			isNote():void
	}
	export interface MessageCardPlainTextI18n extends Struct<MessageCardPlainTextI18n>,json.Token{

			zhCN_:string
			enUS_:string
			jaJP_:string
			zhHK_:string
			zhTW_:string
			idID_:string
			viVN_:string
			thTH_:string
			ptBR_:string
			esES_:string
			koKR_:string
			deDE_:string
			frFR_:string
			itIT_:string
			ruRU_:string
			msMY_:string
			zhCN(zhCn:string):Ref<MessageCardPlainTextI18n>
			enUS(enUs:string):Ref<MessageCardPlainTextI18n>
			jaJP(jaJp:string):Ref<MessageCardPlainTextI18n>
			build():Ref<MessageCardPlainTextI18n>
	}
	export interface MessageCardText extends MessageCardElement{

			text():string
	}
	export interface MessageCardURL extends Struct<MessageCardURL>,json.Token{

			urL_:string
			androidURL_:string
			iosurL_:string
			pcurL_:string
			url(url:string):Ref<MessageCardURL>
			androidUrl(androidUrl:string):Ref<MessageCardURL>
			ioSUrl(iOSUrl:string):Ref<MessageCardURL>
			pcUrl(pcURL:string):Ref<MessageCardURL>
			build():Ref<MessageCardURL>
	}
	export function newCardActionHandler(verificationToken:string,eventEncryptKey:string,v1:(v2:context.Context,v1:Ref<CardAction>)=>any):Ref<CardActionHandler>

	export function newMessageCard():Ref<MessageCard>

	export function newMessageCardAction():Ref<MessageCardAction>

	export function newMessageCardActionConfirm():Ref<MessageCardActionConfirm>

	export function newMessageCardConfig():Ref<MessageCardConfig>

	export function newMessageCardDiv():Ref<MessageCardDiv>

	export function newMessageCardEmbedButton():Ref<MessageCardEmbedButton>

	export function newMessageCardEmbedDatePicker():Ref<MessageCardEmbedDatePicker>

	export function newMessageCardEmbedDatePickerBase():Ref<MessageCardEmbedDatePickerBase>

	export function newMessageCardEmbedImage():Ref<MessageCardEmbedImage>

	export function newMessageCardEmbedOverflow():Ref<MessageCardEmbedOverflow>

	export function newMessageCardEmbedPickerDatetime():Ref<MessageCardEmbedPickerDatetime>

	export function newMessageCardEmbedPickerTime():Ref<MessageCardEmbedPickerTime>

	export function newMessageCardEmbedSelectMenuBase():Ref<MessageCardEmbedSelectMenuBase>

	export function newMessageCardEmbedSelectMenuPerson():Ref<MessageCardEmbedSelectMenuPerson>

	export function newMessageCardEmbedSelectMenuStatic():Ref<MessageCardEmbedSelectMenuStatic>

	export function newMessageCardEmbedSelectOption():Ref<MessageCardEmbedSelectOption>

	export function newMessageCardField():Ref<MessageCardField>

	export function newMessageCardHeader():Ref<MessageCardHeader>

	export function newMessageCardHr():Ref<MessageCardHr>

	export function newMessageCardI18nElements():Ref<MessageCardI18nElements>

	export function newMessageCardImage():Ref<MessageCardImage>

	export function newMessageCardLarkMd():Ref<MessageCardLarkMd>

	export function newMessageCardMarkdown():Ref<MessageCardMarkdown>

	export function newMessageCardNote():Ref<MessageCardNote>

	export function newMessageCardPlainText():Ref<MessageCardPlainText>

	export function newMessageCardPlainTextI18n():Ref<MessageCardPlainTextI18n>

	export function newMessageCardURL():Ref<MessageCardURL>

	export function signature(timestamp:string,nonce:string,token:string,body:string):string

	//"blue"
	export const TemplateBlue:string
	//"carmine"
	export const TemplateCarmine:string
	//"green"
	export const TemplateGreen:string
	//"grey"
	export const TemplateGrey:string
	//"indigo"
	export const TemplateIndigo:string
	//"orange"
	export const TemplateOrange:string
	//"purple"
	export const TemplatePurple:string
	//"red"
	export const TemplateRed:string
	//"turquoise"
	export const TemplateTurquoise:string
	//"violet"
	export const TemplateViolet:string
	//"wathet"
	export const TemplateWathet:string
	//"yellow"
	export const TemplateYellow:string
	export function emptyCardAction():CardAction
	export function emptyRefCardAction():Ref<CardAction>
	export function refOfCardAction(x:CardAction,v:Ref<CardAction>)
	export function unRefCardAction(v:Ref<CardAction>):CardAction
	export function emptyI18n():I18n
	export function emptyRefI18n():Ref<I18n>
	export function refOfI18n(x:I18n,v:Ref<I18n>)
	export function unRefI18n(v:Ref<I18n>):I18n
	export function emptyCardActionBody():CardActionBody
	export function emptyRefCardActionBody():Ref<CardActionBody>
	export function refOfCardActionBody(x:CardActionBody,v:Ref<CardActionBody>)
	export function unRefCardActionBody(v:Ref<CardActionBody>):CardActionBody
	export function emptyCustomResp():CustomResp
	export function emptyRefCustomResp():Ref<CustomResp>
	export function refOfCustomResp(x:CustomResp,v:Ref<CustomResp>)
	export function unRefCustomResp(v:Ref<CustomResp>):CustomResp
	export function emptyCustomToastBody():CustomToastBody
	export function emptyRefCustomToastBody():Ref<CustomToastBody>
	export function refOfCustomToastBody(x:CustomToastBody,v:Ref<CustomToastBody>)
	export function unRefCustomToastBody(v:Ref<CustomToastBody>):CustomToastBody
}