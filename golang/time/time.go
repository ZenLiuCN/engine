// Code generated by define_gene; DO NOT EDIT.
package time

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"time"
)

var (
	//go:embed time.d.ts
	TimeDefine   []byte
	TimeDeclared = map[string]any{
		"fixedZone":              time.FixedZone,
		"parseDuration":          time.ParseDuration,
		"Microsecond":            time.Microsecond,
		"RFC1123":                time.RFC1123,
		"RFC3339Nano":            time.RFC3339Nano,
		"January":                time.January,
		"Kitchen":                time.Kitchen,
		"since":                  time.Since,
		"until":                  time.Until,
		"August":                 time.August,
		"newTimer":               time.NewTimer,
		"RFC822Z":                time.RFC822Z,
		"TimeOnly":               time.TimeOnly,
		"after":                  time.After,
		"April":                  time.April,
		"Millisecond":            time.Millisecond,
		"Layout":                 time.Layout,
		"loadLocation":           time.LoadLocation,
		"March":                  time.March,
		"Minute":                 time.Minute,
		"parse":                  time.Parse,
		"July":                   time.July,
		"June":                   time.June,
		"unix":                   time.Unix,
		"Local":                  time.Local,
		"Thursday":               time.Thursday,
		"unixMilli":              time.UnixMilli,
		"May":                    time.May,
		"Monday":                 time.Monday,
		"DateTime":               time.DateTime,
		"loadLocationFromTZData": time.LoadLocationFromTZData,
		"Saturday":               time.Saturday,
		"September":              time.September,
		"StampMicro":             time.StampMicro,
		"StampNano":              time.StampNano,
		"afterFunc":              time.AfterFunc,
		"date":                   time.Date,
		"Nanosecond":             time.Nanosecond,
		"newTicker":              time.NewTicker,
		"parseInLocation":        time.ParseInLocation,
		"RFC1123Z":               time.RFC1123Z,
		"sleep":                  time.Sleep,
		"DateOnly":               time.DateOnly,
		"Friday":                 time.Friday,
		"now":                    time.Now,
		"Tuesday":                time.Tuesday,
		"UTC":                    time.UTC,
		"Wednesday":              time.Wednesday,
		"ANSIC":                  time.ANSIC,
		"Hour":                   time.Hour,
		"RFC850":                 time.RFC850,
		"RubyDate":               time.RubyDate,
		"Stamp":                  time.Stamp,
		"StampMilli":             time.StampMilli,
		"tick":                   time.Tick,
		"unixMicro":              time.UnixMicro,
		"November":               time.November,
		"RFC3339":                time.RFC3339,
		"Second":                 time.Second,
		"UnixDate":               time.UnixDate,
		"October":                time.October,
		"December":               time.December,
		"February":               time.February,
		"RFC822":                 time.RFC822,
		"Sunday":                 time.Sunday,

		"emptyTicker": func() (v time.Ticker) {
			return v
		},
		"refTicker": func() *time.Ticker {
			var x time.Ticker
			return &x
		},
		"refOfTicker": func(x time.Ticker) *time.Ticker {
			return &x
		},
		"emptyTime": func() (v time.Time) {
			return v
		},
		"refTime": func() *time.Time {
			var x time.Time
			return &x
		},
		"refOfTime": func(x time.Time) *time.Time {
			return &x
		},
		"emptyTimer": func() (v time.Timer) {
			return v
		},
		"refTimer": func() *time.Timer {
			var x time.Timer
			return &x
		},
		"refOfTimer": func(x time.Timer) *time.Timer {
			return &x
		},
		"emptyLocation": func() (v time.Location) {
			return v
		},
		"refLocation": func() *time.Location {
			var x time.Location
			return &x
		},
		"refOfLocation": func(x time.Location) *time.Location {
			return &x
		}}
)

func init() {
	engine.RegisterModule(TimeModule{})
}

type TimeModule struct{}

func (S TimeModule) Identity() string {
	return "golang/time"
}
func (S TimeModule) TypeDefine() []byte {
	return TimeDefine
}
func (S TimeModule) Exports() map[string]any {
	return TimeDeclared
}
