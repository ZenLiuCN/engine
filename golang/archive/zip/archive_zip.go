// Code generated by define_gene; DO NOT EDIT.
package zip

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"archive/zip"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/io/fs"
	_ "github.com/ZenLiuCN/engine/golang/time"
)

var (
	//go:embed archive_zip.d.ts
	ArchiveZipDefine   []byte
	ArchiveZipDeclared = map[string]any{
		"Deflate":              zip.Deflate,
		"ErrAlgorithm":         zip.ErrAlgorithm,
		"ErrChecksum":          zip.ErrChecksum,
		"ErrFormat":            zip.ErrFormat,
		"ErrInsecurePath":      zip.ErrInsecurePath,
		"fileInfoHeader":       zip.FileInfoHeader,
		"newReader":            zip.NewReader,
		"registerCompressor":   zip.RegisterCompressor,
		"Store":                zip.Store,
		"newWriter":            zip.NewWriter,
		"openReader":           zip.OpenReader,
		"registerDecompressor": zip.RegisterDecompressor,

		"emptyFileHeader": func() (v zip.FileHeader) {
			return v
		},
		"refFileHeader": func() *zip.FileHeader {
			var x zip.FileHeader
			return &x
		},
		"refOfFileHeader": func(x zip.FileHeader) *zip.FileHeader {
			return &x
		},
		"emptyReadCloser": func() (v zip.ReadCloser) {
			return v
		},
		"refReadCloser": func() *zip.ReadCloser {
			var x zip.ReadCloser
			return &x
		},
		"refOfReadCloser": func(x zip.ReadCloser) *zip.ReadCloser {
			return &x
		},
		"emptyReader": func() (v zip.Reader) {
			return v
		},
		"refReader": func() *zip.Reader {
			var x zip.Reader
			return &x
		},
		"refOfReader": func(x zip.Reader) *zip.Reader {
			return &x
		},
		"emptyWriter": func() (v zip.Writer) {
			return v
		},
		"refWriter": func() *zip.Writer {
			var x zip.Writer
			return &x
		},
		"refOfWriter": func(x zip.Writer) *zip.Writer {
			return &x
		},
		"emptyFile": func() (v zip.File) {
			return v
		},
		"refFile": func() *zip.File {
			var x zip.File
			return &x
		},
		"refOfFile": func(x zip.File) *zip.File {
			return &x
		}}
)

func init() {
	engine.RegisterModule(ArchiveZipModule{})
}

type ArchiveZipModule struct{}

func (S ArchiveZipModule) Identity() string {
	return "golang/archive/zip"
}
func (S ArchiveZipModule) TypeDefine() []byte {
	return ArchiveZipDefine
}
func (S ArchiveZipModule) Exports() map[string]any {
	return ArchiveZipDeclared
}
