// Code generated by define_gene; DO NOT EDIT.
package tar

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"archive/tar"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/io/fs"
	_ "github.com/ZenLiuCN/engine/golang/time"
)

var (
	//go:embed archive_tar.d.ts
	ArchiveTarDefine   []byte
	ArchiveTarDeclared = map[string]any{
		"ErrWriteTooLong":    tar.ErrWriteTooLong,
		"fileInfoHeader":     tar.FileInfoHeader,
		"FormatUSTAR":        tar.FormatUSTAR,
		"TypeFifo":           tar.TypeFifo,
		"FormatPAX":          tar.FormatPAX,
		"TypeBlock":          tar.TypeBlock,
		"TypeGNULongLink":    tar.TypeGNULongLink,
		"TypeReg":            tar.TypeReg,
		"TypeXGlobalHeader":  tar.TypeXGlobalHeader,
		"ErrFieldTooLong":    tar.ErrFieldTooLong,
		"newWriter":          tar.NewWriter,
		"TypeCont":           tar.TypeCont,
		"TypeRegA":           tar.TypeRegA,
		"ErrInsecurePath":    tar.ErrInsecurePath,
		"TypeXHeader":        tar.TypeXHeader,
		"TypeGNUSparse":      tar.TypeGNUSparse,
		"TypeLink":           tar.TypeLink,
		"FormatGNU":          tar.FormatGNU,
		"TypeDir":            tar.TypeDir,
		"TypeSymlink":        tar.TypeSymlink,
		"TypeGNULongName":    tar.TypeGNULongName,
		"ErrHeader":          tar.ErrHeader,
		"ErrWriteAfterClose": tar.ErrWriteAfterClose,
		"FormatUnknown":      tar.FormatUnknown,
		"newReader":          tar.NewReader,
		"TypeChar":           tar.TypeChar,

		"emptyHeader": func() (v tar.Header) {
			return v
		},
		"refHeader": func() *tar.Header {
			var x tar.Header
			return &x
		},
		"refOfHeader": func(x tar.Header) *tar.Header {
			return &x
		},
		"emptyReader": func() (v tar.Reader) {
			return v
		},
		"refReader": func() *tar.Reader {
			var x tar.Reader
			return &x
		},
		"refOfReader": func(x tar.Reader) *tar.Reader {
			return &x
		},
		"emptyWriter": func() (v tar.Writer) {
			return v
		},
		"refWriter": func() *tar.Writer {
			var x tar.Writer
			return &x
		},
		"refOfWriter": func(x tar.Writer) *tar.Writer {
			return &x
		}}
)

func init() {
	engine.RegisterModule(ArchiveTarModule{})
}

type ArchiveTarModule struct{}

func (S ArchiveTarModule) Identity() string {
	return "golang/archive/tar"
}
func (S ArchiveTarModule) TypeDefine() []byte {
	return ArchiveTarDefine
}
func (S ArchiveTarModule) Exports() map[string]any {
	return ArchiveTarDeclared
}
