// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/regexp'{
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import type {Ref,error,bool,Struct,int} from 'go'
	export function compile(expr:string):Ref<Regexp>
	export function compilePOSIX(expr:string):Ref<Regexp>
	export function match(pattern:string,b:Uint8Array):bool
	export function matchReader(pattern:string,r:io.RuneReader):bool
	export function matchString(pattern:string,s:string):bool
	export function mustCompile(str:string):Ref<Regexp>
	export function mustCompilePOSIX(str:string):Ref<Regexp>
	export function quoteMeta(s:string):string
	export interface Regexp extends Struct<Regexp>{
		string():string
		copy():Ref<Regexp>
		longest():void
		numSubexp():int
		subexpNames():string[]
		subexpIndex(name:string):int
		literalPrefix():[string,bool]
		matchReader(r:io.RuneReader):bool
		matchString(s:string):bool
		match(b:Uint8Array):bool
		replaceAllString(src:string,repl:string):string
		replaceAllLiteralString(src:string,repl:string):string
		replaceAllStringFunc(src:string,repl:(v1:string)=>string):string
		replaceAll(src:Uint8Array,repl:Uint8Array):Uint8Array
		replaceAllLiteral(src:Uint8Array,repl:Uint8Array):Uint8Array
		replaceAllFunc(src:Uint8Array,repl:(v1:Uint8Array)=>Uint8Array):Uint8Array
		find(b:Uint8Array):Uint8Array
		findIndex(b:Uint8Array):int[]
		findString(s:string):string
		findStringIndex(s:string):int[]
		findReaderIndex(r:io.RuneReader):int[]
		findSubmatch(b:Uint8Array):Array<Uint8Array>
		expand(dst:Uint8Array,template:Uint8Array,src:Uint8Array,match:int[]):Uint8Array
		expandString(dst:Uint8Array,template:string,src:string,match:int[]):Uint8Array
		findSubmatchIndex(b:Uint8Array):int[]
		findStringSubmatch(s:string):string[]
		findStringSubmatchIndex(s:string):int[]
		findReaderSubmatchIndex(r:io.RuneReader):int[]
		findAll(b:Uint8Array,n:int):Array<Uint8Array>
		findAllIndex(b:Uint8Array,n:int):Array<int[]>
		findAllString(s:string,n:int):string[]
		findAllStringIndex(s:string,n:int):Array<int[]>
		findAllSubmatch(b:Uint8Array,n:int):Array<Array<Uint8Array>>
		findAllSubmatchIndex(b:Uint8Array,n:int):Array<int[]>
		findAllStringSubmatch(s:string,n:int):Array<string[]>
		findAllStringSubmatchIndex(s:string,n:int):Array<int[]>
		split(s:string,n:int):string[]
		marshalText():Uint8Array
		unmarshalText(text:Uint8Array)/*error*/
	}

export function emptyRegexp():Regexp
export function refRegexp():Ref<Regexp>
export function refOfRegexp(x:Regexp):Ref<Regexp>
}
