// Code generated by define_gene; DO NOT EDIT.
package syntax

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"regexp/syntax"
)

var (
	//go:embed regexp_syntax.d.ts
	RegexpSyntaxDefine   []byte
	RegexpSyntaxDeclared = map[string]any{
		"OpLiteral":                syntax.OpLiteral,
		"EmptyEndText":             syntax.EmptyEndText,
		"InstRune1":                syntax.InstRune1,
		"OpAnyCharNotNL":           syntax.OpAnyCharNotNL,
		"OpEmptyMatch":             syntax.OpEmptyMatch,
		"OpQuest":                  syntax.OpQuest,
		"POSIX":                    syntax.POSIX,
		"ErrInvalidUTF8":           syntax.ErrInvalidUTF8,
		"ErrLarge":                 syntax.ErrLarge,
		"OpAnyChar":                syntax.OpAnyChar,
		"EmptyNoWordBoundary":      syntax.EmptyNoWordBoundary,
		"OpEndText":                syntax.OpEndText,
		"OpConcat":                 syntax.OpConcat,
		"OpNoWordBoundary":         syntax.OpNoWordBoundary,
		"OpPlus":                   syntax.OpPlus,
		"OpStar":                   syntax.OpStar,
		"Perl":                     syntax.Perl,
		"ErrUnexpectedParen":       syntax.ErrUnexpectedParen,
		"OpBeginLine":              syntax.OpBeginLine,
		"OpCharClass":              syntax.OpCharClass,
		"EmptyBeginLine":           syntax.EmptyBeginLine,
		"EmptyBeginText":           syntax.EmptyBeginText,
		"OpAlternate":              syntax.OpAlternate,
		"OpCapture":                syntax.OpCapture,
		"ErrMissingRepeatArgument": syntax.ErrMissingRepeatArgument,
		"OpBeginText":              syntax.OpBeginText,
		"parse":                    syntax.Parse,
		"compile":                  syntax.Compile,
		"DotNL":                    syntax.DotNL,
		"InstNop":                  syntax.InstNop,
		"InstAlt":                  syntax.InstAlt,
		"EmptyEndLine":             syntax.EmptyEndLine,
		"EmptyWordBoundary":        syntax.EmptyWordBoundary,
		"ErrTrailingBackslash":     syntax.ErrTrailingBackslash,
		"InstRuneAny":              syntax.InstRuneAny,
		"isWordChar":               syntax.IsWordChar,
		"Literal":                  syntax.Literal,
		"Simple":                   syntax.Simple,
		"ErrInvalidPerlOp":         syntax.ErrInvalidPerlOp,
		"ErrNestingDepth":          syntax.ErrNestingDepth,
		"FoldCase":                 syntax.FoldCase,
		"InstMatch":                syntax.InstMatch,
		"NonGreedy":                syntax.NonGreedy,
		"OpEndLine":                syntax.OpEndLine,
		"ErrInvalidRepeatOp":       syntax.ErrInvalidRepeatOp,
		"ErrInvalidRepeatSize":     syntax.ErrInvalidRepeatSize,
		"OpNoMatch":                syntax.OpNoMatch,
		"UnicodeGroups":            syntax.UnicodeGroups,
		"WasDollar":                syntax.WasDollar,
		"ClassNL":                  syntax.ClassNL,
		"emptyOpContext":           syntax.EmptyOpContext,
		"ErrInvalidCharRange":      syntax.ErrInvalidCharRange,
		"PerlX":                    syntax.PerlX,
		"ErrInvalidCharClass":      syntax.ErrInvalidCharClass,
		"ErrInvalidEscape":         syntax.ErrInvalidEscape,
		"ErrInvalidNamedCapture":   syntax.ErrInvalidNamedCapture,
		"ErrMissingParen":          syntax.ErrMissingParen,
		"InstCapture":              syntax.InstCapture,
		"InstRuneAnyNotNL":         syntax.InstRuneAnyNotNL,
		"InstEmptyWidth":           syntax.InstEmptyWidth,
		"InstRune":                 syntax.InstRune,
		"OpRepeat":                 syntax.OpRepeat,
		"OpWordBoundary":           syntax.OpWordBoundary,
		"ErrInternalError":         syntax.ErrInternalError,
		"ErrMissingBracket":        syntax.ErrMissingBracket,
		"InstAltMatch":             syntax.InstAltMatch,
		"InstFail":                 syntax.InstFail,
		"MatchNL":                  syntax.MatchNL,
		"OneLine":                  syntax.OneLine,

		"emptyInst": func() (v syntax.Inst) {
			return v
		},
		"refInst": func() *syntax.Inst {
			var x syntax.Inst
			return &x
		},
		"refOfInst": func(x syntax.Inst) *syntax.Inst {
			return &x
		},
		"emptyProg": func() (v syntax.Prog) {
			return v
		},
		"refProg": func() *syntax.Prog {
			var x syntax.Prog
			return &x
		},
		"refOfProg": func(x syntax.Prog) *syntax.Prog {
			return &x
		},
		"emptyRegexp": func() (v syntax.Regexp) {
			return v
		},
		"refRegexp": func() *syntax.Regexp {
			var x syntax.Regexp
			return &x
		},
		"refOfRegexp": func(x syntax.Regexp) *syntax.Regexp {
			return &x
		}}
)

func init() {
	engine.RegisterModule(RegexpSyntaxModule{})
}

type RegexpSyntaxModule struct{}

func (S RegexpSyntaxModule) Identity() string {
	return "golang/regexp/syntax"
}
func (S RegexpSyntaxModule) TypeDefine() []byte {
	return RegexpSyntaxDefine
}
func (S RegexpSyntaxModule) Exports() map[string]any {
	return RegexpSyntaxDeclared
}
