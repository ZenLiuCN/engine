// Code generated by define_gene; DO NOT EDIT.
package multipart

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/net/textproto"
	"mime/multipart"
)

var (
	//go:embed mime_multipart.d.ts
	MimeMultipartDefine   []byte
	MimeMultipartDeclared = map[string]any{
		"newReader":          multipart.NewReader,
		"newWriter":          multipart.NewWriter,
		"ErrMessageTooLarge": multipart.ErrMessageTooLarge,

		"emptyReader": func() (v multipart.Reader) {
			return v
		},
		"refReader": func() *multipart.Reader {
			var x multipart.Reader
			return &x
		},
		"refOfReader": func(x multipart.Reader) *multipart.Reader {
			return &x
		},
		"emptyWriter": func() (v multipart.Writer) {
			return v
		},
		"refWriter": func() *multipart.Writer {
			var x multipart.Writer
			return &x
		},
		"refOfWriter": func(x multipart.Writer) *multipart.Writer {
			return &x
		},
		"emptyFileHeader": func() (v multipart.FileHeader) {
			return v
		},
		"refFileHeader": func() *multipart.FileHeader {
			var x multipart.FileHeader
			return &x
		},
		"refOfFileHeader": func(x multipart.FileHeader) *multipart.FileHeader {
			return &x
		},
		"emptyForm": func() (v multipart.Form) {
			return v
		},
		"refForm": func() *multipart.Form {
			var x multipart.Form
			return &x
		},
		"refOfForm": func(x multipart.Form) *multipart.Form {
			return &x
		},
		"emptyPart": func() (v multipart.Part) {
			return v
		},
		"refPart": func() *multipart.Part {
			var x multipart.Part
			return &x
		},
		"refOfPart": func(x multipart.Part) *multipart.Part {
			return &x
		}}
)

func init() {
	engine.RegisterModule(MimeMultipartModule{})
}

type MimeMultipartModule struct{}

func (S MimeMultipartModule) Identity() string {
	return "golang/mime/multipart"
}
func (S MimeMultipartModule) TypeDefine() []byte {
	return MimeMultipartDefine
}
func (S MimeMultipartModule) Exports() map[string]any {
	return MimeMultipartDeclared
}
