// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/mime/multipart'{
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as textproto from 'golang/net/textproto'
	// @ts-ignore
	import type {int64,Struct,error,Ref,int,GoError} from 'go'
	export const ErrMessageTooLarge:GoError
	export interface File extends io.Seeker,io.Closer,io.Reader,io.ReaderAt{
	}
	export interface FileHeader extends Struct<FileHeader>{
		filename:string
		header:textproto.MIMEHeader
		size:int64
		open():File
	}
	export interface Form extends Struct<Form>{
		value:Record<string,string[]>
		file:Record<string,Ref<FileHeader>>
		removeAll()/*error*/
	}
	export function newReader(r:io.Reader,boundary:string):Ref<Reader>
	export function newWriter(w:io.Writer):Ref<Writer>
	export interface Part extends Struct<Part>,io.ReadCloser,io.Closer{
		header:textproto.MIMEHeader
		formName():string
		fileName():string
		read(d:Uint8Array):int
		close():error
	}
	export interface Reader extends Struct<Reader>{
		readForm(maxMemory:int64):Ref<Form>
		nextPart():Ref<Part>
		nextRawPart():Ref<Part>
	}
	export interface Writer extends Struct<Writer>,io.Closer{
		boundary():string
		setBoundary(boundary:string)/*error*/
		formDataContentType():string
		createPart(header:textproto.MIMEHeader):io.Writer
		createFormFile(fieldname:string,filename:string):io.Writer
		createFormField(fieldname:string):io.Writer
		writeField(fieldname:string,value:string)/*error*/
		close():error
	}

export function emptyForm():Form
export function refForm():Ref<Form>
export function refOfForm(x:Form):Ref<Form>
export function emptyPart():Part
export function refPart():Ref<Part>
export function refOfPart(x:Part):Ref<Part>
export function emptyReader():Reader
export function refReader():Ref<Reader>
export function refOfReader(x:Reader):Ref<Reader>
export function emptyWriter():Writer
export function refWriter():Ref<Writer>
export function refOfWriter(x:Writer):Ref<Writer>
export function emptyFileHeader():FileHeader
export function refFileHeader():Ref<FileHeader>
export function refOfFileHeader(x:FileHeader):Ref<FileHeader>
}
