// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/strconv'{
	// @ts-ignore
	import type {int64,uint64,error,complex128,byte,int,rune,GoError,Struct,bool,float64} from 'go'
	export function appendBool(dst:Uint8Array,b:bool):Uint8Array
	export function appendFloat(dst:Uint8Array,f:float64,fmt:byte,prec:int,bitSize:int):Uint8Array
	export function appendInt(dst:Uint8Array,i:int64,base:int):Uint8Array
	export function appendQuote(dst:Uint8Array,s:string):Uint8Array
	export function appendQuoteRune(dst:Uint8Array,r:rune):Uint8Array
	export function appendQuoteRuneToASCII(dst:Uint8Array,r:rune):Uint8Array
	export function appendQuoteRuneToGraphic(dst:Uint8Array,r:rune):Uint8Array
	export function appendQuoteToASCII(dst:Uint8Array,s:string):Uint8Array
	export function appendQuoteToGraphic(dst:Uint8Array,s:string):Uint8Array
	export function appendUint(dst:Uint8Array,i:uint64,base:int):Uint8Array
	export function atoi(s:string):int
	export function canBackquote(s:string):bool
	export const ErrRange:GoError
	export const ErrSyntax:GoError
	export function formatBool(b:bool):string
	export function formatComplex(c:complex128,fmt:byte,prec:int,bitSize:int):string
	export function formatFloat(f:float64,fmt:byte,prec:int,bitSize:int):string
	export function formatInt(i:int64,base:int):string
	export function formatUint(i:uint64,base:int):string
	//64
	export const IntSize:int
	export function isGraphic(r:rune):bool
	export function isPrint(r:rune):bool
	export function itoa(i:int):string
	export interface NumError extends Struct<NumError>,Error,GoError{
		func:string
		num:string
		err:GoError
		error():string
		unwrap()/*error*/
	}
	export function parseBool(str:string):bool
	export function parseComplex(s:string,bitSize:int):complex128
	export function parseFloat(s:string,bitSize:int):float64
	export function parseInt(s:string,base:int,bitSize:int):int64
	export function parseUint(s:string,base:int,bitSize:int):uint64
	export function quote(s:string):string
	export function quoteRune(r:rune):string
	export function quoteRuneToASCII(r:rune):string
	export function quoteRuneToGraphic(r:rune):string
	export function quoteToASCII(s:string):string
	export function quoteToGraphic(s:string):string
	export function quotedPrefix(s:string):string
	export function unquote(s:string):string
	export function unquoteChar(s:string,quote:byte):[rune,bool,string]

}
