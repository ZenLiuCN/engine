// Code generated by define_gene; DO NOT EDIT.
package gzip

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"compress/gzip"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/time"
)

var (
	//go:embed compress_gzip.d.ts
	CompressGzipDefine   []byte
	CompressGzipDeclared = map[string]any{
		"ErrHeader":          gzip.ErrHeader,
		"newReader":          gzip.NewReader,
		"newWriter":          gzip.NewWriter,
		"NoCompression":      gzip.NoCompression,
		"BestSpeed":          gzip.BestSpeed,
		"DefaultCompression": gzip.DefaultCompression,
		"HuffmanOnly":        gzip.HuffmanOnly,
		"newWriterLevel":     gzip.NewWriterLevel,
		"BestCompression":    gzip.BestCompression,
		"ErrChecksum":        gzip.ErrChecksum,

		"emptyWriter": func() (v gzip.Writer) {
			return v
		},
		"refWriter": func() *gzip.Writer {
			var x gzip.Writer
			return &x
		},
		"refOfWriter": func(x gzip.Writer) *gzip.Writer {
			return &x
		},
		"emptyHeader": func() (v gzip.Header) {
			return v
		},
		"refHeader": func() *gzip.Header {
			var x gzip.Header
			return &x
		},
		"refOfHeader": func(x gzip.Header) *gzip.Header {
			return &x
		},
		"emptyReader": func() (v gzip.Reader) {
			return v
		},
		"refReader": func() *gzip.Reader {
			var x gzip.Reader
			return &x
		},
		"refOfReader": func(x gzip.Reader) *gzip.Reader {
			return &x
		}}
)

func init() {
	engine.RegisterModule(CompressGzipModule{})
}

type CompressGzipModule struct{}

func (S CompressGzipModule) Identity() string {
	return "golang/compress/gzip"
}
func (S CompressGzipModule) TypeDefine() []byte {
	return CompressGzipDefine
}
func (S CompressGzipModule) Exports() map[string]any {
	return CompressGzipDeclared
}
