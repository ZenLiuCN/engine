// Code generated by define_gene; DO NOT EDIT.
package lzw

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"compress/lzw"
	_ "github.com/ZenLiuCN/engine/golang/io"
)

var (
	//go:embed compress_lzw.d.ts
	CompressLzwDefine   []byte
	CompressLzwDeclared = map[string]any{
		"MSB":       lzw.MSB,
		"newReader": lzw.NewReader,
		"newWriter": lzw.NewWriter,
		"LSB":       lzw.LSB,

		"emptyWriter": func() (v lzw.Writer) {
			return v
		},
		"refWriter": func() *lzw.Writer {
			var x lzw.Writer
			return &x
		},
		"refOfWriter": func(x lzw.Writer) *lzw.Writer {
			return &x
		},
		"emptyReader": func() (v lzw.Reader) {
			return v
		},
		"refReader": func() *lzw.Reader {
			var x lzw.Reader
			return &x
		},
		"refOfReader": func(x lzw.Reader) *lzw.Reader {
			return &x
		}}
)

func init() {
	engine.RegisterModule(CompressLzwModule{})
}

type CompressLzwModule struct{}

func (S CompressLzwModule) Identity() string {
	return "golang/compress/lzw"
}
func (S CompressLzwModule) TypeDefine() []byte {
	return CompressLzwDefine
}
func (S CompressLzwModule) Exports() map[string]any {
	return CompressLzwDeclared
}
