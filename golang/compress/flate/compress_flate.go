// Code generated by define_gene; DO NOT EDIT.
package flate

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"compress/flate"
	_ "github.com/ZenLiuCN/engine/golang/io"
)

var (
	//go:embed compress_flate.d.ts
	CompressFlateDefine   []byte
	CompressFlateDeclared = map[string]any{
		"HuffmanOnly":        flate.HuffmanOnly,
		"newReaderDict":      flate.NewReaderDict,
		"newWriter":          flate.NewWriter,
		"BestCompression":    flate.BestCompression,
		"BestSpeed":          flate.BestSpeed,
		"DefaultCompression": flate.DefaultCompression,
		"newReader":          flate.NewReader,
		"newWriterDict":      flate.NewWriterDict,
		"NoCompression":      flate.NoCompression,

		"emptyWriter": func() (v flate.Writer) {
			return v
		},
		"refWriter": func() *flate.Writer {
			var x flate.Writer
			return &x
		},
		"refOfWriter": func(x flate.Writer) *flate.Writer {
			return &x
		}}
)

func init() {
	engine.RegisterModule(CompressFlateModule{})
}

type CompressFlateModule struct{}

func (S CompressFlateModule) Identity() string {
	return "golang/compress/flate"
}
func (S CompressFlateModule) TypeDefine() []byte {
	return CompressFlateDefine
}
func (S CompressFlateModule) Exports() map[string]any {
	return CompressFlateDeclared
}
