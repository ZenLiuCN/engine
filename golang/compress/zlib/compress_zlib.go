// Code generated by define_gene; DO NOT EDIT.
package zlib

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"compress/zlib"
	_ "github.com/ZenLiuCN/engine/golang/io"
)

var (
	//go:embed compress_zlib.d.ts
	CompressZlibDefine   []byte
	CompressZlibDeclared = map[string]any{
		"BestCompression":    zlib.BestCompression,
		"ErrDictionary":      zlib.ErrDictionary,
		"HuffmanOnly":        zlib.HuffmanOnly,
		"newReaderDict":      zlib.NewReaderDict,
		"newWriter":          zlib.NewWriter,
		"newWriterLevel":     zlib.NewWriterLevel,
		"NoCompression":      zlib.NoCompression,
		"DefaultCompression": zlib.DefaultCompression,
		"BestSpeed":          zlib.BestSpeed,
		"ErrChecksum":        zlib.ErrChecksum,
		"ErrHeader":          zlib.ErrHeader,
		"newReader":          zlib.NewReader,
		"newWriterLevelDict": zlib.NewWriterLevelDict,

		"emptyWriter": func() (v zlib.Writer) {
			return v
		},
		"refWriter": func() *zlib.Writer {
			var x zlib.Writer
			return &x
		},
		"refOfWriter": func(x zlib.Writer) *zlib.Writer {
			return &x
		}}
)

func init() {
	engine.RegisterModule(CompressZlibModule{})
}

type CompressZlibModule struct{}

func (S CompressZlibModule) Identity() string {
	return "golang/compress/zlib"
}
func (S CompressZlibModule) TypeDefine() []byte {
	return CompressZlibDefine
}
func (S CompressZlibModule) Exports() map[string]any {
	return CompressZlibDeclared
}
