// Code generated by define_gene; DO NOT EDIT.
package dsa

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"crypto/dsa"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/math/big"
)

var (
	//go:embed crypto_dsa.d.ts
	CryptoDsaDefine   []byte
	CryptoDsaDeclared = map[string]any{
		"ErrInvalidPublicKey": dsa.ErrInvalidPublicKey,
		"L2048N256":           dsa.L2048N256,
		"verify":              dsa.Verify,
		"sign":                dsa.Sign,
		"generateKey":         dsa.GenerateKey,
		"generateParameters":  dsa.GenerateParameters,
		"L1024N160":           dsa.L1024N160,
		"L2048N224":           dsa.L2048N224,
		"L3072N256":           dsa.L3072N256,

		"emptyParameters": func() (v dsa.Parameters) {
			return v
		},
		"refParameters": func() *dsa.Parameters {
			var x dsa.Parameters
			return &x
		},
		"refOfParameters": func(x dsa.Parameters) *dsa.Parameters {
			return &x
		},
		"emptyPrivateKey": func() (v dsa.PrivateKey) {
			return v
		},
		"refPrivateKey": func() *dsa.PrivateKey {
			var x dsa.PrivateKey
			return &x
		},
		"refOfPrivateKey": func(x dsa.PrivateKey) *dsa.PrivateKey {
			return &x
		},
		"emptyPublicKey": func() (v dsa.PublicKey) {
			return v
		},
		"refPublicKey": func() *dsa.PublicKey {
			var x dsa.PublicKey
			return &x
		},
		"refOfPublicKey": func(x dsa.PublicKey) *dsa.PublicKey {
			return &x
		}}
)

func init() {
	engine.RegisterModule(CryptoDsaModule{})
}

type CryptoDsaModule struct{}

func (S CryptoDsaModule) Identity() string {
	return "golang/crypto/dsa"
}
func (S CryptoDsaModule) TypeDefine() []byte {
	return CryptoDsaDefine
}
func (S CryptoDsaModule) Exports() map[string]any {
	return CryptoDsaDeclared
}
