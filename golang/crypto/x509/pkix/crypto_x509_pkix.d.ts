// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/crypto/x509/pkix'{
	// @ts-ignore
	import * as asn1 from 'golang/encoding/asn1'
	// @ts-ignore
	import * as time from 'golang/time'
	// @ts-ignore
	import * as fmt from 'golang/fmt'
	// @ts-ignore
	import * as big from 'golang/math/big'
	// @ts-ignore
	import type {Struct,bool,Ref,int} from 'go'
	export interface AlgorithmIdentifier extends Struct<AlgorithmIdentifier>{
		algorithm:asn1.ObjectIdentifier
		parameters:asn1.RawValue
	}
	export interface AttributeTypeAndValue extends Struct<AttributeTypeAndValue>{
		type:asn1.ObjectIdentifier
		value:any
	}
	export interface AttributeTypeAndValueSET extends Struct<AttributeTypeAndValueSET>{
		type:asn1.ObjectIdentifier
		value:AttributeTypeAndValue[][]
	}
	export interface CertificateList extends Struct<CertificateList>{
		tbsCertList:TBSCertificateList
		signatureAlgorithm:AlgorithmIdentifier
		signatureValue:asn1.BitString
		hasExpired(now:time.Time):bool
	}
	export interface Extension extends Struct<Extension>{
		id:asn1.ObjectIdentifier
		critical:bool
		value:Uint8Array
	}
	export interface Name extends Struct<Name>,fmt.Stringer{
		country:string[]
		organization:string[]
		organizationalUnit:string[]
		locality:string[]
		province:string[]
		streetAddress:string[]
		postalCode:string[]
		serialNumber:string
		commonName:string
		names:AttributeTypeAndValue[]
		extraNames:AttributeTypeAndValue[]
		fillFromRDNSequence(rdns:Ref<RDNSequence>):void
		toRDNSequence():RDNSequence
		string():string
	}
	export interface RDNSequence extends Array<RelativeDistinguishedNameSET>{
		string():string
	}
	export interface RelativeDistinguishedNameSET extends Array<AttributeTypeAndValue>{
	}
	export interface RevokedCertificate extends Struct<RevokedCertificate>{
		serialNumber:Ref<big.Int>
		revocationTime:time.Time
		extensions:Extension[]
	}
	export interface TBSCertificateList extends Struct<TBSCertificateList>{
		raw:asn1.RawContent
		version:int
		signature:AlgorithmIdentifier
		issuer:RDNSequence
		thisUpdate:time.Time
		nextUpdate:time.Time
		revokedCertificates:RevokedCertificate[]
		extensions:Extension[]
	}

export function emptyAlgorithmIdentifier():AlgorithmIdentifier
export function refAlgorithmIdentifier():Ref<AlgorithmIdentifier>
export function refOfAlgorithmIdentifier(x:AlgorithmIdentifier):Ref<AlgorithmIdentifier>
export function emptyAttributeTypeAndValue():AttributeTypeAndValue
export function refAttributeTypeAndValue():Ref<AttributeTypeAndValue>
export function refOfAttributeTypeAndValue(x:AttributeTypeAndValue):Ref<AttributeTypeAndValue>
export function emptyAttributeTypeAndValueSET():AttributeTypeAndValueSET
export function refAttributeTypeAndValueSET():Ref<AttributeTypeAndValueSET>
export function refOfAttributeTypeAndValueSET(x:AttributeTypeAndValueSET):Ref<AttributeTypeAndValueSET>
export function emptyCertificateList():CertificateList
export function refCertificateList():Ref<CertificateList>
export function refOfCertificateList(x:CertificateList):Ref<CertificateList>
export function emptyExtension():Extension
export function refExtension():Ref<Extension>
export function refOfExtension(x:Extension):Ref<Extension>
export function emptyName():Name
export function refName():Ref<Name>
export function refOfName(x:Name):Ref<Name>
export function emptyRevokedCertificate():RevokedCertificate
export function refRevokedCertificate():Ref<RevokedCertificate>
export function refOfRevokedCertificate(x:RevokedCertificate):Ref<RevokedCertificate>
export function emptyTBSCertificateList():TBSCertificateList
export function refTBSCertificateList():Ref<TBSCertificateList>
export function refOfTBSCertificateList(x:TBSCertificateList):Ref<TBSCertificateList>}
