// Code generated by define_gene; DO NOT EDIT.
package pkix

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"crypto/x509/pkix"
	_ "github.com/ZenLiuCN/engine/golang/encoding/asn1"
	_ "github.com/ZenLiuCN/engine/golang/fmt"
	_ "github.com/ZenLiuCN/engine/golang/math/big"
	_ "github.com/ZenLiuCN/engine/golang/time"
)

var (
	//go:embed crypto_x509_pkix.d.ts
	Crypto509PkixDefine   []byte
	Crypto509PkixDeclared = map[string]any{

		"emptyAttributeTypeAndValue": func() (v pkix.AttributeTypeAndValue) {
			return v
		},
		"refAttributeTypeAndValue": func() *pkix.AttributeTypeAndValue {
			var x pkix.AttributeTypeAndValue
			return &x
		},
		"refOfAttributeTypeAndValue": func(x pkix.AttributeTypeAndValue) *pkix.AttributeTypeAndValue {
			return &x
		},
		"emptyAttributeTypeAndValueSET": func() (v pkix.AttributeTypeAndValueSET) {
			return v
		},
		"refAttributeTypeAndValueSET": func() *pkix.AttributeTypeAndValueSET {
			var x pkix.AttributeTypeAndValueSET
			return &x
		},
		"refOfAttributeTypeAndValueSET": func(x pkix.AttributeTypeAndValueSET) *pkix.AttributeTypeAndValueSET {
			return &x
		},
		"emptyCertificateList": func() (v pkix.CertificateList) {
			return v
		},
		"refCertificateList": func() *pkix.CertificateList {
			var x pkix.CertificateList
			return &x
		},
		"refOfCertificateList": func(x pkix.CertificateList) *pkix.CertificateList {
			return &x
		},
		"emptyExtension": func() (v pkix.Extension) {
			return v
		},
		"refExtension": func() *pkix.Extension {
			var x pkix.Extension
			return &x
		},
		"refOfExtension": func(x pkix.Extension) *pkix.Extension {
			return &x
		},
		"emptyName": func() (v pkix.Name) {
			return v
		},
		"refName": func() *pkix.Name {
			var x pkix.Name
			return &x
		},
		"refOfName": func(x pkix.Name) *pkix.Name {
			return &x
		},
		"emptyRevokedCertificate": func() (v pkix.RevokedCertificate) {
			return v
		},
		"refRevokedCertificate": func() *pkix.RevokedCertificate {
			var x pkix.RevokedCertificate
			return &x
		},
		"refOfRevokedCertificate": func(x pkix.RevokedCertificate) *pkix.RevokedCertificate {
			return &x
		},
		"emptyTBSCertificateList": func() (v pkix.TBSCertificateList) {
			return v
		},
		"refTBSCertificateList": func() *pkix.TBSCertificateList {
			var x pkix.TBSCertificateList
			return &x
		},
		"refOfTBSCertificateList": func(x pkix.TBSCertificateList) *pkix.TBSCertificateList {
			return &x
		},
		"emptyAlgorithmIdentifier": func() (v pkix.AlgorithmIdentifier) {
			return v
		},
		"refAlgorithmIdentifier": func() *pkix.AlgorithmIdentifier {
			var x pkix.AlgorithmIdentifier
			return &x
		},
		"refOfAlgorithmIdentifier": func(x pkix.AlgorithmIdentifier) *pkix.AlgorithmIdentifier {
			return &x
		}}
)

func init() {
	engine.RegisterModule(Crypto509PkixModule{})
}

type Crypto509PkixModule struct{}

func (S Crypto509PkixModule) Identity() string {
	return "golang/crypto/x509/pkix"
}
func (S Crypto509PkixModule) TypeDefine() []byte {
	return Crypto509PkixDefine
}
func (S Crypto509PkixModule) Exports() map[string]any {
	return Crypto509PkixDeclared
}
