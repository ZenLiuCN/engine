// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/crypto/ecdsa'{
	// @ts-ignore
	import * as crypto from 'golang/crypto'
	// @ts-ignore
	import * as ecdh from 'golang/crypto/ecdh'
	// @ts-ignore
	import * as elliptic from 'golang/crypto/elliptic'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as big from 'golang/math/big'
	// @ts-ignore
	import type {Ref,error,Struct,bool} from 'go'
	export function generateKey(c:elliptic.Curve,rand:io.Reader):[Ref<PrivateKey>,error]
	export interface PrivateKey extends crypto.PrivateKey,Struct<PrivateKey>,elliptic.Curve,crypto.DecrypterOpts,crypto.Signer,crypto.PublicKey{
		publicKey:PublicKey
		D:Ref<big.Int>
		ecdh():[Ref<ecdh.PrivateKey>,error]
		public():crypto.PublicKey
		equal(x:crypto.PrivateKey):bool
		sign(rand:io.Reader,digest:Uint8Array,opts:crypto.SignerOpts):[Uint8Array,error]
	}
	export interface PublicKey extends Struct<PublicKey>,elliptic.Curve,crypto.DecrypterOpts,crypto.PublicKey,crypto.PrivateKey{
		curve:elliptic.Curve
		X:Ref<big.Int>
		Y:Ref<big.Int>
		ecdh():[Ref<ecdh.PublicKey>,error]
		equal(x:crypto.PublicKey):bool
	}
	export function sign(rand:io.Reader,priv:Ref<PrivateKey>,hash:Uint8Array):[Ref<big.Int>,Ref<big.Int>,error]
	export function signASN1(rand:io.Reader,priv:Ref<PrivateKey>,hash:Uint8Array):[Uint8Array,error]
	export function verify(pub:Ref<PublicKey>,hash:Uint8Array,r:Ref<big.Int>,s:Ref<big.Int>):bool
	export function verifyASN1(pub:Ref<PublicKey>,hash:Uint8Array,sig:Uint8Array):bool

export function emptyPrivateKey():PrivateKey
export function refPrivateKey():Ref<PrivateKey>
export function refOfPrivateKey(x:PrivateKey):Ref<PrivateKey>
export function emptyPublicKey():PublicKey
export function refPublicKey():Ref<PublicKey>
export function refOfPublicKey(x:PublicKey):Ref<PublicKey>}
