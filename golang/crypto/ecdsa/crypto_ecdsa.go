// Code generated by define_gene; DO NOT EDIT.
package ecdsa

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"crypto/ecdsa"
	_ "github.com/ZenLiuCN/engine/golang/crypto"
	_ "github.com/ZenLiuCN/engine/golang/crypto/ecdh"
	_ "github.com/ZenLiuCN/engine/golang/crypto/elliptic"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/math/big"
)

var (
	//go:embed crypto_ecdsa.d.ts
	CryptoEcdsaDefine   []byte
	CryptoEcdsaDeclared = map[string]any{
		"verify":      ecdsa.Verify,
		"verifyASN1":  ecdsa.VerifyASN1,
		"generateKey": ecdsa.GenerateKey,
		"sign":        ecdsa.Sign,
		"signASN1":    ecdsa.SignASN1,

		"emptyPublicKey": func() (v ecdsa.PublicKey) {
			return v
		},
		"refPublicKey": func() *ecdsa.PublicKey {
			var x ecdsa.PublicKey
			return &x
		},
		"refOfPublicKey": func(x ecdsa.PublicKey) *ecdsa.PublicKey {
			return &x
		},
		"emptyPrivateKey": func() (v ecdsa.PrivateKey) {
			return v
		},
		"refPrivateKey": func() *ecdsa.PrivateKey {
			var x ecdsa.PrivateKey
			return &x
		},
		"refOfPrivateKey": func(x ecdsa.PrivateKey) *ecdsa.PrivateKey {
			return &x
		}}
)

func init() {
	engine.RegisterModule(CryptoEcdsaModule{})
}

type CryptoEcdsaModule struct{}

func (S CryptoEcdsaModule) Identity() string {
	return "golang/crypto/ecdsa"
}
func (S CryptoEcdsaModule) TypeDefine() []byte {
	return CryptoEcdsaDefine
}
func (S CryptoEcdsaModule) Exports() map[string]any {
	return CryptoEcdsaDeclared
}
