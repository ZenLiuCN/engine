// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/os/exec'{
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as os from 'golang/os'
	// @ts-ignore
	import * as syscall from 'golang/syscall'
	// @ts-ignore
	import * as time from 'golang/time'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import type {Ref,GoError,error,Struct} from 'go'
	export interface Cmd extends Struct<Cmd>{
		path:string
		args:string[]
		env:string[]
		dir:string
		stdin:io.Reader
		stdout:io.Writer
		stderr:io.Writer
		extraFiles:Ref<os.File>[]
		sysProcAttr:Ref<syscall.SysProcAttr>
		process:Ref<os.Process>
		processState:Ref<os.ProcessState>
		err:GoError
		cancel:())=>void/*error*/
		waitDelay:time.Duration
		string():string
		run()/*error*/
		start()/*error*/
		wait()/*error*/
		output():Uint8Array
		combinedOutput():Uint8Array
		stdinPipe():io.WriteCloser
		stdoutPipe():io.ReadCloser
		stderrPipe():io.ReadCloser
		environ():string[]
	}
	export function command(name:string,...arg:string[]):Ref<Cmd>
	export function commandContext(ctx:context.Context,name:string,...arg:string[]):Ref<Cmd>
	export const ErrDot:GoError
	export const ErrNotFound:GoError
	export const ErrWaitDelay:GoError
	export interface Error extends Struct<Error>,Error,GoError{
		name:string
		err:GoError
		error():string
		unwrap()/*error*/
	}
	export interface ExitError extends Error,GoError,Struct<ExitError>{
		processState:Ref<os.ProcessState>
		stderr:Uint8Array
		error():string
	}
	export function lookPath(file:string):string

export function emptyCmd():Cmd
export function refCmd():Ref<Cmd>
export function refOfCmd(x:Cmd):Ref<Cmd>
}
