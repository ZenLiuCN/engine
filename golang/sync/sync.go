// Code generated by define_gene; DO NOT EDIT.
package sync

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"sync"
)

var (
	//go:embed sync.d.ts
	SyncDefine   []byte
	SyncDeclared = map[string]any{
		"newCond":  sync.NewCond,
		"onceFunc": sync.OnceFunc,

		"emptyRWMutex": func() (v sync.RWMutex) {
			return v
		},
		"refRWMutex": func() *sync.RWMutex {
			var x sync.RWMutex
			return &x
		},
		"refOfRWMutex": func(x sync.RWMutex) *sync.RWMutex {
			return &x
		},
		"emptyWaitGroup": func() (v sync.WaitGroup) {
			return v
		},
		"refWaitGroup": func() *sync.WaitGroup {
			var x sync.WaitGroup
			return &x
		},
		"refOfWaitGroup": func(x sync.WaitGroup) *sync.WaitGroup {
			return &x
		},
		"emptyCond": func() (v sync.Cond) {
			return v
		},
		"refCond": func() *sync.Cond {
			var x sync.Cond
			return &x
		},
		"refOfCond": func(x sync.Cond) *sync.Cond {
			return &x
		},
		"emptyMap": func() (v sync.Map) {
			return v
		},
		"refMap": func() *sync.Map {
			var x sync.Map
			return &x
		},
		"refOfMap": func(x sync.Map) *sync.Map {
			return &x
		},
		"emptyMutex": func() (v sync.Mutex) {
			return v
		},
		"refMutex": func() *sync.Mutex {
			var x sync.Mutex
			return &x
		},
		"refOfMutex": func(x sync.Mutex) *sync.Mutex {
			return &x
		},
		"emptyOnce": func() (v sync.Once) {
			return v
		},
		"refOnce": func() *sync.Once {
			var x sync.Once
			return &x
		},
		"refOfOnce": func(x sync.Once) *sync.Once {
			return &x
		},
		"emptyPool": func() (v sync.Pool) {
			return v
		},
		"refPool": func() *sync.Pool {
			var x sync.Pool
			return &x
		},
		"refOfPool": func(x sync.Pool) *sync.Pool {
			return &x
		}}
)

func init() {
	engine.RegisterModule(SyncModule{})
}

type SyncModule struct{}

func (S SyncModule) Identity() string {
	return "golang/sync"
}
func (S SyncModule) TypeDefine() []byte {
	return SyncDefine
}
func (S SyncModule) Exports() map[string]any {
	return SyncDeclared
}
