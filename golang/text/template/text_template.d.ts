// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/text/template'{
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as fs from 'golang/io/fs'
	// @ts-ignore
	import * as parse from 'golang/text/template/parse'
	// @ts-ignore
	import type {bool,Ref,GoError,Struct,error,Proto} from 'go'
	export interface ExecError extends Struct<ExecError>,Error,GoError{
		name:string
		err:GoError
		error():string
		unwrap():error
	}
	export interface FuncMap extends Proto<FuncMap>,Record<string,any>{
	}
	export function htmlEscape(w:io.Writer,b:Uint8Array):void
	export function htmlEscapeString(s:string):string
	export function htmlEscaper(...args:any[]):string
	export function isTrue(val:any):[bool,bool]
	export function jsEscape(w:io.Writer,b:Uint8Array):void
	export function jsEscapeString(s:string):string
	export function jsEscaper(...args:any[]):string
	export function must(t:Ref<Template>,err:error):Ref<Template>
	export function New(name:string):Ref<Template>
	export function parseFS(fsys:fs.FS,...patterns:string[]):[Ref<Template>,error]
	export function parseFiles(...filenames:string[]):Ref<Template>
	export function parseGlob(pattern:string):Ref<Template>
	export interface Template extends Struct<Template>{
		tree:Ref<parse.Tree>
		executeTemplate(wr:io.Writer,name:string,data:any):error
		execute(wr:io.Writer,data:any):error
		definedTemplates():string
		parseFiles(...filenames:string[]):[Ref<Template>,error]
		parseGlob(pattern:string):[Ref<Template>,error]
		parseFS(fsys:fs.FS,...patterns:string[]):[Ref<Template>,error]
		option(...opt:string[]):Ref<Template>
		name():string
		New(name:string):Ref<Template>
		clone():[Ref<Template>,error]
		addParseTree(name:string,tree:Ref<parse.Tree>):[Ref<Template>,error]
		templates():Ref<Template>[]
		delims(left:string,right:string):Ref<Template>
		funcs(funcMap:FuncMap):Ref<Template>
		lookup(name:string):Ref<Template>
		parse(text:string):[Ref<Template>,error]
	}
	export function urlQueryEscaper(...args:any[]):string

export function emptyTemplate():Template
export function refTemplate():Ref<Template>
export function refOfTemplate(x:Template):Ref<Template>}
