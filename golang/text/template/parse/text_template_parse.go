// Code generated by define_gene; DO NOT EDIT.
package parse

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/fmt"
	"text/template/parse"
)

var (
	//go:embed text_template_parse.d.ts
	TextTemplateParseDefine   []byte
	TextTemplateParseDeclared = map[string]any{
		"NodeCommand":    parse.NodeCommand,
		"NodeComment":    parse.NodeComment,
		"NodeIf":         parse.NodeIf,
		"NodeChain":      parse.NodeChain,
		"NodeDot":        parse.NodeDot,
		"NodeField":      parse.NodeField,
		"NodeVariable":   parse.NodeVariable,
		"NodeWith":       parse.NodeWith,
		"NodeBool":       parse.NodeBool,
		"NodeContinue":   parse.NodeContinue,
		"NodeList":       parse.NodeList,
		"NodePipe":       parse.NodePipe,
		"New":            parse.New,
		"NodeRange":      parse.NodeRange,
		"NodeTemplate":   parse.NodeTemplate,
		"NodeText":       parse.NodeText,
		"NodeNumber":     parse.NodeNumber,
		"ParseComments":  parse.ParseComments,
		"NodeAction":     parse.NodeAction,
		"NodeIdentifier": parse.NodeIdentifier,
		"NodeNil":        parse.NodeNil,
		"isEmptyTree":    parse.IsEmptyTree,
		"NodeBreak":      parse.NodeBreak,
		"parse":          parse.Parse,
		"SkipFuncCheck":  parse.SkipFuncCheck,
		"newIdentifier":  parse.NewIdentifier,
		"NodeString":     parse.NodeString,

		"emptyTemplateNode": func() (v parse.TemplateNode) {
			return v
		},
		"refTemplateNode": func() *parse.TemplateNode {
			var x parse.TemplateNode
			return &x
		},
		"refOfTemplateNode": func(x parse.TemplateNode) *parse.TemplateNode {
			return &x
		},
		"emptyTextNode": func() (v parse.TextNode) {
			return v
		},
		"refTextNode": func() *parse.TextNode {
			var x parse.TextNode
			return &x
		},
		"refOfTextNode": func(x parse.TextNode) *parse.TextNode {
			return &x
		},
		"emptyStringNode": func() (v parse.StringNode) {
			return v
		},
		"refStringNode": func() *parse.StringNode {
			var x parse.StringNode
			return &x
		},
		"refOfStringNode": func(x parse.StringNode) *parse.StringNode {
			return &x
		},
		"emptyTree": func() (v parse.Tree) {
			return v
		},
		"refTree": func() *parse.Tree {
			var x parse.Tree
			return &x
		},
		"refOfTree": func(x parse.Tree) *parse.Tree {
			return &x
		},
		"emptyBoolNode": func() (v parse.BoolNode) {
			return v
		},
		"refBoolNode": func() *parse.BoolNode {
			var x parse.BoolNode
			return &x
		},
		"refOfBoolNode": func(x parse.BoolNode) *parse.BoolNode {
			return &x
		},
		"emptyBranchNode": func() (v parse.BranchNode) {
			return v
		},
		"refBranchNode": func() *parse.BranchNode {
			var x parse.BranchNode
			return &x
		},
		"refOfBranchNode": func(x parse.BranchNode) *parse.BranchNode {
			return &x
		},
		"emptyBreakNode": func() (v parse.BreakNode) {
			return v
		},
		"refBreakNode": func() *parse.BreakNode {
			var x parse.BreakNode
			return &x
		},
		"refOfBreakNode": func(x parse.BreakNode) *parse.BreakNode {
			return &x
		},
		"emptyContinueNode": func() (v parse.ContinueNode) {
			return v
		},
		"refContinueNode": func() *parse.ContinueNode {
			var x parse.ContinueNode
			return &x
		},
		"refOfContinueNode": func(x parse.ContinueNode) *parse.ContinueNode {
			return &x
		},
		"emptyPipeNode": func() (v parse.PipeNode) {
			return v
		},
		"refPipeNode": func() *parse.PipeNode {
			var x parse.PipeNode
			return &x
		},
		"refOfPipeNode": func(x parse.PipeNode) *parse.PipeNode {
			return &x
		},
		"emptyRangeNode": func() (v parse.RangeNode) {
			return v
		},
		"refRangeNode": func() *parse.RangeNode {
			var x parse.RangeNode
			return &x
		},
		"refOfRangeNode": func(x parse.RangeNode) *parse.RangeNode {
			return &x
		},
		"emptyIfNode": func() (v parse.IfNode) {
			return v
		},
		"refIfNode": func() *parse.IfNode {
			var x parse.IfNode
			return &x
		},
		"refOfIfNode": func(x parse.IfNode) *parse.IfNode {
			return &x
		},
		"emptyListNode": func() (v parse.ListNode) {
			return v
		},
		"refListNode": func() *parse.ListNode {
			var x parse.ListNode
			return &x
		},
		"refOfListNode": func(x parse.ListNode) *parse.ListNode {
			return &x
		},
		"emptyActionNode": func() (v parse.ActionNode) {
			return v
		},
		"refActionNode": func() *parse.ActionNode {
			var x parse.ActionNode
			return &x
		},
		"refOfActionNode": func(x parse.ActionNode) *parse.ActionNode {
			return &x
		},
		"emptyChainNode": func() (v parse.ChainNode) {
			return v
		},
		"refChainNode": func() *parse.ChainNode {
			var x parse.ChainNode
			return &x
		},
		"refOfChainNode": func(x parse.ChainNode) *parse.ChainNode {
			return &x
		},
		"emptyCommentNode": func() (v parse.CommentNode) {
			return v
		},
		"refCommentNode": func() *parse.CommentNode {
			var x parse.CommentNode
			return &x
		},
		"refOfCommentNode": func(x parse.CommentNode) *parse.CommentNode {
			return &x
		},
		"emptyDotNode": func() (v parse.DotNode) {
			return v
		},
		"refDotNode": func() *parse.DotNode {
			var x parse.DotNode
			return &x
		},
		"refOfDotNode": func(x parse.DotNode) *parse.DotNode {
			return &x
		},
		"emptyFieldNode": func() (v parse.FieldNode) {
			return v
		},
		"refFieldNode": func() *parse.FieldNode {
			var x parse.FieldNode
			return &x
		},
		"refOfFieldNode": func(x parse.FieldNode) *parse.FieldNode {
			return &x
		},
		"emptyIdentifierNode": func() (v parse.IdentifierNode) {
			return v
		},
		"refIdentifierNode": func() *parse.IdentifierNode {
			var x parse.IdentifierNode
			return &x
		},
		"refOfIdentifierNode": func(x parse.IdentifierNode) *parse.IdentifierNode {
			return &x
		},
		"emptyNumberNode": func() (v parse.NumberNode) {
			return v
		},
		"refNumberNode": func() *parse.NumberNode {
			var x parse.NumberNode
			return &x
		},
		"refOfNumberNode": func(x parse.NumberNode) *parse.NumberNode {
			return &x
		},
		"emptyWithNode": func() (v parse.WithNode) {
			return v
		},
		"refWithNode": func() *parse.WithNode {
			var x parse.WithNode
			return &x
		},
		"refOfWithNode": func(x parse.WithNode) *parse.WithNode {
			return &x
		},
		"emptyCommandNode": func() (v parse.CommandNode) {
			return v
		},
		"refCommandNode": func() *parse.CommandNode {
			var x parse.CommandNode
			return &x
		},
		"refOfCommandNode": func(x parse.CommandNode) *parse.CommandNode {
			return &x
		},
		"emptyNilNode": func() (v parse.NilNode) {
			return v
		},
		"refNilNode": func() *parse.NilNode {
			var x parse.NilNode
			return &x
		},
		"refOfNilNode": func(x parse.NilNode) *parse.NilNode {
			return &x
		},
		"emptyVariableNode": func() (v parse.VariableNode) {
			return v
		},
		"refVariableNode": func() *parse.VariableNode {
			var x parse.VariableNode
			return &x
		},
		"refOfVariableNode": func(x parse.VariableNode) *parse.VariableNode {
			return &x
		}}
)

func init() {
	engine.RegisterModule(TextTemplateParseModule{})
}

type TextTemplateParseModule struct{}

func (S TextTemplateParseModule) Identity() string {
	return "golang/text/template/parse"
}
func (S TextTemplateParseModule) TypeDefine() []byte {
	return TextTemplateParseDefine
}
func (S TextTemplateParseModule) Exports() map[string]any {
	return TextTemplateParseDeclared
}
