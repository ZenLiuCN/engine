// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/text/template/parse'{
	// @ts-ignore
	import * as fmt from 'golang/fmt'
	// @ts-ignore
	import type {complex128,error,Struct,bool,uint,uint64,float64,int,Ref,int64} from 'go'
	export interface ActionNode extends Struct<ActionNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		line:int
		pipe:Ref<PipeNode>
		string():string
		copy():Node
	}
	export interface BoolNode extends fmt.Stringer,Node,Struct<BoolNode>{
		nodeType:NodeType
		pos:Pos
		true:bool
		string():string
		copy():Node
	}
	export interface BranchNode extends fmt.Stringer,Node,Struct<BranchNode>{
		nodeType:NodeType
		pos:Pos
		line:int
		pipe:Ref<PipeNode>
		list:Ref<ListNode>
		elseList:Ref<ListNode>
		string():string
		copy():Node
	}
	export interface BreakNode extends Node,Struct<BreakNode>,fmt.Stringer{
		nodeType:NodeType
		pos:Pos
		line:int
		copy():Node
		string():string
	}
	export interface ChainNode extends Struct<ChainNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		node:Node
		field:string[]
		add(field:string):void
		string():string
		copy():Node
	}
	export interface CommandNode extends Struct<CommandNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		args:Node[]
		string():string
		copy():Node
	}
	export interface CommentNode extends Struct<CommentNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		text:string
		string():string
		copy():Node
	}
	export interface ContinueNode extends Struct<ContinueNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		line:int
		copy():Node
		string():string
	}
	export interface DotNode extends Struct<DotNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		type():NodeType
		string():string
		copy():Node
	}
	export interface FieldNode extends Struct<FieldNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		ident:string[]
		string():string
		copy():Node
	}
	export interface IdentifierNode extends Struct<IdentifierNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		ident:string
		setPos(pos:Pos):Ref<IdentifierNode>
		setTree(t:Ref<Tree>):Ref<IdentifierNode>
		string():string
		copy():Node
	}
	export interface IfNode extends Struct<IfNode>,fmt.Stringer,Node{
		branchNode:BranchNode
		copy():Node
	}
	export function isEmptyTree(n:Node):bool
	export interface ListNode extends Node,fmt.Stringer,Struct<ListNode>{
		nodeType:NodeType
		pos:Pos
		nodes:Node[]
		string():string
		copyList():Ref<ListNode>
		copy():Node
	}
	export interface Mode extends uint{
	}
	export function New(name:string,...funcs:Record<string[],any>[]):Ref<Tree>
	export function newIdentifier(ident:string):Ref<IdentifierNode>
	export interface NilNode extends fmt.Stringer,Node,Struct<NilNode>{
		nodeType:NodeType
		pos:Pos
		type():NodeType
		string():string
		copy():Node
	}
	export interface Node{
		copy():Node
		position():Pos
		string():string
		type():NodeType
	}
	export const NodeAction:NodeType
	export const NodeBool:NodeType
	export const NodeBreak:NodeType
	export const NodeChain:NodeType
	export const NodeCommand:NodeType
	export const NodeComment:NodeType
	export const NodeContinue:NodeType
	export const NodeDot:NodeType
	export const NodeField:NodeType
	export const NodeIdentifier:NodeType
	export const NodeIf:NodeType
	export const NodeList:NodeType
	export const NodeNil:NodeType
	export const NodeNumber:NodeType
	export const NodePipe:NodeType
	export const NodeRange:NodeType
	export const NodeString:NodeType
	export const NodeTemplate:NodeType
	export const NodeText:NodeType
	export interface NodeType extends int{
		type():NodeType
	}
	export const NodeVariable:NodeType
	export const NodeWith:NodeType
	export interface NumberNode extends Struct<NumberNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		isInt:bool
		isUint:bool
		isFloat:bool
		isComplex:bool
		int64:int64
		uint64:uint64
		float64:float64
		complex128:complex128
		text:string
		string():string
		copy():Node
	}
	export function parse(name:string,text:string,leftDelim:string,rightDelim:string,...funcs:Record<string[],any>[]):[Record<string,Ref<Tree>>,error]
	export const ParseComments:Mode
	export interface PipeNode extends fmt.Stringer,Node,Struct<PipeNode>{
		nodeType:NodeType
		pos:Pos
		line:int
		isAssign:bool
		decl:Ref<VariableNode>[]
		cmds:Ref<CommandNode>[]
		string():string
		copyPipe():Ref<PipeNode>
		copy():Node
	}
	export interface Pos extends int{
		position():Pos
	}
	export interface RangeNode extends Struct<RangeNode>,Node,fmt.Stringer{
		branchNode:BranchNode
		copy():Node
	}
	export const SkipFuncCheck:Mode
	export interface StringNode extends Struct<StringNode>,fmt.Stringer,Node{
		nodeType:NodeType
		pos:Pos
		quoted:string
		text:string
		string():string
		copy():Node
	}
	export interface TemplateNode extends Struct<TemplateNode>,Node,fmt.Stringer{
		nodeType:NodeType
		pos:Pos
		line:int
		name:string
		pipe:Ref<PipeNode>
		string():string
		copy():Node
	}
	export interface TextNode extends Struct<TextNode>,Node,fmt.Stringer{
		nodeType:NodeType
		pos:Pos
		text:Uint8Array
		string():string
		copy():Node
	}
	export interface Tree extends Struct<Tree>{
		name:string
		parseName:string
		root:Ref<ListNode>
		mode:Mode
		copy():Ref<Tree>
		errorContext(n:Node):[string,string]
		parse(text:string,leftDelim:string,rightDelim:string,treeSet:Record<string,Ref<Tree>>,...funcs:Record<string[],any>[]):[Ref<Tree>,error]
	}
	export interface VariableNode extends Struct<VariableNode>,Node,fmt.Stringer{
		nodeType:NodeType
		pos:Pos
		ident:string[]
		string():string
		copy():Node
	}
	export interface WithNode extends Struct<WithNode>,Node,fmt.Stringer{
		branchNode:BranchNode
		copy():Node
	}

export function emptyCommandNode():CommandNode
export function refCommandNode():Ref<CommandNode>
export function refOfCommandNode(x:CommandNode):Ref<CommandNode>
export function emptyNilNode():NilNode
export function refNilNode():Ref<NilNode>
export function refOfNilNode(x:NilNode):Ref<NilNode>
export function emptyVariableNode():VariableNode
export function refVariableNode():Ref<VariableNode>
export function refOfVariableNode(x:VariableNode):Ref<VariableNode>
export function emptyTemplateNode():TemplateNode
export function refTemplateNode():Ref<TemplateNode>
export function refOfTemplateNode(x:TemplateNode):Ref<TemplateNode>
export function emptyTextNode():TextNode
export function refTextNode():Ref<TextNode>
export function refOfTextNode(x:TextNode):Ref<TextNode>
export function emptyContinueNode():ContinueNode
export function refContinueNode():Ref<ContinueNode>
export function refOfContinueNode(x:ContinueNode):Ref<ContinueNode>
export function emptyPipeNode():PipeNode
export function refPipeNode():Ref<PipeNode>
export function refOfPipeNode(x:PipeNode):Ref<PipeNode>
export function emptyRangeNode():RangeNode
export function refRangeNode():Ref<RangeNode>
export function refOfRangeNode(x:RangeNode):Ref<RangeNode>
export function emptyStringNode():StringNode
export function refStringNode():Ref<StringNode>
export function refOfStringNode(x:StringNode):Ref<StringNode>
export function emptyTree():Tree
export function refTree():Ref<Tree>
export function refOfTree(x:Tree):Ref<Tree>
export function emptyBoolNode():BoolNode
export function refBoolNode():Ref<BoolNode>
export function refOfBoolNode(x:BoolNode):Ref<BoolNode>
export function emptyBranchNode():BranchNode
export function refBranchNode():Ref<BranchNode>
export function refOfBranchNode(x:BranchNode):Ref<BranchNode>
export function emptyBreakNode():BreakNode
export function refBreakNode():Ref<BreakNode>
export function refOfBreakNode(x:BreakNode):Ref<BreakNode>
export function emptyDotNode():DotNode
export function refDotNode():Ref<DotNode>
export function refOfDotNode(x:DotNode):Ref<DotNode>
export function emptyFieldNode():FieldNode
export function refFieldNode():Ref<FieldNode>
export function refOfFieldNode(x:FieldNode):Ref<FieldNode>
export function emptyIdentifierNode():IdentifierNode
export function refIdentifierNode():Ref<IdentifierNode>
export function refOfIdentifierNode(x:IdentifierNode):Ref<IdentifierNode>
export function emptyIfNode():IfNode
export function refIfNode():Ref<IfNode>
export function refOfIfNode(x:IfNode):Ref<IfNode>
export function emptyListNode():ListNode
export function refListNode():Ref<ListNode>
export function refOfListNode(x:ListNode):Ref<ListNode>
export function emptyActionNode():ActionNode
export function refActionNode():Ref<ActionNode>
export function refOfActionNode(x:ActionNode):Ref<ActionNode>
export function emptyChainNode():ChainNode
export function refChainNode():Ref<ChainNode>
export function refOfChainNode(x:ChainNode):Ref<ChainNode>
export function emptyCommentNode():CommentNode
export function refCommentNode():Ref<CommentNode>
export function refOfCommentNode(x:CommentNode):Ref<CommentNode>
export function emptyNumberNode():NumberNode
export function refNumberNode():Ref<NumberNode>
export function refOfNumberNode(x:NumberNode):Ref<NumberNode>
export function emptyWithNode():WithNode
export function refWithNode():Ref<WithNode>
export function refOfWithNode(x:WithNode):Ref<WithNode>}
