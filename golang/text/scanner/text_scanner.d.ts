// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/text/scanner'{
	// @ts-ignore
	import * as fmt from 'golang/fmt'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import type {bool,Ref,uint,uint64,rune,int,Struct} from 'go'
	//-5
	export const Char:int
	//-8
	export const Comment:int
	//-1
	export const EOF:int
	//-4
	export const Float:int
	//1012
	export const GoTokens:int
	//4294977024
	export const GoWhitespace:int
	//-2
	export const Ident:int
	//-3
	export const Int:int
	export interface Position extends Struct<Position>,fmt.Stringer{
		filename:string
		offset:int
		line:int
		column:int
		isValid():bool
		string():string
	}
	//-7
	export const RawString:int
	//32
	export const ScanChars:int
	//256
	export const ScanComments:int
	//16
	export const ScanFloats:int
	//4
	export const ScanIdents:int
	//8
	export const ScanInts:int
	//128
	export const ScanRawStrings:int
	//64
	export const ScanStrings:int
	export interface Scanner extends Struct<Scanner>,fmt.Stringer{
		error:(s:Ref<Scanner>,msg:string)=>void
		errorCount:int
		mode:uint
		whitespace:uint64
		isIdentRune:(ch:rune,i:int)=>bool
		position:Position
		init(src:io.Reader):Ref<Scanner>
		next():rune
		peek():rune
		scan():rune
		pos():Position
		tokenText():string
	}
	//512
	export const SkipComments:int
	//-6
	export const String:int
	export function tokenString(tok:rune):string

export function emptyPosition():Position
export function refPosition():Ref<Position>
export function refOfPosition(x:Position):Ref<Position>
export function emptyScanner():Scanner
export function refScanner():Ref<Scanner>
export function refOfScanner(x:Scanner):Ref<Scanner>
}
