// Code generated by define_gene; DO NOT EDIT.
package io

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"io"
)

var (
	//go:embed io.d.ts
	IoDefine   []byte
	IoDeclared = map[string]any{
		"limitReader":      io.LimitReader,
		"pipe":             io.Pipe,
		"writeString":      io.WriteString,
		"copyBuffer":       io.CopyBuffer,
		"copyN":            io.CopyN,
		"newSectionReader": io.NewSectionReader,
		"teeReader":        io.TeeReader,
		"EOF":              io.EOF,
		"ErrShortWrite":    io.ErrShortWrite,
		"multiWriter":      io.MultiWriter,
		"readFull":         io.ReadFull,
		"Discard":          io.Discard,
		"ErrClosedPipe":    io.ErrClosedPipe,
		"readAtLeast":      io.ReadAtLeast,
		"ErrUnexpectedEOF": io.ErrUnexpectedEOF,
		"readAll":          io.ReadAll,
		"ErrShortBuffer":   io.ErrShortBuffer,
		"SeekEnd":          io.SeekEnd,
		"SeekStart":        io.SeekStart,
		"ErrNoProgress":    io.ErrNoProgress,
		"multiReader":      io.MultiReader,
		"nopCloser":        io.NopCloser,
		"SeekCurrent":      io.SeekCurrent,
		"copy":             io.Copy,
		"newOffsetWriter":  io.NewOffsetWriter,

		"emptyLimitedReader": func() (v io.LimitedReader) {
			return v
		},
		"refLimitedReader": func() *io.LimitedReader {
			var x io.LimitedReader
			return &x
		},
		"refOfLimitedReader": func(x io.LimitedReader) *io.LimitedReader {
			return &x
		},
		"emptyOffsetWriter": func() (v io.OffsetWriter) {
			return v
		},
		"refOffsetWriter": func() *io.OffsetWriter {
			var x io.OffsetWriter
			return &x
		},
		"refOfOffsetWriter": func(x io.OffsetWriter) *io.OffsetWriter {
			return &x
		},
		"emptyPipeReader": func() (v io.PipeReader) {
			return v
		},
		"refPipeReader": func() *io.PipeReader {
			var x io.PipeReader
			return &x
		},
		"refOfPipeReader": func(x io.PipeReader) *io.PipeReader {
			return &x
		},
		"emptyPipeWriter": func() (v io.PipeWriter) {
			return v
		},
		"refPipeWriter": func() *io.PipeWriter {
			var x io.PipeWriter
			return &x
		},
		"refOfPipeWriter": func(x io.PipeWriter) *io.PipeWriter {
			return &x
		},
		"emptySectionReader": func() (v io.SectionReader) {
			return v
		},
		"refSectionReader": func() *io.SectionReader {
			var x io.SectionReader
			return &x
		},
		"refOfSectionReader": func(x io.SectionReader) *io.SectionReader {
			return &x
		}}
)

func init() {
	engine.RegisterModule(IoModule{})
}

type IoModule struct{}

func (S IoModule) Identity() string {
	return "golang/io"
}
func (S IoModule) TypeDefine() []byte {
	return IoDefine
}
func (S IoModule) Exports() map[string]any {
	return IoDeclared
}
