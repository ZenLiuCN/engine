// Code generated by define_gene; DO NOT EDIT.
package json

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"encoding/json"
	_ "github.com/ZenLiuCN/engine/golang/bytes"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/reflect"
)

var (
	//go:embed encoding_json.d.ts
	EncodingJsonDefine   []byte
	EncodingJsonDeclared = map[string]any{
		"newEncoder":    json.NewEncoder,
		"unmarshal":     json.Unmarshal,
		"marshalIndent": json.MarshalIndent,
		"newDecoder":    json.NewDecoder,
		"valid":         json.Valid,
		"compact":       json.Compact,
		"htmlEscape":    json.HTMLEscape,
		"indent":        json.Indent,
		"marshal":       json.Marshal,

		"emptyDecoder": func() (v json.Decoder) {
			return v
		},
		"refDecoder": func() *json.Decoder {
			var x json.Decoder
			return &x
		},
		"refOfDecoder": func(x json.Decoder) *json.Decoder {
			return &x
		},
		"emptyEncoder": func() (v json.Encoder) {
			return v
		},
		"refEncoder": func() *json.Encoder {
			var x json.Encoder
			return &x
		},
		"refOfEncoder": func(x json.Encoder) *json.Encoder {
			return &x
		}}
)

func init() {
	engine.RegisterModule(EncodingJsonModule{})
}

type EncodingJsonModule struct{}

func (S EncodingJsonModule) Identity() string {
	return "golang/encoding/json"
}
func (S EncodingJsonModule) TypeDefine() []byte {
	return EncodingJsonDefine
}
func (S EncodingJsonModule) Exports() map[string]any {
	return EncodingJsonDeclared
}
