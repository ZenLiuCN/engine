// Code generated by define_gene; DO NOT EDIT.
package xml

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"encoding/xml"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/reflect"
)

var (
	//go:embed encoding_xml.d.ts
	EncodingXmlDefine   []byte
	EncodingXmlDeclared = map[string]any{
		"copyToken":       xml.CopyToken,
		"escapeText":      xml.EscapeText,
		"Header":          xml.Header,
		"newEncoder":      xml.NewEncoder,
		"unmarshal":       xml.Unmarshal,
		"escape":          xml.Escape,
		"HTMLAutoClose":   xml.HTMLAutoClose,
		"HTMLEntity":      xml.HTMLEntity,
		"marshal":         xml.Marshal,
		"marshalIndent":   xml.MarshalIndent,
		"newDecoder":      xml.NewDecoder,
		"newTokenDecoder": xml.NewTokenDecoder,

		"emptyEncoder": func() (v xml.Encoder) {
			return v
		},
		"refEncoder": func() *xml.Encoder {
			var x xml.Encoder
			return &x
		},
		"refOfEncoder": func(x xml.Encoder) *xml.Encoder {
			return &x
		},
		"emptyName": func() (v xml.Name) {
			return v
		},
		"refName": func() *xml.Name {
			var x xml.Name
			return &x
		},
		"refOfName": func(x xml.Name) *xml.Name {
			return &x
		},
		"emptyProcInst": func() (v xml.ProcInst) {
			return v
		},
		"refProcInst": func() *xml.ProcInst {
			var x xml.ProcInst
			return &x
		},
		"refOfProcInst": func(x xml.ProcInst) *xml.ProcInst {
			return &x
		},
		"emptyAttr": func() (v xml.Attr) {
			return v
		},
		"refAttr": func() *xml.Attr {
			var x xml.Attr
			return &x
		},
		"refOfAttr": func(x xml.Attr) *xml.Attr {
			return &x
		},
		"emptyEndElement": func() (v xml.EndElement) {
			return v
		},
		"refEndElement": func() *xml.EndElement {
			var x xml.EndElement
			return &x
		},
		"refOfEndElement": func(x xml.EndElement) *xml.EndElement {
			return &x
		},
		"emptyStartElement": func() (v xml.StartElement) {
			return v
		},
		"refStartElement": func() *xml.StartElement {
			var x xml.StartElement
			return &x
		},
		"refOfStartElement": func(x xml.StartElement) *xml.StartElement {
			return &x
		},
		"emptyDecoder": func() (v xml.Decoder) {
			return v
		},
		"refDecoder": func() *xml.Decoder {
			var x xml.Decoder
			return &x
		},
		"refOfDecoder": func(x xml.Decoder) *xml.Decoder {
			return &x
		}}
)

func init() {
	engine.RegisterModule(EncodingXmlModule{})
}

type EncodingXmlModule struct{}

func (S EncodingXmlModule) Identity() string {
	return "golang/encoding/xml"
}
func (S EncodingXmlModule) TypeDefine() []byte {
	return EncodingXmlDefine
}
func (S EncodingXmlModule) Exports() map[string]any {
	return EncodingXmlDeclared
}
