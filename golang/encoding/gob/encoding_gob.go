// Code generated by define_gene; DO NOT EDIT.
package gob

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"encoding/gob"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/reflect"
)

var (
	//go:embed encoding_gob.d.ts
	EncodingGobDefine   []byte
	EncodingGobDeclared = map[string]any{
		"register":     gob.Register,
		"registerName": gob.RegisterName,
		"newDecoder":   gob.NewDecoder,
		"newEncoder":   gob.NewEncoder,

		"emptyCommonType": func() (v gob.CommonType) {
			return v
		},
		"refCommonType": func() *gob.CommonType {
			var x gob.CommonType
			return &x
		},
		"refOfCommonType": func(x gob.CommonType) *gob.CommonType {
			return &x
		},
		"emptyDecoder": func() (v gob.Decoder) {
			return v
		},
		"refDecoder": func() *gob.Decoder {
			var x gob.Decoder
			return &x
		},
		"refOfDecoder": func(x gob.Decoder) *gob.Decoder {
			return &x
		},
		"emptyEncoder": func() (v gob.Encoder) {
			return v
		},
		"refEncoder": func() *gob.Encoder {
			var x gob.Encoder
			return &x
		},
		"refOfEncoder": func(x gob.Encoder) *gob.Encoder {
			return &x
		}}
)

func init() {
	engine.RegisterModule(EncodingGobModule{})
}

type EncodingGobModule struct{}

func (S EncodingGobModule) Identity() string {
	return "golang/encoding/gob"
}
func (S EncodingGobModule) TypeDefine() []byte {
	return EncodingGobDefine
}
func (S EncodingGobModule) Exports() map[string]any {
	return EncodingGobDeclared
}
