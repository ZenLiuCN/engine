// Code generated by define_gene; DO NOT EDIT.
package big

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/fmt"
	_ "github.com/ZenLiuCN/engine/golang/math/rand"
	"math/big"
)

var (
	//go:embed math_big.d.ts
	MathBigDefine   []byte
	MathBigDeclared = map[string]any{
		"ToNearestAway": big.ToNearestAway,
		"AwayFromZero":  big.AwayFromZero,
		"Exact":         big.Exact,
		"MaxExp":        big.MaxExp,
		"parseFloat":    big.ParseFloat,
		"ToNegativeInf": big.ToNegativeInf,
		"ToPositiveInf": big.ToPositiveInf,
		"ToZero":        big.ToZero,
		"MaxBase":       big.MaxBase,
		"MinExp":        big.MinExp,
		"ToNearestEven": big.ToNearestEven,
		"Above":         big.Above,
		"Below":         big.Below,
		"jacobi":        big.Jacobi,
		"MaxPrec":       big.MaxPrec,
		"newFloat":      big.NewFloat,
		"newInt":        big.NewInt,
		"newRat":        big.NewRat,

		"emptyFloat": func() (v big.Float) {
			return v
		},
		"refFloat": func() *big.Float {
			var x big.Float
			return &x
		},
		"refOfFloat": func(x big.Float) *big.Float {
			return &x
		},
		"emptyInt": func() (v big.Int) {
			return v
		},
		"refInt": func() *big.Int {
			var x big.Int
			return &x
		},
		"refOfInt": func(x big.Int) *big.Int {
			return &x
		},
		"emptyRat": func() (v big.Rat) {
			return v
		},
		"refRat": func() *big.Rat {
			var x big.Rat
			return &x
		},
		"refOfRat": func(x big.Rat) *big.Rat {
			return &x
		}}
)

func init() {
	engine.RegisterModule(MathBigModule{})
}

type MathBigModule struct{}

func (S MathBigModule) Identity() string {
	return "golang/math/big"
}
func (S MathBigModule) TypeDefine() []byte {
	return MathBigDefine
}
func (S MathBigModule) Exports() map[string]any {
	return MathBigDeclared
}
