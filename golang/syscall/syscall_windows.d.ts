// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/syscall'{
	// @ts-ignore
	import * as sync from 'golang/sync'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import type {Ref,uintptr,uint16,Struct,bool,int,GoError,uint8,uint32,byte,int32,Nothing,Alias,int64,error} from 'go'
	//2
	export const AF_INET:int
	//23
	export const AF_INET6:int
	//17
	export const AF_NETBIOS:int
	//1
	export const AF_UNIX:int
	//0
	export const AF_UNSPEC:int
	//2
	export const AI_CANONNAME:int
	//4
	export const AI_NUMERICHOST:int
	//1
	export const AI_PASSIVE:int
	//536870912
	export const APPLICATION_ERROR:int
	//1
	export const AUTHTYPE_CLIENT:int
	//2
	export const AUTHTYPE_SERVER:int
	export function accept(fd:Handle):[Handle,Sockaddr,error]
	export function acceptEx(ls:Handle,as:Handle,buf:Ref<byte>,rxdatalen:uint32,laddrlen:uint32,raddrlen:uint32,recvd:Ref<uint32>,overlapped:Ref<Overlapped>):error
	export interface AddrinfoW extends Struct<AddrinfoW>{
		flags:int32
		family:int32
		socktype:int32
		protocol:int32
		addrlen:uintptr
		canonname:Ref<uint16>
		addr:Pointer
		next:Ref<AddrinfoW>
	}
	//1
	export const BASE_PROTOCOL:int
	export function bind(fd:Handle,sa:Sockaddr):error
	export interface ByHandleFileInformation extends Struct<ByHandleFileInformation>{
		fileAttributes:uint32
		creationTime:Filetime
		lastAccessTime:Filetime
		lastWriteTime:Filetime
		volumeSerialNumber:uint32
		fileSizeHigh:uint32
		fileSizeLow:uint32
		numberOfLinks:uint32
		fileIndexHigh:uint32
		fileIndexLow:uint32
	}
	export function bytePtrFromString(s:string):Ref<byte>
	export function byteSliceFromString(s:string):Uint8Array
	//2
	export const CERT_CHAIN_POLICY_AUTHENTICODE:int
	//3
	export const CERT_CHAIN_POLICY_AUTHENTICODE_TS:int
	//1
	export const CERT_CHAIN_POLICY_BASE:int
	//5
	export const CERT_CHAIN_POLICY_BASIC_CONSTRAINTS:int
	//8
	export const CERT_CHAIN_POLICY_EV:int
	//7
	export const CERT_CHAIN_POLICY_MICROSOFT_ROOT:int
	//6
	export const CERT_CHAIN_POLICY_NT_AUTH:int
	//4
	export const CERT_CHAIN_POLICY_SSL:int
	//2148204815
	export const CERT_E_CN_NO_MATCH:int
	//2148204801
	export const CERT_E_EXPIRED:int
	//2148204806
	export const CERT_E_PURPOSE:int
	//2148204803
	export const CERT_E_ROLE:int
	//2148204809
	export const CERT_E_UNTRUSTEDROOT:int
	//4
	export const CERT_STORE_ADD_ALWAYS:int
	//4
	export const CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG:int
	//2
	export const CERT_STORE_PROV_MEMORY:int
	//32768
	export const CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT:int
	//8192
	export const CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT:int
	//16384
	export const CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT:int
	//134217728
	export const CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT:int
	//4096
	export const CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT:int
	//1024
	export const CERT_TRUST_INVALID_BASIC_CONSTRAINTS:int
	//256
	export const CERT_TRUST_INVALID_EXTENSION:int
	//2048
	export const CERT_TRUST_INVALID_NAME_CONSTRAINTS:int
	//512
	export const CERT_TRUST_INVALID_POLICY_CONSTRAINTS:int
	//128
	export const CERT_TRUST_IS_CYCLIC:int
	//67108864
	export const CERT_TRUST_IS_EXPLICIT_DISTRUST:int
	//8
	export const CERT_TRUST_IS_NOT_SIGNATURE_VALID:int
	//1
	export const CERT_TRUST_IS_NOT_TIME_VALID:int
	//16
	export const CERT_TRUST_IS_NOT_VALID_FOR_USAGE:int
	//16777216
	export const CERT_TRUST_IS_OFFLINE_REVOCATION:int
	//4
	export const CERT_TRUST_IS_REVOKED:int
	//32
	export const CERT_TRUST_IS_UNTRUSTED_ROOT:int
	//0
	export const CERT_TRUST_NO_ERROR:int
	//33554432
	export const CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY:int
	//64
	export const CERT_TRUST_REVOCATION_STATUS_UNKNOWN:int
	//2
	export const CREATE_ALWAYS:int
	//1
	export const CREATE_NEW:int
	//512
	export const CREATE_NEW_PROCESS_GROUP:int
	//1024
	export const CREATE_UNICODE_ENVIRONMENT:int
	//128
	export const CRYPT_DEFAULT_CONTAINER_OPTIONAL:int
	//16
	export const CRYPT_DELETEKEYSET:int
	//32
	export const CRYPT_MACHINE_KEYSET:int
	//8
	export const CRYPT_NEWKEYSET:int
	//64
	export const CRYPT_SILENT:int
	//4026531840
	export const CRYPT_VERIFYCONTEXT:int
	//1
	export const CTRL_BREAK_EVENT:int
	//2
	export const CTRL_CLOSE_EVENT:int
	//0
	export const CTRL_C_EVENT:int
	//5
	export const CTRL_LOGOFF_EVENT:int
	//6
	export const CTRL_SHUTDOWN_EVENT:int
	export function cancelIo(s:Handle):error
	export function cancelIoEx(s:Handle,o:Ref<Overlapped>):error
	export function certAddCertificateContextToStore(store:Handle,certContext:Ref<CertContext>,addDisposition:uint32,storeContext:Ref<Ref<CertContext>>):error
	export interface CertChainContext extends Struct<CertChainContext>{
		size:uint32
		trustStatus:CertTrustStatus
		chainCount:uint32
		chains:Ref<Ref<CertSimpleChain>>
		lowerQualityChainCount:uint32
		lowerQualityChains:Ref<Ref<CertChainContext>>
		hasRevocationFreshnessTime:uint32
		revocationFreshnessTime:uint32
	}
	export interface CertChainElement extends Struct<CertChainElement>{
		size:uint32
		certContext:Ref<CertContext>
		trustStatus:CertTrustStatus
		revocationInfo:Ref<CertRevocationInfo>
		issuanceUsage:Ref<CertEnhKeyUsage>
		applicationUsage:Ref<CertEnhKeyUsage>
		extendedErrorInfo:Ref<uint16>
	}
	export interface CertChainPara extends Struct<CertChainPara>{
		size:uint32
		requestedUsage:CertUsageMatch
		requstedIssuancePolicy:CertUsageMatch
		urlRetrievalTimeout:uint32
		checkRevocationFreshnessTime:uint32
		revocationFreshnessTime:uint32
		cacheResync:Ref<Filetime>
	}
	export interface CertChainPolicyPara extends Struct<CertChainPolicyPara>{
		size:uint32
		flags:uint32
		extraPolicyPara:Pointer
	}
	export interface CertChainPolicyStatus extends Struct<CertChainPolicyStatus>{
		size:uint32
		error:uint32
		chainIndex:uint32
		elementIndex:uint32
		extraPolicyStatus:Pointer
	}
	export function certCloseStore(store:Handle,flags:uint32):error
	export interface CertContext extends Struct<CertContext>{
		encodingType:uint32
		encodedCert:Ref<byte>
		length:uint32
		certInfo:Ref<CertInfo>
		store:Handle
	}
	export function certCreateCertificateContext(certEncodingType:uint32,certEncoded:Ref<byte>,encodedLen:uint32):[Ref<CertContext>,error]
	export interface CertEnhKeyUsage extends Struct<CertEnhKeyUsage>{
		length:uint32
		usageIdentifiers:Ref<Ref<byte>>
	}
	export function certEnumCertificatesInStore(store:Handle,prevContext:Ref<CertContext>):[Ref<CertContext>,error]
	export function certFreeCertificateChain(ctx:Ref<CertChainContext>):void
	export function certFreeCertificateContext(ctx:Ref<CertContext>):error
	export function certGetCertificateChain(engine:Handle,leaf:Ref<CertContext>,time:Ref<Filetime>,additionalStore:Handle,para:Ref<CertChainPara>,flags:uint32,reserved:uintptr,chainCtx:Ref<Ref<CertChainContext>>):error
	export interface CertInfo extends Struct<CertInfo>,Alias<Nothing>{
	}
	export function certOpenStore(storeProvider:uintptr,msgAndCertEncodingType:uint32,cryptProv:uintptr,flags:uint32,para:uintptr):[Handle,error]
	export function certOpenSystemStore(hprov:Handle,name:Ref<uint16>):[Handle,error]
	export interface CertRevocationCrlInfo extends Alias<Nothing>,Struct<CertRevocationCrlInfo>{
	}
	export interface CertRevocationInfo extends Struct<CertRevocationInfo>{
		size:uint32
		revocationResult:uint32
		revocationOid:Ref<byte>
		oidSpecificInfo:Pointer
		hasFreshnessTime:uint32
		freshnessTime:uint32
		crlInfo:Ref<CertRevocationCrlInfo>
	}
	export interface CertSimpleChain extends Struct<CertSimpleChain>{
		size:uint32
		trustStatus:CertTrustStatus
		numElements:uint32
		elements:Ref<Ref<CertChainElement>>
		trustListInfo:Ref<CertTrustListInfo>
		hasRevocationFreshnessTime:uint32
		revocationFreshnessTime:uint32
	}
	export interface CertTrustListInfo extends Alias<Nothing>,Struct<CertTrustListInfo>{
	}
	export interface CertTrustStatus extends Struct<CertTrustStatus>{
		errorStatus:uint32
		infoStatus:uint32
	}
	export interface CertUsageMatch extends Struct<CertUsageMatch>{
		type:uint32
		usage:CertEnhKeyUsage
	}
	export function certVerifyCertificateChainPolicy(policyOID:uintptr,chain:Ref<CertChainContext>,para:Ref<CertChainPolicyPara>,status:Ref<CertChainPolicyStatus>):error
	export function chdir(path:string):error
	export function chmod(path:string,mode:uint32):error
	export function chown(path:string,uid:int,gid:int):error
	export function clearenv():void
	export function close(fd:Handle):error
	export function closeHandle(handle:Handle):error
	export function closeOnExec(fd:Handle):void
	export function closesocket(s:Handle):error
	export function commandLineToArgv(cmd:Ref<uint16>,argc:Ref<int32>):[Ref<Ref<Array</*8192*/Uint16Array>>[/*8192*/]>,error]
	export function computerName():string
	export interface Conn{
		syscallConn():[RawConn,error]
	}
	export function connect(fd:Handle,sa:Sockaddr):error
	export function connectEx(fd:Handle,sa:Sockaddr,sendBuf:Ref<byte>,sendDataLen:uint32,bytesSent:Ref<uint32>,overlapped:Ref<Overlapped>):error
	export function convertSidToStringSid(sid:Ref<SID>,stringSid:Ref<Ref<uint16>>):error
	export function convertStringSidToSid(stringSid:Ref<uint16>,sid:Ref<Ref<SID>>):error
	export function copySid(destSidLen:uint32,destSid:Ref<SID>,srcSid:Ref<SID>):error
	export function createDirectory(path:Ref<uint16>,sa:Ref<SecurityAttributes>):error
	export function createFile(name:Ref<uint16>,access:uint32,mode:uint32,sa:Ref<SecurityAttributes>,createmode:uint32,attrs:uint32,templatefile:int32):[Handle,error]
	export function createFileMapping(fhandle:Handle,sa:Ref<SecurityAttributes>,prot:uint32,maxSizeHigh:uint32,maxSizeLow:uint32,name:Ref<uint16>):[Handle,error]
	export function createHardLink(filename:Ref<uint16>,existingfilename:Ref<uint16>,reserved:uintptr):error
	export function createIoCompletionPort(filehandle:Handle,cphandle:Handle,key:uint32,threadcnt:uint32):[Handle,error]
	export function createPipe(readhandle:Ref<Handle>,writehandle:Ref<Handle>,sa:Ref<SecurityAttributes>,size:uint32):error
	export function createProcess(appName:Ref<uint16>,commandLine:Ref<uint16>,procSecurity:Ref<SecurityAttributes>,threadSecurity:Ref<SecurityAttributes>,inheritHandles:bool,creationFlags:uint32,env:Ref<uint16>,currentDir:Ref<uint16>,startupInfo:Ref<StartupInfo>,outProcInfo:Ref<ProcessInformation>):error
	export function createProcessAsUser(token:Token,appName:Ref<uint16>,commandLine:Ref<uint16>,procSecurity:Ref<SecurityAttributes>,threadSecurity:Ref<SecurityAttributes>,inheritHandles:bool,creationFlags:uint32,env:Ref<uint16>,currentDir:Ref<uint16>,startupInfo:Ref<StartupInfo>,outProcInfo:Ref<ProcessInformation>):error
	export function createSymbolicLink(symlinkfilename:Ref<uint16>,targetfilename:Ref<uint16>,flags:uint32):error
	export function createToolhelp32Snapshot(flags:uint32,processId:uint32):[Handle,error]
	export function cryptAcquireContext(provhandle:Ref<Handle>,container:Ref<uint16>,provider:Ref<uint16>,provtype:uint32,flags:uint32):error
	export function cryptGenRandom(provhandle:Handle,buflen:uint32,buf:Ref<byte>):error
	export function cryptReleaseContext(provhandle:Handle,flags:uint32):error
	export interface DLL extends Struct<DLL>{
		name:string
		handle:Handle
		findProc(name:string):[Ref<Proc>,error]
		mustFindProc(name:string):Ref<Proc>
		release():error
	}
	export interface DLLError extends Error,GoError,Struct<DLLError>{
		err:GoError
		objName:string
		msg:string
		error():string
		unwrap():error
	}
	export interface DNSMXData extends Struct<DNSMXData>{
		nameExchange:Ref<uint16>
		preference:uint16
		pad:uint16
	}
	export interface DNSPTRData extends Struct<DNSPTRData>{
		host:Ref<uint16>
	}
	export interface DNSRecord extends Struct<DNSRecord>{
		next:Ref<DNSRecord>
		name:Ref<uint16>
		type:uint16
		length:uint16
		dw:uint32
		ttl:uint32
		reserved:uint32
		data:Uint8Array/*40*/
	}
	export interface DNSSRVData extends Struct<DNSSRVData>{
		target:Ref<uint16>
		priority:uint16
		weight:uint16
		port:uint16
		pad:uint16
	}
	export interface DNSTXTData extends Struct<DNSTXTData>{
		stringCount:uint16
		stringArray:Ref<Uint16Array/*1*/>[/*1*/]
	}
	//9501
	export const DNS_INFO_NO_RECORDS:int
	//1
	export const DNS_TYPE_A:int
	//38
	export const DNS_TYPE_A6:int
	//28
	export const DNS_TYPE_AAAA:int
	//248
	export const DNS_TYPE_ADDRS:int
	//18
	export const DNS_TYPE_AFSDB:int
	//255
	export const DNS_TYPE_ALL:int
	//255
	export const DNS_TYPE_ANY:int
	//34
	export const DNS_TYPE_ATMA:int
	//252
	export const DNS_TYPE_AXFR:int
	//37
	export const DNS_TYPE_CERT:int
	//5
	export const DNS_TYPE_CNAME:int
	//49
	export const DNS_TYPE_DHCID:int
	//39
	export const DNS_TYPE_DNAME:int
	//48
	export const DNS_TYPE_DNSKEY:int
	//43
	export const DNS_TYPE_DS:int
	//31
	export const DNS_TYPE_EID:int
	//102
	export const DNS_TYPE_GID:int
	//27
	export const DNS_TYPE_GPOS:int
	//13
	export const DNS_TYPE_HINFO:int
	//20
	export const DNS_TYPE_ISDN:int
	//251
	export const DNS_TYPE_IXFR:int
	//25
	export const DNS_TYPE_KEY:int
	//36
	export const DNS_TYPE_KX:int
	//29
	export const DNS_TYPE_LOC:int
	//254
	export const DNS_TYPE_MAILA:int
	//253
	export const DNS_TYPE_MAILB:int
	//7
	export const DNS_TYPE_MB:int
	//3
	export const DNS_TYPE_MD:int
	//4
	export const DNS_TYPE_MF:int
	//8
	export const DNS_TYPE_MG:int
	//14
	export const DNS_TYPE_MINFO:int
	//9
	export const DNS_TYPE_MR:int
	//15
	export const DNS_TYPE_MX:int
	//35
	export const DNS_TYPE_NAPTR:int
	//65281
	export const DNS_TYPE_NBSTAT:int
	//32
	export const DNS_TYPE_NIMLOC:int
	//2
	export const DNS_TYPE_NS:int
	//22
	export const DNS_TYPE_NSAP:int
	//23
	export const DNS_TYPE_NSAPPTR:int
	//47
	export const DNS_TYPE_NSEC:int
	//10
	export const DNS_TYPE_NULL:int
	//30
	export const DNS_TYPE_NXT:int
	//41
	export const DNS_TYPE_OPT:int
	//12
	export const DNS_TYPE_PTR:int
	//26
	export const DNS_TYPE_PX:int
	//17
	export const DNS_TYPE_RP:int
	//46
	export const DNS_TYPE_RRSIG:int
	//21
	export const DNS_TYPE_RT:int
	//24
	export const DNS_TYPE_SIG:int
	//40
	export const DNS_TYPE_SINK:int
	//6
	export const DNS_TYPE_SOA:int
	//33
	export const DNS_TYPE_SRV:int
	//16
	export const DNS_TYPE_TEXT:int
	//249
	export const DNS_TYPE_TKEY:int
	//250
	export const DNS_TYPE_TSIG:int
	//101
	export const DNS_TYPE_UID:int
	//100
	export const DNS_TYPE_UINFO:int
	//103
	export const DNS_TYPE_UNSPEC:int
	//65281
	export const DNS_TYPE_WINS:int
	//65282
	export const DNS_TYPE_WINSR:int
	//11
	export const DNS_TYPE_WKS:int
	//19
	export const DNS_TYPE_X25:int
	//1
	export const DUPLICATE_CLOSE_SOURCE:int
	//2
	export const DUPLICATE_SAME_ACCESS:int
	export function deleteFile(path:Ref<uint16>):error
	export function deviceIoControl(handle:Handle,ioControlCode:uint32,inBuffer:Ref<byte>,inBufferSize:uint32,outBuffer:Ref<byte>,outBufferSize:uint32,bytesReturned:Ref<uint32>,overlapped:Ref<Overlapped>):error
	export function dnsNameCompare(name1:Ref<uint16>,name2:Ref<uint16>):bool
	export function dnsQuery(name:string,qtype:uint16,options:uint32,extra:Ref<byte>,qrs:Ref<Ref<DNSRecord>>,pr:Ref<byte>):error
	export function dnsRecordListFree(rl:Ref<DNSRecord>,freetype:uint32):void
	//3
	export const DnsSectionAdditional:int
	//1
	export const DnsSectionAnswer:int
	//2
	export const DnsSectionAuthority:int
	//0
	export const DnsSectionQuestion:int
	export function duplicateHandle(hSourceProcessHandle:Handle,hSourceHandle:Handle,hTargetProcessHandle:Handle,lpTargetHandle:Ref<Handle>,dwDesiredAccess:uint32,bInheritHandle:bool,dwOptions:uint32):error
	export const E2BIG:Errno
	export const EACCES:Errno
	export const EADDRINUSE:Errno
	export const EADDRNOTAVAIL:Errno
	export const EADV:Errno
	export const EAFNOSUPPORT:Errno
	export const EAGAIN:Errno
	export const EALREADY:Errno
	export const EBADE:Errno
	export const EBADF:Errno
	export const EBADFD:Errno
	export const EBADMSG:Errno
	export const EBADR:Errno
	export const EBADRQC:Errno
	export const EBADSLT:Errno
	export const EBFONT:Errno
	export const EBUSY:Errno
	export const ECANCELED:Errno
	export const ECHILD:Errno
	export const ECHRNG:Errno
	export const ECOMM:Errno
	export const ECONNABORTED:Errno
	export const ECONNREFUSED:Errno
	export const ECONNRESET:Errno
	export const EDEADLK:Errno
	export const EDEADLOCK:Errno
	export const EDESTADDRREQ:Errno
	export const EDOM:Errno
	export const EDOTDOT:Errno
	export const EDQUOT:Errno
	export const EEXIST:Errno
	export const EFAULT:Errno
	export const EFBIG:Errno
	export const EHOSTDOWN:Errno
	export const EHOSTUNREACH:Errno
	export const EIDRM:Errno
	export const EILSEQ:Errno
	export const EINPROGRESS:Errno
	export const EINTR:Errno
	export const EINVAL:Errno
	export const EIO:Errno
	export const EISCONN:Errno
	export const EISDIR:Errno
	export const EISNAM:Errno
	export const EKEYEXPIRED:Errno
	export const EKEYREJECTED:Errno
	export const EKEYREVOKED:Errno
	export const EL2HLT:Errno
	export const EL2NSYNC:Errno
	export const EL3HLT:Errno
	export const EL3RST:Errno
	export const ELIBACC:Errno
	export const ELIBBAD:Errno
	export const ELIBEXEC:Errno
	export const ELIBMAX:Errno
	export const ELIBSCN:Errno
	export const ELNRNG:Errno
	export const ELOOP:Errno
	export const EMEDIUMTYPE:Errno
	export const EMFILE:Errno
	export const EMLINK:Errno
	export const EMSGSIZE:Errno
	export const EMULTIHOP:Errno
	export const ENAMETOOLONG:Errno
	export const ENAVAIL:Errno
	export const ENETDOWN:Errno
	export const ENETRESET:Errno
	export const ENETUNREACH:Errno
	export const ENFILE:Errno
	export const ENOANO:Errno
	export const ENOBUFS:Errno
	export const ENOCSI:Errno
	export const ENODATA:Errno
	export const ENODEV:Errno
	export const ENOENT:Errno
	export const ENOEXEC:Errno
	export const ENOKEY:Errno
	export const ENOLCK:Errno
	export const ENOLINK:Errno
	export const ENOMEDIUM:Errno
	export const ENOMEM:Errno
	export const ENOMSG:Errno
	export const ENONET:Errno
	export const ENOPKG:Errno
	export const ENOPROTOOPT:Errno
	export const ENOSPC:Errno
	export const ENOSR:Errno
	export const ENOSTR:Errno
	export const ENOSYS:Errno
	export const ENOTBLK:Errno
	export const ENOTCONN:Errno
	export const ENOTDIR:Errno
	export const ENOTEMPTY:Errno
	export const ENOTNAM:Errno
	export const ENOTRECOVERABLE:Errno
	export const ENOTSOCK:Errno
	export const ENOTSUP:Errno
	export const ENOTTY:Errno
	export const ENOTUNIQ:Errno
	export const ENXIO:Errno
	export const EOPNOTSUPP:Errno
	export const EOVERFLOW:Errno
	export const EOWNERDEAD:Errno
	export const EPERM:Errno
	export const EPFNOSUPPORT:Errno
	export const EPIPE:Errno
	export const EPROTO:Errno
	export const EPROTONOSUPPORT:Errno
	export const EPROTOTYPE:Errno
	export const ERANGE:Errno
	export const EREMCHG:Errno
	export const EREMOTE:Errno
	export const EREMOTEIO:Errno
	export const ERESTART:Errno
	export const EROFS:Errno
	export const ERROR_ACCESS_DENIED:Errno
	export const ERROR_ALREADY_EXISTS:Errno
	export const ERROR_BROKEN_PIPE:Errno
	export const ERROR_BUFFER_OVERFLOW:Errno
	export const ERROR_DIR_NOT_EMPTY:Errno
	export const ERROR_ENVVAR_NOT_FOUND:Errno
	export const ERROR_FILE_EXISTS:Errno
	export const ERROR_FILE_NOT_FOUND:Errno
	export const ERROR_HANDLE_EOF:Errno
	export const ERROR_INSUFFICIENT_BUFFER:Errno
	export const ERROR_IO_PENDING:Errno
	export const ERROR_MOD_NOT_FOUND:Errno
	export const ERROR_MORE_DATA:Errno
	export const ERROR_NETNAME_DELETED:Errno
	export const ERROR_NOT_FOUND:Errno
	export const ERROR_NO_MORE_FILES:Errno
	export const ERROR_OPERATION_ABORTED:Errno
	export const ERROR_PATH_NOT_FOUND:Errno
	export const ERROR_PRIVILEGE_NOT_HELD:Errno
	export const ERROR_PROC_NOT_FOUND:Errno
	export const ESHUTDOWN:Errno
	export const ESOCKTNOSUPPORT:Errno
	export const ESPIPE:Errno
	export const ESRCH:Errno
	export const ESRMNT:Errno
	export const ESTALE:Errno
	export const ESTRPIPE:Errno
	export const ETIME:Errno
	export const ETIMEDOUT:Errno
	export const ETOOMANYREFS:Errno
	export const ETXTBSY:Errno
	export const EUCLEAN:Errno
	export const EUNATCH:Errno
	export const EUSERS:Errno
	export const EWINDOWS:Errno
	export const EWOULDBLOCK:Errno
	export const EXDEV:Errno
	export const EXFULL:Errno
	export function environ():string[]
	export interface Errno extends uintptr,GoError{
		error():string
		is(target:error):bool
		temporary():bool
		timeout():bool
	}
	export function escapeArg(s:string):string
	export function exec(argv0:string,argv:string[],envv:string[]):error
	export function exit(code:int):void
	export function exitProcess(exitcode:uint32):void
	//1
	export const FILE_ACTION_ADDED:int
	//3
	export const FILE_ACTION_MODIFIED:int
	//2
	export const FILE_ACTION_REMOVED:int
	//5
	export const FILE_ACTION_RENAMED_NEW_NAME:int
	//4
	export const FILE_ACTION_RENAMED_OLD_NAME:int
	//4
	export const FILE_APPEND_DATA:int
	//32
	export const FILE_ATTRIBUTE_ARCHIVE:int
	//16
	export const FILE_ATTRIBUTE_DIRECTORY:int
	//2
	export const FILE_ATTRIBUTE_HIDDEN:int
	//128
	export const FILE_ATTRIBUTE_NORMAL:int
	//1
	export const FILE_ATTRIBUTE_READONLY:int
	//1024
	export const FILE_ATTRIBUTE_REPARSE_POINT:int
	//4
	export const FILE_ATTRIBUTE_SYSTEM:int
	//0
	export const FILE_BEGIN:int
	//1
	export const FILE_CURRENT:int
	//2
	export const FILE_END:int
	//33554432
	export const FILE_FLAG_BACKUP_SEMANTICS:int
	//2097152
	export const FILE_FLAG_OPEN_REPARSE_POINT:int
	//1073741824
	export const FILE_FLAG_OVERLAPPED:int
	//1
	export const FILE_LIST_DIRECTORY:int
	//1
	export const FILE_MAP_COPY:int
	//32
	export const FILE_MAP_EXECUTE:int
	//4
	export const FILE_MAP_READ:int
	//2
	export const FILE_MAP_WRITE:int
	//4
	export const FILE_NOTIFY_CHANGE_ATTRIBUTES:int
	//64
	export const FILE_NOTIFY_CHANGE_CREATION:int
	//2
	export const FILE_NOTIFY_CHANGE_DIR_NAME:int
	//1
	export const FILE_NOTIFY_CHANGE_FILE_NAME:int
	//32
	export const FILE_NOTIFY_CHANGE_LAST_ACCESS:int
	//16
	export const FILE_NOTIFY_CHANGE_LAST_WRITE:int
	//8
	export const FILE_NOTIFY_CHANGE_SIZE:int
	//4
	export const FILE_SHARE_DELETE:int
	//1
	export const FILE_SHARE_READ:int
	//2
	export const FILE_SHARE_WRITE:int
	//1
	export const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS:int
	//2
	export const FILE_SKIP_SET_EVENT_ON_HANDLE:int
	//2
	export const FILE_TYPE_CHAR:int
	//1
	export const FILE_TYPE_DISK:int
	//3
	export const FILE_TYPE_PIPE:int
	//32768
	export const FILE_TYPE_REMOTE:int
	//0
	export const FILE_TYPE_UNKNOWN:int
	//256
	export const FILE_WRITE_ATTRIBUTES:int
	//256
	export const FORMAT_MESSAGE_ALLOCATE_BUFFER:int
	//8192
	export const FORMAT_MESSAGE_ARGUMENT_ARRAY:int
	//2048
	export const FORMAT_MESSAGE_FROM_HMODULE:int
	//1024
	export const FORMAT_MESSAGE_FROM_STRING:int
	//4096
	export const FORMAT_MESSAGE_FROM_SYSTEM:int
	//512
	export const FORMAT_MESSAGE_IGNORE_INSERTS:int
	//255
	export const FORMAT_MESSAGE_MAX_WIDTH_MASK:int
	//589992
	export const FSCTL_GET_REPARSE_POINT:int
	export function fchdir(fd:Handle):error
	export function fchmod(fd:Handle,mode:uint32):error
	export function fchown(fd:Handle,uid:int,gid:int):error
	export interface FileNotifyInformation extends Struct<FileNotifyInformation>{
		nextEntryOffset:uint32
		action:uint32
		fileNameLength:uint32
		fileName:uint16
	}
	export interface Filetime extends Struct<Filetime>{
		lowDateTime:uint32
		highDateTime:uint32
		nanoseconds():int64
	}
	export function findClose(handle:Handle):error
	export function findFirstFile(name:Ref<uint16>,data:Ref<Win32finddata>):[Handle,error]
	export function findNextFile(handle:Handle,data:Ref<Win32finddata>):error
	export function flushFileBuffers(handle:Handle):error
	export function flushViewOfFile(addr:uintptr,length:uintptr):error
	export const ForkLock:sync.RWMutex
	export function formatMessage(flags:uint32,msgsrc:uint32,msgid:uint32,langid:uint32,buf:Uint16Array,args:Ref<byte>):[uint32,error]
	export function freeAddrInfoW(addrinfo:Ref<AddrinfoW>):void
	export function freeEnvironmentStrings(envs:Ref<uint16>):error
	export function freeLibrary(handle:Handle):error
	export function fsync(fd:Handle):error
	export function ftruncate(fd:Handle,length:int64):error
	export function fullPath(name:string):string
	//268435456
	export const GENERIC_ALL:int
	//536870912
	export const GENERIC_EXECUTE:int
	//2147483648
	export const GENERIC_READ:int
	//1073741824
	export const GENERIC_WRITE:int
	export interface GUID extends Struct<GUID>{
		data1:uint32
		data2:uint16
		data3:uint16
		data4:Uint8Array/*8*/
	}
	export function getAcceptExSockaddrs(buf:Ref<byte>,rxdatalen:uint32,laddrlen:uint32,raddrlen:uint32,lrsa:Ref<Ref<RawSockaddrAny>>,lrsalen:Ref<int32>,rrsa:Ref<Ref<RawSockaddrAny>>,rrsalen:Ref<int32>):void
	export function getAdaptersInfo(ai:Ref<IpAdapterInfo>,ol:Ref<uint32>):error
	export function getAddrInfoW(nodename:Ref<uint16>,servicename:Ref<uint16>,hints:Ref<AddrinfoW>,result:Ref<Ref<AddrinfoW>>):error
	export function getCommandLine():Ref<uint16>
	export function getComputerName(buf:Ref<uint16>,n:Ref<uint32>):error
	export function getConsoleMode(console:Handle,mode:Ref<uint32>):error
	export function getCurrentDirectory(buflen:uint32,buf:Ref<uint16>):[uint32,error]
	export function getCurrentProcess():Handle
	export function getEnvironmentStrings():Ref<uint16>
	export function getEnvironmentVariable(name:Ref<uint16>,buffer:Ref<uint16>,size:uint32):[uint32,error]
	export function getExitCodeProcess(handle:Handle,exitcode:Ref<uint32>):error
	export function getFileAttributes(name:Ref<uint16>):uint32
	export function getFileAttributesEx(name:Ref<uint16>,level:uint32,info:Ref<byte>):error
	//0
	export const GetFileExInfoStandard:int
	//1
	export const GetFileExMaxInfoLevel:int
	export function getFileInformationByHandle(handle:Handle,data:Ref<ByHandleFileInformation>):error
	export function getFileType(filehandle:Handle):uint32
	export function getFullPathName(path:Ref<uint16>,buflen:uint32,buf:Ref<uint16>,fname:Ref<Ref<uint16>>):[uint32,error]
	export function getHostByName(name:string):Ref<Hostent>
	export function getIfEntry(pIfRow:Ref<MibIfRow>):error
	export function getLastError():error
	export function getLengthSid(sid:Ref<SID>):uint32
	export function getLongPathName(path:Ref<uint16>,buf:Ref<uint16>,buflen:uint32):[uint32,error]
	export function getProcAddress(module:Handle,procname:string):[uintptr,error]
	export function getProcessTimes(handle:Handle,creationTime:Ref<Filetime>,exitTime:Ref<Filetime>,kernelTime:Ref<Filetime>,userTime:Ref<Filetime>):error
	export function getProtoByName(name:string):Ref<Protoent>
	export function getQueuedCompletionStatus(cphandle:Handle,qty:Ref<uint32>,key:Ref<uint32>,overlapped:Ref<Ref<Overlapped>>,timeout:uint32):error
	export function getServByName(name:string,proto:string):[Ref<Servent>,error]
	export function getShortPathName(longpath:Ref<uint16>,shortpath:Ref<uint16>,buflen:uint32):[uint32,error]
	export function getStartupInfo(startupInfo:Ref<StartupInfo>):error
	export function getStdHandle(stdhandle:int):Handle
	export function getSystemTimeAsFileTime(time:Ref<Filetime>):void
	export function getTempPath(buflen:uint32,buf:Ref<uint16>):[uint32,error]
	export function getTimeZoneInformation(tzi:Ref<Timezoneinformation>):uint32
	export function getTokenInformation(t:Token,infoClass:uint32,info:Ref<byte>,infoLen:uint32,returnedLen:Ref<uint32>):error
	export function getUserNameEx(nameFormat:uint32,nameBuffre:Ref<uint16>,nSize:Ref<uint32>):error
	export function getUserProfileDirectory(t:Token,dir:Ref<uint16>,dirLen:Ref<uint32>):error
	export function getVersion():uint32
	export function getegid():int
	export function getenv(key:string):[string,bool]
	export function geteuid():int
	export function getgid():int
	export function getgroups():[int]
	export function getpagesize():int
	export function getpeername(fd:Handle):Sockaddr
	export function getpid():int
	export function getppid():int
	export function getsockname(fd:Handle):Sockaddr
	export function getsockopt(s:Handle,level:int32,optname:int32,optval:Ref<byte>,optlen:Ref<int32>):error
	export function getsockoptInt(fd:Handle,level:int,opt:int):[int,error]
	export function gettimeofday(tv:Ref<Timeval>):error
	export function getuid():int
	export function getwd():string
	//1
	export const HANDLE_FLAG_INHERIT:int
	//2147483648
	export const HKEY_CLASSES_ROOT:int
	//2147483653
	export const HKEY_CURRENT_CONFIG:int
	//2147483649
	export const HKEY_CURRENT_USER:int
	//2147483654
	export const HKEY_DYN_DATA:int
	//2147483650
	export const HKEY_LOCAL_MACHINE:int
	//2147483652
	export const HKEY_PERFORMANCE_DATA:int
	//2147483651
	export const HKEY_USERS:int
	export interface Handle extends uintptr{
	}
	export interface Hostent extends Struct<Hostent>{
		name:Ref<byte>
		aliases:Ref<Ref<byte>>
		addrType:uint16
		length:uint16
		addrList:Ref<Ref<byte>>
	}
	//2
	export const IFF_BROADCAST:int
	//4
	export const IFF_LOOPBACK:int
	//16
	export const IFF_MULTICAST:int
	//8
	export const IFF_POINTTOPOINT:int
	//1
	export const IFF_UP:int
	//0
	export const IGNORE:int
	//4294967295
	export const INFINITE:int
	//4294967295
	export const INVALID_FILE_ATTRIBUTES:int
	//2147483648
	export const IOC_IN:int
	//3221225472
	export const IOC_INOUT:int
	//1073741824
	export const IOC_OUT:int
	//402653184
	export const IOC_VENDOR:int
	//134217728
	export const IOC_WS2:int
	//2684354572
	export const IO_REPARSE_TAG_SYMLINK:int
	export interface IPMreq extends Struct<IPMreq>{
		multiaddr:Uint8Array/*4*/
		interface:Uint8Array/*4*/
	}
	//0
	export const IPPROTO_IP:int
	//41
	export const IPPROTO_IPV6:int
	//6
	export const IPPROTO_TCP:int
	//17
	export const IPPROTO_UDP:int
	//12
	export const IPV6_JOIN_GROUP:int
	//13
	export const IPV6_LEAVE_GROUP:int
	//10
	export const IPV6_MULTICAST_HOPS:int
	//9
	export const IPV6_MULTICAST_IF:int
	//11
	export const IPV6_MULTICAST_LOOP:int
	//4
	export const IPV6_UNICAST_HOPS:int
	//27
	export const IPV6_V6ONLY:int
	//12
	export const IP_ADD_MEMBERSHIP:int
	//13
	export const IP_DROP_MEMBERSHIP:int
	//9
	export const IP_MULTICAST_IF:int
	//11
	export const IP_MULTICAST_LOOP:int
	//10
	export const IP_MULTICAST_TTL:int
	//3
	export const IP_TOS:int
	//4
	export const IP_TTL:int
	export interface IPv6Mreq extends Struct<IPv6Mreq>{
		multiaddr:Uint8Array/*16*/
		interface:uint32
	}
	//true
	export const ImplementsGetwd:bool
	export interface InterfaceInfo extends Struct<InterfaceInfo>{
		flags:uint32
		address:SockaddrGen
		broadcastAddress:SockaddrGen
		netmask:SockaddrGen
	}
	export const InvalidHandle:Handle
	export interface IpAdapterInfo extends Struct<IpAdapterInfo>{
		next:Ref<IpAdapterInfo>
		comboIndex:uint32
		adapterName:Uint8Array/*260*/
		description:Uint8Array/*132*/
		addressLength:uint32
		address:Uint8Array/*8*/
		index:uint32
		type:uint32
		dhcpEnabled:uint32
		currentIpAddress:Ref<IpAddrString>
		ipAddressList:IpAddrString
		gatewayList:IpAddrString
		dhcpServer:IpAddrString
		haveWins:bool
		primaryWinsServer:IpAddrString
		secondaryWinsServer:IpAddrString
		leaseObtained:int64
		leaseExpires:int64
	}
	export interface IpAddrString extends Struct<IpAddrString>{
		next:Ref<IpAddrString>
		ipAddress:IpAddressString
		ipMask:IpMaskString
		context:uint32
	}
	export interface IpAddressString extends Struct<IpAddressString>{
		string:Uint8Array/*16*/
	}
	export interface IpMaskString extends Struct<IpMaskString>{
		string:Uint8Array/*16*/
	}
	//983103
	export const KEY_ALL_ACCESS:int
	//32
	export const KEY_CREATE_LINK:int
	//4
	export const KEY_CREATE_SUB_KEY:int
	//8
	export const KEY_ENUMERATE_SUB_KEYS:int
	//131097
	export const KEY_EXECUTE:int
	//16
	export const KEY_NOTIFY:int
	//1
	export const KEY_QUERY_VALUE:int
	//131097
	export const KEY_READ:int
	//2
	export const KEY_SET_VALUE:int
	//512
	export const KEY_WOW64_32KEY:int
	//256
	export const KEY_WOW64_64KEY:int
	//131078
	export const KEY_WRITE:int
	//9
	export const LANG_ENGLISH:int
	//0
	export const LAYERED_PROTOCOL:int
	export interface LazyDLL extends Struct<LazyDLL>{
		name:string
		load():error
		handle():uintptr
		newProc(name:string):Ref<LazyProc>
	}
	export interface LazyProc extends Struct<LazyProc>{
		name:string
		find():error
		addr():uintptr
		call(...a:uintptr[]):[uintptr,uintptr,error]
	}
	export function lchown(path:string,uid:int,gid:int):error
	export interface Linger extends Struct<Linger>{
		onoff:int32
		linger:int32
	}
	export function link(oldpath:string,newpath:string):error
	export function listen(s:Handle,n:int):error
	export function loadCancelIoEx():error
	export function loadConnectEx():error
	export function loadCreateSymbolicLink():error
	export function loadDLL(name:string):Ref<DLL>
	export function loadGetAddrInfo():error
	export function loadLibrary(libname:string):Handle
	export function loadSetFileCompletionNotificationModes():error
	export function localFree(hmem:Handle):Handle
	export function lookupAccountName(systemName:Ref<uint16>,accountName:Ref<uint16>,sid:Ref<SID>,sidLen:Ref<uint32>,refdDomainName:Ref<uint16>,refdDomainNameLen:Ref<uint32>,use:Ref<uint32>):error
	export function lookupAccountSid(systemName:Ref<uint16>,sid:Ref<SID>,name:Ref<uint16>,nameLen:Ref<uint32>,refdDomainName:Ref<uint16>,refdDomainNameLen:Ref<uint32>,use:Ref<uint32>):error
	export function lookupSID(system:string,account:string):[Ref<SID>,string,uint32,error]
	//16384
	export const MAXIMUM_REPARSE_DATA_BUFFER_SIZE:int
	//256
	export const MAXLEN_IFDESCR:int
	//8
	export const MAXLEN_PHYSADDR:int
	//8
	export const MAX_ADAPTER_ADDRESS_LENGTH:int
	//128
	export const MAX_ADAPTER_DESCRIPTION_LENGTH:int
	//256
	export const MAX_ADAPTER_NAME_LENGTH:int
	//15
	export const MAX_COMPUTERNAME_LENGTH:int
	//256
	export const MAX_INTERFACE_NAME_LEN:int
	//32768
	export const MAX_LONG_PATH:int
	//260
	export const MAX_PATH:int
	//7
	export const MAX_PROTOCOL_CHAIN:int
	export function mapViewOfFile(handle:Handle,access:uint32,offsetHigh:uint32,offsetLow:uint32,length:uintptr):[uintptr,error]
	//29
	export const MaxTokenInfoClass:int
	export interface MibIfRow extends Struct<MibIfRow>{
		name:Uint16Array/*256*/
		index:uint32
		type:uint32
		mtu:uint32
		speed:uint32
		physAddrLen:uint32
		physAddr:Uint8Array/*8*/
		adminStatus:uint32
		operStatus:uint32
		lastChange:uint32
		inOctets:uint32
		inUcastPkts:uint32
		inNUcastPkts:uint32
		inDiscards:uint32
		inErrors:uint32
		inUnknownProtos:uint32
		outOctets:uint32
		outUcastPkts:uint32
		outNUcastPkts:uint32
		outDiscards:uint32
		outErrors:uint32
		outQLen:uint32
		descrLen:uint32
		descr:Uint8Array/*256*/
	}
	export function mkdir(path:string,mode:uint32):error
	export function moveFile(from:Ref<uint16>,to:Ref<uint16>):error
	export function mustLoadDLL(name:string):Ref<DLL>
	//7
	export const NameCanonical:int
	//9
	export const NameCanonicalEx:int
	//3
	export const NameDisplay:int
	//12
	export const NameDnsDomain:int
	//1
	export const NameFullyQualifiedDN:int
	//2
	export const NameSamCompatible:int
	//10
	export const NameServicePrincipal:int
	//6
	export const NameUniqueId:int
	//0
	export const NameUnknown:int
	//8
	export const NameUserPrincipal:int
	export function netApiBufferFree(buf:Ref<byte>):error
	export function netGetJoinInformation(server:Ref<uint16>,name:Ref<Ref<uint16>>,bufType:Ref<uint32>):error
	//3
	export const NetSetupDomainName:int
	//1
	export const NetSetupUnjoined:int
	//0
	export const NetSetupUnknownStatus:int
	//2
	export const NetSetupWorkgroupName:int
	export function netUserGetInfo(serverName:Ref<uint16>,userName:Ref<uint16>,level:uint32,buf:Ref<Ref<byte>>):error
	export function newCallback(fn:any):uintptr
	export function newCallbackCDecl(fn:any):uintptr
	export function newLazyDLL(name:string):Ref<LazyDLL>
	export function nsecToFiletime(nsec:int64):Filetime
	export function nsecToTimespec(nsec:int64):Timespec
	export function nsecToTimeval(nsec:int64):Timeval
	export function ntohs(netshort:uint16):uint16
	export const OID_PKIX_KP_SERVER_AUTH:Uint8Array
	export const OID_SERVER_GATED_CRYPTO:Uint8Array
	export const OID_SGC_NETSCAPE:Uint8Array
	//4
	export const OPEN_ALWAYS:int
	//3
	export const OPEN_EXISTING:int
	//1024
	export const O_APPEND:int
	//8192
	export const O_ASYNC:int
	//524288
	export const O_CLOEXEC:int
	//64
	export const O_CREAT:int
	//128
	export const O_EXCL:int
	//256
	export const O_NOCTTY:int
	//2048
	export const O_NONBLOCK:int
	//0
	export const O_RDONLY:int
	//2
	export const O_RDWR:int
	//4096
	export const O_SYNC:int
	//512
	export const O_TRUNC:int
	//1
	export const O_WRONLY:int
	export function open(path:string,mode:int,perm:uint32):[Handle,error]
	export function openCurrentProcessToken():Token
	export function openProcess(da:uint32,inheritHandle:bool,pid:uint32):[Handle,error]
	export function openProcessToken(h:Handle,access:uint32,token:Ref<Token>):error
	export interface Overlapped extends Struct<Overlapped>{
		internal:uintptr
		internalHigh:uintptr
		offset:uint32
		offsetHigh:uint32
		hEvent:Handle
	}
	//32
	export const PAGE_EXECUTE_READ:int
	//64
	export const PAGE_EXECUTE_READWRITE:int
	//128
	export const PAGE_EXECUTE_WRITECOPY:int
	//2
	export const PAGE_READONLY:int
	//4
	export const PAGE_READWRITE:int
	//8
	export const PAGE_WRITECOPY:int
	//4
	export const PFL_HIDDEN:int
	//8
	export const PFL_MATCHES_PROTOCOL_ZERO:int
	//1
	export const PFL_MULTIPLE_PROTO_ENTRIES:int
	//16
	export const PFL_NETWORKDIRECT_PROVIDER:int
	//2
	export const PFL_RECOMMENDED_PROTO_ENTRY:int
	//65536
	export const PKCS_7_ASN_ENCODING:int
	//1024
	export const PROCESS_QUERY_INFORMATION:int
	//1
	export const PROCESS_TERMINATE:int
	//18
	export const PROV_DH_SCHANNEL:int
	//3
	export const PROV_DSS:int
	//13
	export const PROV_DSS_DH:int
	//16
	export const PROV_EC_ECDSA_FULL:int
	//14
	export const PROV_EC_ECDSA_SIG:int
	//17
	export const PROV_EC_ECNRA_FULL:int
	//15
	export const PROV_EC_ECNRA_SIG:int
	//4
	export const PROV_FORTEZZA:int
	//22
	export const PROV_INTEL_SEC:int
	//5
	export const PROV_MS_EXCHANGE:int
	//23
	export const PROV_REPLACE_OWF:int
	//21
	export const PROV_RNG:int
	//24
	export const PROV_RSA_AES:int
	//1
	export const PROV_RSA_FULL:int
	//12
	export const PROV_RSA_SCHANNEL:int
	//2
	export const PROV_RSA_SIG:int
	//20
	export const PROV_SPYRUS_LYNKS:int
	//6
	export const PROV_SSL:int
	export function pipe(p:Handle[]):error
	export interface Pointer{
Ref<Nothing>	}
	export function postQueuedCompletionStatus(cphandle:Handle,qty:uint32,key:uint32,overlapped:Ref<Overlapped>):error
	export interface Proc extends Struct<Proc>{
		dll:Ref<DLL>
		name:string
		addr():uintptr
		call(...a:uintptr[]):[uintptr,uintptr,error]
	}
	export interface ProcAttr extends Struct<ProcAttr>{
		dir:string
		env:string[]
		files:uintptr[]
		sys:Ref<SysProcAttr>
	}
	export function process32First(snapshot:Handle,procEntry:Ref<ProcessEntry32>):error
	export function process32Next(snapshot:Handle,procEntry:Ref<ProcessEntry32>):error
	export interface ProcessEntry32 extends Struct<ProcessEntry32>{
		size:uint32
		usage:uint32
		processID:uint32
		defaultHeapID:uintptr
		moduleID:uint32
		threads:uint32
		parentProcessID:uint32
		priClassBase:int32
		flags:uint32
		exeFile:Uint16Array/*260*/
	}
	export interface ProcessInformation extends Struct<ProcessInformation>{
		process:Handle
		thread:Handle
		processId:uint32
		threadId:uint32
	}
	export interface Protoent extends Struct<Protoent>{
		name:Ref<byte>
		aliases:Ref<Ref<byte>>
		proto:uint16
	}
	//3
	export const REG_BINARY:int
	//4
	export const REG_DWORD:int
	//5
	export const REG_DWORD_BIG_ENDIAN:int
	//4
	export const REG_DWORD_LITTLE_ENDIAN:int
	//2
	export const REG_EXPAND_SZ:int
	//9
	export const REG_FULL_RESOURCE_DESCRIPTOR:int
	//6
	export const REG_LINK:int
	//7
	export const REG_MULTI_SZ:int
	//0
	export const REG_NONE:int
	//11
	export const REG_QWORD:int
	//11
	export const REG_QWORD_LITTLE_ENDIAN:int
	//8
	export const REG_RESOURCE_LIST:int
	//10
	export const REG_RESOURCE_REQUIREMENTS_LIST:int
	//1
	export const REG_SZ:int
	export interface RawConn{
		control(f:(fd:uintptr)=>void):error
		read(f:(fd:uintptr)=>bool):error
		write(f:(fd:uintptr)=>bool):error
	}
	export interface RawSockaddr extends Struct<RawSockaddr>{
		family:uint16
		data:Int8Array/*14*/
	}
	export interface RawSockaddrAny extends Struct<RawSockaddrAny>{
		addr:RawSockaddr
		pad:Int8Array/*100*/
		sockaddr():[Sockaddr,error]
	}
	export interface RawSockaddrInet4 extends Struct<RawSockaddrInet4>{
		family:uint16
		port:uint16
		addr:Uint8Array/*4*/
		zero:Uint8Array/*8*/
	}
	export interface RawSockaddrInet6 extends Struct<RawSockaddrInet6>{
		family:uint16
		port:uint16
		flowinfo:uint32
		addr:Uint8Array/*16*/
		scope_id:uint32
	}
	export interface RawSockaddrUnix extends Struct<RawSockaddrUnix>{
		family:uint16
		path:Int8Array/*108*/
	}
	export function read(fd:Handle,p:Uint8Array):[int,error]
	export function readConsole(console:Handle,buf:Ref<uint16>,toread:uint32,read:Ref<uint32>,inputControl:Ref<byte>):error
	export function readDirectoryChanges(handle:Handle,buf:Ref<byte>,buflen:uint32,watchSubTree:bool,mask:uint32,retlen:Ref<uint32>,overlapped:Ref<Overlapped>,completionRoutine:uintptr):error
	export function readFile(fd:Handle,p:Uint8Array,done:Ref<uint32>,overlapped:Ref<Overlapped>):error
	export function readlink(path:string,buf:Uint8Array):[int,error]
	export function recvfrom(fd:Handle,p:Uint8Array,flags:int):[int,Sockaddr,error]
	export function regCloseKey(key:Handle):error
	export function regEnumKeyEx(key:Handle,index:uint32,name:Ref<uint16>,nameLen:Ref<uint32>,reserved:Ref<uint32>,clazz:Ref<uint16>,classLen:Ref<uint32>,lastWriteTime:Ref<Filetime>):error
	export function regOpenKeyEx(key:Handle,subkey:Ref<uint16>,options:uint32,desiredAccess:uint32,result:Ref<Handle>):error
	export function regQueryInfoKey(key:Handle,clazz:Ref<uint16>,classLen:Ref<uint32>,reserved:Ref<uint32>,subkeysLen:Ref<uint32>,maxSubkeyLen:Ref<uint32>,maxClassLen:Ref<uint32>,valuesLen:Ref<uint32>,maxValueNameLen:Ref<uint32>,maxValueLen:Ref<uint32>,saLen:Ref<uint32>,lastWriteTime:Ref<Filetime>):error
	export function regQueryValueEx(key:Handle,name:Ref<uint16>,reserved:Ref<uint32>,valtype:Ref<uint32>,buf:Ref<byte>,buflen:Ref<uint32>):error
	export function removeDirectory(path:Ref<uint16>):error
	export function rename(oldpath:string,newpath:string):error
	export function rmdir(path:string):error
	export interface Rusage extends Struct<Rusage>{
		creationTime:Filetime
		exitTime:Filetime
		kernelTime:Filetime
		userTime:Filetime
	}
	//0
	export const SHUT_RD:int
	//2
	export const SHUT_RDWR:int
	//1
	export const SHUT_WR:int
	export interface SID extends Struct<SID>,Alias<Nothing>{
		string():[string,error]
		len():int
		copy():[Ref<SID>,error]
		lookupAccount(system:string):[string,string,uint32,error]
	}
	export interface SIDAndAttributes extends Struct<SIDAndAttributes>{
		sid:Ref<SID>
		attributes:uint32
	}
	export const SIGABRT:Signal
	export const SIGALRM:Signal
	export const SIGBUS:Signal
	export const SIGFPE:Signal
	export const SIGHUP:Signal
	export const SIGILL:Signal
	export const SIGINT:Signal
	export const SIGKILL:Signal
	export const SIGPIPE:Signal
	export const SIGQUIT:Signal
	export const SIGSEGV:Signal
	export const SIGTERM:Signal
	export const SIGTRAP:Signal
	//3355443206
	export const SIO_GET_EXTENSION_FUNCTION_POINTER:int
	//1074033791
	export const SIO_GET_INTERFACE_LIST:int
	//2550136836
	export const SIO_KEEPALIVE_VALS:int
	//2550136844
	export const SIO_UDP_CONNRESET:int
	//2
	export const SOCK_DGRAM:int
	//3
	export const SOCK_RAW:int
	//5
	export const SOCK_SEQPACKET:int
	//1
	export const SOCK_STREAM:int
	//65535
	export const SOL_SOCKET:int
	//2147483647
	export const SOMAXCONN:int
	//32
	export const SO_BROADCAST:int
	//16
	export const SO_DONTROUTE:int
	//8
	export const SO_KEEPALIVE:int
	//128
	export const SO_LINGER:int
	//4098
	export const SO_RCVBUF:int
	//4
	export const SO_REUSEADDR:int
	//4097
	export const SO_SNDBUF:int
	//28683
	export const SO_UPDATE_ACCEPT_CONTEXT:int
	//28688
	export const SO_UPDATE_CONNECT_CONTEXT:int
	export interface SSLExtraCertChainPolicyPara extends Struct<SSLExtraCertChainPolicyPara>{
		size:uint32
		authType:uint32
		checks:uint32
		serverName:Ref<uint16>
	}
	//2031616
	export const STANDARD_RIGHTS_ALL:int
	//131072
	export const STANDARD_RIGHTS_EXECUTE:int
	//131072
	export const STANDARD_RIGHTS_READ:int
	//983040
	export const STANDARD_RIGHTS_REQUIRED:int
	//131072
	export const STANDARD_RIGHTS_WRITE:int
	//1
	export const STARTF_USESHOWWINDOW:int
	//256
	export const STARTF_USESTDHANDLES:int
	//-12
	export const STD_ERROR_HANDLE:int
	//-10
	export const STD_INPUT_HANDLE:int
	//-11
	export const STD_OUTPUT_HANDLE:int
	//1
	export const SUBLANG_ENGLISH_US:int
	//11
	export const SW_FORCEMINIMIZE:int
	//0
	export const SW_HIDE:int
	//3
	export const SW_MAXIMIZE:int
	//6
	export const SW_MINIMIZE:int
	//1
	export const SW_NORMAL:int
	//9
	export const SW_RESTORE:int
	//5
	export const SW_SHOW:int
	//10
	export const SW_SHOWDEFAULT:int
	//3
	export const SW_SHOWMAXIMIZED:int
	//2
	export const SW_SHOWMINIMIZED:int
	//7
	export const SW_SHOWMINNOACTIVE:int
	//8
	export const SW_SHOWNA:int
	//4
	export const SW_SHOWNOACTIVATE:int
	//1
	export const SW_SHOWNORMAL:int
	//1
	export const SYMBOLIC_LINK_FLAG_DIRECTORY:int
	//1048576
	export const SYNCHRONIZE:int
	//24576
	export const S_IFBLK:int
	//8192
	export const S_IFCHR:int
	//16384
	export const S_IFDIR:int
	//4096
	export const S_IFIFO:int
	//40960
	export const S_IFLNK:int
	//126976
	export const S_IFMT:int
	//32768
	export const S_IFREG:int
	//49152
	export const S_IFSOCK:int
	//256
	export const S_IRUSR:int
	//1024
	export const S_ISGID:int
	//2048
	export const S_ISUID:int
	//512
	export const S_ISVTX:int
	//128
	export const S_IWRITE:int
	//128
	export const S_IWUSR:int
	//64
	export const S_IXUSR:int
	export interface SecurityAttributes extends Struct<SecurityAttributes>{
		length:uint32
		securityDescriptor:uintptr
		inheritHandle:uint32
	}
	export function seek(fd:Handle,offset:int64,whence:int):[int64,error]
	export function sendto(fd:Handle,p:Uint8Array,flags:int,to:Sockaddr):error
	export interface Servent extends Struct<Servent>{
		name:Ref<byte>
		aliases:Ref<Ref<byte>>
		proto:Ref<byte>
		port:uint16
	}
	export function setCurrentDirectory(path:Ref<uint16>):error
	export function setEndOfFile(handle:Handle):error
	export function setEnvironmentVariable(name:Ref<uint16>,value:Ref<uint16>):error
	export function setFileAttributes(name:Ref<uint16>,attrs:uint32):error
	export function setFileCompletionNotificationModes(handle:Handle,flags:uint8):error
	export function setFilePointer(handle:Handle,lowoffset:int32,highoffsetptr:Ref<int32>,whence:uint32):[uint32,error]
	export function setFileTime(handle:Handle,ctime:Ref<Filetime>,atime:Ref<Filetime>,wtime:Ref<Filetime>):error
	export function setHandleInformation(handle:Handle,mask:uint32,flags:uint32):error
	export function setNonblock(fd:Handle,nonblocking:bool):error
	export function setenv(key:string,value:string):error
	export function setsockopt(s:Handle,level:int32,optname:int32,optval:Ref<byte>,optlen:int32):error
	export function setsockoptIPMreq(fd:Handle,level:int,opt:int,mreq:Ref<IPMreq>):error
	export function setsockoptIPv6Mreq(fd:Handle,level:int,opt:int,mreq:Ref<IPv6Mreq>):error
	export function setsockoptInet4Addr(fd:Handle,level:int,opt:int,value:Uint8Array/*4*/):error
	export function setsockoptInt(fd:Handle,level:int,opt:int,value:int):error
	export function setsockoptLinger(fd:Handle,level:int,opt:int,l:Ref<Linger>):error
	export function setsockoptTimeval(fd:Handle,level:int,opt:int,tv:Ref<Timeval>):error
	export function shutdown(fd:Handle,how:int):error
	//4
	export const SidTypeAlias:int
	//9
	export const SidTypeComputer:int
	//6
	export const SidTypeDeletedAccount:int
	//3
	export const SidTypeDomain:int
	//2
	export const SidTypeGroup:int
	//7
	export const SidTypeInvalid:int
	//10
	export const SidTypeLabel:int
	//8
	export const SidTypeUnknown:int
	//1
	export const SidTypeUser:int
	//5
	export const SidTypeWellKnownGroup:int
	export interface Signal extends int{
		signal():void
		string():string
	}
	export interface Sockaddr{
	}
	export interface SockaddrGen extends Uint8Array/*24*/{
	}
	export interface SockaddrInet4 extends Struct<SockaddrInet4>,Sockaddr{
		port:int
		addr:Uint8Array/*4*/
	}
	export interface SockaddrInet6 extends Struct<SockaddrInet6>,Sockaddr{
		port:int
		zoneId:uint32
		addr:Uint8Array/*16*/
	}
	export interface SockaddrUnix extends Struct<SockaddrUnix>,Sockaddr{
		name:string
	}
	export function socket(domain:int,typ:int,proto:int):[Handle,error]
	export const SocketDisableIPv6:bool
	export function startProcess(argv0:string,argv:string[],attr:Ref<ProcAttr>):[int,uintptr,error]
	export interface StartupInfo extends Struct<StartupInfo>{
		cb:uint32
		desktop:Ref<uint16>
		title:Ref<uint16>
		X:uint32
		Y:uint32
		xSize:uint32
		ySize:uint32
		xCountChars:uint32
		yCountChars:uint32
		fillAttribute:uint32
		flags:uint32
		showWindow:uint16
		stdInput:Handle
		stdOutput:Handle
		stdErr:Handle
	}
	export const Stderr:Handle
	export const Stdin:Handle
	export const Stdout:Handle
	export function stringBytePtr(s:string):Ref<byte>
	export function stringByteSlice(s:string):Uint8Array
	export function stringToSid(s:string):Ref<SID>
	export function stringToUTF16(s:string):Uint16Array
	export function stringToUTF16Ptr(s:string):Ref<uint16>
	export function symlink(path:string,link:string):error
	export interface SysProcAttr extends Struct<SysProcAttr>{
		hideWindow:bool
		cmdLine:string
		creationFlags:uint32
		token:Token
		processAttributes:Ref<SecurityAttributes>
		threadAttributes:Ref<SecurityAttributes>
		noInheritHandles:bool
		additionalInheritedHandles:Handle[]
		parentProcess:Handle
	}
	export function syscall(trap:uintptr,nargs:uintptr,a1:uintptr,a2:uintptr,a3:uintptr):[uintptr,uintptr,Errno]
	export function syscall12(trap:uintptr,nargs:uintptr,a1:uintptr,a2:uintptr,a3:uintptr,a4:uintptr,a5:uintptr,a6:uintptr,a7:uintptr,a8:uintptr,a9:uintptr,a10:uintptr,a11:uintptr,a12:uintptr):[uintptr,uintptr,Errno]
	export function syscall15(trap:uintptr,nargs:uintptr,a1:uintptr,a2:uintptr,a3:uintptr,a4:uintptr,a5:uintptr,a6:uintptr,a7:uintptr,a8:uintptr,a9:uintptr,a10:uintptr,a11:uintptr,a12:uintptr,a13:uintptr,a14:uintptr,a15:uintptr):[uintptr,uintptr,Errno]
	export function syscall18(trap:uintptr,nargs:uintptr,a1:uintptr,a2:uintptr,a3:uintptr,a4:uintptr,a5:uintptr,a6:uintptr,a7:uintptr,a8:uintptr,a9:uintptr,a10:uintptr,a11:uintptr,a12:uintptr,a13:uintptr,a14:uintptr,a15:uintptr,a16:uintptr,a17:uintptr,a18:uintptr):[uintptr,uintptr,Errno]
	export function syscall6(trap:uintptr,nargs:uintptr,a1:uintptr,a2:uintptr,a3:uintptr,a4:uintptr,a5:uintptr,a6:uintptr):[uintptr,uintptr,Errno]
	export function syscall9(trap:uintptr,nargs:uintptr,a1:uintptr,a2:uintptr,a3:uintptr,a4:uintptr,a5:uintptr,a6:uintptr,a7:uintptr,a8:uintptr,a9:uintptr):[uintptr,uintptr,Errno]
	export function syscallN(trap:uintptr,...args:uintptr[]):[uintptr,uintptr,Errno]
	export interface Systemtime extends Struct<Systemtime>{
		year:uint16
		month:uint16
		dayOfWeek:uint16
		day:uint16
		hour:uint16
		minute:uint16
		second:uint16
		milliseconds:uint16
	}
	export interface TCPKeepalive extends Struct<TCPKeepalive>{
		onOff:uint32
		time:uint32
		interval:uint32
	}
	//1
	export const TCP_NODELAY:int
	//1
	export const TF_DISCONNECT:int
	//2
	export const TF_REUSE_SOCKET:int
	//0
	export const TF_USE_DEFAULT_WORKER:int
	//32
	export const TF_USE_KERNEL_APC:int
	//16
	export const TF_USE_SYSTEM_THREAD:int
	//4
	export const TF_WRITE_BEHIND:int
	//2147483648
	export const TH32CS_INHERIT:int
	//15
	export const TH32CS_SNAPALL:int
	//1
	export const TH32CS_SNAPHEAPLIST:int
	//8
	export const TH32CS_SNAPMODULE:int
	//16
	export const TH32CS_SNAPMODULE32:int
	//2
	export const TH32CS_SNAPPROCESS:int
	//4
	export const TH32CS_SNAPTHREAD:int
	//2
	export const TIME_ZONE_ID_DAYLIGHT:int
	//1
	export const TIME_ZONE_ID_STANDARD:int
	//0
	export const TIME_ZONE_ID_UNKNOWN:int
	//128
	export const TOKEN_ADJUST_DEFAULT:int
	//64
	export const TOKEN_ADJUST_GROUPS:int
	//32
	export const TOKEN_ADJUST_PRIVILEGES:int
	//256
	export const TOKEN_ADJUST_SESSIONID:int
	//983551
	export const TOKEN_ALL_ACCESS:int
	//1
	export const TOKEN_ASSIGN_PRIMARY:int
	//2
	export const TOKEN_DUPLICATE:int
	//131072
	export const TOKEN_EXECUTE:int
	//4
	export const TOKEN_IMPERSONATE:int
	//8
	export const TOKEN_QUERY:int
	//16
	export const TOKEN_QUERY_SOURCE:int
	//131080
	export const TOKEN_READ:int
	//131296
	export const TOKEN_WRITE:int
	//5
	export const TRUNCATE_EXISTING:int
	export function terminateProcess(handle:Handle,exitcode:uint32):error
	export interface Timespec extends Struct<Timespec>{
		sec:int64
		nsec:int64
		unix():[int64,int64]
		nano():int64
	}
	export function timespecToNsec(ts:Timespec):int64
	export interface Timeval extends Struct<Timeval>{
		sec:int32
		usec:int32
		unix():[int64,int64]
		nano():int64
		nanoseconds():int64
	}
	export interface Timezoneinformation extends Struct<Timezoneinformation>{
		bias:int32
		standardName:Uint16Array/*32*/
		standardDate:Systemtime
		standardBias:int32
		daylightName:Uint16Array/*32*/
		daylightDate:Systemtime
		daylightBias:int32
	}
	export interface Token extends uintptr,io.Closer{
		close():error
		getTokenUser():[Ref<Tokenuser>,error]
		getTokenPrimaryGroup():[Ref<Tokenprimarygroup>,error]
		getUserProfileDirectory():[string,error]
	}
	//22
	export const TokenAccessInformation:int
	//16
	export const TokenAuditPolicy:int
	//6
	export const TokenDefaultDacl:int
	//20
	export const TokenElevation:int
	//18
	export const TokenElevationType:int
	//2
	export const TokenGroups:int
	//13
	export const TokenGroupsAndPrivileges:int
	//21
	export const TokenHasRestrictions:int
	//9
	export const TokenImpersonationLevel:int
	//25
	export const TokenIntegrityLevel:int
	//19
	export const TokenLinkedToken:int
	//28
	export const TokenLogonSid:int
	//27
	export const TokenMandatoryPolicy:int
	//17
	export const TokenOrigin:int
	//4
	export const TokenOwner:int
	//5
	export const TokenPrimaryGroup:int
	//3
	export const TokenPrivileges:int
	//11
	export const TokenRestrictedSids:int
	//15
	export const TokenSandBoxInert:int
	//12
	export const TokenSessionId:int
	//14
	export const TokenSessionReference:int
	//7
	export const TokenSource:int
	//10
	export const TokenStatistics:int
	//8
	export const TokenType:int
	//26
	export const TokenUIAccess:int
	//1
	export const TokenUser:int
	//23
	export const TokenVirtualizationAllowed:int
	//24
	export const TokenVirtualizationEnabled:int
	export interface Tokenprimarygroup extends Struct<Tokenprimarygroup>{
		primaryGroup:Ref<SID>
	}
	export interface Tokenuser extends Struct<Tokenuser>{
		user:SIDAndAttributes
	}
	export function translateAccountName(username:string,from:uint32,to:uint32,initSize:int):[string,error]
	export function translateName(accName:Ref<uint16>,accNameFormat:uint32,desiredNameFormat:uint32,translatedName:Ref<uint16>,nSize:Ref<uint32>):error
	export function transmitFile(s:Handle,handle:Handle,bytesToWrite:uint32,bytsPerSend:uint32,overlapped:Ref<Overlapped>,transmitFileBuf:Ref<TransmitFileBuffers>,flags:uint32):error
	export interface TransmitFileBuffers extends Struct<TransmitFileBuffers>{
		head:uintptr
		headLength:uint32
		tail:uintptr
		tailLength:uint32
	}
	//108
	export const UNIX_PATH_MAX:int
	//0
	export const USAGE_MATCH_TYPE_AND:int
	//1
	export const USAGE_MATCH_TYPE_OR:int
	export function utF16FromString(s:string):Uint16Array
	export function utF16PtrFromString(s:string):Ref<uint16>
	export function utF16ToString(s:Uint16Array):string
	export function unlink(path:string):error
	export function unmapViewOfFile(addr:uintptr):error
	export function unsetenv(key:string):error
	export interface UserInfo10 extends Struct<UserInfo10>{
		name:Ref<uint16>
		comment:Ref<uint16>
		usrComment:Ref<uint16>
		fullName:Ref<uint16>
	}
	export function utimes(path:string,tv:Timeval[]):error
	export function utimesNano(path:string,ts:Timespec[]):error
	export function virtualLock(addr:uintptr,length:uintptr):error
	export function virtualUnlock(addr:uintptr,length:uintptr):error
	//128
	export const WAIT_ABANDONED:int
	//4294967295
	export const WAIT_FAILED:int
	//0
	export const WAIT_OBJECT_0:int
	//258
	export const WAIT_TIMEOUT:int
	export interface WSABuf extends Struct<WSABuf>{
		len:uint32
		buf:Ref<byte>
	}
	export function wsaCleanup():error
	//256
	export const WSADESCRIPTION_LEN:int
	export interface WSAData extends Struct<WSAData>{
		version:uint16
		highVersion:uint16
		maxSockets:uint16
		maxUdpDg:uint16
		vendorInfo:Ref<byte>
		description:Uint8Array/*257*/
		systemStatus:Uint8Array/*129*/
	}
	export const WSAEACCES:Errno
	export const WSAECONNABORTED:Errno
	export const WSAECONNRESET:Errno
	export function wsaEnumProtocols(protocols:Ref<int32>,protocolBuffer:Ref<WSAProtocolInfo>,bufferLength:Ref<uint32>):[int32,error]
	export const WSAID_CONNECTEX:GUID
	export function wsaIoctl(s:Handle,iocc:uint32,inbuf:Ref<byte>,cbif:uint32,outbuf:Ref<byte>,cbob:uint32,cbbr:Ref<uint32>,overlapped:Ref<Overlapped>,completionRoutine:uintptr):error
	//255
	export const WSAPROTOCOL_LEN:int
	export interface WSAProtocolChain extends Struct<WSAProtocolChain>{
		chainLen:int32
		chainEntries:Uint32Array/*7*/
	}
	export interface WSAProtocolInfo extends Struct<WSAProtocolInfo>{
		serviceFlags1:uint32
		serviceFlags2:uint32
		serviceFlags3:uint32
		serviceFlags4:uint32
		providerFlags:uint32
		providerId:GUID
		catalogEntryId:uint32
		protocolChain:WSAProtocolChain
		version:int32
		addressFamily:int32
		maxSockAddr:int32
		minSockAddr:int32
		socketType:int32
		protocol:int32
		protocolMaxOffset:int32
		networkByteOrder:int32
		securityScheme:int32
		messageSize:uint32
		providerReserved:uint32
		protocolName:Uint16Array/*256*/
	}
	export function wsaRecv(s:Handle,bufs:Ref<WSABuf>,bufcnt:uint32,recvd:Ref<uint32>,flags:Ref<uint32>,overlapped:Ref<Overlapped>,croutine:Ref<byte>):error
	export function wsaRecvFrom(s:Handle,bufs:Ref<WSABuf>,bufcnt:uint32,recvd:Ref<uint32>,flags:Ref<uint32>,from:Ref<RawSockaddrAny>,fromlen:Ref<int32>,overlapped:Ref<Overlapped>,croutine:Ref<byte>):error
	//128
	export const WSASYS_STATUS_LEN:int
	export function wsaSend(s:Handle,bufs:Ref<WSABuf>,bufcnt:uint32,sent:Ref<uint32>,flags:uint32,overlapped:Ref<Overlapped>,croutine:Ref<byte>):error
	export function wsaSendTo(s:Handle,bufs:Ref<WSABuf>,bufcnt:uint32,sent:Ref<uint32>,flags:uint32,to:Ref<RawSockaddrAny>,tolen:int32,overlapped:Ref<Overlapped>,croutine:Ref<byte>):error
	export function wsaSendto(s:Handle,bufs:Ref<WSABuf>,bufcnt:uint32,sent:Ref<uint32>,flags:uint32,to:Sockaddr,overlapped:Ref<Overlapped>,croutine:Ref<byte>):error
	export function wsaStartup(verreq:uint32,data:Ref<WSAData>):error
	export function waitForSingleObject(handle:Handle,waitMilliseconds:uint32):[uint32,error]
	export interface WaitStatus extends Struct<WaitStatus>{
		exitCode:uint32
		exited():bool
		exitStatus():int
		signal():Signal
		coreDump():bool
		stopped():bool
		continued():bool
		stopSignal():Signal
		signaled():bool
		trapCause():int
	}
	export interface Win32FileAttributeData extends Struct<Win32FileAttributeData>{
		fileAttributes:uint32
		creationTime:Filetime
		lastAccessTime:Filetime
		lastWriteTime:Filetime
		fileSizeHigh:uint32
		fileSizeLow:uint32
	}
	export interface Win32finddata extends Struct<Win32finddata>{
		fileAttributes:uint32
		creationTime:Filetime
		lastAccessTime:Filetime
		lastWriteTime:Filetime
		fileSizeHigh:uint32
		fileSizeLow:uint32
		reserved0:uint32
		reserved1:uint32
		fileName:Uint16Array/*259*/
		alternateFileName:Uint16Array/*13*/
	}
	export function write(fd:Handle,p:Uint8Array):[int,error]
	export function writeConsole(console:Handle,buf:Ref<uint16>,towrite:uint32,written:Ref<uint32>,reserved:Ref<byte>):error
	export function writeFile(fd:Handle,p:Uint8Array,done:Ref<uint32>,overlapped:Ref<Overlapped>):error
	//1
	export const X509_ASN_ENCODING:int
	//1
	export const XP1_CONNECTIONLESS:int
	//128
	export const XP1_CONNECT_DATA:int
	//256
	export const XP1_DISCONNECT_DATA:int
	//64
	export const XP1_EXPEDITED_DATA:int
	//32
	export const XP1_GRACEFUL_CLOSE:int
	//2
	export const XP1_GUARANTEED_DELIVERY:int
	//4
	export const XP1_GUARANTEED_ORDER:int
	//131072
	export const XP1_IFS_HANDLES:int
	//8
	export const XP1_MESSAGE_ORIENTED:int
	//2048
	export const XP1_MULTIPOINT_CONTROL_PLANE:int
	//4096
	export const XP1_MULTIPOINT_DATA_PLANE:int
	//262144
	export const XP1_PARTIAL_MESSAGE:int
	//16
	export const XP1_PSEUDO_STREAM:int
	//8192
	export const XP1_QOS_SUPPORTED:int
	//524288
	export const XP1_SAN_SUPPORT_SDP:int
	//512
	export const XP1_SUPPORT_BROADCAST:int
	//1024
	export const XP1_SUPPORT_MULTIPOINT:int
	//65536
	export const XP1_UNI_RECV:int
	//32768
	export const XP1_UNI_SEND:int

export function emptyDLL():DLL
export function refDLL():Ref<DLL>
export function refOfDLL(x:DLL):Ref<DLL>
export function emptyRusage():Rusage
export function refRusage():Ref<Rusage>
export function refOfRusage(x:Rusage):Ref<Rusage>
export function emptyTokenprimarygroup():Tokenprimarygroup
export function refTokenprimarygroup():Ref<Tokenprimarygroup>
export function refOfTokenprimarygroup(x:Tokenprimarygroup):Ref<Tokenprimarygroup>
export function emptyTransmitFileBuffers():TransmitFileBuffers
export function refTransmitFileBuffers():Ref<TransmitFileBuffers>
export function refOfTransmitFileBuffers(x:TransmitFileBuffers):Ref<TransmitFileBuffers>
export function emptyCertRevocationInfo():CertRevocationInfo
export function refCertRevocationInfo():Ref<CertRevocationInfo>
export function refOfCertRevocationInfo(x:CertRevocationInfo):Ref<CertRevocationInfo>
export function emptyCertTrustStatus():CertTrustStatus
export function refCertTrustStatus():Ref<CertTrustStatus>
export function refOfCertTrustStatus(x:CertTrustStatus):Ref<CertTrustStatus>
export function emptyWSAProtocolChain():WSAProtocolChain
export function refWSAProtocolChain():Ref<WSAProtocolChain>
export function refOfWSAProtocolChain(x:WSAProtocolChain):Ref<WSAProtocolChain>
export function emptyFileNotifyInformation():FileNotifyInformation
export function refFileNotifyInformation():Ref<FileNotifyInformation>
export function refOfFileNotifyInformation(x:FileNotifyInformation):Ref<FileNotifyInformation>
export function emptyFiletime():Filetime
export function refFiletime():Ref<Filetime>
export function refOfFiletime(x:Filetime):Ref<Filetime>
export function emptySIDAndAttributes():SIDAndAttributes
export function refSIDAndAttributes():Ref<SIDAndAttributes>
export function refOfSIDAndAttributes(x:SIDAndAttributes):Ref<SIDAndAttributes>
export function emptySecurityAttributes():SecurityAttributes
export function refSecurityAttributes():Ref<SecurityAttributes>
export function refOfSecurityAttributes(x:SecurityAttributes):Ref<SecurityAttributes>
export function emptyServent():Servent
export function refServent():Ref<Servent>
export function refOfServent(x:Servent):Ref<Servent>
export function emptyTimezoneinformation():Timezoneinformation
export function refTimezoneinformation():Ref<Timezoneinformation>
export function refOfTimezoneinformation(x:Timezoneinformation):Ref<Timezoneinformation>
export function emptyCertEnhKeyUsage():CertEnhKeyUsage
export function refCertEnhKeyUsage():Ref<CertEnhKeyUsage>
export function refOfCertEnhKeyUsage(x:CertEnhKeyUsage):Ref<CertEnhKeyUsage>
export function emptyProtoent():Protoent
export function refProtoent():Ref<Protoent>
export function refOfProtoent(x:Protoent):Ref<Protoent>
export function emptyWaitStatus():WaitStatus
export function refWaitStatus():Ref<WaitStatus>
export function refOfWaitStatus(x:WaitStatus):Ref<WaitStatus>
export function emptyIpMaskString():IpMaskString
export function refIpMaskString():Ref<IpMaskString>
export function refOfIpMaskString(x:IpMaskString):Ref<IpMaskString>
export function emptyLazyDLL():LazyDLL
export function refLazyDLL():Ref<LazyDLL>
export function refOfLazyDLL(x:LazyDLL):Ref<LazyDLL>
export function emptyRawSockaddrUnix():RawSockaddrUnix
export function refRawSockaddrUnix():Ref<RawSockaddrUnix>
export function refOfRawSockaddrUnix(x:RawSockaddrUnix):Ref<RawSockaddrUnix>
export function emptySockaddrInet6():SockaddrInet6
export function refSockaddrInet6():Ref<SockaddrInet6>
export function refOfSockaddrInet6(x:SockaddrInet6):Ref<SockaddrInet6>
export function emptyTimeval():Timeval
export function refTimeval():Ref<Timeval>
export function refOfTimeval(x:Timeval):Ref<Timeval>
export function emptyRawSockaddrInet4():RawSockaddrInet4
export function refRawSockaddrInet4():Ref<RawSockaddrInet4>
export function refOfRawSockaddrInet4(x:RawSockaddrInet4):Ref<RawSockaddrInet4>
export function emptyCertChainContext():CertChainContext
export function refCertChainContext():Ref<CertChainContext>
export function refOfCertChainContext(x:CertChainContext):Ref<CertChainContext>
export function emptyCertInfo():CertInfo
export function refCertInfo():Ref<CertInfo>
export function refOfCertInfo(x:CertInfo):Ref<CertInfo>
export function emptyCertRevocationCrlInfo():CertRevocationCrlInfo
export function refCertRevocationCrlInfo():Ref<CertRevocationCrlInfo>
export function refOfCertRevocationCrlInfo(x:CertRevocationCrlInfo):Ref<CertRevocationCrlInfo>
export function emptyCertTrustListInfo():CertTrustListInfo
export function refCertTrustListInfo():Ref<CertTrustListInfo>
export function refOfCertTrustListInfo(x:CertTrustListInfo):Ref<CertTrustListInfo>
export function emptyIpAddrString():IpAddrString
export function refIpAddrString():Ref<IpAddrString>
export function refOfIpAddrString(x:IpAddrString):Ref<IpAddrString>
export function emptyLazyProc():LazyProc
export function refLazyProc():Ref<LazyProc>
export function refOfLazyProc(x:LazyProc):Ref<LazyProc>
export function emptyProcAttr():ProcAttr
export function refProcAttr():Ref<ProcAttr>
export function refOfProcAttr(x:ProcAttr):Ref<ProcAttr>
export function emptySSLExtraCertChainPolicyPara():SSLExtraCertChainPolicyPara
export function refSSLExtraCertChainPolicyPara():Ref<SSLExtraCertChainPolicyPara>
export function refOfSSLExtraCertChainPolicyPara(x:SSLExtraCertChainPolicyPara):Ref<SSLExtraCertChainPolicyPara>
export function emptySockaddrUnix():SockaddrUnix
export function refSockaddrUnix():Ref<SockaddrUnix>
export function refOfSockaddrUnix(x:SockaddrUnix):Ref<SockaddrUnix>
export function emptySysProcAttr():SysProcAttr
export function refSysProcAttr():Ref<SysProcAttr>
export function refOfSysProcAttr(x:SysProcAttr):Ref<SysProcAttr>
export function emptyAddrinfoW():AddrinfoW
export function refAddrinfoW():Ref<AddrinfoW>
export function refOfAddrinfoW(x:AddrinfoW):Ref<AddrinfoW>
export function emptyHostent():Hostent
export function refHostent():Ref<Hostent>
export function refOfHostent(x:Hostent):Ref<Hostent>
export function emptyRawSockaddrAny():RawSockaddrAny
export function refRawSockaddrAny():Ref<RawSockaddrAny>
export function refOfRawSockaddrAny(x:RawSockaddrAny):Ref<RawSockaddrAny>
export function emptyTCPKeepalive():TCPKeepalive
export function refTCPKeepalive():Ref<TCPKeepalive>
export function refOfTCPKeepalive(x:TCPKeepalive):Ref<TCPKeepalive>
export function emptyWSAProtocolInfo():WSAProtocolInfo
export function refWSAProtocolInfo():Ref<WSAProtocolInfo>
export function refOfWSAProtocolInfo(x:WSAProtocolInfo):Ref<WSAProtocolInfo>
export function emptyByHandleFileInformation():ByHandleFileInformation
export function refByHandleFileInformation():Ref<ByHandleFileInformation>
export function refOfByHandleFileInformation(x:ByHandleFileInformation):Ref<ByHandleFileInformation>
export function emptyCertChainPolicyStatus():CertChainPolicyStatus
export function refCertChainPolicyStatus():Ref<CertChainPolicyStatus>
export function refOfCertChainPolicyStatus(x:CertChainPolicyStatus):Ref<CertChainPolicyStatus>
export function emptyDNSMXData():DNSMXData
export function refDNSMXData():Ref<DNSMXData>
export function refOfDNSMXData(x:DNSMXData):Ref<DNSMXData>
export function emptyDNSRecord():DNSRecord
export function refDNSRecord():Ref<DNSRecord>
export function refOfDNSRecord(x:DNSRecord):Ref<DNSRecord>
export function emptyIPv6Mreq():IPv6Mreq
export function refIPv6Mreq():Ref<IPv6Mreq>
export function refOfIPv6Mreq(x:IPv6Mreq):Ref<IPv6Mreq>
export function emptyProcessInformation():ProcessInformation
export function refProcessInformation():Ref<ProcessInformation>
export function refOfProcessInformation(x:ProcessInformation):Ref<ProcessInformation>
export function emptySystemtime():Systemtime
export function refSystemtime():Ref<Systemtime>
export function refOfSystemtime(x:Systemtime):Ref<Systemtime>
export function emptyIpAddressString():IpAddressString
export function refIpAddressString():Ref<IpAddressString>
export function refOfIpAddressString(x:IpAddressString):Ref<IpAddressString>
export function emptySockaddrInet4():SockaddrInet4
export function refSockaddrInet4():Ref<SockaddrInet4>
export function refOfSockaddrInet4(x:SockaddrInet4):Ref<SockaddrInet4>
export function emptyTokenuser():Tokenuser
export function refTokenuser():Ref<Tokenuser>
export function refOfTokenuser(x:Tokenuser):Ref<Tokenuser>
export function emptyDNSSRVData():DNSSRVData
export function refDNSSRVData():Ref<DNSSRVData>
export function refOfDNSSRVData(x:DNSSRVData):Ref<DNSSRVData>
export function emptyProc():Proc
export function refProc():Ref<Proc>
export function refOfProc(x:Proc):Ref<Proc>
export function emptyCertChainElement():CertChainElement
export function refCertChainElement():Ref<CertChainElement>
export function refOfCertChainElement(x:CertChainElement):Ref<CertChainElement>
export function emptyDNSTXTData():DNSTXTData
export function refDNSTXTData():Ref<DNSTXTData>
export function refOfDNSTXTData(x:DNSTXTData):Ref<DNSTXTData>
export function emptyLinger():Linger
export function refLinger():Ref<Linger>
export function refOfLinger(x:Linger):Ref<Linger>
export function emptyRawSockaddr():RawSockaddr
export function refRawSockaddr():Ref<RawSockaddr>
export function refOfRawSockaddr(x:RawSockaddr):Ref<RawSockaddr>
export function emptySID():SID
export function refSID():Ref<SID>
export function refOfSID(x:SID):Ref<SID>
export function emptyStartupInfo():StartupInfo
export function refStartupInfo():Ref<StartupInfo>
export function refOfStartupInfo(x:StartupInfo):Ref<StartupInfo>
export function emptyCertContext():CertContext
export function refCertContext():Ref<CertContext>
export function refOfCertContext(x:CertContext):Ref<CertContext>
export function emptyOverlapped():Overlapped
export function refOverlapped():Ref<Overlapped>
export function refOfOverlapped(x:Overlapped):Ref<Overlapped>
export function emptyRawSockaddrInet6():RawSockaddrInet6
export function refRawSockaddrInet6():Ref<RawSockaddrInet6>
export function refOfRawSockaddrInet6(x:RawSockaddrInet6):Ref<RawSockaddrInet6>
export function emptyTimespec():Timespec
export function refTimespec():Ref<Timespec>
export function refOfTimespec(x:Timespec):Ref<Timespec>
export function emptyUserInfo10():UserInfo10
export function refUserInfo10():Ref<UserInfo10>
export function refOfUserInfo10(x:UserInfo10):Ref<UserInfo10>
export function emptyWSABuf():WSABuf
export function refWSABuf():Ref<WSABuf>
export function refOfWSABuf(x:WSABuf):Ref<WSABuf>
export function emptyWin32FileAttributeData():Win32FileAttributeData
export function refWin32FileAttributeData():Ref<Win32FileAttributeData>
export function refOfWin32FileAttributeData(x:Win32FileAttributeData):Ref<Win32FileAttributeData>
export function emptyCertChainPolicyPara():CertChainPolicyPara
export function refCertChainPolicyPara():Ref<CertChainPolicyPara>
export function refOfCertChainPolicyPara(x:CertChainPolicyPara):Ref<CertChainPolicyPara>
export function emptyWin32finddata():Win32finddata
export function refWin32finddata():Ref<Win32finddata>
export function refOfWin32finddata(x:Win32finddata):Ref<Win32finddata>
export function emptyDNSPTRData():DNSPTRData
export function refDNSPTRData():Ref<DNSPTRData>
export function refOfDNSPTRData(x:DNSPTRData):Ref<DNSPTRData>
export function emptyIpAdapterInfo():IpAdapterInfo
export function refIpAdapterInfo():Ref<IpAdapterInfo>
export function refOfIpAdapterInfo(x:IpAdapterInfo):Ref<IpAdapterInfo>
export function emptyCertUsageMatch():CertUsageMatch
export function refCertUsageMatch():Ref<CertUsageMatch>
export function refOfCertUsageMatch(x:CertUsageMatch):Ref<CertUsageMatch>
export function emptyIPMreq():IPMreq
export function refIPMreq():Ref<IPMreq>
export function refOfIPMreq(x:IPMreq):Ref<IPMreq>
export function emptyWSAData():WSAData
export function refWSAData():Ref<WSAData>
export function refOfWSAData(x:WSAData):Ref<WSAData>
export function emptyCertChainPara():CertChainPara
export function refCertChainPara():Ref<CertChainPara>
export function refOfCertChainPara(x:CertChainPara):Ref<CertChainPara>
export function emptyCertSimpleChain():CertSimpleChain
export function refCertSimpleChain():Ref<CertSimpleChain>
export function refOfCertSimpleChain(x:CertSimpleChain):Ref<CertSimpleChain>
export function emptyGUID():GUID
export function refGUID():Ref<GUID>
export function refOfGUID(x:GUID):Ref<GUID>
export function emptyInterfaceInfo():InterfaceInfo
export function refInterfaceInfo():Ref<InterfaceInfo>
export function refOfInterfaceInfo(x:InterfaceInfo):Ref<InterfaceInfo>
export function emptyMibIfRow():MibIfRow
export function refMibIfRow():Ref<MibIfRow>
export function refOfMibIfRow(x:MibIfRow):Ref<MibIfRow>
export function emptyProcessEntry32():ProcessEntry32
export function refProcessEntry32():Ref<ProcessEntry32>
export function refOfProcessEntry32(x:ProcessEntry32):Ref<ProcessEntry32>}
