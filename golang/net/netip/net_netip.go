// Code generated by define_gene; DO NOT EDIT.
package netip

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"net/netip"
)

var (
	//go:embed net_netip.d.ts
	NetNetipDefine   []byte
	NetNetipDeclared = map[string]any{
		"parsePrefix":             netip.ParsePrefix,
		"addrPortFrom":            netip.AddrPortFrom,
		"iPv6LinkLocalAllNodes":   netip.IPv6LinkLocalAllNodes,
		"iPv6Loopback":            netip.IPv6Loopback,
		"iPv6LinkLocalAllRouters": netip.IPv6LinkLocalAllRouters,
		"mustParseAddrPort":       netip.MustParseAddrPort,
		"iPv4Unspecified":         netip.IPv4Unspecified,
		"iPv6Unspecified":         netip.IPv6Unspecified,
		"mustParseAddr":           netip.MustParseAddr,
		"parseAddr":               netip.ParseAddr,
		"parseAddrPort":           netip.ParseAddrPort,
		"addrFrom16":              netip.AddrFrom16,
		"addrFrom4":               netip.AddrFrom4,
		"addrFromSlice":           netip.AddrFromSlice,
		"prefixFrom":              netip.PrefixFrom,
		"mustParsePrefix":         netip.MustParsePrefix,

		"emptyAddr": func() (v netip.Addr) {
			return v
		},
		"refAddr": func() *netip.Addr {
			var x netip.Addr
			return &x
		},
		"refOfAddr": func(x netip.Addr) *netip.Addr {
			return &x
		},
		"emptyAddrPort": func() (v netip.AddrPort) {
			return v
		},
		"refAddrPort": func() *netip.AddrPort {
			var x netip.AddrPort
			return &x
		},
		"refOfAddrPort": func(x netip.AddrPort) *netip.AddrPort {
			return &x
		},
		"emptyPrefix": func() (v netip.Prefix) {
			return v
		},
		"refPrefix": func() *netip.Prefix {
			var x netip.Prefix
			return &x
		},
		"refOfPrefix": func(x netip.Prefix) *netip.Prefix {
			return &x
		}}
)

func init() {
	engine.RegisterModule(NetNetipModule{})
}

type NetNetipModule struct{}

func (S NetNetipModule) Identity() string {
	return "golang/net/netip"
}
func (S NetNetipModule) TypeDefine() []byte {
	return NetNetipDefine
}
func (S NetNetipModule) Exports() map[string]any {
	return NetNetipDeclared
}
