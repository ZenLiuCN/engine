// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/net/netip'{
	// @ts-ignore
	import type {int,error,uint16,Struct,bool} from 'go'
	export interface Addr extends Struct<Addr>{
		isValid():bool
		bitLen():int
		zone():string
		compare(ip2:Addr):int
		less(ip2:Addr):bool
		is4():bool
		is4In6():bool
		is6():bool
		unmap():Addr
		withZone(zone:string):Addr
		isLinkLocalUnicast():bool
		isLoopback():bool
		isMulticast():bool
		isInterfaceLocalMulticast():bool
		isLinkLocalMulticast():bool
		isGlobalUnicast():bool
		isPrivate():bool
		isUnspecified():bool
		prefix(b:int):[Prefix,error]
		as16():Uint8Array/*16*/
		as4():Uint8Array/*4*/
		asSlice():Uint8Array
		next():Addr
		prev():Addr
		string():string
		appendTo(b:Uint8Array):Uint8Array
		stringExpanded():string
		marshalText():[Uint8Array,error]
		unmarshalText(text:Uint8Array):error
		marshalBinary():[Uint8Array,error]
		unmarshalBinary(b:Uint8Array):error
	}
	export function addrFrom16(addr:Uint8Array/*16*/):Addr
	export function addrFrom4(addr:Uint8Array/*4*/):Addr
	export function addrFromSlice(slice:Uint8Array):[Addr,bool]
	export interface AddrPort extends Struct<AddrPort>{
		addr():Addr
		port():uint16
		isValid():bool
		string():string
		appendTo(b:Uint8Array):Uint8Array
		marshalText():[Uint8Array,error]
		unmarshalText(text:Uint8Array):error
		marshalBinary():[Uint8Array,error]
		unmarshalBinary(b:Uint8Array):error
	}
	export function addrPortFrom(ip:Addr,port:uint16):AddrPort
	export function iPv4Unspecified():Addr
	export function iPv6LinkLocalAllNodes():Addr
	export function iPv6LinkLocalAllRouters():Addr
	export function iPv6Loopback():Addr
	export function iPv6Unspecified():Addr
	export function mustParseAddr(s:string):Addr
	export function mustParseAddrPort(s:string):AddrPort
	export function mustParsePrefix(s:string):Prefix
	export function parseAddr(s:string):Addr
	export function parseAddrPort(s:string):AddrPort
	export function parsePrefix(s:string):Prefix
	export interface Prefix extends Struct<Prefix>{
		addr():Addr
		bits():int
		isValid():bool
		isSingleIP():bool
		masked():Prefix
		contains(ip:Addr):bool
		overlaps(o:Prefix):bool
		appendTo(b:Uint8Array):Uint8Array
		marshalText():[Uint8Array,error]
		unmarshalText(text:Uint8Array):error
		marshalBinary():[Uint8Array,error]
		unmarshalBinary(b:Uint8Array):error
		string():string
	}
	export function prefixFrom(ip:Addr,bits:int):Prefix

export function emptyPrefix():Prefix
export function refPrefix():Ref<Prefix>
export function refOfPrefix(x:Prefix):Ref<Prefix>
export function emptyAddr():Addr
export function refAddr():Ref<Addr>
export function refOfAddr(x:Addr):Ref<Addr>
export function emptyAddrPort():AddrPort
export function refAddrPort():Ref<AddrPort>
export function refOfAddrPort(x:AddrPort):Ref<AddrPort>}
