// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/net/textproto'{
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as bufio from 'golang/bufio'
	// @ts-ignore
	import type {int,GoError,Struct,error,uint,Ref} from 'go'
	export function canonicalMIMEHeaderKey(s:string):string
	export interface Conn extends Struct<Conn>,io.Closer{
		reader:Reader
		writer:Writer
		pipeline:Pipeline
		close():error
		cmd(format:string,...args:any[]):[uint,error]
	}
	export function dial(network:string,addr:string):[Ref<Conn>,error]
	export interface Error extends Struct<Error>,Error,GoError{
		code:int
		msg:string
		error():string
	}
	export interface MIMEHeader extends Record<string,string[]>{
		add(key:string,value:string):void
		set(key:string,value:string):void
		get(key:string):string
		values(key:string):string[]
		del(key:string):void
	}
	export function newConn(conn:io.ReadWriteCloser):Ref<Conn>
	export function newReader(r:Ref<bufio.Reader>):Ref<Reader>
	export function newWriter(w:Ref<bufio.Writer>):Ref<Writer>
	export interface Pipeline extends Struct<Pipeline>{
		next():uint
		startRequest(id:uint):void
		endRequest(id:uint):void
		startResponse(id:uint):void
		endResponse(id:uint):void
	}
	export interface ProtocolError extends string,GoError{
		error():string
	}
	export interface Reader extends Struct<Reader>{
		R:Ref<bufio.Reader>
		readLine():[string,error]
		readLineBytes():[Uint8Array,error]
		readContinuedLine():[string,error]
		readContinuedLineBytes():[Uint8Array,error]
		readCodeLine(expectCode:int):[int,string,error]
		readResponse(expectCode:int):[int,string,error]
		dotReader():io.Reader
		readDotBytes():[Uint8Array,error]
		readDotLines():[string[],error]
		readMIMEHeader():[MIMEHeader,error]
	}
	export function trimBytes(b:Uint8Array):Uint8Array
	export function trimString(s:string):string
	export interface Writer extends Struct<Writer>{
		W:Ref<bufio.Writer>
		printfLine(format:string,...args:any[]):error
		dotWriter():io.WriteCloser
	}

export function emptyConn():Conn
export function refConn():Ref<Conn>
export function refOfConn(x:Conn):Ref<Conn>
export function emptyPipeline():Pipeline
export function refPipeline():Ref<Pipeline>
export function refOfPipeline(x:Pipeline):Ref<Pipeline>
export function emptyReader():Reader
export function refReader():Ref<Reader>
export function refOfReader(x:Reader):Ref<Reader>
export function emptyWriter():Writer
export function refWriter():Ref<Writer>
export function refOfWriter(x:Writer):Ref<Writer>}
