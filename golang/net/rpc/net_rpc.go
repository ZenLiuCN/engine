// Code generated by define_gene; DO NOT EDIT.
package rpc

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/net"
	_ "github.com/ZenLiuCN/engine/golang/net/http"
	"net/rpc"
)

var (
	//go:embed net_rpc.d.ts
	NetRpcDefine   []byte
	NetRpcDeclared = map[string]any{
		"register":           rpc.Register,
		"accept":             rpc.Accept,
		"dialHTTPPath":       rpc.DialHTTPPath,
		"DefaultServer":      rpc.DefaultServer,
		"newClientWithCodec": rpc.NewClientWithCodec,
		"serveCodec":         rpc.ServeCodec,
		"serveConn":          rpc.ServeConn,
		"serveRequest":       rpc.ServeRequest,
		"DefaultRPCPath":     rpc.DefaultRPCPath,
		"dial":               rpc.Dial,
		"ErrShutdown":        rpc.ErrShutdown,
		"handleHTTP":         rpc.HandleHTTP,
		"newClient":          rpc.NewClient,
		"newServer":          rpc.NewServer,
		"registerName":       rpc.RegisterName,
		"DefaultDebugPath":   rpc.DefaultDebugPath,
		"dialHTTP":           rpc.DialHTTP,

		"emptyClient": func() (v rpc.Client) {
			return v
		},
		"refClient": func() *rpc.Client {
			var x rpc.Client
			return &x
		},
		"refOfClient": func(x rpc.Client) *rpc.Client {
			return &x
		},
		"emptyRequest": func() (v rpc.Request) {
			return v
		},
		"refRequest": func() *rpc.Request {
			var x rpc.Request
			return &x
		},
		"refOfRequest": func(x rpc.Request) *rpc.Request {
			return &x
		},
		"emptyResponse": func() (v rpc.Response) {
			return v
		},
		"refResponse": func() *rpc.Response {
			var x rpc.Response
			return &x
		},
		"refOfResponse": func(x rpc.Response) *rpc.Response {
			return &x
		},
		"emptyServer": func() (v rpc.Server) {
			return v
		},
		"refServer": func() *rpc.Server {
			var x rpc.Server
			return &x
		},
		"refOfServer": func(x rpc.Server) *rpc.Server {
			return &x
		},
		"emptyCall": func() (v rpc.Call) {
			return v
		},
		"refCall": func() *rpc.Call {
			var x rpc.Call
			return &x
		},
		"refOfCall": func(x rpc.Call) *rpc.Call {
			return &x
		}}
)

func init() {
	engine.RegisterModule(NetRpcModule{})
}

type NetRpcModule struct{}

func (S NetRpcModule) Identity() string {
	return "golang/net/rpc"
}
func (S NetRpcModule) TypeDefine() []byte {
	return NetRpcDefine
}
func (S NetRpcModule) Exports() map[string]any {
	return NetRpcDeclared
}
