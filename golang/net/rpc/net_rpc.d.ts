// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/net/rpc'{
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as http from 'golang/net/http'
	// @ts-ignore
	import * as net from 'golang/net'
	// @ts-ignore
	import * as go from 'go'
	// @ts-ignore
	import type {GoError,Ref,Struct,error,uint64} from 'go'
	export function accept(lis:net.Listener):void
	export interface Call extends Struct<Call>{
		serviceMethod:string
		args:any
		reply:any
		error:GoError
		done:go.Chan<Ref<Call>>
	}
	export interface Client extends Struct<Client>,io.Closer{
		close():error
		go(serviceMethod:string,args:any,reply:any,done:go.Chan<Ref<Call>>):Ref<Call>
		call(serviceMethod:string,args:any,reply:any)/*error*/
	}
	export interface ClientCodec extends io.Closer{
		close():error
		readResponseBody(v1:any)/*error*/
		readResponseHeader(v1:Ref<Response>)/*error*/
		writeRequest(v2:Ref<Request>,v1:any)/*error*/
	}
	//"/debug/rpc"
	export const DefaultDebugPath:string
	//"/_goRPC_"
	export const DefaultRPCPath:string
	export const DefaultServer:Ref<Server>
	export function dial(network:string,address:string):Ref<Client>
	export function dialHTTP(network:string,address:string):Ref<Client>
	export function dialHTTPPath(network:string,address:string,path:string):Ref<Client>
	export const ErrShutdown:GoError
	export function handleHTTP():void
	export function newClient(conn:io.ReadWriteCloser):Ref<Client>
	export function newClientWithCodec(codec:ClientCodec):Ref<Client>
	export function newServer():Ref<Server>
	export function register(rcvr:any)/*error*/
	export function registerName(name:string,rcvr:any)/*error*/
	export interface Request extends Struct<Request>{
		serviceMethod:string
		seq:uint64
	}
	export interface Response extends Struct<Response>{
		serviceMethod:string
		seq:uint64
		error:string
	}
	export function serveCodec(codec:ServerCodec):void
	export function serveConn(conn:io.ReadWriteCloser):void
	export function serveRequest(codec:ServerCodec)/*error*/
	export interface Server extends Struct<Server>,http.Handler{
		register(rcvr:any)/*error*/
		registerName(name:string,rcvr:any)/*error*/
		serveConn(conn:io.ReadWriteCloser):void
		serveCodec(codec:ServerCodec):void
		serveRequest(codec:ServerCodec)/*error*/
		accept(lis:net.Listener):void
		serveHTTP(w:http.ResponseWriter,req:Ref<http.Request>):void
		handleHTTP(rpcPath:string,debugPath:string):void
	}
	export interface ServerCodec extends io.Closer{
		close():error
		readRequestBody(v1:any)/*error*/
		readRequestHeader(v1:Ref<Request>)/*error*/
		writeResponse(v2:Ref<Response>,v1:any)/*error*/
	}
	export interface ServerError extends string,GoError{
		error():string
	}

export function emptyCall():Call
export function refCall():Ref<Call>
export function refOfCall(x:Call):Ref<Call>
export function emptyClient():Client
export function refClient():Ref<Client>
export function refOfClient(x:Client):Ref<Client>
export function emptyRequest():Request
export function refRequest():Ref<Request>
export function refOfRequest(x:Request):Ref<Request>
export function emptyResponse():Response
export function refResponse():Ref<Response>
export function refOfResponse(x:Response):Ref<Response>
export function emptyServer():Server
export function refServer():Ref<Server>
export function refOfServer(x:Server):Ref<Server>
}
