// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/net/http/httptest'{
	// @ts-ignore
	import * as http from 'golang/net/http'
	// @ts-ignore
	import * as bytes from 'golang/bytes'
	// @ts-ignore
	import * as net from 'golang/net'
	// @ts-ignore
	import * as tls from 'golang/crypto/tls'
	// @ts-ignore
	import * as x509 from 'golang/crypto/x509'
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import type {error,Ref,int,bool,Struct} from 'go'
	//"1.2.3.4"
	export const DefaultRemoteAddr:string
	export function newRecorder():Ref<ResponseRecorder>
	export function newRequest(method:string,target:string,body:io.Reader):Ref<http.Request>
	export function newServer(handler:http.Handler):Ref<Server>
	export function newTLSServer(handler:http.Handler):Ref<Server>
	export function newUnstartedServer(handler:http.Handler):Ref<Server>
	export interface ResponseRecorder extends Struct<ResponseRecorder>,http.ResponseWriter,io.Writer,http.Flusher,io.StringWriter{
		code:int
		headerMap:http.Header
		body:Ref<bytes.Buffer>
		flushed:bool
		header():http.Header
		write(buf:Uint8Array):[int,error]
		writeString(str:string):[int,error]
		writeHeader(code:int):void
		flush():void
		result():Ref<http.Response>
	}
	export interface Server extends Struct<Server>{
		url:string
		listener:net.Listener
		enableHTTP2:bool
		tls:Ref<tls.Config>
		config:Ref<http.Server>
		start():void
		startTLS():void
		close():void
		closeClientConnections():void
		certificate():Ref<x509.Certificate>
		client():Ref<http.Client>
	}

export function emptyResponseRecorder():ResponseRecorder
export function refResponseRecorder():Ref<ResponseRecorder>
export function refOfResponseRecorder(x:ResponseRecorder):Ref<ResponseRecorder>
export function emptyServer():Server
export function refServer():Ref<Server>
export function refOfServer(x:Server):Ref<Server>}
