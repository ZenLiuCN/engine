// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/net/http/httptrace'{
	// @ts-ignore
	import * as textproto from 'golang/net/textproto'
	// @ts-ignore
	import * as tls from 'golang/crypto/tls'
	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as net from 'golang/net'
	// @ts-ignore
	import * as time from 'golang/time'
	// @ts-ignore
	import type {bool,error,int,Struct,Ref,GoError} from 'go'
	export interface ClientTrace extends Struct<ClientTrace>{
		getConn:(hostPort:string)=>void
		gotConn:(v1:GotConnInfo)=>void
		putIdleConn:(err:error)=>void
		gotFirstResponseByte:()=>void
		got100Continue:()=>void
		got1xxResponse:(code:int,header:textproto.MIMEHeader))=>void/*error*/
		dnsStart:(v1:DNSStartInfo)=>void
		dnsDone:(v1:DNSDoneInfo)=>void
		connectStart:(network:string,addr:string)=>void
		connectDone:(network:string,addr:string,err:error)=>void
		tlsHandshakeStart:()=>void
		tlsHandshakeDone:(v2:tls.ConnectionState,v1:error)=>void
		wroteHeaderField:(key:string,value:string[])=>void
		wroteHeaders:()=>void
		wait100Continue:()=>void
		wroteRequest:(v1:WroteRequestInfo)=>void
	}
	export function contextClientTrace(ctx:context.Context):Ref<ClientTrace>
	export interface DNSDoneInfo extends Struct<DNSDoneInfo>{
		addrs:net.IPAddr[]
		err:GoError
		coalesced:bool
	}
	export interface DNSStartInfo extends Struct<DNSStartInfo>{
		host:string
	}
	export interface GotConnInfo extends Struct<GotConnInfo>{
		conn:net.Conn
		reused:bool
		wasIdle:bool
		idleTime:time.Duration
	}
	export function withClientTrace(ctx:context.Context,trace:Ref<ClientTrace>):context.Context
	export interface WroteRequestInfo extends Struct<WroteRequestInfo>{
		err:GoError
	}

export function emptyClientTrace():ClientTrace
export function refClientTrace():Ref<ClientTrace>
export function refOfClientTrace(x:ClientTrace):Ref<ClientTrace>
export function emptyDNSDoneInfo():DNSDoneInfo
export function refDNSDoneInfo():Ref<DNSDoneInfo>
export function refOfDNSDoneInfo(x:DNSDoneInfo):Ref<DNSDoneInfo>
export function emptyDNSStartInfo():DNSStartInfo
export function refDNSStartInfo():Ref<DNSStartInfo>
export function refOfDNSStartInfo(x:DNSStartInfo):Ref<DNSStartInfo>
export function emptyGotConnInfo():GotConnInfo
export function refGotConnInfo():Ref<GotConnInfo>
export function refOfGotConnInfo(x:GotConnInfo):Ref<GotConnInfo>
export function emptyWroteRequestInfo():WroteRequestInfo
export function refWroteRequestInfo():Ref<WroteRequestInfo>
export function refOfWroteRequestInfo(x:WroteRequestInfo):Ref<WroteRequestInfo>
}
