// Code generated by define_gene; DO NOT EDIT.
package net

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/context"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/net/netip"
	_ "github.com/ZenLiuCN/engine/golang/os"
	_ "github.com/ZenLiuCN/engine/golang/syscall"
	_ "github.com/ZenLiuCN/engine/golang/time"
	"net"
)

var (
	//go:embed net.d.ts
	NetDefine   []byte
	NetDeclared = map[string]any{
		"listenUnix":                 net.ListenUnix,
		"lookupTXT":                  net.LookupTXT,
		"tcpAddrFromAddrPort":        net.TCPAddrFromAddrPort,
		"dialIP":                     net.DialIP,
		"dialUDP":                    net.DialUDP,
		"IPv4zero":                   net.IPv4zero,
		"IPv6zero":                   net.IPv6zero,
		"interfaces":                 net.Interfaces,
		"dialUnix":                   net.DialUnix,
		"FlagUp":                     net.FlagUp,
		"FlagMulticast":              net.FlagMulticast,
		"IPv6interfacelocalallnodes": net.IPv6interfacelocalallnodes,
		"splitHostPort":              net.SplitHostPort,
		"IPv6linklocalallnodes":      net.IPv6linklocalallnodes,
		"listenTCP":                  net.ListenTCP,
		"resolveTCPAddr":             net.ResolveTCPAddr,
		"interfaceByIndex":           net.InterfaceByIndex,
		"listen":                     net.Listen,
		"listenUnixgram":             net.ListenUnixgram,
		"lookupIP":                   net.LookupIP,
		"parseMAC":                   net.ParseMAC,
		"FlagPointToPoint":           net.FlagPointToPoint,
		"IPv6loopback":               net.IPv6loopback,
		"parseCIDR":                  net.ParseCIDR,
		"resolveIPAddr":              net.ResolveIPAddr,
		"FlagBroadcast":              net.FlagBroadcast,
		"interfaceAddrs":             net.InterfaceAddrs,
		"IPv4allsys":                 net.IPv4allsys,
		"listenIP":                   net.ListenIP,
		"listenMulticastUDP":         net.ListenMulticastUDP,
		"lookupAddr":                 net.LookupAddr,
		"lookupNS":                   net.LookupNS,
		"dialTCP":                    net.DialTCP,
		"parseIP":                    net.ParseIP,
		"lookupMX":                   net.LookupMX,
		"cidrMask":                   net.CIDRMask,
		"IPv6unspecified":            net.IPv6unspecified,
		"interfaceByName":            net.InterfaceByName,
		"joinHostPort":               net.JoinHostPort,
		"listenPacket":               net.ListenPacket,
		"dialTimeout":                net.DialTimeout,
		"FlagLoopback":               net.FlagLoopback,
		"FlagRunning":                net.FlagRunning,
		"resolveUnixAddr":            net.ResolveUnixAddr,
		"DefaultResolver":            net.DefaultResolver,
		"fileConn":                   net.FileConn,
		"lookupCNAME":                net.LookupCNAME,
		"lookupHost":                 net.LookupHost,
		"fileListener":               net.FileListener,
		"resolveUDPAddr":             net.ResolveUDPAddr,
		"udpAddrFromAddrPort":        net.UDPAddrFromAddrPort,
		"ErrClosed":                  net.ErrClosed,
		"iPv4":                       net.IPv4,
		"IPv4allrouter":              net.IPv4allrouter,
		"IPv6len":                    net.IPv6len,
		"lookupPort":                 net.LookupPort,
		"IPv4len":                    net.IPv4len,
		"IPv6linklocalallrouters":    net.IPv6linklocalallrouters,
		"listenUDP":                  net.ListenUDP,
		"dial":                       net.Dial,
		"ErrWriteToConnected":        net.ErrWriteToConnected,
		"filePacketConn":             net.FilePacketConn,
		"iPv4Mask":                   net.IPv4Mask,
		"IPv4bcast":                  net.IPv4bcast,
		"lookupSRV":                  net.LookupSRV,
		"pipe":                       net.Pipe,

		"emptyListenConfig": func() (v net.ListenConfig) {
			return v
		},
		"refListenConfig": func() *net.ListenConfig {
			var x net.ListenConfig
			return &x
		},
		"refOfListenConfig": func(x net.ListenConfig) *net.ListenConfig {
			return &x
		},
		"emptyResolver": func() (v net.Resolver) {
			return v
		},
		"refResolver": func() *net.Resolver {
			var x net.Resolver
			return &x
		},
		"refOfResolver": func(x net.Resolver) *net.Resolver {
			return &x
		},
		"emptyDialer": func() (v net.Dialer) {
			return v
		},
		"refDialer": func() *net.Dialer {
			var x net.Dialer
			return &x
		},
		"refOfDialer": func(x net.Dialer) *net.Dialer {
			return &x
		},
		"emptyIPConn": func() (v net.IPConn) {
			return v
		},
		"refIPConn": func() *net.IPConn {
			var x net.IPConn
			return &x
		},
		"refOfIPConn": func(x net.IPConn) *net.IPConn {
			return &x
		},
		"emptySRV": func() (v net.SRV) {
			return v
		},
		"refSRV": func() *net.SRV {
			var x net.SRV
			return &x
		},
		"refOfSRV": func(x net.SRV) *net.SRV {
			return &x
		},
		"emptyTCPConn": func() (v net.TCPConn) {
			return v
		},
		"refTCPConn": func() *net.TCPConn {
			var x net.TCPConn
			return &x
		},
		"refOfTCPConn": func(x net.TCPConn) *net.TCPConn {
			return &x
		},
		"emptyUDPAddr": func() (v net.UDPAddr) {
			return v
		},
		"refUDPAddr": func() *net.UDPAddr {
			var x net.UDPAddr
			return &x
		},
		"refOfUDPAddr": func(x net.UDPAddr) *net.UDPAddr {
			return &x
		},
		"emptyIPAddr": func() (v net.IPAddr) {
			return v
		},
		"refIPAddr": func() *net.IPAddr {
			var x net.IPAddr
			return &x
		},
		"refOfIPAddr": func(x net.IPAddr) *net.IPAddr {
			return &x
		},
		"emptyMX": func() (v net.MX) {
			return v
		},
		"refMX": func() *net.MX {
			var x net.MX
			return &x
		},
		"refOfMX": func(x net.MX) *net.MX {
			return &x
		},
		"emptyNS": func() (v net.NS) {
			return v
		},
		"refNS": func() *net.NS {
			var x net.NS
			return &x
		},
		"refOfNS": func(x net.NS) *net.NS {
			return &x
		},
		"emptyUDPConn": func() (v net.UDPConn) {
			return v
		},
		"refUDPConn": func() *net.UDPConn {
			var x net.UDPConn
			return &x
		},
		"refOfUDPConn": func(x net.UDPConn) *net.UDPConn {
			return &x
		},
		"emptyUnixConn": func() (v net.UnixConn) {
			return v
		},
		"refUnixConn": func() *net.UnixConn {
			var x net.UnixConn
			return &x
		},
		"refOfUnixConn": func(x net.UnixConn) *net.UnixConn {
			return &x
		},
		"emptyUnixListener": func() (v net.UnixListener) {
			return v
		},
		"refUnixListener": func() *net.UnixListener {
			var x net.UnixListener
			return &x
		},
		"refOfUnixListener": func(x net.UnixListener) *net.UnixListener {
			return &x
		},
		"emptyTCPAddr": func() (v net.TCPAddr) {
			return v
		},
		"refTCPAddr": func() *net.TCPAddr {
			var x net.TCPAddr
			return &x
		},
		"refOfTCPAddr": func(x net.TCPAddr) *net.TCPAddr {
			return &x
		},
		"emptyTCPListener": func() (v net.TCPListener) {
			return v
		},
		"refTCPListener": func() *net.TCPListener {
			var x net.TCPListener
			return &x
		},
		"refOfTCPListener": func(x net.TCPListener) *net.TCPListener {
			return &x
		},
		"emptyUnixAddr": func() (v net.UnixAddr) {
			return v
		},
		"refUnixAddr": func() *net.UnixAddr {
			var x net.UnixAddr
			return &x
		},
		"refOfUnixAddr": func(x net.UnixAddr) *net.UnixAddr {
			return &x
		},
		"emptyIPNet": func() (v net.IPNet) {
			return v
		},
		"refIPNet": func() *net.IPNet {
			var x net.IPNet
			return &x
		},
		"refOfIPNet": func(x net.IPNet) *net.IPNet {
			return &x
		},
		"emptyInterface": func() (v net.Interface) {
			return v
		},
		"refInterface": func() *net.Interface {
			var x net.Interface
			return &x
		},
		"refOfInterface": func(x net.Interface) *net.Interface {
			return &x
		}}
)

func init() {
	engine.RegisterModule(NetModule{})
}

type NetModule struct{}

func (S NetModule) Identity() string {
	return "golang/net"
}
func (S NetModule) TypeDefine() []byte {
	return NetDefine
}
func (S NetModule) Exports() map[string]any {
	return NetDeclared
}
