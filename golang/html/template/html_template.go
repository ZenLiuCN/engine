// Code generated by define_gene; DO NOT EDIT.
package template

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/encoding/json"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/io/fs"
	_ "github.com/ZenLiuCN/engine/golang/text/template"
	_ "github.com/ZenLiuCN/engine/golang/text/template/parse"
	"html/template"
)

var (
	//go:embed html_template.d.ts
	HtmlTemplateDefine   []byte
	HtmlTemplateDeclared = map[string]any{
		"jsEscaper":            template.JSEscaper,
		"must":                 template.Must,
		"urlQueryEscaper":      template.URLQueryEscaper,
		"ErrEndContext":        template.ErrEndContext,
		"ErrJSTemplate":        template.ErrJSTemplate,
		"ErrBranchEnd":         template.ErrBranchEnd,
		"ErrSlashAmbig":        template.ErrSlashAmbig,
		"New":                  template.New,
		"OK":                   template.OK,
		"ErrAmbigContext":      template.ErrAmbigContext,
		"ErrBadHTML":           template.ErrBadHTML,
		"ErrPredefinedEscaper": template.ErrPredefinedEscaper,
		"jsEscape":             template.JSEscape,
		"parseFS":              template.ParseFS,
		"parseFiles":           template.ParseFiles,
		"ErrPartialCharset":    template.ErrPartialCharset,
		"htmlEscaper":          template.HTMLEscaper,
		"htmlEscapeString":     template.HTMLEscapeString,
		"htmlEscape":           template.HTMLEscape,
		"parseGlob":            template.ParseGlob,
		"ErrOutputContext":     template.ErrOutputContext,
		"ErrNoSuchTemplate":    template.ErrNoSuchTemplate,
		"ErrPartialEscape":     template.ErrPartialEscape,
		"ErrRangeLoopReentry":  template.ErrRangeLoopReentry,
		"isTrue":               template.IsTrue,
		"jsEscapeString":       template.JSEscapeString,

		"emptyTemplate": func() (v template.Template) {
			return v
		},
		"refTemplate": func() *template.Template {
			var x template.Template
			return &x
		},
		"refOfTemplate": func(x template.Template) *template.Template {
			return &x
		}}
)

func init() {
	engine.RegisterModule(HtmlTemplateModule{})
}

type HtmlTemplateModule struct{}

func (S HtmlTemplateModule) Identity() string {
	return "golang/html/template"
}
func (S HtmlTemplateModule) TypeDefine() []byte {
	return HtmlTemplateDefine
}
func (S HtmlTemplateModule) Exports() map[string]any {
	return HtmlTemplateDeclared
}
