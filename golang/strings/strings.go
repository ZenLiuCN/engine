// Code generated by define_gene; DO NOT EDIT.
package strings

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/unicode"
	"strings"
)

var (
	//go:embed strings.d.ts
	StringsDefine   []byte
	StringsDeclared = map[string]any{
		"indexFunc":      strings.IndexFunc,
		"trimRightFunc":  strings.TrimRightFunc,
		"fieldsFunc":     strings.FieldsFunc,
		"hasSuffix":      strings.HasSuffix,
		"lastIndexByte":  strings.LastIndexByte,
		"map":            strings.Map,
		"trimLeftFunc":   strings.TrimLeftFunc,
		"replaceAll":     strings.ReplaceAll,
		"toTitleSpecial": strings.ToTitleSpecial,
		"toUpperSpecial": strings.ToUpperSpecial,
		"trimSuffix":     strings.TrimSuffix,
		"trimFunc":       strings.TrimFunc,
		"count":          strings.Count,
		"title":          strings.Title,
		"containsAny":    strings.ContainsAny,
		"fields":         strings.Fields,
		"splitAfterN":    strings.SplitAfterN,
		"split":          strings.Split,
		"splitAfter":     strings.SplitAfter,
		"toValidUTF8":    strings.ToValidUTF8,
		"cutPrefix":      strings.CutPrefix,
		"indexByte":      strings.IndexByte,
		"replace":        strings.Replace,
		"toTitle":        strings.ToTitle,
		"trimLeft":       strings.TrimLeft,
		"trimRight":      strings.TrimRight,
		"compare":        strings.Compare,
		"indexAny":       strings.IndexAny,
		"indexRune":      strings.IndexRune,
		"lastIndexFunc":  strings.LastIndexFunc,
		"trim":           strings.Trim,
		"clone":          strings.Clone,
		"index":          strings.Index,
		"lastIndex":      strings.LastIndex,
		"toUpper":        strings.ToUpper,
		"trimPrefix":     strings.TrimPrefix,
		"contains":       strings.Contains,
		"containsFunc":   strings.ContainsFunc,
		"containsRune":   strings.ContainsRune,
		"equalFold":      strings.EqualFold,
		"splitN":         strings.SplitN,
		"toLower":        strings.ToLower,
		"trimSpace":      strings.TrimSpace,
		"hasPrefix":      strings.HasPrefix,
		"repeat":         strings.Repeat,
		"join":           strings.Join,
		"newReplacer":    strings.NewReplacer,
		"cut":            strings.Cut,
		"cutSuffix":      strings.CutSuffix,
		"lastIndexAny":   strings.LastIndexAny,
		"newReader":      strings.NewReader,
		"toLowerSpecial": strings.ToLowerSpecial,

		"emptyReplacer": func() (v strings.Replacer) {
			return v
		},
		"refReplacer": func() *strings.Replacer {
			var x strings.Replacer
			return &x
		},
		"refOfReplacer": func(x strings.Replacer) *strings.Replacer {
			return &x
		},
		"emptyBuilder": func() (v strings.Builder) {
			return v
		},
		"refBuilder": func() *strings.Builder {
			var x strings.Builder
			return &x
		},
		"refOfBuilder": func(x strings.Builder) *strings.Builder {
			return &x
		},
		"emptyReader": func() (v strings.Reader) {
			return v
		},
		"refReader": func() *strings.Reader {
			var x strings.Reader
			return &x
		},
		"refOfReader": func(x strings.Reader) *strings.Reader {
			return &x
		}}
)

func init() {
	engine.RegisterModule(StringsModule{})
}

type StringsModule struct{}

func (S StringsModule) Identity() string {
	return "golang/strings"
}
func (S StringsModule) TypeDefine() []byte {
	return StringsDefine
}
func (S StringsModule) Exports() map[string]any {
	return StringsDeclared
}
