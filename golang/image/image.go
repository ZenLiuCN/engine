// Code generated by define_gene; DO NOT EDIT.
package image

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/image/color"
	_ "github.com/ZenLiuCN/engine/golang/io"
	"image"
)

var (
	//go:embed image.d.ts
	ImageDefine   []byte
	ImageDeclared = map[string]any{
		"YCbCrSubsampleRatio420": image.YCbCrSubsampleRatio420,
		"newAlpha":               image.NewAlpha,
		"newCMYK":                image.NewCMYK,
		"Opaque":                 image.Opaque,
		"Transparent":            image.Transparent,
		"YCbCrSubsampleRatio411": image.YCbCrSubsampleRatio411,
		"YCbCrSubsampleRatio440": image.YCbCrSubsampleRatio440,
		"YCbCrSubsampleRatio444": image.YCbCrSubsampleRatio444,
		"ZR":                     image.ZR,
		"newGray":                image.NewGray,
		"newGray16":              image.NewGray16,
		"newRGBA":                image.NewRGBA,
		"YCbCrSubsampleRatio422": image.YCbCrSubsampleRatio422,
		"newNRGBA64":             image.NewNRGBA64,
		"Black":                  image.Black,
		"decodeConfig":           image.DecodeConfig,
		"newPaletted":            image.NewPaletted,
		"newRGBA64":              image.NewRGBA64,
		"YCbCrSubsampleRatio410": image.YCbCrSubsampleRatio410,
		"decode":                 image.Decode,
		"newNRGBA":               image.NewNRGBA,
		"newYCbCr":               image.NewYCbCr,
		"pt":                     image.Pt,
		"rect":                   image.Rect,
		"newAlpha16":             image.NewAlpha16,
		"newUniform":             image.NewUniform,
		"ZP":                     image.ZP,
		"ErrFormat":              image.ErrFormat,
		"newNYCbCrA":             image.NewNYCbCrA,
		"registerFormat":         image.RegisterFormat,
		"White":                  image.White,

		"emptyUniform": func() (v image.Uniform) {
			return v
		},
		"refUniform": func() *image.Uniform {
			var x image.Uniform
			return &x
		},
		"refOfUniform": func(x image.Uniform) *image.Uniform {
			return &x
		},
		"emptyYCbCr": func() (v image.YCbCr) {
			return v
		},
		"refYCbCr": func() *image.YCbCr {
			var x image.YCbCr
			return &x
		},
		"refOfYCbCr": func(x image.YCbCr) *image.YCbCr {
			return &x
		},
		"emptyGray": func() (v image.Gray) {
			return v
		},
		"refGray": func() *image.Gray {
			var x image.Gray
			return &x
		},
		"refOfGray": func(x image.Gray) *image.Gray {
			return &x
		},
		"emptyGray16": func() (v image.Gray16) {
			return v
		},
		"refGray16": func() *image.Gray16 {
			var x image.Gray16
			return &x
		},
		"refOfGray16": func(x image.Gray16) *image.Gray16 {
			return &x
		},
		"emptyNRGBA": func() (v image.NRGBA) {
			return v
		},
		"refNRGBA": func() *image.NRGBA {
			var x image.NRGBA
			return &x
		},
		"refOfNRGBA": func(x image.NRGBA) *image.NRGBA {
			return &x
		},
		"emptyRGBA": func() (v image.RGBA) {
			return v
		},
		"refRGBA": func() *image.RGBA {
			var x image.RGBA
			return &x
		},
		"refOfRGBA": func(x image.RGBA) *image.RGBA {
			return &x
		},
		"emptyRGBA64": func() (v image.RGBA64) {
			return v
		},
		"refRGBA64": func() *image.RGBA64 {
			var x image.RGBA64
			return &x
		},
		"refOfRGBA64": func(x image.RGBA64) *image.RGBA64 {
			return &x
		},
		"emptyRectangle": func() (v image.Rectangle) {
			return v
		},
		"refRectangle": func() *image.Rectangle {
			var x image.Rectangle
			return &x
		},
		"refOfRectangle": func(x image.Rectangle) *image.Rectangle {
			return &x
		},
		"emptyPoint": func() (v image.Point) {
			return v
		},
		"refPoint": func() *image.Point {
			var x image.Point
			return &x
		},
		"refOfPoint": func(x image.Point) *image.Point {
			return &x
		},
		"emptyAlpha": func() (v image.Alpha) {
			return v
		},
		"refAlpha": func() *image.Alpha {
			var x image.Alpha
			return &x
		},
		"refOfAlpha": func(x image.Alpha) *image.Alpha {
			return &x
		},
		"emptyAlpha16": func() (v image.Alpha16) {
			return v
		},
		"refAlpha16": func() *image.Alpha16 {
			var x image.Alpha16
			return &x
		},
		"refOfAlpha16": func(x image.Alpha16) *image.Alpha16 {
			return &x
		},
		"emptyPaletted": func() (v image.Paletted) {
			return v
		},
		"refPaletted": func() *image.Paletted {
			var x image.Paletted
			return &x
		},
		"refOfPaletted": func(x image.Paletted) *image.Paletted {
			return &x
		},
		"emptyCMYK": func() (v image.CMYK) {
			return v
		},
		"refCMYK": func() *image.CMYK {
			var x image.CMYK
			return &x
		},
		"refOfCMYK": func(x image.CMYK) *image.CMYK {
			return &x
		},
		"emptyConfig": func() (v image.Config) {
			return v
		},
		"refConfig": func() *image.Config {
			var x image.Config
			return &x
		},
		"refOfConfig": func(x image.Config) *image.Config {
			return &x
		},
		"emptyNRGBA64": func() (v image.NRGBA64) {
			return v
		},
		"refNRGBA64": func() *image.NRGBA64 {
			var x image.NRGBA64
			return &x
		},
		"refOfNRGBA64": func(x image.NRGBA64) *image.NRGBA64 {
			return &x
		},
		"emptyNYCbCrA": func() (v image.NYCbCrA) {
			return v
		},
		"refNYCbCrA": func() *image.NYCbCrA {
			var x image.NYCbCrA
			return &x
		},
		"refOfNYCbCrA": func(x image.NYCbCrA) *image.NYCbCrA {
			return &x
		}}
)

func init() {
	engine.RegisterModule(ImageModule{})
}

type ImageModule struct{}

func (S ImageModule) Identity() string {
	return "golang/image"
}
func (S ImageModule) TypeDefine() []byte {
	return ImageDefine
}
func (S ImageModule) Exports() map[string]any {
	return ImageDeclared
}
