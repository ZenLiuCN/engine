// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/image/color'{
	// @ts-ignore
	import type {uint8,Struct,uint32,uint16,int} from 'go'
	export interface Alpha extends Struct<Alpha>,Color{
		A:uint8
		rgba():[uint32,uint32,uint32,uint32]
	}
	export interface Alpha16 extends Color,Struct<Alpha16>{
		A:uint16
		rgba():[uint32,uint32,uint32,uint32]
	}
	export const Alpha16Model:Model
	export const AlphaModel:Model
	export const Black:Gray16
	export interface CMYK extends Struct<CMYK>,Color{
		C:uint8
		M:uint8
		Y:uint8
		K:uint8
		rgba():[uint32,uint32,uint32,uint32]
	}
	export const CMYKModel:Model
	export function cmykToRGB(c:uint8,m:uint8,y:uint8,k:uint8):[uint8,uint8,uint8]
	export interface Color{
		rgba():[uint32,uint32,uint32,uint32]
	}
	export interface Gray extends Struct<Gray>,Color{
		Y:uint8
		rgba():[uint32,uint32,uint32,uint32]
	}
	export interface Gray16 extends Struct<Gray16>,Color{
		Y:uint16
		rgba():[uint32,uint32,uint32,uint32]
	}
	export const Gray16Model:Model
	export const GrayModel:Model
	export interface Model{
		convert(c:Color):Color
	}
	export function modelFunc(f:(v1:Color)=>Color):Model
	export interface NRGBA extends Struct<NRGBA>,Color{
		R:uint8
		G:uint8
		B:uint8
		A:uint8
		rgba():[uint32,uint32,uint32,uint32]
	}
	export interface NRGBA64 extends Struct<NRGBA64>,Color{
		R:uint16
		G:uint16
		B:uint16
		A:uint16
		rgba():[uint32,uint32,uint32,uint32]
	}
	export const NRGBA64Model:Model
	export const NRGBAModel:Model
	export interface NYCbCrA extends Struct<NYCbCrA>,Color{
		yCbCr:YCbCr
		A:uint8
		rgba():[uint32,uint32,uint32,uint32]
	}
	export const NYCbCrAModel:Model
	export const Opaque:Alpha16
	export interface Palette extends Array<Color>{
		convert(c:Color):Color
		index(c:Color):int
	}
	export interface RGBA extends Struct<RGBA>,Color{
		R:uint8
		G:uint8
		B:uint8
		A:uint8
		rgba():[uint32,uint32,uint32,uint32]
	}
	export interface RGBA64 extends Struct<RGBA64>,Color{
		R:uint16
		G:uint16
		B:uint16
		A:uint16
		rgba():[uint32,uint32,uint32,uint32]
	}
	export const RGBA64Model:Model
	export const RGBAModel:Model
	export function rgbToCMYK(r:uint8,g:uint8,b:uint8):[uint8,uint8,uint8,uint8]
	export function rgbToYCbCr(r:uint8,g:uint8,b:uint8):[uint8,uint8,uint8]
	export const Transparent:Alpha16
	export const White:Gray16
	export interface YCbCr extends Struct<YCbCr>,Color{
		Y:uint8
		cb:uint8
		cr:uint8
		rgba():[uint32,uint32,uint32,uint32]
	}
	export const YCbCrModel:Model
	export function yCbCrToRGB(y:uint8,cb:uint8,cr:uint8):[uint8,uint8,uint8]

export function emptyYCbCr():YCbCr
export function refYCbCr():Ref<YCbCr>
export function refOfYCbCr(x:YCbCr):Ref<YCbCr>
export function emptyAlpha():Alpha
export function refAlpha():Ref<Alpha>
export function refOfAlpha(x:Alpha):Ref<Alpha>
export function emptyGray():Gray
export function refGray():Ref<Gray>
export function refOfGray(x:Gray):Ref<Gray>
export function emptyGray16():Gray16
export function refGray16():Ref<Gray16>
export function refOfGray16(x:Gray16):Ref<Gray16>
export function emptyNRGBA():NRGBA
export function refNRGBA():Ref<NRGBA>
export function refOfNRGBA(x:NRGBA):Ref<NRGBA>
export function emptyNRGBA64():NRGBA64
export function refNRGBA64():Ref<NRGBA64>
export function refOfNRGBA64(x:NRGBA64):Ref<NRGBA64>
export function emptyRGBA64():RGBA64
export function refRGBA64():Ref<RGBA64>
export function refOfRGBA64(x:RGBA64):Ref<RGBA64>
export function emptyAlpha16():Alpha16
export function refAlpha16():Ref<Alpha16>
export function refOfAlpha16(x:Alpha16):Ref<Alpha16>
export function emptyCMYK():CMYK
export function refCMYK():Ref<CMYK>
export function refOfCMYK(x:CMYK):Ref<CMYK>
export function emptyNYCbCrA():NYCbCrA
export function refNYCbCrA():Ref<NYCbCrA>
export function refOfNYCbCrA(x:NYCbCrA):Ref<NYCbCrA>
export function emptyRGBA():RGBA
export function refRGBA():Ref<RGBA>
export function refOfRGBA(x:RGBA):Ref<RGBA>}
