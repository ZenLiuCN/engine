// Code generated by define_gene; DO NOT EDIT.
package color

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"image/color"
)

var (
	//go:embed image_color.d.ts
	ImageColorDefine   []byte
	ImageColorDeclared = map[string]any{
		"Alpha16Model": color.Alpha16Model,
		"CMYKModel":    color.CMYKModel,
		"cmykToRGB":    color.CMYKToRGB,
		"GrayModel":    color.GrayModel,
		"NYCbCrAModel": color.NYCbCrAModel,
		"rgbToCMYK":    color.RGBToCMYK,
		"Opaque":       color.Opaque,
		"Transparent":  color.Transparent,
		"Gray16Model":  color.Gray16Model,
		"RGBA64Model":  color.RGBA64Model,
		"YCbCrModel":   color.YCbCrModel,
		"rgbToYCbCr":   color.RGBToYCbCr,
		"White":        color.White,
		"AlphaModel":   color.AlphaModel,
		"Black":        color.Black,
		"modelFunc":    color.ModelFunc,
		"NRGBA64Model": color.NRGBA64Model,
		"NRGBAModel":   color.NRGBAModel,
		"RGBAModel":    color.RGBAModel,
		"yCbCrToRGB":   color.YCbCrToRGB,

		"emptyAlpha16": func() (v color.Alpha16) {
			return v
		},
		"refAlpha16": func() *color.Alpha16 {
			var x color.Alpha16
			return &x
		},
		"refOfAlpha16": func(x color.Alpha16) *color.Alpha16 {
			return &x
		},
		"emptyCMYK": func() (v color.CMYK) {
			return v
		},
		"refCMYK": func() *color.CMYK {
			var x color.CMYK
			return &x
		},
		"refOfCMYK": func(x color.CMYK) *color.CMYK {
			return &x
		},
		"emptyNYCbCrA": func() (v color.NYCbCrA) {
			return v
		},
		"refNYCbCrA": func() *color.NYCbCrA {
			var x color.NYCbCrA
			return &x
		},
		"refOfNYCbCrA": func(x color.NYCbCrA) *color.NYCbCrA {
			return &x
		},
		"emptyRGBA": func() (v color.RGBA) {
			return v
		},
		"refRGBA": func() *color.RGBA {
			var x color.RGBA
			return &x
		},
		"refOfRGBA": func(x color.RGBA) *color.RGBA {
			return &x
		},
		"emptyAlpha": func() (v color.Alpha) {
			return v
		},
		"refAlpha": func() *color.Alpha {
			var x color.Alpha
			return &x
		},
		"refOfAlpha": func(x color.Alpha) *color.Alpha {
			return &x
		},
		"emptyGray": func() (v color.Gray) {
			return v
		},
		"refGray": func() *color.Gray {
			var x color.Gray
			return &x
		},
		"refOfGray": func(x color.Gray) *color.Gray {
			return &x
		},
		"emptyGray16": func() (v color.Gray16) {
			return v
		},
		"refGray16": func() *color.Gray16 {
			var x color.Gray16
			return &x
		},
		"refOfGray16": func(x color.Gray16) *color.Gray16 {
			return &x
		},
		"emptyNRGBA": func() (v color.NRGBA) {
			return v
		},
		"refNRGBA": func() *color.NRGBA {
			var x color.NRGBA
			return &x
		},
		"refOfNRGBA": func(x color.NRGBA) *color.NRGBA {
			return &x
		},
		"emptyNRGBA64": func() (v color.NRGBA64) {
			return v
		},
		"refNRGBA64": func() *color.NRGBA64 {
			var x color.NRGBA64
			return &x
		},
		"refOfNRGBA64": func(x color.NRGBA64) *color.NRGBA64 {
			return &x
		},
		"emptyRGBA64": func() (v color.RGBA64) {
			return v
		},
		"refRGBA64": func() *color.RGBA64 {
			var x color.RGBA64
			return &x
		},
		"refOfRGBA64": func(x color.RGBA64) *color.RGBA64 {
			return &x
		},
		"emptyYCbCr": func() (v color.YCbCr) {
			return v
		},
		"refYCbCr": func() *color.YCbCr {
			var x color.YCbCr
			return &x
		},
		"refOfYCbCr": func(x color.YCbCr) *color.YCbCr {
			return &x
		}}
)

func init() {
	engine.RegisterModule(ImageColorModule{})
}

type ImageColorModule struct{}

func (S ImageColorModule) Identity() string {
	return "golang/image/color"
}
func (S ImageColorModule) TypeDefine() []byte {
	return ImageColorDefine
}
func (S ImageColorModule) Exports() map[string]any {
	return ImageColorDeclared
}
