// Code generated by define_gene; DO NOT EDIT.
package log

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/io"
	"log"
)

var (
	//go:embed log.d.ts
	LogDefine   []byte
	LogDeclared = map[string]any{
		"fatal":         log.Fatal,
		"fatalf":        log.Fatalf,
		"LstdFlags":     log.LstdFlags,
		"panic":         log.Panic,
		"Lmicroseconds": log.Lmicroseconds,
		"Ltime":         log.Ltime,
		"prefix":        log.Prefix,
		"Default":       log.Default,
		"flags":         log.Flags,
		"panicf":        log.Panicf,
		"fatalln":       log.Fatalln,
		"printf":        log.Printf,
		"setFlags":      log.SetFlags,
		"New":           log.New,
		"writer":        log.Writer,
		"output":        log.Output,
		"print":         log.Print,
		"setOutput":     log.SetOutput,
		"LUTC":          log.LUTC,
		"Lshortfile":    log.Lshortfile,
		"println":       log.Println,
		"setPrefix":     log.SetPrefix,
		"Ldate":         log.Ldate,
		"Llongfile":     log.Llongfile,
		"Lmsgprefix":    log.Lmsgprefix,
		"panicln":       log.Panicln,

		"emptyLogger": func() (v log.Logger) {
			return v
		},
		"refLogger": func() *log.Logger {
			var x log.Logger
			return &x
		},
		"refOfLogger": func(x log.Logger) *log.Logger {
			return &x
		}}
)

func init() {
	engine.RegisterModule(LogModule{})
}

type LogModule struct{}

func (S LogModule) Identity() string {
	return "golang/log"
}
func (S LogModule) TypeDefine() []byte {
	return LogDefine
}
func (S LogModule) Exports() map[string]any {
	return LogDeclared
}
