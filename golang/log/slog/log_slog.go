// Code generated by define_gene; DO NOT EDIT.
package slog

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	_ "github.com/ZenLiuCN/engine/golang/context"
	_ "github.com/ZenLiuCN/engine/golang/encoding"
	_ "github.com/ZenLiuCN/engine/golang/encoding/json"
	_ "github.com/ZenLiuCN/engine/golang/fmt"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/log"
	_ "github.com/ZenLiuCN/engine/golang/time"
	"log/slog"
)

var (
	//go:embed log_slog.d.ts
	LogSlogDefine   []byte
	LogSlogDeclared = map[string]any{
		"newRecord":      slog.NewRecord,
		"bool":           slog.Bool,
		"float64Value":   slog.Float64Value,
		"KindBool":       slog.KindBool,
		"KindUint64":     slog.KindUint64,
		"LevelError":     slog.LevelError,
		"group":          slog.Group,
		"int64Value":     slog.Int64Value,
		"intValue":       slog.IntValue,
		"KindString":     slog.KindString,
		"duration":       slog.Duration,
		"infoContext":    slog.InfoContext,
		"time":           slog.Time,
		"With":           slog.With,
		"New":            slog.New,
		"debug":          slog.Debug,
		"error":          slog.Error,
		"setDefault":     slog.SetDefault,
		"uint64":         slog.Uint64,
		"anyValue":       slog.AnyValue,
		"Default":        slog.Default,
		"durationValue":  slog.DurationValue,
		"KindLogValuer":  slog.KindLogValuer,
		"LevelWarn":      slog.LevelWarn,
		"log":            slog.Log,
		"newJSONHandler": slog.NewJSONHandler,
		"MessageKey":     slog.MessageKey,
		"errorContext":   slog.ErrorContext,
		"groupValue":     slog.GroupValue,
		"int":            slog.Int,
		"KindAny":        slog.KindAny,
		"KindDuration":   slog.KindDuration,
		"KindInt64":      slog.KindInt64,
		"any":            slog.Any,
		"newLogLogger":   slog.NewLogLogger,
		"boolValue":      slog.BoolValue,
		"debugContext":   slog.DebugContext,
		"info":           slog.Info,
		"int64":          slog.Int64,
		"string":         slog.String,
		"float64":        slog.Float64,
		"TimeKey":        slog.TimeKey,
		"KindFloat64":    slog.KindFloat64,
		"LevelDebug":     slog.LevelDebug,
		"KindTime":       slog.KindTime,
		"SourceKey":      slog.SourceKey,
		"stringValue":    slog.StringValue,
		"timeValue":      slog.TimeValue,
		"warn":           slog.Warn,
		"LevelInfo":      slog.LevelInfo,
		"LevelKey":       slog.LevelKey,
		"uint64Value":    slog.Uint64Value,
		"warnContext":    slog.WarnContext,
		"KindGroup":      slog.KindGroup,
		"logAttrs":       slog.LogAttrs,
		"newTextHandler": slog.NewTextHandler,

		"emptyJSONHandler": func() (v slog.JSONHandler) {
			return v
		},
		"refJSONHandler": func() *slog.JSONHandler {
			var x slog.JSONHandler
			return &x
		},
		"refOfJSONHandler": func(x slog.JSONHandler) *slog.JSONHandler {
			return &x
		},
		"emptyLevelVar": func() (v slog.LevelVar) {
			return v
		},
		"refLevelVar": func() *slog.LevelVar {
			var x slog.LevelVar
			return &x
		},
		"refOfLevelVar": func(x slog.LevelVar) *slog.LevelVar {
			return &x
		},
		"emptyLogger": func() (v slog.Logger) {
			return v
		},
		"refLogger": func() *slog.Logger {
			var x slog.Logger
			return &x
		},
		"refOfLogger": func(x slog.Logger) *slog.Logger {
			return &x
		},
		"emptySource": func() (v slog.Source) {
			return v
		},
		"refSource": func() *slog.Source {
			var x slog.Source
			return &x
		},
		"refOfSource": func(x slog.Source) *slog.Source {
			return &x
		},
		"emptyValue": func() (v slog.Value) {
			return v
		},
		"refValue": func() *slog.Value {
			var x slog.Value
			return &x
		},
		"refOfValue": func(x slog.Value) *slog.Value {
			return &x
		},
		"emptyAttr": func() (v slog.Attr) {
			return v
		},
		"refAttr": func() *slog.Attr {
			var x slog.Attr
			return &x
		},
		"refOfAttr": func(x slog.Attr) *slog.Attr {
			return &x
		},
		"emptyHandlerOptions": func() (v slog.HandlerOptions) {
			return v
		},
		"refHandlerOptions": func() *slog.HandlerOptions {
			var x slog.HandlerOptions
			return &x
		},
		"refOfHandlerOptions": func(x slog.HandlerOptions) *slog.HandlerOptions {
			return &x
		},
		"emptyRecord": func() (v slog.Record) {
			return v
		},
		"refRecord": func() *slog.Record {
			var x slog.Record
			return &x
		},
		"refOfRecord": func(x slog.Record) *slog.Record {
			return &x
		},
		"emptyTextHandler": func() (v slog.TextHandler) {
			return v
		},
		"refTextHandler": func() *slog.TextHandler {
			var x slog.TextHandler
			return &x
		},
		"refOfTextHandler": func(x slog.TextHandler) *slog.TextHandler {
			return &x
		}}
)

func init() {
	engine.RegisterModule(LogSlogModule{})
}

type LogSlogModule struct{}

func (S LogSlogModule) Identity() string {
	return "golang/log/slog"
}
func (S LogSlogModule) TypeDefine() []byte {
	return LogSlogDefine
}
func (S LogSlogModule) Exports() map[string]any {
	return LogSlogDeclared
}
