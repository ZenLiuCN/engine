// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/log'{
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import type {Ref,int,Struct,error} from 'go'
	export function Default():Ref<Logger>
	export function fatal(...v:any[]):void
	export function fatalf(format:string,...v:any[]):void
	export function fatalln(...v:any[]):void
	export function flags():int
	//32
	export const LUTC:int
	//1
	export const Ldate:int
	//8
	export const Llongfile:int
	//4
	export const Lmicroseconds:int
	//64
	export const Lmsgprefix:int
	export interface Logger extends Struct<Logger>{
		setOutput(w:io.Writer):void
		output(calldepth:int,s:string):error
		print(...v:any[]):void
		printf(format:string,...v:any[]):void
		println(...v:any[]):void
		fatal(...v:any[]):void
		fatalf(format:string,...v:any[]):void
		fatalln(...v:any[]):void
		panic(...v:any[]):void
		panicf(format:string,...v:any[]):void
		panicln(...v:any[]):void
		flags():int
		setFlags(flag:int):void
		prefix():string
		setPrefix(prefix:string):void
		writer():io.Writer
	}
	//16
	export const Lshortfile:int
	//3
	export const LstdFlags:int
	//2
	export const Ltime:int
	export function New(out:io.Writer,prefix:string,flag:int):Ref<Logger>
	export function output(calldepth:int,s:string):error
	export function panic(...v:any[]):void
	export function panicf(format:string,...v:any[]):void
	export function panicln(...v:any[]):void
	export function prefix():string
	export function print(...v:any[]):void
	export function printf(format:string,...v:any[]):void
	export function println(...v:any[]):void
	export function setFlags(flag:int):void
	export function setOutput(w:io.Writer):void
	export function setPrefix(prefix:string):void
	export function writer():io.Writer

export function emptyLogger():Logger
export function refLogger():Ref<Logger>
export function refOfLogger(x:Logger):Ref<Logger>}
