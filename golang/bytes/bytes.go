// Code generated by define_gene; DO NOT EDIT.
package bytes

import (
	_ "embed"
	"github.com/ZenLiuCN/engine"

	"bytes"
	_ "github.com/ZenLiuCN/engine/golang/io"
	_ "github.com/ZenLiuCN/engine/golang/unicode"
)

var (
	//go:embed bytes.d.ts
	BytesDefine   []byte
	BytesDeclared = map[string]any{
		"newReader":       bytes.NewReader,
		"trimLeftFunc":    bytes.TrimLeftFunc,
		"trimRight":       bytes.TrimRight,
		"count":           bytes.Count,
		"indexAny":        bytes.IndexAny,
		"newBufferString": bytes.NewBufferString,
		"splitN":          bytes.SplitN,
		"toTitle":         bytes.ToTitle,
		"trimRightFunc":   bytes.TrimRightFunc,
		"contains":        bytes.Contains,
		"join":            bytes.Join,
		"MinRead":         bytes.MinRead,
		"toUpperSpecial":  bytes.ToUpperSpecial,
		"toValidUTF8":     bytes.ToValidUTF8,
		"trimFunc":        bytes.TrimFunc,
		"trimLeft":        bytes.TrimLeft,
		"equalFold":       bytes.EqualFold,
		"lastIndexAny":    bytes.LastIndexAny,
		"replace":         bytes.Replace,
		"toLowerSpecial":  bytes.ToLowerSpecial,
		"toUpper":         bytes.ToUpper,
		"trimSpace":       bytes.TrimSpace,
		"trimSuffix":      bytes.TrimSuffix,
		"containsRune":    bytes.ContainsRune,
		"indexFunc":       bytes.IndexFunc,
		"equal":           bytes.Equal,
		"fields":          bytes.Fields,
		"runes":           bytes.Runes,
		"splitAfterN":     bytes.SplitAfterN,
		"toTitleSpecial":  bytes.ToTitleSpecial,
		"indexRune":       bytes.IndexRune,
		"replaceAll":      bytes.ReplaceAll,
		"indexByte":       bytes.IndexByte,
		"lastIndex":       bytes.LastIndex,
		"title":           bytes.Title,
		"containsFunc":    bytes.ContainsFunc,
		"map":             bytes.Map,
		"fieldsFunc":      bytes.FieldsFunc,
		"hasSuffix":       bytes.HasSuffix,
		"lastIndexByte":   bytes.LastIndexByte,
		"repeat":          bytes.Repeat,
		"compare":         bytes.Compare,
		"containsAny":     bytes.ContainsAny,
		"index":           bytes.Index,
		"toLower":         bytes.ToLower,
		"trim":            bytes.Trim,
		"cutSuffix":       bytes.CutSuffix,
		"splitAfter":      bytes.SplitAfter,
		"hasPrefix":       bytes.HasPrefix,
		"split":           bytes.Split,
		"trimPrefix":      bytes.TrimPrefix,
		"cutPrefix":       bytes.CutPrefix,
		"lastIndexFunc":   bytes.LastIndexFunc,
		"newBuffer":       bytes.NewBuffer,
		"clone":           bytes.Clone,
		"cut":             bytes.Cut,
		"ErrTooLarge":     bytes.ErrTooLarge,

		"emptyReader": func() (v bytes.Reader) {
			return v
		},
		"refReader": func() *bytes.Reader {
			var x bytes.Reader
			return &x
		},
		"refOfReader": func(x bytes.Reader) *bytes.Reader {
			return &x
		},
		"emptyBuffer": func() (v bytes.Buffer) {
			return v
		},
		"refBuffer": func() *bytes.Buffer {
			var x bytes.Buffer
			return &x
		},
		"refOfBuffer": func(x bytes.Buffer) *bytes.Buffer {
			return &x
		}}
)

func init() {
	engine.RegisterModule(BytesModule{})
}

type BytesModule struct{}

func (S BytesModule) Identity() string {
	return "golang/bytes"
}
func (S BytesModule) TypeDefine() []byte {
	return BytesDefine
}
func (S BytesModule) Exports() map[string]any {
	return BytesDeclared
}
