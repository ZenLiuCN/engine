// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'golang/bytes'{
	// @ts-ignore
	import * as io from 'golang/io'
	// @ts-ignore
	import * as unicode from 'golang/unicode'
	// @ts-ignore
	import type {Struct,int,int64,byte,bool,GoError,Ref,error,rune} from 'go'
	export interface Buffer extends Struct<Buffer>,io.ReadWriter,io.ByteWriter,io.WriterTo,io.StringWriter,io.ByteScanner,io.RuneScanner,io.ReaderFrom{
		bytes():Uint8Array
		availableBuffer():Uint8Array
		string():string
		len():int
		cap():int
		available():int
		truncate(n:int):void
		reset():void
		grow(n:int):void
		write(p:Uint8Array):int
		writeString(s:string):int
		readFrom(r:io.Reader):int64
		writeTo(w:io.Writer):int64
		writeByte(c:byte)/*error*/
		writeRune(r:rune):int
		read(p:Uint8Array):int
		next(n:int):Uint8Array
		readByte():byte
		readRune():[rune,int]
		unreadRune()/*error*/
		unreadByte()/*error*/
		readBytes(delim:byte):Uint8Array
		readString(delim:byte):string
	}
	export function clone(b:Uint8Array):Uint8Array
	export function compare(a:Uint8Array,b:Uint8Array):int
	export function contains(b:Uint8Array,subslice:Uint8Array):bool
	export function containsAny(b:Uint8Array,chars:string):bool
	export function containsFunc(b:Uint8Array,f:(v1:rune)=>bool):bool
	export function containsRune(b:Uint8Array,r:rune):bool
	export function count(s:Uint8Array,sep:Uint8Array):int
	export function cut(s:Uint8Array,sep:Uint8Array):[Uint8Array,Uint8Array,bool]
	export function cutPrefix(s:Uint8Array,prefix:Uint8Array):[Uint8Array,bool]
	export function cutSuffix(s:Uint8Array,suffix:Uint8Array):[Uint8Array,bool]
	export function equal(a:Uint8Array,b:Uint8Array):bool
	export function equalFold(s:Uint8Array,t:Uint8Array):bool
	export const ErrTooLarge:GoError
	export function fields(s:Uint8Array):Array<Uint8Array>
	export function fieldsFunc(s:Uint8Array,f:(v1:rune)=>bool):Array<Uint8Array>
	export function hasPrefix(s:Uint8Array,prefix:Uint8Array):bool
	export function hasSuffix(s:Uint8Array,suffix:Uint8Array):bool
	export function index(s:Uint8Array,sep:Uint8Array):int
	export function indexAny(s:Uint8Array,chars:string):int
	export function indexByte(b:Uint8Array,c:byte):int
	export function indexFunc(s:Uint8Array,f:(r:rune)=>bool):int
	export function indexRune(s:Uint8Array,r:rune):int
	export function join(s:Array<Uint8Array>,sep:Uint8Array):Uint8Array
	export function lastIndex(s:Uint8Array,sep:Uint8Array):int
	export function lastIndexAny(s:Uint8Array,chars:string):int
	export function lastIndexByte(s:Uint8Array,c:byte):int
	export function lastIndexFunc(s:Uint8Array,f:(r:rune)=>bool):int
	export function map(mapping:(r:rune)=>rune,s:Uint8Array):Uint8Array
	//512
	export const MinRead:int
	export function newBuffer(buf:Uint8Array):Ref<Buffer>
	export function newBufferString(s:string):Ref<Buffer>
	export function newReader(b:Uint8Array):Ref<Reader>
	export interface Reader extends io.ByteScanner,io.RuneScanner,io.ReadSeeker,io.WriterTo,io.ReaderAt,Struct<Reader>{
		len():int
		size():int64
		read(b:Uint8Array):int
		readAt(b:Uint8Array,off:int64):int
		readByte():byte
		unreadByte()/*error*/
		readRune():[rune,int]
		unreadRune()/*error*/
		seek(offset:int64,whence:int):int64
		writeTo(w:io.Writer):int64
		reset(b:Uint8Array):void
	}
	export function repeat(b:Uint8Array,count:int):Uint8Array
	export function replace(s:Uint8Array,old:Uint8Array,New:Uint8Array,n:int):Uint8Array
	export function replaceAll(s:Uint8Array,old:Uint8Array,New:Uint8Array):Uint8Array
	export function runes(s:Uint8Array):rune[]
	export function split(s:Uint8Array,sep:Uint8Array):Array<Uint8Array>
	export function splitAfter(s:Uint8Array,sep:Uint8Array):Array<Uint8Array>
	export function splitAfterN(s:Uint8Array,sep:Uint8Array,n:int):Array<Uint8Array>
	export function splitN(s:Uint8Array,sep:Uint8Array,n:int):Array<Uint8Array>
	export function title(s:Uint8Array):Uint8Array
	export function toLower(s:Uint8Array):Uint8Array
	export function toLowerSpecial(c:unicode.SpecialCase,s:Uint8Array):Uint8Array
	export function toTitle(s:Uint8Array):Uint8Array
	export function toTitleSpecial(c:unicode.SpecialCase,s:Uint8Array):Uint8Array
	export function toUpper(s:Uint8Array):Uint8Array
	export function toUpperSpecial(c:unicode.SpecialCase,s:Uint8Array):Uint8Array
	export function toValidUTF8(s:Uint8Array,replacement:Uint8Array):Uint8Array
	export function trim(s:Uint8Array,cutset:string):Uint8Array
	export function trimFunc(s:Uint8Array,f:(r:rune)=>bool):Uint8Array
	export function trimLeft(s:Uint8Array,cutset:string):Uint8Array
	export function trimLeftFunc(s:Uint8Array,f:(r:rune)=>bool):Uint8Array
	export function trimPrefix(s:Uint8Array,prefix:Uint8Array):Uint8Array
	export function trimRight(s:Uint8Array,cutset:string):Uint8Array
	export function trimRightFunc(s:Uint8Array,f:(r:rune)=>bool):Uint8Array
	export function trimSpace(s:Uint8Array):Uint8Array
	export function trimSuffix(s:Uint8Array,suffix:Uint8Array):Uint8Array

export function emptyBuffer():Buffer
export function refBuffer():Ref<Buffer>
export function refOfBuffer(x:Buffer):Ref<Buffer>
export function emptyReader():Reader
export function refReader():Ref<Reader>
export function refOfReader(x:Reader):Ref<Reader>
}
